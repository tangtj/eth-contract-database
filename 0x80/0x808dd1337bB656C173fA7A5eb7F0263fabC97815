// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(
    uint80 _roundId
  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);

  function latestRoundData()
    external
    view
    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/forcePresale.sol


pragma solidity ^0.8.19;




error waitForSale();
error roundSupplyLimitExceed();
error pleaseSendTokenPrice();
error invalidUSDTPrice();
error minimumAndMaximumLimit();

contract ForcePreSaleContract is Ownable(msg.sender) {
    bool public isSale;

    uint256 conversionRate = 10 ** 12;

    uint256 public salePrice;
    uint256 public raisedAmount;

    IERC20 USDTToken;
    IERC20 USDCToken;
    IERC20 PreSaleToken;

    event buyHistory(address _addr, uint256 _amount, string _paymentType);

    constructor(address _usdt, address _usdc, address _saleToken) {
        USDTToken = IERC20(_usdt);
        USDCToken = IERC20(_usdc);
        PreSaleToken = IERC20(_saleToken);
        salePrice = 0.1 * 10 ** 6;
    }

    function startTheSale() public onlyOwner {
        require(!isSale, "already Started");
        isSale = true;
    }

    function changeSalePrice(uint256 _priceInUSDT) external onlyOwner {
        require(_priceInUSDT > 0, "Price must be greater than Zero");
        salePrice = _priceInUSDT;
    }

    function buyWithETH(uint256 _amount) external payable returns (bool) {
        if (!isSale) {
            revert waitForSale();
        }

        if (PreSaleToken.balanceOf(address(this)) < _amount) {
            revert roundSupplyLimitExceed();
        }

        uint256 payAmountInUSD = sellTokenInUDSTPrice(_amount, salePrice);
        if (
            payAmountInUSD < (1 * 10 ** 6) || payAmountInUSD > (100000 * 10 ** 6)
        ) {
            revert minimumAndMaximumLimit();
        }

        uint256 payAmount = sellTokenInETHPrice(_amount,salePrice);
        if (msg.value < payAmount) {
            revert pleaseSendTokenPrice();
        }

        payable(owner()).transfer(msg.value);
        PreSaleToken.transfer(msg.sender, _amount);
        raisedAmount += payAmountInUSD;
        emit buyHistory(msg.sender, _amount, "ETH");
        return true;
    }

    function buyWithUSDT(
        uint256 _buyToken,
        bool isUsdt
    ) external returns (bool) {
        if (!isSale) {
            revert waitForSale();
        }

        uint256 payAmountInUSD = sellTokenInUDSTPrice(_buyToken, salePrice);

        if (payAmountInUSD < (1 *10**6) || payAmountInUSD > (100000 *10**6)) {
            revert minimumAndMaximumLimit();
        }

        if (isUsdt) {
            if (PreSaleToken.balanceOf(address(this)) < _buyToken) {
                revert roundSupplyLimitExceed();
            }

            uint256 payAmount = USDTToken.allowance(msg.sender, address(this));
            if (payAmountInUSD < payAmount) {
                revert pleaseSendTokenPrice();
            }

            USDTToken.transferFrom(msg.sender, owner(), payAmountInUSD);
            PreSaleToken.transfer(msg.sender, _buyToken);

            raisedAmount += payAmountInUSD;
            emit buyHistory(msg.sender, _buyToken, "USDT");
            return true;
        } else {
            if (PreSaleToken.balanceOf(address(this)) < _buyToken) {
                revert roundSupplyLimitExceed();
            }

            uint256 payAmount = USDCToken.allowance(msg.sender, address(this));
            if (payAmountInUSD < payAmount) {
                revert pleaseSendTokenPrice();
            }

            USDCToken.transferFrom(msg.sender, owner(), payAmountInUSD);
            PreSaleToken.transfer(msg.sender, _buyToken);
            raisedAmount += payAmountInUSD;
            emit buyHistory(msg.sender, _buyToken, "USDC");
            return true;
        }
    }

    function getLatestUSDTPrice() public view returns (uint256) {
        //0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46 USDt/ETH Ethereum mainnet
        //0xD5c40f5144848Bd4EF08a9605d860e727b991513 USDt/BNB BNBSmart mainnet
        AggregatorV3Interface USDTPriceFeed = AggregatorV3Interface(
            0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46
        ); // Mainnet contract address for USDT price feed
        (, int256 price, , , ) = USDTPriceFeed.latestRoundData(); // Get the latest USDT price data from Chainlink

        if (price <= 0) {
            // Ensure that the price is valid
            revert invalidUSDTPrice();
        }
        return uint256(price);
    }

    //this function sell token in Ether 18 decimal
    function sellTokenInETHPrice(
        uint256 _amount,
        uint256 _roundPrice
    ) public view returns (uint256) {
        uint256 conversion = _roundPrice * conversionRate;
        uint256 tokensAmountPrice = ((conversion * _amount) / 10 ** 18) /
            10 ** 12;
        uint256 amountinEthers = tokensAmountPrice * conversionRate;
        //if you want to change hardcode the getLatestUSDTPrice()
        uint256 amountInEth = (getLatestUSDTPrice() * amountinEthers) /
            10 ** 18;
        return amountInEth;
    }

    //this function sell token in USDT 6 decimal
    function sellTokenInUDSTPrice(
        uint256 _amount,
        uint256 _roundPrice
    ) public view returns (uint256) {
        uint256 conversion = _roundPrice * conversionRate;
        uint256 tokensAmountPrice = ((conversion * _amount) / 10 ** 18) / 10 ** 12;
        return tokensAmountPrice;
    }

    function withdrawTokens(uint256 _amount) external onlyOwner returns (bool) {
        PreSaleToken.transfer(owner(), _amount);
        return true;
    }
}