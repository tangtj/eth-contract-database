// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0);
    uint256 c = a / b;
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);
    return c;
  }
}

abstract contract ERC20Basic {
  function totalSupply() public view virtual returns (uint256);
  function balanceOf(address who) public view virtual returns (uint256);
  function transfer(address to, uint256 value) public virtual returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  uint256 totalSupply_;

  function totalSupply() public view virtual override returns (uint256) {
    return totalSupply_;
  }

  function transfer(address _to, uint256 _value) public virtual override returns (bool) {
    require(_to != address(0), "transfer1");
    require(_value <= balances[msg.sender], "transfer2");
    
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);

    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  function balanceOf(address _owner) public view virtual override returns (uint256 balance) {
    return balances[_owner];
  }
}

contract Ownable {
  address public owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  constructor() {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require(msg.sender == owner, "owner");
    _;
  }

  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}

contract BurnableToken is BasicToken {
  using SafeMath for uint256;
  event Burn(address indexed burner, uint256 value);

  function burn(uint256 _value) public virtual {
    require(_value <= balances[msg.sender]);

    address burner = msg.sender;
    balances[burner] = balances[burner].sub(_value);
    totalSupply_ = totalSupply_.sub(_value);

    emit Burn(burner, _value);
    emit Transfer(burner, address(0), _value);
  }
}

abstract contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view virtual returns (uint256);
  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);
  function approve(address spender, uint256 value) public virtual returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract StandardToken is ERC20, BasicToken {
  using SafeMath for uint256;
  
  mapping (address => mapping (address => uint256)) internal allowed;

  function transferFrom(address _from, address _to, uint256 _value) public virtual override returns (bool) {
    require(_to != address(0), "transferFrom1");
    require(_value <= balances[_from], "transferFrom2");
    require(_value <= allowed[_from][msg.sender], "transferFrom3");

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }

  function approve(address _spender, uint256 _value) public virtual override returns (bool) {
    require((_value == 0) || (allowed[msg.sender][_spender] == 0));
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  function allowance(address _owner, address _spender) public view virtual override returns (uint256) {
    return allowed[_owner][_spender];
  }
}

contract XTICKET is StandardToken, BurnableToken, Ownable {
  using SafeMath for uint256;

  string public constant symbol = "XTC";
  string public constant name = "XTICKET";
  uint8 public constant decimals = 18;
  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals)); 

  address public adminAddr;

  bool public transferEnabled = true;

  mapping(address => uint256) private lockedAccounts;

  modifier onlyWhenTransferAllowed() {
    require(transferEnabled == true || msg.sender == adminAddr, "transferAllowed");
    _;
  }

  modifier onlyValidDestination(address to) {
    require(to != address(0) && to != address(this) && to != owner && to != adminAddr, "validDestination");
    _;
  }

  modifier onlyAllowedAmount(address from, uint256 amount) {
    require(balances[from].sub(amount) >= lockedAccounts[from], "allowedAmount");
    _;
  }

  constructor() {
    totalSupply_ = INITIAL_SUPPLY;
    balances[msg.sender] = totalSupply_;
    emit Transfer(address(0), msg.sender, totalSupply_);
    adminAddr = msg.sender;
  }

  event TransferEnabled();
  event TransferDisabled();
  event AdminAddrChanged(address indexed previousAdminAddr, address indexed newAdminAddr);

  function enableTransfer() external onlyOwner {
    transferEnabled = true;
    emit TransferEnabled();
  }

  function disableTransfer() external onlyOwner {
    transferEnabled = false;
    emit TransferDisabled();
  }

  function transfer(address to, uint256 value)
    public
    override(BasicToken, ERC20Basic)
    onlyWhenTransferAllowed
    onlyValidDestination(to)
    onlyAllowedAmount(msg.sender, value)
    returns (bool)
  {
    return super.transfer(to, value);
  }

  function transferFrom(address from, address to, uint256 value)
    public
    override(StandardToken)
    onlyWhenTransferAllowed
    onlyValidDestination(to)
    onlyAllowedAmount(from, value)
    returns (bool)
  {
    return super.transferFrom(from, to, value);
  }

  function burn(uint256 value) public override onlyOwner {
    require(transferEnabled);
    super.burn(value);
  }

  event AccountLocked(address indexed addr, uint256 amount);
  event AccountUnlocked(address indexed addr);

  function lockAccount(address addr, uint256 amount)
    external
    onlyOwner
    onlyValidDestination(addr)
  {
    require(amount > 0);
    lockedAccounts[addr] = amount;
    emit AccountLocked(addr, amount);
  }

  function unlockAccount(address addr)
    external
    onlyOwner
    onlyValidDestination(addr)
  {
    lockedAccounts[addr] = 0;
    emit AccountUnlocked(addr);
  }

  function changeAdminAddr(address newAdminAddr) external onlyOwner {
    require(newAdminAddr != address(0));
    adminAddr = newAdminAddr;
    emit AdminAddrChanged(adminAddr, newAdminAddr);
  }  
}