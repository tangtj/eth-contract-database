{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"RoyaltySplitter.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.7.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\n/*\r\nAutomatically distributes royalties once autoWithdrawLimit exceeded.\r\nDeveloped by Co-Labs. www.co-labs.studio\r\n*/\r\ncontract Shareholders is Ownable {\r\n    IERC20 internal tokenContract;\r\n    address payable[] public shareholders;\r\n    uint256[] public shares;\r\n    uint256 public autoWithdrawLimit = 1 ether;\r\n\r\n    event Received(address, uint);\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n        if (address(this).balance \u003e autoWithdrawLimit) {\r\n            withdraw();\r\n        }\r\n    }\r\n\r\n    constructor() { \r\n        shareholders.push(payable(0xDB6FfD47E81deb48360C4f73d169Fbb743Be0E26)); \r\n        shares.push(250);\r\n        shareholders.push(payable(0x376776aA01c0B4f714A2B36F7258E79DA0307188)); \r\n        shares.push(250);\r\n        shareholders.push(payable(0x37fb006F219781b42D50bd1efDb3C3449E3FEB1A)); \r\n        shares.push(250);\r\n        shareholders.push(payable(0x7159EeaCa4e04A40557A1F0d8c460893Fa3E3B5a));\r\n        shares.push(83);\r\n        shareholders.push(payable(0xcA6282A6cCbd1Ec9608f269c2556b6D5738c4ad2)); \r\n        shares.push(83);\r\n        shareholders.push(payable(0x25E1c3272f2268AFC42e9896Aa3eC96cD6ef4826)); \r\n        shares.push(84);\r\n        \r\n\r\n    }\r\n\r\n    function changeShareholders(address payable[] memory newShareholders, uint256[] memory newShares) public onlyOwner {\r\n        delete shareholders;\r\n        delete shares;\r\n        uint256 length = newShareholders.length;\r\n        require(newShareholders.length == newShares.length, \"number of new shareholders must match number of new shares\");\r\n        for(uint256 i=0; i\u003clength; i++) {\r\n            shareholders.push(newShareholders[i]);\r\n            shares.push(newShares[i]);\r\n        }\r\n    }\r\n\r\n    function getTotalShares() public view returns (uint256) {\r\n        uint256 totalShares;\r\n        uint256 length = shareholders.length;\r\n        for (uint256 i = 0; i\u003clength; i++) {\r\n            totalShares += shares[i];\r\n        }\r\n        return totalShares;\r\n    }\r\n\r\n    function changeAutoWithdrawLimit(uint256 _newLimit) external onlyOwner {\r\n        autoWithdrawLimit = _newLimit;\r\n    }\r\n\r\n    function withdraw() public {\r\n        address partner;\r\n        uint256 share;\r\n        uint256 totalShares = getTotalShares();\r\n        uint256 length = shareholders.length;\r\n        uint256 balanceBeforeWithdrawal = address(this).balance;\r\n        for (uint256 j = 0; j\u003clength; j++) {\r\n            partner = shareholders[j];\r\n            share = shares[j];\r\n            (bool success, ) = partner.call{value: balanceBeforeWithdrawal * share/totalShares}(\"\");\r\n            require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        }\r\n    }\r\n\r\n    function rescueERC20(address _tokenAddress) external onlyOwner {\r\n        tokenContract = IERC20(_tokenAddress);\r\n        uint256 balance = tokenContract.balanceOf(address(this));\r\n        tokenContract.transferFrom(address(this), msg.sender, balance);\r\n    }\r\n\r\n   \r\n\r\n}\r\n"}}