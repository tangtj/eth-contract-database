// SPDX-License-Identifier: None
pragma solidity ^0.8.0;

contract EthSplitter {
    address payable public community;
    address payable public market;
    address payable public launch;
    address payable public developer;
    address public owner;

    constructor(
        address payable _community,
        address payable _market,
        address payable _launch,
        address payable _developer
    ) {
        community = _community;
        market = _market;
        launch = _launch;
        developer = _developer;
        owner = msg.sender; 
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    
    function split() public onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "No ETH to split");

        uint256 amount = balance / 4;


        community.transfer(amount);
        market.transfer(amount);
        launch.transfer(amount);
        developer.transfer(amount);


        uint256 remainingBalance = address(this).balance;
        if (remainingBalance > 0) {
            developer.transfer(remainingBalance);
        }
    }


    receive() external payable {}
}