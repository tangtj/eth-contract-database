
// File: src/AevoStaking.sol
/* SPDX-License-Identifier: GPL-3.0*/

pragma solidity ^0.8.20;

import {Owned} from "solmate/auth/Owned.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

/**
 * @title Aevo Staking
 * @notice Stake Aevo and RBN for non-transferrable sAEVO
 */
contract AevoStaking is Owned {
    using SafeERC20 for IERC20;

    /// @notice The rbn address
    address public immutable rbn;
    /// @notice The aevo address
    address public immutable aevo;
    /// @notice The epoch duration
    uint256 public epochTime;
    /// @notice The staking start date
    uint256 public start;
    /// @notice The rbn -> aevo direct migration date
    uint256 public migration;
    /// @notice The hard stake duration
    uint256 public stakeTime;
    /// @notice If hard stake enforced
    bool public isLocked = true;
    /// @notice If staking paused
    bool public isPaused = false;
    /// @notice If can early migrate
    bool public canEarlyMigrate = false;

    /// @notice Boostrapping AEVO LP
    mapping(address => bool) public isBootstrapper;
    /// @notice Account to epoch sAEVO balance
    mapping(address => mapping(uint16 => uint256)) public balance;
    /// @notice Epoch to sAEVO balance
    mapping(uint16 => uint256) public epochBalance;

    /// @notice Constructor
    /// @param _rbn $RBN
    /// @param _aevo $AEVO
    /// @param _start The staking start date
    /// @param _migration The rbn -> aevo direct migration date
    /// @param _epochTime The epoch duration
    /// @param _stakeTime The hard stake duration
    /// @param _bootstrapper The initial bootstrapper
    /// @param _owner The owner
    constructor(
        address _rbn,
        address _aevo,
        uint256 _start,
        uint256 _migration,
        uint256 _epochTime,
        uint256 _stakeTime,
        address _bootstrapper,
        address _owner
    ) Owned(_owner) {
        require(address(_rbn) != address(0), "!_rbn");
        require(address(_aevo) != address(0), "!_aevo");
        require(_start >= block.timestamp, "!_start");
        require(_epochTime > 0, "!_epochTime");
        require(_stakeTime >= _epochTime && _stakeTime % _epochTime == 0, "!_stakeTime");
        require(address(_bootstrapper) != address(0), "!_bootstrapper");

        rbn = _rbn;
        aevo = _aevo;
        start = _start;
        migration = _migration;
        epochTime = _epochTime;
        stakeTime = _stakeTime;
        isBootstrapper[_bootstrapper] = true;
    }

    /// @notice Epoch number
    /// @dev uint16 may overflow for small epochTime
    /// @return Current epoch
    function epoch() public view returns (uint16) {
        return block.timestamp >= start ? uint16((block.timestamp - start) / epochTime + 1) : 0;
    }

    /// @notice Total staked within the stake time sliding window
    /// @dev stakeTime / epochTime should be small enough to not be gas-prohibitive
    /// @return totalStaked total staked
    function staked() external view returns (uint256 totalStaked) {
        uint16 cEpoch = epoch();
        uint16 window = 0;

        while (cEpoch - window > 0 && window < stakeTime / epochTime) {
            totalStaked += epochBalance[cEpoch - window];
            window++;
        }
    }

    /// @notice Total currently staked by an account within the stake time sliding window
    /// @param _account account that is staked
    /// @return totalStaked total staked by account
    function staked(address _account) external view returns (uint256 totalStaked) {
        uint16 cEpoch = epoch();
        uint16 window = 0;

        while (cEpoch - window > 0 && window < stakeTime / epochTime) {
            totalStaked += balance[_account][cEpoch - window];
            window++;
        }
    }

    /// @notice Sets epoch time
    /// @param _epochTime Epoch time
    function setEpochTime(uint256 _epochTime) external onlyOwner {
        require(block.timestamp < start && stakeTime >= _epochTime && stakeTime % _epochTime == 0, "!_epochTime");

        epochTime = _epochTime;
        emit SetEpochTime(_epochTime);
    }

    /// @notice Sets start time
    /// @param _start Start time
    function setStart(uint256 _start) external onlyOwner {
        require(block.timestamp < start && _start > block.timestamp, "!_start");
        start = _start;
        emit SetStart(_start);
    }

    /// @notice Sets migration time
    /// @param _migration Migration time
    function setMigration(uint256 _migration) external onlyOwner {
        require(block.timestamp < start && _migration > block.timestamp, "!_migration");
        migration = _migration;
        emit SetMigration(_migration);
    }

    /// @notice Sets stake time
    /// @param _stakeTime Stake time
    function setStakeTime(uint256 _stakeTime) external onlyOwner {
        require(_stakeTime >= epochTime && _stakeTime % epochTime == 0 && _stakeTime < stakeTime, "!_stakeTime");
        stakeTime = _stakeTime;
        emit SetStakeTime(_stakeTime);
    }

    /// @notice Sets lock status
    /// @param _isLocked Is locked
    function setLocked(bool _isLocked) external onlyOwner {
        isLocked = _isLocked;
        emit SetLocked(_isLocked);
    }

    /// @notice Sets pause status
    /// @param _isPaused Is paused
    function setPaused(bool _isPaused) external onlyOwner {
        isPaused = _isPaused;
        emit SetPaused(_isPaused);
    }

    /// @notice Sets early migrate status
    /// @param _canEarlyMigrate Can early migrate
    function setCanEarlyMigrate(bool _canEarlyMigrate) external onlyOwner {
        canEarlyMigrate = _canEarlyMigrate;
        emit SetCanEarlyMigrate(_canEarlyMigrate);
    }

    /// @notice Sets bootstrapper
    /// @param _bootstrapper Bootstrapper
    /// @param _isBootstrapper Is bootstrapper
    function setBootstrapper(address _bootstrapper, bool _isBootstrapper) external onlyOwner {
        require(_bootstrapper != address(0), "!_bootstrapper");

        isBootstrapper[_bootstrapper] = _isBootstrapper;
        emit SetBootstrapper(_bootstrapper, _isBootstrapper);
    }

    /// @notice Stake RBN or AEVO
    /// @param _isRBN rbn or aevo
    /// @param _amount Amount to stake
    function stake(bool _isRBN, uint256 _amount) external {
        _stake(_isRBN, _amount, msg.sender);
    }

    /// @notice Stake RBN or AEVO for recipient
    /// @param _isRBN rbn or aevo
    /// @param _amount Amount to stake
    /// @param _recipient Recipient of stake
    function stakeFor(bool _isRBN, uint256 _amount, address _recipient) external {
        _stake(_isRBN, _amount, _recipient);
    }

    /// @notice Unstake Aevo
    /// @notice Must unstake to re-stake with new epoch
    /// @param _start Start epoch to unlock
    /// @param _end End epoch to unlock
    function unstake(uint16 _start, uint16 _end) external returns (uint256) {
        return _unstake(msg.sender, _start, _end);
    }

    /// @notice Unstake Aevo for recipient
    /// @param _recipient Recipient of unstake
    /// @param _start Start epoch to unlock
    /// @param _end End epoch to unlock
    function unstakeFor(address _recipient, uint16 _start, uint16 _end) external returns (uint256) {
        return _unstake(_recipient, _start, _end);
    }

    /// @notice Migrate RBN to AEVO (with a 1:1 ratio)
    /// @param _amount Amount to migrate
    function migrate(uint256 _amount) external {
        require(block.timestamp >= migration || isBootstrapper[msg.sender] || canEarlyMigrate, "!migrate");
        require(_amount > 0, "!_amount");

        IERC20(rbn).safeTransferFrom(msg.sender, address(this), _amount);
        IERC20(aevo).safeTransfer(msg.sender, _amount);
        emit Migrate(msg.sender, _amount);
    }

    /// @notice Stake RBN or AEVO
    /// @param _isRBN rbn or aevo
    /// @param _amount Amount to stake
    /// @param _recipient Recipient of stake
    function _stake(bool _isRBN, uint256 _amount, address _recipient) internal {
        require(!isPaused, "paused");
        require(block.timestamp >= start, "!started");
        require(_amount > 0, "!_amount");
        require(_recipient != address(0), "!_recipient");

        uint16 cEpoch = epoch();
        balance[_recipient][cEpoch] += _amount;
        epochBalance[cEpoch] += _amount;
        IERC20(_isRBN ? rbn : aevo).safeTransferFrom(msg.sender, address(this), _amount);
        emit Stake(_recipient, cEpoch, _amount, _isRBN);
    }

    /// @notice Unstake Aevo
    /// @param _recipient Recipient of unstake
    /// @param _start Start epoch to unlock
    /// @param _end End epoch to unlock
    function _unstake(address _recipient, uint16 _start, uint16 _end) internal returns (uint256 unstakeAmount) {
        require(_recipient != address(0), "!_recipient");
        require(_start <= _end, "!_start");
        require(!isLocked || _end <= epoch() - uint16(stakeTime / epochTime), "!_end");

        uint16 cEpoch = _start;

        while (cEpoch <= _end) {
            unstakeAmount += balance[_recipient][cEpoch];
            balance[_recipient][cEpoch] = 0;
            cEpoch++;
        }

        require(unstakeAmount > 0, "!unstakeAmount");

        IERC20(aevo).safeTransfer(_recipient, unstakeAmount);
        emit Unstake(_recipient, _start, _end, unstakeAmount);
    }

    event SetEpochTime(uint256 epochTime);
    event SetStart(uint256 start);
    event SetMigration(uint256 migration);
    event SetStakeTime(uint256 stakeTime);
    event SetLocked(bool isLocked);
    event SetPaused(bool isPaused);
    event SetCanEarlyMigrate(bool canEarlyMigrate);
    event SetBootstrapper(address indexed bootstrapper, bool isBootstrapper);
    event Stake(address indexed recipient, uint16 indexed epoch, uint256 amount, bool isRBN);
    event Unstake(address indexed recipient, uint16 indexed startEpoch, uint16 indexed endEpoch, uint256 amount);
    event Migrate(address indexed recipient, uint256 amount);
}


// File: lib/solmate/src/auth/Owned.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >=0.8.0;

/// @notice Simple single owner authorization mixin.
/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)
abstract contract Owned {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event OwnershipTransferred(address indexed user, address indexed newOwner);

    /*//////////////////////////////////////////////////////////////
                            OWNERSHIP STORAGE
    //////////////////////////////////////////////////////////////*/

    address public owner;

    modifier onlyOwner() virtual {
        require(msg.sender == owner, "UNAUTHORIZED");

        _;
    }

    /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(address _owner) {
        owner = _owner;

        emit OwnershipTransferred(address(0), _owner);
    }

    /*//////////////////////////////////////////////////////////////
                             OWNERSHIP LOGIC
    //////////////////////////////////////////////////////////////*/

    function transferOwnership(address newOwner) public virtual onlyOwner {
        owner = newOwner;

        emit OwnershipTransferred(msg.sender, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}

