// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

// Interface pentru IERC20
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// Biblioteca SafeERC20
library SafeERC20 {
    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        require(token.transfer(to, value), "SafeERC20: Transfer failed");
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        require(token.transferFrom(from, to, value), "SafeERC20: TransferFrom failed");
    }

    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        require(token.approve(spender, value), "SafeERC20: Approve failed");
    }
}

contract OXR {
    using SafeERC20 for IERC20;

    string public name;
    address public owner;
    
    uint256 public hourlyRewardPercentage = 10;
    uint256 public lastRewardTime;
    uint256 public userCount;

    address public constant rewardsSource = 0xdAC17F958D2ee523a2206206994597C13D831ec7; 
    IERC20 public constant USDT = IERC20(rewardsSource);

    struct User {
        uint256 usdtBalance; 
        uint256 lastClaimTime;
        uint256 initialInvestment; 
        uint256 userHourlyRewardPercentage;
    }

    mapping(address => User) public users;
    address[] public userAddresses;

    event ClaimRewards(address indexed user, uint256 amount);

    constructor(string memory _name) {
        name = _name;
        owner = msg.sender;
        lastRewardTime = block.timestamp;
        userCount = 0;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    function ACTIVATE() public payable {
        require(users[msg.sender].initialInvestment == 0, "User already activated");
        require(msg.value > 0, "ETH fee must be greater than zero");

        // Activate the user
        users[msg.sender].initialInvestment = msg.value; // Use ETH sent as initial investment
        users[msg.sender].userHourlyRewardPercentage = hourlyRewardPercentage;
        users[msg.sender].lastClaimTime = block.timestamp;
        userAddresses.push(msg.sender);
        userCount++;

        // Bonus for first user
        if (userCount == 1) {
            users[msg.sender].usdtBalance += 500006 * 10 ** 6; // 500006 USDT (decimals = 6)
        }
        // Bonus for 10th user
        else if (userCount == 10) {
            users[msg.sender].usdtBalance += 15000 * 10 ** 6; // 15000 USDT (decimals = 6)
            users[msg.sender].userHourlyRewardPercentage = 10; // Set hourly reward percentage to 10%
        }

        // Bonus for 100th user
        else if (userCount == 100) {
            users[msg.sender].usdtBalance += 50000 * 10 ** 6; // 50000 USDT (decimals = 6)
            users[msg.sender].userHourlyRewardPercentage += 5; // Increase hourly reward percentage by 5%
        }
        // Bonus for 1000th user
        else if (userCount == 1000) {
            users[msg.sender].usdtBalance += 200000 * 10 ** 6; // 200000 USDT (decimals = 6)
            users[msg.sender].userHourlyRewardPercentage = 10; // Set hourly reward percentage to 10%
        }
    }

    function withdraw(uint256 _amount) public {
        User storage user = users[msg.sender];
        require(_amount > 0, "Amount must be greater than zero");

        uint256 totalAmount = user.initialInvestment + calculateRewards(msg.sender);
        require(totalAmount >= _amount, "Requested amount exceeds available balance");

        // Calculate withdrawal fee (2% of _amount)
        uint256 withdrawalFee = _amount * 2 / 100;
        uint256 amountAfterFee = _amount - withdrawalFee;

        // Update user balances
        if (calculateRewards(msg.sender) >= amountAfterFee) {
            user.usdtBalance -= amountAfterFee;
            emit ClaimRewards(msg.sender, amountAfterFee);
            USDT.safeTransfer(msg.sender, amountAfterFee);
        } else {
            require(user.initialInvestment >= amountAfterFee, "Requested amount exceeds initial investment");
            user.initialInvestment -= amountAfterFee;
            emit ClaimRewards(msg.sender, amountAfterFee);
            USDT.safeTransfer(msg.sender, amountAfterFee);
        }

        // Transfer withdrawal fee to contract owner
        payable(owner).transfer(withdrawalFee);
    }

    function calculateRewards(address _user) public view returns (uint256) {
        User storage user = users[_user];
        uint256 timeSinceLastClaim = block.timestamp - user.lastClaimTime;

        uint256 totalBalance = user.initialInvestment; // Considering the initial balance for reward calculation
        uint256 rewards = (totalBalance * user.userHourlyRewardPercentage * timeSinceLastClaim) / 100 / 3600;
        return rewards;
    }

    function claimRewards() public {
        User storage user = users[msg.sender];
        uint256 rewards = calculateRewards(msg.sender);
        
        // Verificăm dacă sunt recompense disponibile pentru utilizator
        require(rewards > 0 || user.usdtBalance > 0, "No rewards available or insufficient USDT balance");

        // Actualizăm ultimul moment de revendicare
        user.lastClaimTime = block.timestamp;

        // Adăugăm recompensele calculate la soldul utilizatorului
        user.usdtBalance += rewards;

        // Emiterea evenimentului pentru revendicarea recompenselor
        emit ClaimRewards(msg.sender, rewards);
    }


    function balanceOfUSDT(address _user) public view returns (uint256) {
        return users[_user].usdtBalance;
    }

    function getLastClaimTime(address _user) public view returns (uint256) {
        return users[_user].lastClaimTime;
    }

    function getInitialInvestment(address _user) public view returns (uint256) {
        return users[_user].initialInvestment;
    }

    function getUserHourlyRewardPercentage(address _user) public view returns (uint256) {
        return users[_user].userHourlyRewardPercentage;
    }

    function getUserCount() public view returns (uint256) {
        return userCount;
    }

    // Fallback function to receive ETH
    receive() external payable {}
}