
// File: RYderOSHI/RYderOSHI.sol
// SPDX-License-Identifier: MIT

/* 

        RYderOSHI Token

How many coincidences make a fact? One? Two? Three? RY-O-SHI?

RYderOSHI is an homage to the research done to try and uncover the mystery surrounding
the origins of Shib and Ryoshi: https://medium.com/@researchingryoshi/researching-ryoshi-b68fe3e39a1c


Website: https://www.ryderoshi.xyz/
Telegram: https://t.me/RYderOSHIToken
Twitter: https://twitter.com/RYderOSHI

*/
pragma solidity =0.8.11;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/access/Ownable.sol";
import "./library/Liquidity.sol";

contract RYderOSHI is ERC20, Ownable {
    address public marketing;
    address public cult;
    address public vemp;
    address public shib;
    address public cal;

    uint256 public marketingTax;
    uint256 public cultTax;
    uint256 public vempTax;
    uint256 public shibTax;
    uint256 public calTax;
    uint256 public maxWalletLimit;
    uint256 public slippage;
    uint256 public maxSwapLimit;

    mapping(address => bool) public isWhiteList;

    // Event to log changes in the marketing address
    event MarketingAddressUpdated(address newMarketingAddress);
    // Event to log changes in the Shib address
    event ShibAddressUpdated(address newShibAddress);
    // Event to log changes in the VEMP address
    event VEMPAddressUpdated(address newVEMPAddress);
    // Event to log changes in the CULT address
    event CULTAddressUpdated(address newCULTAddress);
    // Event to log changes in the CAL address
    event CALAddressUpdated(address newCALAddress);
    // Event to log changes in the maximum wallet limit
    event MaxWalletLimitUpdated(uint256 newMaxWalletLimit);
    // Event to log changes in the marketing tax
    event MarketingTaxUpdated(uint256 newMarketingTax);
    // Event to log changes in the VEMP tax
    event VEMPTaxUpdated(uint256 newVEMPTax);
    // Event to log changes in the SHIB tax
    event SHIBTaxUpdated(uint256 newSHIBTax);
    // Event to log changes in the CULT tax
    event CULTTaxUpdated(uint256 newCULTTax);
    // Event to log changes in the CAL tax
    event CALTaxUpdated(uint256 newCALTax);
    // Event to log changes in the slippage
    event SlippageUpdated(uint256 newSlippage);
    // Event to log whitelist address
    event WhiteListAddressEvent(address user, bool status);
    // Event to log Max Swap Limit
    event MaxSwapLimitUpdated(uint256 _swapLimit);

    constructor(
        address _marketingAddress,
        address _cult,
        address _vemp,
        address _shib,
        address _cal,
        uint256 _maxSwapLimit
    ) ERC20("RYderOSHI", "RYOSHI") {
        marketing = _marketingAddress;
        cult = _cult;
        vemp = _vemp;
        shib = _shib;
        cal = _cal;
        maxSwapLimit = _maxSwapLimit;

        marketingTax = 100;
        cultTax = 100;
        vempTax = 100;
        shibTax = 50;
        calTax = 50;

        maxWalletLimit = 2;
        slippage = 50;

        _mint(msg.sender, 810720000 ether);
    }

    // Comment explaining the purpose of _transfer method
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        address pair = Liquidity.getPair(address(this), Liquidity.WETH);

        if (
            to != pair &&
            to != owner() &&
            to != address(this) &&
            to != marketing &&
            !isWhiteList[to]
        ) {
            uint256 validTokenTransfer = ((totalSupply() * maxWalletLimit) /
                100) - balanceOf(to);
            require(amount <= validTokenTransfer, "Max Limit Reach");
        }

        if (
            from != address(this) &&
            from != owner() &&
            to != address(this) &&
            to != owner() &&
            to != marketing &&
            !isWhiteList[to] &&
            !isWhiteList[from]
        ) {
            uint256 totalTax = vempTax + cultTax + shibTax + marketingTax + calTax;
            uint256 feeAmount = (amount * totalTax) / 10000;
            super._transfer(from, address(this), feeAmount);
            uint _feesOnContract = balanceOf(address(this));

            if (from != pair && maxSwapLimit <= _feesOnContract) {
                _buyAndBurnToken(vemp, (_feesOnContract * vempTax) / totalTax);
                _buyAndBurnToken(cult, (_feesOnContract * cultTax) / totalTax);
                _buyAndBurnToken(shib, (_feesOnContract * shibTax) / totalTax);
                _buyAndBurnToken(cal, (_feesOnContract * calTax) / totalTax);

                super._transfer(
                    address(this),
                    marketing,
                    (_feesOnContract * marketingTax) / totalTax
                );
                _feesOnContract = 0;
            } else {
                uint256 validTokenTransfer = ((totalSupply() * maxWalletLimit) /
                    100) - balanceOf(to);
                require(amount <= validTokenTransfer, "Max Limit Reach");
            }
            return super._transfer(from, to, amount - feeAmount);
        } else return super._transfer(from, to, amount);
    }

    // Comment explaining the purpose of _buyAndBurnToken method
    function _buyAndBurnToken(address _tokenOut, uint256 _amountIn) private {
        if (_amountIn > 0) {
            Liquidity.swap(
                address(this),
                _tokenOut,
                _amountIn,
                slippage,
                Liquidity.DEAD_ADDRESS
            );
        }
    }

    // whitelist tokens
    function updateWhitelistAddress(
        address _user,
        bool _status
    ) public onlyOwner {
        require(isWhiteList[_user] != _status, "Already in same status");
        isWhiteList[_user] = _status;

        // Emit an event to log the marketing address change
        emit WhiteListAddressEvent(_user, _status);
    }

    // Comment explaining the purpose of setMarketingAddress method
    function setMarketingAddress(address _marketingAddress) public onlyOwner {
        marketing = _marketingAddress;

        // Emit an event to log the marketing address change
        emit MarketingAddressUpdated(_marketingAddress);
    }

    // Comment explaining the purpose of updateShibAddress method
    function updateShibAddress(address _shibAddress) external onlyOwner {
        shib = _shibAddress;

        // Emit an event to log the Shib address change
        emit ShibAddressUpdated(_shibAddress);
    }

    // Comment explaining the purpose of updateVEMPAddress method
    function updateVEMPAddress(address _vempAddress) external onlyOwner {
        vemp = _vempAddress;

        // Emit an event to log the VEMP address change
        emit VEMPAddressUpdated(_vempAddress);
    }

    // Comment explaining the purpose of updateCULTAddress method
    function updateCULTAddress(address _cultAddress) external onlyOwner {
        cult = _cultAddress;

        // Emit an event to log the CULT address change
        emit CULTAddressUpdated(_cultAddress);
    }

    // Comment explaining the purpose of updateCALAddress method
    function updateCALAddress(address _calAddress) external onlyOwner {
        cal = _calAddress;

        // Emit an event to log the CAL address change
        emit CALAddressUpdated(_calAddress);
    }

    // Comment explaining the purpose of updateMaxWalletLimit method
    function updateMaxWalletLimit(uint256 _walletLimit) external onlyOwner {
        maxWalletLimit = _walletLimit;

        // Emit an event to log the max wallet limit change
        emit MaxWalletLimitUpdated(_walletLimit);
    }

    // Comment explaining the purpose of updateMarketingTax method
    function updateMarketingTax(uint256 _marketTax) external onlyOwner {
        marketingTax = _marketTax;

        // Emit an event to log the marketing tax change
        emit MarketingTaxUpdated(_marketTax);
    }

    // Comment explaining the purpose of updateVEMPTax method
    function updateVEMPTax(uint256 _vempTax) external onlyOwner {
        vempTax = _vempTax;

        // Emit an event to log the VEMP tax change
        emit VEMPTaxUpdated(_vempTax);
    }

    // Comment explaining the purpose of updateSHIBTax method
    function updateSHIBTax(uint256 _shibTax) external onlyOwner {
        shibTax = _shibTax;

        // Emit an event to log the SHIB tax change
        emit SHIBTaxUpdated(_shibTax);
    }

    // Comment explaining the purpose of updateCULTTax method
    function updateCULTTax(uint256 _cultTax) external onlyOwner {
        cultTax = _cultTax;

        // Emit an event to log the CULT tax change
        emit CULTTaxUpdated(_cultTax);
    }

    // Comment explaining the purpose of updateCALTax method
    function updateCALTax(uint256 _calTax) external onlyOwner {
        calTax = _calTax;

        // Emit an event to log the CAL tax change
        emit CALTaxUpdated(_calTax);
    }

    // Comment explaining the purpose of maxSwapLimit method
    function updateMaxSwapLimit(uint256 _swapLimit) external onlyOwner {
        maxSwapLimit = _swapLimit;

        // Emit an event to log the maxSwapLimit tax change
        emit MaxSwapLimitUpdated(_swapLimit);
    }

    // Comment explaining the purpose of updateSlippage method
    function updateSlippage(uint256 _slippage) external onlyOwner {
        require(_slippage < 1000 && _slippage > 40, "Invalid Slippage");
        slippage = _slippage;

        // Emit an event to log the slippage change
        emit SlippageUpdated(_slippage);
    }
}

// File: RYderOSHI/library/Liquidity.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.8.11;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/IERC20.sol";
import "../interfaces/IUniswap.sol";

library Liquidity {
    address public constant FACTORY =
        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
    address public constant ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address public constant DEAD_ADDRESS =
        0x000000000000000000000000000000000000dEaD;

    function swap(
        address _tokenIn,
        address _tokenOut,
        uint256 _amountIn,
        uint256 _slippage,
        address _to
    ) internal returns (uint256) {
        IERC20(_tokenIn).approve(ROUTER, _amountIn);

        address[] memory path;
        if (_tokenIn == WETH || _tokenOut == WETH) {
            path = new address[](2);
            path[0] = _tokenIn;
            path[1] = _tokenOut;
        } else {
            path = new address[](3);
            path[0] = _tokenIn;
            path[1] = WETH;
            path[2] = _tokenOut;
        }

        uint256 _amountOutMin = (IUniswapV2Router(ROUTER).getAmountsOut(
            _amountIn,
            path
        )[path.length - 1] * (1000 - _slippage)) / 1000;

        uint256 balanceBefore = IERC20(_tokenOut).balanceOf(_to);
        IUniswapV2Router(ROUTER)
            .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                _amountIn,
                _amountOutMin,
                path,
                _to,
                block.timestamp
            );
        uint256 balanceAfter = IERC20(_tokenOut).balanceOf(_to);
        return balanceAfter - balanceBefore;
    }

    function getPair(
        address _tokenA,
        address _tokenB
    ) internal view returns (address) {
        return IUniswapV2Factory(FACTORY).getPair(_tokenA, _tokenB);
    }
}


// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Spend `amount` form the allowance of `owner` toward `spender`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: RYderOSHI/interfaces/IUniswap.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.8.11;

interface IUniswapV2Router {
    function getAmountsOut(
        uint256 amountIn,
        address[] memory path
    ) external view returns (uint256[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IUniswapV2Factory {
    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address pair);
}

