
// File: src/StakingPoolV2.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {Ownable2Step} from "@openzeppelin/contracts/access/Ownable2Step.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {StakingPoolWithCoolOff, StakingWithCoolOff} from "./StakingPoolWithCoolOff.sol";
import {StakingPoolWithLock, StakingWithLock} from "./StakingPoolWithLock.sol";

error EthTransferFailed();
error AmountIsZero();
error NoTokensToWithdraw(address erc20address);
error ActionDisabled();
error NewStakeNotHigherThanCurrent();

struct StakingPoolConfig {
    address goodTokenAddress;
    address owner;
    uint256 coolOffPeriod;
    uint256 stakingLockPeriod;
    uint256 vipMembershipThreshold;
}

/**
 * @dev This contract allows staking of ERC20 tokens and rewards stakers with ETH. The contract address
 * must be whitelisted/exempt from GOOD token transfer fees for proper functionality. When new rewards (ETH)
 * are deposited to the contract, every staker receives a proportional share of the rewards based on the
 * amount of tokens staked. The contract records historical deposits of rewards and uses them to calculate
 * user rewards during withdrawal. Users can withdraw their rewards at any time.
 *
 * When rewards are received, the contract calculates the proportional value of incoming rewards per staked
 * token and stores it in the `rewardsPerToken` array. The array is a prefix sum array, enabling the
 * constant-time calculation of the sum of rewards per token by subtracting the value at the staking time
 * (rewardsStartIndex) from the last value in the array. The total reward for staking is then determined
 * by multiplying the sum of rewards per token by the amount of staked tokens.
 *
 * The contract provides two types of staking: staking with a cool-off period and staking with a lock
 * period. Staking with a cool-off period allows users to unstake their tokens at any time, initiating
 * the `coolOffPeriod` (default of 48 hours), after which the user can transfer the tokens back to their
 * wallet. Staking with a lock period restricts users from withdrawing their staked tokens for a specified
 * period (stakingLockPeriod) after staking. Once this period concludes, the user can immediately withdraw
 * the tokens at any time. Staking with a lock period also allows users to become VIP members if their
 * locked amount exceeds the VIP membership threshold. These users can mint the VIP Membership NFT for free,
 * instead of paying the VIP membership fee. From a rewards perspective, both types of staking are treated
 * the same way; the calculated share of rewards is uniform regardless of the staking type and depends
 * solely on the amount of staked tokens.
 *
 * The contract is divided into multiple files for readability. The main contract is `StakingPool`,
 * responsible for reward calculation and withdrawals, ERC20 token transfers and contract parameters updates.
 * The internal logic of the two staking types is abstracted into two contracts (`StakingPoolWithCoolOff` and
 * `StakingPoolWithLock`), which `StakingPool` inherits from.
 */
contract StakingPool is Ownable2Step, StakingPoolWithCoolOff, StakingPoolWithLock {
    using SafeERC20 for IERC20;

    /**
     * @dev Arbitrary unit of reward calculation precision.
     * Calculated reward per token is an integer value, so if staked amount would be higher than that, we would
     * lose precision for last digits. Therefore we calculate the rewards per {{PRECISION}} tokens instead.
     * Value of 10x the total supply of GOOD token is chosen, so that the staked amounts are always lower than that.
     */
    uint256 internal constant PRECISION = 1e9 * 1e10;

    address public immutable goodTokenAddress;
    uint256 public undistributedRewards;
    uint256 public totalStakedAmount;
    uint256 public totalUnstakedTokens;
    uint256 public totalDepositedRewards;

    mapping(address => uint256) internal userBalances;

    uint256[] internal rewardsPerToken = [0];

    event RewardsDeposit(uint256 amount);
    event RewardsWithdrawal(address indexed user, uint256 amount);
    event OwnerERC20Withdrawal(address indexed user, address indexed erc20address, uint256 amount);

    constructor(StakingPoolConfig memory config)
        Ownable(config.owner)
        StakingPoolWithCoolOff(config.coolOffPeriod)
        StakingPoolWithLock(config.stakingLockPeriod, config.vipMembershipThreshold)
    {
        goodTokenAddress = config.goodTokenAddress;
    }

    receive() external payable {
        depositStakingRewards();
    }

    /**
     * @dev Explicit function to deposit ETH rewards.
     * If no tokens are staked, the rewards are accumulated in the `undistributedRewards` variable.
     * Otherwise the incoming rewards together with any `undistributedRewards` are "allocated" among stakers.
     * This is done by calculating the rewards per staked token and storing it in the `rewardsPerToken`
     * prefix sum array.
     */
    function depositStakingRewards() public payable {
        emit RewardsDeposit(msg.value);

        totalDepositedRewards += msg.value;

        if (totalStakedAmount == 0) {
            undistributedRewards += msg.value;
            return;
        }

        uint256 totalRewardAmount = msg.value + undistributedRewards;
        undistributedRewards = 0;
        uint256 rewardPerToken = (totalRewardAmount * PRECISION) / totalStakedAmount;

        rewardsPerToken.push(rewardsPerToken[_getLastRewardsIndex()] + rewardPerToken);
    }

    /**
     * @dev Function from Ownable to renounce ownership of the contract. Overriden to disable this function.
     */
    function renounceOwnership() public pure override(Ownable) {
        revert ActionDisabled();
    }

    /**
     * @dev Getter for current value of staking rewards for a given user.
     */
    function getCurrentRewards(address user) public view returns (uint256) {
        return userBalances[user] + _calculateStakingRewards(userStakingsWithCoolOff[user])
            + _calculateStakingRewards(userStakingsWithLock[user]);
    }

    /**
     * @dev Getter for total amount of staked tokens by user.
     */
    function getCurrentStake(address user) external view returns (uint256) {
        return getCurrentLockedStake(user) + getCurrentStakeWithCoolOff(user);
    }

    /**
     * @dev Wrappers around stake functions to pull the tokens from the user before staking. The user is
     * expected to grant the ERC20 approval for the sufficient amount of tokens to the contract address
     * before calling these functions, otherwise the transaction will revert.
     */
    function stakeTokensWithCoolOff(uint256 amount) external {
        _pullStakedTokens(amount);
        _stakeTokensWithCoolOff(amount);
    }

    function stakeTokensWithLock(
        uint256 newLockedAmount,
        uint256 intendedStakingLockPeriod,
        uint256 intendedVipMembershipThreshold
    ) external {
        uint256 currentLockedStake = getCurrentLockedStake(msg.sender);

        if (newLockedAmount <= currentLockedStake) {
            revert NewStakeNotHigherThanCurrent();
        }

        uint256 amount = newLockedAmount - currentLockedStake;
        _pullStakedTokens(amount);
        _stakeTokensWithLock(amount, intendedStakingLockPeriod, intendedVipMembershipThreshold);
    }

    /**
     * @dev Wrappers around staking with cool-off unstake function. If no amount is specified, the full amount is unstaked.
     */
    function unstakeTokensWithCoolOff(uint256 amount) external {
        _unstakeTokensWithCoolOff(amount);
    }

    function unstakeTokensWithCoolOff() external {
        uint256 amount = getCurrentStakeWithCoolOff(msg.sender);
        _unstakeTokensWithCoolOff(amount);
    }

    function _unstakeTokensWithCoolOff(uint256 amount) internal override {
        totalStakedAmount -= amount;
        totalUnstakedTokens += amount;
        super._unstakeTokensWithCoolOff(amount);
    }

    /**
     * @dev Function to withdraw unstaked tokens after the cool off period. This function does not transfer rewards
     * (ETH) to the user, they remain in the contract and can be withdrawn by calling the `withdrawRewards` function.
     */
    function withdrawUnstakedTokens() external {
        uint256 amount = _prepareTokensWithdrawal(msg.sender);
        totalUnstakedTokens -= amount;
        _transferWithdrawnTokens(msg.sender, amount);
    }

    /**
     * @dev Wrappers around staking with lock withdraw function. If no amount is specified, the full amount is withdrawn.
     */
    function withdrawLockedTokens(uint256 amount) external {
        _withdrawLockedTokens(amount);
    }

    function withdrawLockedTokens() external {
        uint256 amount = getCurrentLockedStake(msg.sender);
        _withdrawLockedTokens(amount);
    }

    function _withdrawLockedTokens(uint256 amount) internal {
        totalStakedAmount -= amount;
        _handleLockedTokensWithdrawal(amount);
        _transferWithdrawnTokens(msg.sender, amount);
    }

    /**
     * @dev Function to withdraw staking rewards. The staked tokens are not affected, only the rewards
     * are transferred to the user. The staking `rewardsStartIndex` resets to the current last index,
     * meaning that the rewards currently in the array won't be claimable again.
     */
    function withdrawRewards() external {
        uint256 amount = getCurrentRewards(msg.sender);

        if (amount == 0) {
            revert AmountIsZero();
        }

        uint256 lastRewardsIndex = _getLastRewardsIndex();

        userBalances[msg.sender] = 0;
        userStakingsWithCoolOff[msg.sender].rewardsStartIndex = lastRewardsIndex;
        userStakingsWithLock[msg.sender].rewardsStartIndex = lastRewardsIndex;

        _transferEth(msg.sender, amount);

        emit RewardsWithdrawal(msg.sender, amount);
    }

    /**
     * @dev Function to withdraw any ERC20 tokens that were sent to the contract by mistake.
     * When withdrawing the GOOD tokens, we have to substract the staked amount from the total balance.
     */
    function withdrawERC20(address erc20address) external onlyOwner {
        uint256 balance = IERC20(erc20address).balanceOf(address(this));
        uint256 amountToWithdraw =
            erc20address == goodTokenAddress ? balance - totalStakedAmount - totalUnstakedTokens : balance;

        if (amountToWithdraw == 0) {
            revert NoTokensToWithdraw(erc20address);
        }

        _transferERC20(erc20address, msg.sender, amountToWithdraw);
        emit OwnerERC20Withdrawal(msg.sender, erc20address, amountToWithdraw);
    }

    /**
     * @dev Functions to update staking parameters.
     */
    function updateVipMembershipThreshold(uint256 newThreshold) external onlyOwner {
        _updateVipMembershipThreshold(newThreshold);
    }

    function updateStakingLockPeriod(uint256 newLockPeriod) external onlyOwner {
        _updateStakingLockPeriod(newLockPeriod);
    }

    /**
     * @dev Returns last index of the `rewardsPerToken` array.
     */
    function _getLastRewardsIndex()
        internal
        view
        override(StakingPoolWithCoolOff, StakingPoolWithLock)
        returns (uint256)
    {
        return rewardsPerToken.length - 1;
    }

    /**
     * @dev Calculates the rewards for a given staking since its last update. The rewards are calculated as a difference between the current
     * accumulated rewards per token and the accumulated rewards per token at the time of staking, muliplied by the amount of staked tokens.
     * This does not include user balance in the `userBalances` variable, which stores the previous rewards in case user has changed the amount
     * of staked tokens.
     */
    function _calculateStakingRewards(StakingWithCoolOff storage staking) internal view returns (uint256) {
        return _calculateStakingRewards(staking.rewardsStartIndex, staking.amount);
    }

    function _calculateStakingRewards(StakingWithLock storage staking) internal view returns (uint256) {
        return _calculateStakingRewards(staking.rewardsStartIndex, staking.amount);
    }

    function _calculateStakingRewards(uint256 startIndex, uint256 amount) internal view returns (uint256) {
        uint256 rewardPerTokenUnit = rewardsPerToken[_getLastRewardsIndex()] - rewardsPerToken[startIndex];
        return (rewardPerTokenUnit * amount) / PRECISION;
    }

    /**
     * @dev Function to add the existing rewards to the user balance, in case the user has changed the amount of staked tokens. Used by the
     * `StakingPoolWithCoolOff` and `StakingPoolWithLock` contracts.
     */
    function _addRewardsToUserBalance(uint256 startIndex, uint256 amount)
        internal
        override(StakingPoolWithCoolOff, StakingPoolWithLock)
    {
        userBalances[msg.sender] += _calculateStakingRewards(startIndex, amount);
    }

    /**
     * @dev Pulls staked tokens from the user and increases the total staked amount. To be called when staking new tokens.
     */
    function _pullStakedTokens(uint256 amount) internal {
        if (amount == 0) {
            revert AmountIsZero();
        }

        totalStakedAmount += amount;
        IERC20(goodTokenAddress).safeTransferFrom(msg.sender, address(this), amount);
    }

    function _transferERC20(address erc20address, address recipient, uint256 amount) internal {
        IERC20(erc20address).safeTransfer(recipient, amount);
    }

    function _transferWithdrawnTokens(address recipient, uint256 amount) internal {
        _transferERC20(goodTokenAddress, recipient, amount);
    }

    function _transferEth(address recipient, uint256 amount) internal {
        (bool isSent,) = recipient.call{value: amount}("");

        if (!isSent) {
            revert EthTransferFailed();
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)

pragma solidity ^0.8.20;

import {Ownable} from "./Ownable.sol";

/**
 * @dev Contract module which provides access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is specified at deployment time in the constructor for `Ownable`. This
 * can later be changed with {transferOwnership} and {acceptOwnership}.
 *
 * This module is used through inheritance. It will make available all functions
 * from parent (Ownable).
 */
abstract contract Ownable2Step is Ownable {
    address private _pendingOwner;

    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Returns the address of the pending owner.
     */
    function pendingOwner() public view virtual returns (address) {
        return _pendingOwner;
    }

    /**
     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual override onlyOwner {
        _pendingOwner = newOwner;
        emit OwnershipTransferStarted(owner(), newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual override {
        delete _pendingOwner;
        super._transferOwnership(newOwner);
    }

    /**
     * @dev The new owner accepts the ownership transfer.
     */
    function acceptOwnership() public virtual {
        address sender = _msgSender();
        if (pendingOwner() != sender) {
            revert OwnableUnauthorizedAccount(sender);
        }
        _transferOwnership(sender);
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: src/StakingPoolWithCoolOff.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

error AmountIsZero();
error AmountGreaterThanStake();
error WithdrawalLocked();
error WithdrawalNotInProgress();
error AnotherWithdrawalInProgress();

struct StakingWithCoolOff {
    uint256 rewardsStartIndex;
    uint256 amount;
}

struct Withdrawal {
    uint256 amount;
    uint256 coolOffEnd;
}

/**
 * @dev This contract handles the internal logic and state of the stakings with cool-off period. The users are able to stake,
 * unstake and update the amount of staked tokens, but they are only able to withdraw staked tokens after the cool-off
 * period (by default 48 hours) after unstaking. Actual transfers of tokens and distribution of rewards are handled in
 * the main contract (`StakingPool`).
 */
abstract contract StakingPoolWithCoolOff {
    uint256 public immutable coolOffPeriod;

    mapping(address => StakingWithCoolOff) internal userStakingsWithCoolOff;
    mapping(address => Withdrawal) internal userWithdrawals;

    event TokensStakedWithCoolOff(address indexed user, uint256 amount);
    event TokensUnstakedWithCoolOff(address indexed user, uint256 amount);
    event StakedTokensWithdrawn(address indexed user, uint256 amount);

    constructor(uint256 coolOffPeriod_) {
        coolOffPeriod = coolOffPeriod_;
    }

    /**
     * @dev Getter for the end of cool-off period.
     */
    function getCoolOffPeriodEnd(address user) external view returns (uint256) {
        if (userWithdrawals[user].amount == 0) {
            revert WithdrawalNotInProgress();
        }

        return userWithdrawals[user].coolOffEnd;
    }

    /**
     * @dev Getter for the amount of unstaked tokens.
     */
    function getUnstakedAmountWithCoolOff(address user) external view returns (uint256) {
        return userWithdrawals[user].amount;
    }

    /**
     * @dev Getter for current amount of staked tokens by user though the staking with cool-off period.
     */
    function getCurrentStakeWithCoolOff(address user) public view returns (uint256) {
        return userStakingsWithCoolOff[user].amount;
    }

    /**
     * @dev Function to stake tokens with cool-off or to increase the existing stake. If user has already
     * some tokens staked, the current rewards are calculated and saved to the `userBalances` mapping and
     * new staking is created with new total amount of tokens staked. Staking `rewardsStartIndex` points
     * to the last unclaimable reward in the `rewardsPerToken` array, which is the last index at the time
     * of staking. Any new rewards that are added to the array will be included in the reward calculation
     * for this staking. The actual transfer of tokens is handled in the main contract (`StakingPool`).
     */
    function _stakeTokensWithCoolOff(uint256 amount) internal {
        StakingWithCoolOff storage staking = userStakingsWithCoolOff[msg.sender];
        uint256 stakedAmount = staking.amount;

        if (stakedAmount > 0) {
            _addRewardsToUserBalance(staking.rewardsStartIndex, staking.amount);
        }

        userStakingsWithCoolOff[msg.sender] =
            StakingWithCoolOff({rewardsStartIndex: _getLastRewardsIndex(), amount: stakedAmount + amount});

        emit TokensStakedWithCoolOff(msg.sender, amount);
    }

    /**
     * @dev Function to trigger withdrawal of staked tokens and decrease the existing stake. Calling this function will start the cool-off
     * period, after which the user can transfer the tokens to his wallet with the `withdrawUnstakedTokens` function. The current rewards
     * are calculated and saved to the `userBalances` mapping and new staking is created with the remaining amount of staked tokens.
     */
    function _unstakeTokensWithCoolOff(uint256 amount) internal virtual {
        if (amount == 0) {
            revert AmountIsZero();
        }

        StakingWithCoolOff storage staking = userStakingsWithCoolOff[msg.sender];

        if (userWithdrawals[msg.sender].amount > 0) {
            revert AnotherWithdrawalInProgress();
        }
        if (staking.amount < amount) {
            revert AmountGreaterThanStake();
        }

        _addRewardsToUserBalance(staking.rewardsStartIndex, staking.amount);

        staking.rewardsStartIndex = _getLastRewardsIndex();
        staking.amount -= amount;

        userWithdrawals[msg.sender] = Withdrawal({amount: amount, coolOffEnd: block.timestamp + coolOffPeriod});

        emit TokensUnstakedWithCoolOff(msg.sender, amount);
    }

    /**
     * @dev Function to update internal state before the tokens are transferred to the user wallet.
     * This function is called by the main contract in the `withdrawUnstakedTokens` function.
     */
    function _prepareTokensWithdrawal(address user) internal returns (uint256) {
        Withdrawal storage withdrawal = userWithdrawals[user];
        uint256 amount = withdrawal.amount;

        if (amount == 0) {
            revert WithdrawalNotInProgress();
        }
        if (block.timestamp < withdrawal.coolOffEnd) {
            revert WithdrawalLocked();
        }

        delete userWithdrawals[user];

        emit StakedTokensWithdrawn(user, amount);

        return amount;
    }

    /**
     * @dev Returns last index of the `rewardsPerToken` array.
     */
    function _getLastRewardsIndex() internal view virtual returns (uint256);

    /**
     * @dev Function to add the existing rewards to the user balance, in case the user has changed the amount of staked tokens.
     */
    function _addRewardsToUserBalance(uint256 startIndex, uint256 amount) internal virtual;
}


// File: src/StakingPoolWithLock.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

import {IVipMembershipEligibilityChecker} from "./IVipMembershipEligibilityChecker.sol";

error AmountIsZero();
error AmountGreaterThanStake();
error WithdrawalLocked();
error NoLockedTokens();
error StakingParametersChanged();

struct StakingWithLock {
    uint256 rewardsStartIndex;
    uint256 amount;
    uint256 lockedUntil;
}

/**
 * @dev This contract handles the internal logic and state of the stakings with lock. The users can lock their tokens
 * into the staking and they are only able to withdraw them after the `stakingLockPeriod`. By locking at least
 *  `vipMembershipThreshold` tokens, the user becomes eligible to mint VIP Membership NFT for free.
 * Actual transfers of tokens and distribution of rewards are handled in the main contract (`StakingPool`).
 */
abstract contract StakingPoolWithLock is IVipMembershipEligibilityChecker {
    uint256 public stakingLockPeriod;
    uint256 public vipMembershipThreshold;

    mapping(address => StakingWithLock) internal userStakingsWithLock;
    mapping(address => bool) internal userVipEligibility;

    event TokensStakedWithLock(address indexed user, uint256 amount);
    event LockedTokensWithdrawal(address indexed user, uint256 amount);
    event VipMembershipThresholdUpdated(uint256 newThreshold);
    event StakingLockPeriodUpdated(uint256 newLockPeriod);

    constructor(uint256 stakingLockPeriod_, uint256 vipMembershipThreshold_) {
        stakingLockPeriod = stakingLockPeriod_;
        vipMembershipThreshold = vipMembershipThreshold_;
    }

    /**
     * @dev Getter for the end of staking lock period. User cannot withdraw staked tokens
     * until the `stakingLockPeriod` is over.
     */
    function getStakeLockedUntil(address user) external view returns (uint256) {
        if (userStakingsWithLock[user].amount == 0) {
            revert NoLockedTokens();
        }

        return userStakingsWithLock[user].lockedUntil;
    }

    /**
     * @dev Function to check, whether the user is eligible for VIP Membership.
     */
    function getUserVipEligibility(address user) external view returns (bool) {
        return userVipEligibility[user];
    }

    /**
     * @dev Getter for current amount of locked tokens by user.
     */
    function getCurrentLockedStake(address user) public view returns (uint256) {
        return userStakingsWithLock[user].amount;
    }

    /**
     * @dev Function to stake tokens or to increase the existing stake. Locking new tokens will reset the staking lock period.
     * If user has already some tokens staked, the current rewards are calculated and saved to the `userBalances` mapping and
     * new staking is created with new total amount of tokens staked. Staking `rewardsStartIndex` points to the last unclaimable
     * reward in the `rewardsPerToken` array, which is the last index at the time of staking. Any new rewards that are added to
     * the array will be included in the reward calculation for this staking. The actual transfer of tokens is handled in the
     * main contract (`StakingPool`).
     */
    function _stakeTokensWithLock(
        uint256 amount,
        uint256 intendedStakingLockPeriod,
        uint256 intendedVipMembershipThreshold
    ) internal {
        if (intendedStakingLockPeriod != stakingLockPeriod || intendedVipMembershipThreshold != vipMembershipThreshold)
        {
            revert StakingParametersChanged();
        }

        StakingWithLock storage staking = userStakingsWithLock[msg.sender];
        uint256 stakedAmount = staking.amount;

        if (stakedAmount > 0) {
            _addRewardsToUserBalance(staking.rewardsStartIndex, staking.amount);
        }

        uint256 newStakedAmount = stakedAmount + amount;

        userStakingsWithLock[msg.sender] = StakingWithLock({
            rewardsStartIndex: _getLastRewardsIndex(),
            amount: newStakedAmount,
            lockedUntil: block.timestamp + stakingLockPeriod
        });

        if (newStakedAmount >= vipMembershipThreshold) {
            userVipEligibility[msg.sender] = true;
        }

        emit TokensStakedWithLock(msg.sender, amount);
    }

    /**
     * @dev Function to withdraw staked tokens and decrease the existing stake. The current rewards are calculated and saved to the `userBalances`
     * mapping and new staking is created with the remaining amount of staked tokens. This function does not transfer rewards (ETH) to the user,
     * they remain in the contract and can be withdrawn by calling `withdrawRewards` function. The actual transfer of tokens is handled in the
     * main contract (`StakingPool`).
     */
    function _handleLockedTokensWithdrawal(uint256 amount) internal {
        if (amount == 0) {
            revert AmountIsZero();
        }

        StakingWithLock storage staking = userStakingsWithLock[msg.sender];

        if (block.timestamp < staking.lockedUntil) {
            revert WithdrawalLocked();
        }
        if (amount > staking.amount) {
            revert AmountGreaterThanStake();
        }

        _addRewardsToUserBalance(staking.rewardsStartIndex, staking.amount);

        staking.rewardsStartIndex = _getLastRewardsIndex();
        staking.amount -= amount;

        emit LockedTokensWithdrawal(msg.sender, amount);
    }

    /**
     * @dev Setters for staking with lock parameters. Permissions and update lock is handled in the main contract (`StakingPool`).
     */
    function _updateVipMembershipThreshold(uint256 newThreshold) internal {
        vipMembershipThreshold = newThreshold;
        emit VipMembershipThresholdUpdated(newThreshold);
    }

    function _updateStakingLockPeriod(uint256 newLockPeriod) internal {
        stakingLockPeriod = newLockPeriod;
        emit StakingLockPeriodUpdated(newLockPeriod);
    }

    /**
     * @dev Returns last index of the `rewardsPerToken` array.
     */
    function _getLastRewardsIndex() internal view virtual returns (uint256);

    /**
     * @dev Function to add the existing rewards to the user balance, in case the user has changed the amount of staked tokens.
     */
    function _addRewardsToUserBalance(uint256 startIndex, uint256 amount) internal virtual;
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: src/IVipMembershipEligibilityChecker.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

interface IVipMembershipEligibilityChecker {
    /**
     * @dev Function to check, whether the user is eligible for VIP Membership.
     */
    function getUserVipEligibility(address user) external view returns (bool);
}

