{"comps.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\nabstract contract Ownable  {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _transferOwnership(msg.sender);\n    }\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n    function _checkOwner() internal view virtual {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n}\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n}\ncontract ERC20 is IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) private _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n         _decimals = decimals_;\n    }\n    function symbol() external view virtual override returns (string memory) {\n        return _symbol;\n    }\n    function name() external view virtual override returns (string memory) {\n        return _name;\n    }\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n    function totalSupply() external view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n    function transfer(address to, uint256 amount)\n        external\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = msg.sender;\n        _transfer(owner, to, amount);\n        return true;\n    }\n    function approve(address spender, uint256 amount)\n        external\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = msg.sender;\n        _approve(owner, spender, amount);\n        return true;\n    }\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external virtual override returns (bool) {\n        address spender = msg.sender;\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        external\n        virtual\n        returns (bool)\n    {\n        address owner = msg.sender;\n        uint256 currentAllowance = allowance(owner, spender);\n        require(\n            currentAllowance \u003e= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n    function increaseAllowance(address spender, uint256 addedValue)\n        external\n        virtual\n        returns (bool)\n    {\n        address owner = msg.sender;\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance \u003e= amount,\n                \"ERC20: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 fromBalance = _balances[from];\n        require(\n            fromBalance \u003e= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n    }\n}"},"eth.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\nimport \"comps.sol\";\n// ________   ________  ___       __   ________  ___     \n//|\\   ___  \\|\\   __  \\|\\  \\     |\\  \\|\\   __  \\|\\  \\    \n//\\ \\  \\\\ \\  \\ \\  \\|\\  \\ \\  \\    \\ \\  \\ \\  \\|\\  \\ \\  \\   \n// \\ \\  \\\\ \\  \\ \\  \\\\\\  \\ \\  \\  __\\ \\  \\ \\   __  \\ \\  \\  \n//  \\ \\  \\\\ \\  \\ \\  \\\\\\  \\ \\  \\|\\__\\_\\  \\ \\  \\ \\  \\ \\  \\ \n//   \\ \\__\\\\ \\__\\ \\_______\\ \\____________\\ \\__\\ \\__\\ \\__\\\n//    \\|__| \\|__|\\|_______|\\|____________|\\|__|\\|__|\\|__|\n\n// Join Telegram : https://t.me/nowaiAI\n// Website : https://www.nowai.ai/\n// Twitter : https://twitter.com/nowaiAI\n\n\n contract NOWAI is ERC20, Ownable {\n    string private _name = \"NOWAI\";\n    string private _symbol = \"$NOWAI\";\n    uint8 private _decimals = 18;\n    uint256 private _supply = 10000000000;\n    uint256 public taxForLiquidity = 1;\n    uint256 public taxForMarketing = 2;\n    uint256 public maxWalletAmount = 1;\n    address public marketingWallet = 0x47726b6e98Ef99382359EFe87E14D826b57403A1;\n    address private uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n\n    uint256 private _marketingReserves = 0;\n    mapping(address =\u003e bool) private _isExcludedFromFee;\n    uint256 private _numTokensSellToAddToLiquidity = 200 * 10**_decimals;\n    uint256 private _numTokensSellToAddToETH = 200 * 10**_decimals;\n    bool inSwapAndLiquify;\n    bool live;\n    uint256 unlockMaxWallet;\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor() ERC20(_name, _symbol, _decimals) {\n        _mint(msg.sender, (_supply * 10**_decimals));\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(uniswapRouter);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\n        _isExcludedFromFee[msg.sender] = true;\n        _isExcludedFromFee[marketingWallet] = true;\n        _approve(msg.sender, uniswapRouter, _supply * 10** _decimals);\n    }\n\n    function startTrade() public onlyOwner{\n        require(!live, \"Trade already live!\");\n        live = true;\n        unlockMaxWallet = block.timestamp + 86400;\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(balanceOf(from) \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n\n        if(from != owner() \u0026\u0026 to != owner()){\n            require(live,\"Trading not open yet\");\n        }\n\n        if ((from == uniswapV2Pair || to == uniswapV2Pair) \u0026\u0026 !inSwapAndLiquify) {\n            if (from != uniswapV2Pair) {\n                uint256 contractLiquidityBalance = balanceOf(address(this)) - _marketingReserves;\n                if (contractLiquidityBalance \u003e= _numTokensSellToAddToLiquidity) {\n                    _swapAndLiquify(_numTokensSellToAddToLiquidity);\n                }\n                if ((_marketingReserves) \u003e= _numTokensSellToAddToETH) {\n                    _swapTokensForEth(_numTokensSellToAddToETH);\n                    _marketingReserves -= _numTokensSellToAddToETH;\n                    bool sent = payable(marketingWallet).send(address(this).balance);\n                    require(sent, \"Failed to send ETH\");\n                }\n            }\n\n            uint256 transferAmount;\n            if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n                transferAmount = amount;\n            } \n            else {\n                if(from == uniswapV2Pair \u0026\u0026 (unlockMaxWallet \u003e block.timestamp)){\n                        require((amount + balanceOf(to)) \u003c= (_supply * 10** _decimals) * maxWalletAmount / 100, \"ERC20: balance amount exceeded max wallet amount limit\");\n                }\n\n                uint256 marketingShare = ((amount * taxForMarketing) / 100);\n                uint256 liquidityShare = ((amount * taxForLiquidity) / 100);\n                transferAmount = amount - (marketingShare + liquidityShare);\n                _marketingReserves += marketingShare;\n\n                super._transfer(from, address(this), (marketingShare + liquidityShare));\n            }\n            super._transfer(from, to, transferAmount);\n        } \n        else {\n            super._transfer(from, to, amount);\n        }\n    }\n\n    function _swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        uint256 half = (contractTokenBalance / 2);\n        uint256 otherHalf = (contractTokenBalance - half);\n\n        uint256 initialBalance = address(this).balance;\n\n        _swapTokensForEth(half);\n\n        uint256 newBalance = (address(this).balance - initialBalance);\n\n        _addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            (block.timestamp + 300)\n        );\n    }\n\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount)\n        private\n        lockTheSwap\n    {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            address(0xdead),\n            block.timestamp\n        );\n    }\n\n    function changeMarketingWallet(address newWallet)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        marketingWallet = newWallet;\n        return true;\n    }\n\n    function changeTaxForLiquidityAndMarketing(uint256 _taxForLiquidity, uint256 _taxForMarketing)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        require((_taxForLiquidity+_taxForMarketing) \u003c= 100, \"ERC20: total tax must not be greater than 100\");\n        taxForLiquidity = _taxForLiquidity;\n        taxForMarketing = _taxForMarketing;\n\n        return true;\n    }\n\n    function changeMaxWalletAmount(uint256 _maxWalletAmount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        maxWalletAmount = _maxWalletAmount;\n\n        return true;\n    }\n\n    receive() external payable {}\n}"}}