{"DepositMod.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./IDepositContract.sol\";\n\ncontract BatchDepositMod {\n    IDepositContract public immutable depositContract;\n    \n    uint constant private pubkeyLength = 48;\n    uint constant private signatureLength = 96;\n    uint constant private depositDataRootLength = 32;\n    uint constant private depositArgsLength =\n        pubkeyLength +\n        signatureLength +\n        depositDataRootLength;\n\n    constructor(IDepositContract _depositContract) {\n        require(address(_depositContract) != address(0),\n                \"deposit contract\");\n        depositContract = _depositContract;   \n    }\n\n    function batchDeposit(uint validUntil, address withdrawAddress, bytes calldata args) external payable {\n        require(\n            block.timestamp \u003c validUntil,\n            \"deposit data agreed upon deadline\");\n        require(\n            args.length % depositArgsLength == 0,\n            \"wrong input\"\n        );\n        uint count = args.length / depositArgsLength;\n        require(msg.value % 32 ether == 0, \"value must be multiple of 32 ETH\");\n        require(msg.value / 32 ether == count, \"value must be 32 ETH * count\");\n\n        uint signatureStart;\n        uint depositDataRootStart;\n\n        bytes memory rawWithdrawAuthority = abi.encodePacked(hex\"010000000000000000000000\", withdrawAddress);\n        bytes32 depositDataRoot;\n        uint depositDataRootEnd;\n\n        for (uint pubkeyStart = 0; pubkeyStart \u003c args.length; ) {\n            unchecked\n            {\n                signatureStart =  pubkeyStart + pubkeyLength;\n                depositDataRootStart = signatureStart + signatureLength;\n            }\n    \n            unchecked { depositDataRootEnd = depositDataRootStart + depositDataRootLength; }\n            depositDataRoot = bytes32(args[depositDataRootStart : depositDataRootEnd]);\n\n            depositContract.deposit{value: 32 ether}(\n                args[pubkeyStart : signatureStart],\n                rawWithdrawAuthority,\n                args[signatureStart : depositDataRootStart],\n                depositDataRoot\n            );\n            pubkeyStart = depositDataRootEnd;\n        }\n    }\n}"},"IDepositContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// This interface is designed to be compatible with the Vyper version.\n/// @notice This is the Ethereum 2.0 deposit contract interface.\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\ninterface IDepositContract {\n    /// @notice A processed deposit event.\n    event DepositEvent(\n        bytes pubkey,\n        bytes withdrawal_credentials,\n        bytes amount,\n        bytes signature,\n        bytes index\n    );\n\n    /// @notice Submit a Phase 0 DepositData object.\n    /// @param pubkey A BLS12-381 public key.\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\n    /// @param signature A BLS12-381 signature.\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\n    /// Used as a protection against malformed input.\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n    /// @notice Query the current deposit root hash.\n    /// @return The deposit root hash.\n    function get_deposit_root() external view returns (bytes32);\n\n    /// @notice Query the current deposit count.\n    /// @return The deposit count encoded as a little endian 64-bit number.\n    function get_deposit_count() external view returns (bytes memory);\n}"}}