
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/rarible/IRaribleExchangeV2.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import './LibAsset.sol';
import './LibOrder.sol';

// https://github.com/rarible/protocol-contracts/blob/822142af31e15c8f81f59b47a57d4923141498ae/exchange-v2/contracts/ExchangeV2Core.sol
interface IRaribleExchangeV2 {
    event Match(
        bytes32 leftHash,
        bytes32 rightHash,
        address leftMaker,
        address rightMaker,
        uint newLeftFill,
        uint newRightFill,
        LibAsset.AssetType leftAsset,
        LibAsset.AssetType rightAsset
    );

    function matchOrders(
        LibOrder.Order memory orderLeft,
        bytes memory signatureLeft,
        LibOrder.Order memory orderRight,
        bytes memory signatureRight
    ) external payable;
}


// File: contracts/rarible/LibAsset.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// https://github.com/rarible/protocol-contracts/blob/%40rarible/exchange-v2%400.4.0/asset/contracts/LibAsset.sol
library LibAsset {
    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256('ETH'));
    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256('ERC20'));
    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256('ERC721'));
    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256('ERC1155'));
    bytes4 public constant COLLECTION = bytes4(keccak256('COLLECTION'));
    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256('CRYPTO_PUNKS'));

    bytes32 constant ASSET_TYPE_TYPEHASH =
        keccak256('AssetType(bytes4 assetClass,bytes data)');

    bytes32 constant ASSET_TYPEHASH =
        keccak256(
            'Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)'
        );

    struct AssetType {
        bytes4 assetClass;
        bytes data;
    }

    struct Asset {
        AssetType assetType;
        uint value;
    }

    function hash(AssetType memory assetType) internal pure returns (bytes32) {
        return
            keccak256(
                abi.encode(
                    ASSET_TYPE_TYPEHASH,
                    assetType.assetClass,
                    keccak256(assetType.data)
                )
            );
    }

    function hash(Asset memory asset) internal pure returns (bytes32) {
        return
            keccak256(
                abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value)
            );
    }
}


// File: contracts/rarible/LibOrder.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import './LibAsset.sol';
import './LibOrderDataV2.sol';

// https://github.com/rarible/protocol-contracts/blob/822142af31e15c8f81f59b47a57d4923141498ae/exchange-v2/contracts/LibOrder.sol
library LibOrder {
    struct Order {
        address maker;
        LibAsset.Asset makeAsset;
        address taker;
        LibAsset.Asset takeAsset;
        uint salt;
        uint start;
        uint end;
        bytes4 dataType;
        bytes data;
    }

    function hashKey(Order memory order) internal pure returns (bytes32) {
        //order.data is in hash for V2 orders
        if (order.dataType == LibOrderDataV2.V2) {
            return
                keccak256(
                    abi.encode(
                        order.maker,
                        LibAsset.hash(order.makeAsset.assetType),
                        LibAsset.hash(order.takeAsset.assetType),
                        order.salt,
                        order.data
                    )
                );
        } else {
            return
                keccak256(
                    abi.encode(
                        order.maker,
                        LibAsset.hash(order.makeAsset.assetType),
                        LibAsset.hash(order.takeAsset.assetType),
                        order.salt
                    )
                );
        }
    }
}


// File: contracts/rarible/LibOrderDataV1.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import './LibPart.sol';

// https://github.com/rarible/protocol-contracts/blob/%40rarible/exchange-v2%400.4.0/exchange-v2/contracts/LibOrderDataV1.sol
library LibOrderDataV1 {
    bytes4 public constant V1 = bytes4(keccak256('V1'));

    struct DataV1 {
        LibPart.Part[] payouts;
        LibPart.Part[] originFees;
    }
}


// File: contracts/rarible/LibOrderDataV2.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import './LibPart.sol';

library LibOrderDataV2 {
    bytes4 public constant V2 = bytes4(keccak256('V2'));

    struct DataV2 {
        LibPart.Part[] payouts;
        LibPart.Part[] originFees;
        bool isMakeFill;
    }
}


// File: contracts/rarible/LibPart.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// https://github.com/rarible/protocol-contracts/blob/%40rarible/exchange-v2%400.4.0/royalties/contracts/LibPart.sol
library LibPart {
    struct Part {
        address payable account;
        uint96 value;
    }
}


// File: contracts/RaribleExchangeV2Wrapper.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import './rarible/IRaribleExchangeV2.sol';
import './rarible/LibOrderDataV1.sol';
import '@openzeppelin/contracts/token/ERC20/IERC20.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';

contract RaribleExchangeV2Wrapper is ReentrancyGuard {
    /**
     * @dev Public immutable state
     */

    IRaribleExchangeV2 public immutable RARIBLE_EXCHANGE_V2;
    address public immutable RARIBLE_ERC20_PROXY;

    /**
     * @dev Constructor
     */

    constructor(address raribleExchangeV2_, address raribleERC20Proxy_) {
        RARIBLE_EXCHANGE_V2 = IRaribleExchangeV2(raribleExchangeV2_);
        RARIBLE_ERC20_PROXY = raribleERC20Proxy_;
    }

    /**
     * @dev Errors
     */

    error ERC20TransferFromFailed(
        address erc20,
        address from,
        address to,
        uint256 value
    );
    error ERC20ApproveFailed(address erc20, address spender, uint256 value);

    error RaribleExchangeV2AssetNotCompatible(bytes4 assetClass);

    /**
     * @dev Structs
     */

    struct Item {
        LibOrder.Order orderLeft;
        uint256 orderLeftQuantity;
        bytes signatureLeft;
        uint256 fillQuantity;
    }

    /**
     * @dev Public functions
     */

    function checkout(Item[] calldata items_) external payable nonReentrant {
        for (uint i = 0; i < items_.length; i++) {
            Item calldata _item = items_[i];
            LibOrder.Order
                memory _orderRight = raribleExchangeV2ConstructOrderRight(
                    _item
                );
            raribleExchangeV2MatchOrders(
                _item.orderLeft,
                _item.signatureLeft,
                _orderRight,
                '' // signatureRight
            );
        }

        // send back remaining ETH balance
        uint _ethBalance = address(this).balance;
        if (_ethBalance > 0) {
            payable(msg.sender).transfer(_ethBalance);
        }
    }

    /**
     * @dev Private functions
     */

    function raribleExchangeV2ConstructOrderRight(
        Item calldata item_
    ) private view returns (LibOrder.Order memory) {
        LibPart.Part[] memory _payouts = new LibPart.Part[](1);
        _payouts[0] = LibPart.Part(payable(msg.sender), 10_000);
        LibPart.Part[] memory _originsFees;
        return
            LibOrder.Order(
                address(this), // maker
                LibAsset.Asset( // makeAsset
                    item_.orderLeft.takeAsset.assetType,
                    (item_.orderLeft.takeAsset.value /
                        item_.orderLeftQuantity) * item_.fillQuantity
                ),
                address(0), // taker
                LibAsset.Asset( // takeAsset
                    item_.orderLeft.makeAsset.assetType,
                    (item_.orderLeft.makeAsset.value /
                        item_.orderLeftQuantity) * item_.fillQuantity
                ),
                0, // salt
                0, // start
                0, // end
                LibOrderDataV1.V1, // dataType
                abi.encode(LibOrderDataV1.DataV1(_payouts, _originsFees)) // data
            );
    }

    function raribleExchangeV2MatchOrders(
        LibOrder.Order memory orderLeft_,
        bytes memory signatureLeft_,
        LibOrder.Order memory orderRight_,
        bytes memory signatureRight_
    ) private {
        uint256 _ethValue = 0;
        if (
            orderRight_.makeAsset.assetType.assetClass ==
            LibAsset.ERC20_ASSET_CLASS
        ) {
            // decode asset
            address _tokenAddress = abi.decode(
                orderRight_.makeAsset.assetType.data,
                (address)
            );
            uint256 value = orderRight_.makeAsset.value;

            // transfer ERC20 to this contract
            if (
                IERC20(_tokenAddress).transferFrom(
                    msg.sender,
                    address(this),
                    value
                ) == false
            )
                revert ERC20TransferFromFailed(
                    _tokenAddress,
                    msg.sender,
                    address(this),
                    value
                );

            // setup allowance to ERC20 proxy
            if (
                IERC20(_tokenAddress).approve(
                    RARIBLE_ERC20_PROXY,
                    type(uint256).max
                ) == false
            )
                revert ERC20ApproveFailed(
                    _tokenAddress,
                    RARIBLE_ERC20_PROXY,
                    type(uint256).max
                );
        } else if (
            orderRight_.makeAsset.assetType.assetClass ==
            LibAsset.ETH_ASSET_CLASS
        ) {
            // set eth value to be sent to exchange
            _ethValue = orderRight_.makeAsset.value;
        } else {
            revert RaribleExchangeV2AssetNotCompatible(
                orderRight_.makeAsset.assetType.assetClass
            );
        }

        // execute match orders on Rarible Exchange V2
        RARIBLE_EXCHANGE_V2.matchOrders{value: _ethValue}(
            orderLeft_,
            signatureLeft_,
            orderRight_,
            signatureRight_
        );
    }
}

