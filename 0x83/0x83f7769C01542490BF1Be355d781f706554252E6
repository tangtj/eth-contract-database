
// File: aaa_flattened.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract AQUA_LendingPool is Ownable {
    struct OrderDetail {
        uint256 id;
        address payToken;
        uint256 payAmount;
        address borrowToken;
        uint256 borrowedAmount;
        uint256 startTime;
        uint256 lockPeriod;
    }

    struct User {
        uint256 aquaBalance;
        uint256 saquaBalance;
        uint256 ethBalance;
        mapping(uint256 => OrderDetail) orders;
        uint256 orderCount;
    }

    mapping(address => User) public users;

    address public aquaToken;
    address public saquaToken;
    address public usdtToken;
    address public usdcToken;
    address public taoToken;

    uint256 public totalAqua;
    uint256 public totalSaqua;

    uint256 public feeInUsd = 50 ;

    uint256 public borrowedTotalUsdt;
    uint256 public borrowedTotalUsdc;
    uint256 public borrowedTotalTao;
    uint256 public borrowedTotalEth;

    uint256 public constant MARGIN_FACTOR = 2;

    uint256 public lockPeriod = 30 days;

    event Deposit(address indexed user, uint256 amount, address indexed token);
    event Borrow(
        address indexed user,
        uint256 orderId,
        uint256 amount,
        address indexed token
    );
    event Repay(address indexed user, uint256 amount, address indexed token);

    AggregatorV3Interface internal priceFeed;

    constructor(
        address _aquaToken,
        address _saquaToken,
        address _usdtToken,
        address _usdcToken,
        address _taoToken,
        address _priceFeed
    ) {
        aquaToken = _aquaToken;
        saquaToken = _saquaToken;
        usdtToken = _usdtToken;
        usdcToken = _usdcToken;
        taoToken = _taoToken;
        priceFeed = AggregatorV3Interface(_priceFeed);
    }

 

    function setLockPeriod(uint256 _lockPeriod) external onlyOwner {
        lockPeriod = _lockPeriod;
    }

    function getLatestETHPrice() public view returns (uint256) {
        (, int256 price, , , ) = priceFeed.latestRoundData();
        return uint256(price);
    }

    function calculateFeeInEth() public view returns (uint256) {
        uint256 ethPriceInUsd = getLatestETHPrice();
        return (feeInUsd * 10**8) / ethPriceInUsd;
    }

    function BorrowPool_USDT(uint256 amount, address token) external payable {
        uint256 feeInEth = calculateFeeInEth();
        require(msg.value >= feeInEth, "Insufficient ETH for fee");
        require(token == aquaToken || token == saquaToken, "Invalid token");

        require(amount > 0, "Amount must be greater than 0");
        IERC20(token).transferFrom(msg.sender, address(this), amount);

        User storage user = users[msg.sender];

        if (token == aquaToken) {
            user.aquaBalance += amount;
            totalAqua += amount;
        } else if (token == saquaToken) {
            user.saquaBalance += amount;
            totalSaqua += amount;
        }

        uint256 orderId = user.orderCount;
        uint256 borrowLimit = (amount / MARGIN_FACTOR) / (10**12); // Adjusting for 6 decimals

        IERC20(usdtToken).transfer(msg.sender, borrowLimit);
        borrowedTotalUsdt += borrowLimit;
        user.orders[orderId] = OrderDetail(
            orderId,
            token,
            amount,
            usdtToken,
            borrowLimit,
            block.timestamp,
            lockPeriod
        );
        user.orderCount++;

        emit Borrow(msg.sender, orderId, borrowLimit, usdtToken);
    }

    function BorrowPool_USDC(uint256 amount, address token) external payable {
        uint256 feeInEth = calculateFeeInEth();
        require(msg.value >= feeInEth, "Insufficient ETH for fee");
        require(token == aquaToken || token == saquaToken, "Invalid token");
        require(amount > 0, "Amount must be greater than 0");
        IERC20(token).transferFrom(msg.sender, address(this), amount);

        User storage user = users[msg.sender];

        if (token == aquaToken) {
            user.aquaBalance += amount;
            totalAqua += amount;
        } else if (token == saquaToken) {
            user.saquaBalance += amount;
            totalSaqua += amount;
        }

        uint256 orderId = user.orderCount;
        uint256 borrowLimit = (amount / MARGIN_FACTOR) / (10**12); // Adjusting for 6 decimals
        IERC20(usdcToken).transfer(msg.sender, borrowLimit);
        borrowedTotalUsdc += borrowLimit;
        user.orders[orderId] = OrderDetail(
            orderId,
            token,
            amount,
            usdcToken,
            borrowLimit,
            block.timestamp,
            lockPeriod
        );
        user.orderCount++;

        emit Borrow(msg.sender, orderId, borrowLimit, usdcToken);
    }

    function BorrowPool_ETH(uint256 amount, address token) external payable {
        uint256 feeInEth = calculateFeeInEth();
        require(msg.value >= feeInEth, "Insufficient ETH for fee");
        require(token == aquaToken || token == saquaToken, "Invalid token");
        require(amount > 0, "Amount must be greater than 0");
        IERC20(token).transferFrom(msg.sender, address(this), amount);

        User storage user = users[msg.sender];

        if (token == aquaToken) {
            user.aquaBalance += amount;
            totalAqua += amount;
        } else if (token == saquaToken) {
            user.saquaBalance += amount;
            totalSaqua += amount;
        }

        uint256 orderId = user.orderCount;
        uint256 ethPriceInUsd = getLatestETHPrice();
        uint256 borrowLimitInUsd = (amount / 10**18) / MARGIN_FACTOR;      
        uint256 borrowLimitInEth = (borrowLimitInUsd * 10**8) / ethPriceInUsd;  
     
        payable(msg.sender).transfer(borrowLimitInEth);
        borrowedTotalEth += borrowLimitInEth;

        user.orders[orderId] = OrderDetail(
            orderId,
            token,
            amount,
            address(0),
            borrowLimitInEth,
            block.timestamp,
            lockPeriod
        );
        user.orderCount++;

        emit Borrow(msg.sender, orderId, borrowLimitInEth, address(0));
    }

    function BorrowPool_TAO(uint256 amount, address token) external payable {
        uint256 feeInEth = calculateFeeInEth();
        require(msg.value >= feeInEth, "Insufficient ETH for fee");
        require(token == aquaToken || token == saquaToken, "Invalid token");
        require(amount > 0, "Amount must be greater than 0");
        IERC20(token).transferFrom(msg.sender, address(this), amount);

        User storage user = users[msg.sender];

        if (token == aquaToken) {
            user.aquaBalance += amount;
            totalAqua += amount;
        } else if (token == saquaToken) {
            user.saquaBalance += amount;
            totalSaqua += amount;
        }

        uint256 orderId = user.orderCount;
        uint256 borrowLimit = (amount / MARGIN_FACTOR) / (10**9); // Adjusting for 9 decimals
        IERC20(taoToken).transfer(msg.sender, borrowLimit);
        borrowedTotalTao += borrowLimit;
        user.orders[orderId] = OrderDetail(
            orderId,
            token,
            amount,
            taoToken,
            borrowLimit,
            block.timestamp,
            lockPeriod
        );
        user.orderCount++;

        emit Borrow(msg.sender, orderId, borrowLimit, taoToken);
    }

    function repay_USDT(uint256 orderId) external {
        User storage user = users[msg.sender];
        OrderDetail memory order = user.orders[orderId];

        require(
            block.timestamp >= order.startTime + order.lockPeriod,
            "Order is locked"
        );

        uint256 amount = order.borrowedAmount;
        IERC20(usdtToken).transferFrom(msg.sender, address(this), amount);

        IERC20(order.payToken).transfer(msg.sender, order.payAmount);
        delete user.orders[orderId];

        emit Repay(msg.sender, amount, usdtToken);
    }

    function repay_USDC(uint256 orderId) external {
        User storage user = users[msg.sender];
        OrderDetail memory order = user.orders[orderId];

        require(
            block.timestamp >= order.startTime + order.lockPeriod,
            "Order is locked"
        );

        uint256 amount = order.borrowedAmount;
        IERC20(usdcToken).transferFrom(msg.sender, address(this), amount);

        IERC20(order.payToken).transfer(msg.sender, order.payAmount);
        delete user.orders[orderId];

        emit Repay(msg.sender, amount, usdcToken);
    }

    function repay_ETH(uint256 orderId) external payable {
        User storage user = users[msg.sender];
        OrderDetail memory order = user.orders[orderId];

        require(
            block.timestamp >= order.startTime + order.lockPeriod,
            "Order is locked"
        );

        uint256 amount = order.borrowedAmount;
        payable(address(this)).transfer(msg.value);

        IERC20(order.payToken).transfer(msg.sender, order.payAmount);
        delete user.orders[orderId];

        emit Repay(msg.sender, amount, address(0));
    }

    function getUserOrders(address userAddress)
        external
        view
        returns (OrderDetail[] memory)
    {
        User storage user = users[userAddress];
        OrderDetail[] memory orders = new OrderDetail[](user.orderCount);

        for (uint256 i = 0; i < user.orderCount; i++) {
            orders[i] = user.orders[i];
        }

        return orders;
    }

    function withdrawToken(address _token, uint256 _amount) external onlyOwner {
        IERC20(_token).transfer(msg.sender, _amount);
    }

    function withdrawEther(uint256 _amount) external onlyOwner {
        payable(msg.sender).transfer(_amount);
    }

    function setFeeInUsd(uint256 _feeInUsd) external onlyOwner {
    feeInUsd = _feeInUsd;
}

    receive() external payable {}
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(
    uint80 _roundId
  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);

  function latestRoundData()
    external
    view
    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

