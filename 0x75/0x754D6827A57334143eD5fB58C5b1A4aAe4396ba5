
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/domain-governer/VerifiedTldHub.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/access/Ownable.sol";

contract VerifiedTldHub is Ownable {

    struct TldInfo {
        string tld;
        uint256 identifier;
        uint256 chainId;
        address registry;
    }

    struct chainInfo {
        uint256 chainId;
        string defaultRpc;
        address sann;
    }

    struct completeTldInfo {
        string tld;
        uint256 identifier;
        uint256 chainId;
        string defaultRpc;
        address registry;
        address sann;
    }

    mapping(string => TldInfo) private tldInfos;
    mapping(uint256 => string[]) private chainTlds;
    mapping(uint256 => chainInfo) private chainInfos;
    string[] private tlds;


    constructor(){}

    function updateTldInfo(string calldata tldName, uint256 identifier, uint256 chainId, address registry) public onlyOwner {
        if (tldInfos[tldName].identifier == 0 && tldInfos[tldName].chainId == 0 && tldInfos[tldName].registry == address(0)) {
            tlds.push(tldName);
            chainTlds[chainId].push(tldName);
        }
        tldInfos[tldName] = TldInfo(tldName, identifier, chainId, registry);
    }

    function removeTldInfo(uint256 chainId, string calldata tldName) public onlyOwner {
        delete tldInfos[tldName];
        for (uint i = 0; i < tlds.length; i++) {
            if (keccak256(abi.encodePacked(tlds[i])) == keccak256(abi.encodePacked(tldName))) {
                tlds[i] = tlds[tlds.length - 1];
                tlds.pop();
                break;
            }
        }
        for (uint i = 0; i < chainTlds[chainId].length; i++) {
            if (keccak256(abi.encodePacked(chainTlds[chainId][i])) == keccak256(abi.encodePacked(tldName))) {
                chainTlds[chainId][i] = chainTlds[chainId][chainTlds[chainId].length - 1];
                chainTlds[chainId].pop();
                break;
            }
        }
    }

    function updateChainInfo(uint256 chainId, string calldata defaultRpc, address sann) public onlyOwner {
        chainInfos[chainId] = chainInfo(chainId, defaultRpc, sann);
    }

    function updateDefaultRpc(uint256 chainId, string calldata defaultRpc) public onlyOwner {
        chainInfos[chainId].defaultRpc = defaultRpc;
    }

    function getChainTlds(uint256 chainId) public view returns (string[] memory) {
        string[] memory tldList = new string[](chainTlds[chainId].length);
        for (uint i = 0; i < chainTlds[chainId].length; i++) {
            tldList[i] = chainTlds[chainId][i];
        }
        return tldList;
    }

    function getTlds() public view returns (string[] memory) {
        return tlds;
    }

    function getChainInfo(uint256 chainId) public view returns (chainInfo memory) {
        return chainInfos[chainId];
    }

    function getTldInfo(string[] calldata tldList) public view returns (completeTldInfo[] memory) {
        completeTldInfo[] memory infos = new completeTldInfo[](tldList.length);
        for (uint i = 0; i < tldList.length; i++) {
            string memory tld = tldList[i];
            uint256 chainId = tldInfos[tldList[i]].chainId;
            uint256 identifier = tldInfos[tldList[i]].identifier;
            address registry = tldInfos[tldList[i]].registry;
            infos[i] = completeTldInfo(tld, identifier, chainId, chainInfos[chainId].defaultRpc, registry, chainInfos[chainId].sann);
        }
        return infos;
    }
}
