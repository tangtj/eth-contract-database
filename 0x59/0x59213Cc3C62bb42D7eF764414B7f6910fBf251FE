
// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/ContextUpgradeable.sol";
import {Initializable} from "../proxy/utils/Initializable.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal onlyInitializing {
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal onlyInitializing {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.2;

import "../../utils/AddressUpgradeable.sol";

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```solidity
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 *
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized != type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;
import {Initializable} from "../proxy/utils/Initializable.sol";

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal onlyInitializing {
    }

    function __Context_init_unchained() internal onlyInitializing {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/StorageSlot.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)
// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.

pragma solidity ^0.8.0;

/**
 * @dev Library for reading and writing primitive types to specific storage slots.
 *
 * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
 * This library helps with reading and writing to such slots without the need for inline assembly.
 *
 * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.
 *
 * Example usage to set ERC1967 implementation slot:
 * ```solidity
 * contract ERC1967 {
 *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
 *
 *     function _getImplementation() internal view returns (address) {
 *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
 *     }
 *
 *     function _setImplementation(address newImplementation) internal {
 *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
 *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
 *     }
 * }
 * ```
 *
 * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._
 * _Available since v4.9 for `string`, `bytes`._
 */
library StorageSlot {
    struct AddressSlot {
        address value;
    }

    struct BooleanSlot {
        bool value;
    }

    struct Bytes32Slot {
        bytes32 value;
    }

    struct Uint256Slot {
        uint256 value;
    }

    struct StringSlot {
        string value;
    }

    struct BytesSlot {
        bytes value;
    }

    /**
     * @dev Returns an `AddressSlot` with member `value` located at `slot`.
     */
    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.
     */
    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.
     */
    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.
     */
    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `StringSlot` with member `value` located at `slot`.
     */
    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.
     */
    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := store.slot
        }
    }

    /**
     * @dev Returns an `BytesSlot` with member `value` located at `slot`.
     */
    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.
     */
    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := store.slot
        }
    }
}


// File: contracts/logic/Commitments.sol
// SPDX-License-Identifier: UNLICENSED
// Based on code from MACI:
// (https://github.com/appliedzkp/maci/blob/7f36a915244a6e8f98bacfe255f8bd44193e7919/contracts/sol/IncrementalMerkleTree.sol)
pragma solidity 0.8.23;

import { Initializable } from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

import { SNARK_SCALAR_FIELD } from "./Globals.sol";
import { PoseidonT3 } from "./PoseidonT3.sol";

/// @title Commitments
/// @author DOP Team
/// @notice Batch Incremental Merkle Tree for commitments
/// @dev Publicly accessible functions to be put in DOPLogic. Relevant external contract calls should be in those functions, not here
contract Commitments is Initializable {
    // The tree depth
    uint256 internal constant _TREE_DEPTH = 16;

    // Tree zero value
    bytes32 public constant ZERO_VALUE = bytes32(uint256(keccak256("DOP")) % SNARK_SCALAR_FIELD);

    // The Merkle root
    bytes32 public merkleRoot;

    // Store new tree root to quickly migrate to a new tree
    bytes32 private _newMerkleRoot;

    // Next leaf index (number of inserted leaves in the current tree)
    uint256 public nextLeafIndex;

    // Tree number
    uint256 public treeNumber;

    // Commitment nullifiers (tree number -> nullifier -> seen)
    mapping(uint256 => mapping(bytes32 => bool)) public nullifiers;

    // The Merkle path to the leftmost leaf upon initialization. It SHOULD NOT be modified after it has been set by the initialize function.
    // Caching these values is essential to efficient appends
    bytes32[_TREE_DEPTH] public zeros;

    // Right-most elements at each level. Used for efficient updates of the merkle tree
    bytes32[_TREE_DEPTH] private _rightMostLeafAtLevel;

    // Whether the contract has already seen a particular Merkle tree root
    // treeNumber -> root -> seen
    mapping(uint256 => mapping(bytes32 => bool)) public rootHistory;

    /// @notice Gets tree number that new commitments will get inserted to
    /// @param newCommitments number of new commitments
    /// @return treeNumber, startingIndex
    function getInsertionTreeNumberAndStartingIndex(uint256 newCommitments) public view returns (uint256, uint256) {
        if ((nextLeafIndex + newCommitments) > (2 ** _TREE_DEPTH)) {
            return (treeNumber + 1, 0);
        }

        return (treeNumber, nextLeafIndex);
    }

    /// @notice Hash 2 uint256 values
    /// @param left Left side of hash
    /// @param right Right side of hash
    /// @return hash result
    function hashLeftRight(bytes32 left, bytes32 right) public pure returns (bytes32) {
        return PoseidonT3.poseidon([left, right]);
    }

    /// @dev Calculates initial values for Merkle Tree
    function _initializeCommitments() internal onlyInitializing {
        zeros[0] = ZERO_VALUE;
        bytes32 currentZero = ZERO_VALUE;

        for (uint256 i = 0; i < _TREE_DEPTH; ++i) {
            zeros[i] = currentZero;
            _rightMostLeafAtLevel[i] = currentZero;
            currentZero = hashLeftRight(currentZero, currentZero);
        }
        _newMerkleRoot = merkleRoot = currentZero;
        rootHistory[treeNumber][currentZero] = true;
    }

    /// @dev Calculates initial values for Merkle Tree
    /// @dev Insert leaves into the current merkle tree
    /// Note: this function INTENTIONALLY causes side effects to save on gas. leafHashes and count should never be reused.
    /// @param leaves array of leaf hashes to be added to the merkle tree
    function _addLeaves(bytes32[] memory leaves) internal {
        uint256 leafCount = leaves.length;
        if (leafCount == 0) {
            return;
        }
        if ((nextLeafIndex + leafCount) > (2 ** _TREE_DEPTH)) {
            _startNewTree();
        }
        uint256 insertionIndex = nextLeafIndex;
        nextLeafIndex += leafCount;
        uint256 nextLevelIndex;
        uint256 nextLevelStartingIndex;

        for (uint256 level = 0; level < _TREE_DEPTH; ++level) {
            nextLevelStartingIndex = insertionIndex >> 1;
            uint256 insertionElement = 0;

            if (insertionIndex % 2 == 1) {
                nextLevelIndex = (insertionIndex >> 1) - nextLevelStartingIndex;
                leaves[nextLevelIndex] = hashLeftRight(_rightMostLeafAtLevel[level], leaves[insertionElement]);
                ++insertionElement;
                ++insertionIndex;
            }

            for (insertionElement; insertionElement < leafCount; insertionElement += 2) {
                bytes32 right;

                if (insertionElement < leafCount - 1) {
                    right = leaves[insertionElement + 1];
                } else {
                    right = zeros[level];
                }

                if (insertionElement == leafCount - 1 || insertionElement == leafCount - 2) {
                    _rightMostLeafAtLevel[level] = leaves[insertionElement];
                }

                nextLevelIndex = (insertionIndex >> 1) - nextLevelStartingIndex;
                leaves[nextLevelIndex] = hashLeftRight(leaves[insertionElement], right);
                insertionIndex += 2;
            }
            insertionIndex = nextLevelStartingIndex;
            leafCount = nextLevelIndex + 1;
        }
        merkleRoot = leaves[0];
        rootHistory[treeNumber][merkleRoot] = true;
    }

    /// @dev Creates new merkle tree
    function _startNewTree() internal {
        merkleRoot = _newMerkleRoot;
        nextLeafIndex = 0;
        ++treeNumber;
    }

    uint256[50] private _gap;
}


// File: contracts/logic/DOPLogic.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { IERC721 } from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import { StorageSlot } from "@openzeppelin/contracts/utils/StorageSlot.sol";
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { Initializable } from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import { OwnableUpgradeable } from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

import { Commitments } from "./Commitments.sol";
// prettier-ignore
import {
    CommitmentCiphertext,
    CommitmentPreimage,
    IdenticalValue,
    InvalidAddress,
    EncryptCiphertext,
    SNARK_SCALAR_FIELD,
    TokenData,
    TokenType,
    Transaction,
    UnsafeVectors,
    DecryptType,
    UnsupportedToken
} from "./Globals.sol";
import { PoseidonT4 } from "./PoseidonT4.sol";
import { Protection } from "./Protection.sol";
import { TokenBlocklist } from "./TokenBlocklist.sol";
import { Verifier } from "./Verifier.sol";

/// @title DOP Logic
/// @author DOP Team
/// @notice Logic to process transactions
contract DOPLogic is Initializable, OwnableUpgradeable, Commitments, TokenBlocklist, Verifier {
    using SafeERC20 for IERC20;

    // Number of basis points that equal 100%
    uint120 private constant BASIS_POINTS = 10000;
    uint120 private constant MAX_ENCRYPT_FEE_BPS = 5000;
    uint120 private constant MAX_DECRYPT_FEE_BPS = 5000;

    // Max limit for transfer fee, in units of DOP
    uint120 private constant MAX_TRANSFEE_FEE = 100_000 * 10 ** 18;

    // Fee in basis points (bps)
    uint120 public encryptFeeBps;
    uint120 public decryptFeeBps;

    // Send/Transfer fee in units of DOP
    uint120 public transferFee;

    // Treasury contract
    address payable public treasury;

    // DOP token contract
    IERC20 public immutable dopToken;

    // Chainalysis Protection list
    Protection public protection;

    // Last event block - to assist with scanning
    uint256 public lastEventBlock;

    // Whether decrypting is enabled or disabled
    bool public decryptEnabled;

    // Safety vectors
    mapping(uint256 => bool) public snarkSafetyVector;

    // Token ID mapping
    mapping(bytes32 => TokenData) public tokenIDMapping;

    /// @dev Emitted when treasury is changed
    event TreasuryChange(address treasury);

    /// @dev Emitted when protection list is changed
    event ProtectionChange(Protection indexed protection);

    /// @dev Emitted when fee is changed
    event FeeChange(uint256 encryptFeeBps, uint256 transferFee, uint256 decryptFeeBps);

    /// @dev Emitted when tokens are transferred
    event Transact(uint256 treeNumber, uint256 startPosition, bytes32[] hash, CommitmentCiphertext[] ciphertext);

    /// @dev Emitted when adding a snark safety vector
    event VectorAdded(uint256 vector, bool state);

    /// @dev Emitted when removing a snark safety vector
    event VectorRemoved(uint256 vector, bool state);

    /// @dev Emitted when tokens are encrypted
    event Encrypt(
        uint256 treeNumber,
        uint256 startPosition,
        CommitmentPreimage[] commitments,
        EncryptCiphertext[] encryptCiphertext,
        uint256[] fees
    );

    /// @dev Emitted when tokens are decrypted
    event Decrypt(address to, TokenData token, uint256 amount, uint256 fee);

    /// @dev Emitted when any commitment is nullified
    event Nullified(uint16 treeNumber, bytes32[] nullifier);

    /// @dev Emitted when decrypt is enabled
    event DecryptEnabled();

    error InvalidCommitment(string reason);
    error InvalidDecrypt(string reason);
    error InvalidTransaction(string reason);
    error InvalidEncryptFee();
    error InvalidTransferFee();
    error InvalidDecryptFee();
    error ERC20TokenTransferFailed();
    error ERC721TokenTransferFailed();
    error NoteAlreadySpent();
    error DecryptDisabled();
    error DecryptAlreadyEnabled();

    /// @dev Constructor
    /// @param initToken The address of dop token
    constructor(IERC20 initToken) {
        if (address(initToken) == address(0)) {
            revert InvalidAddress();
        }

        dopToken = initToken;
    }

    /// @notice Change Protection list address, only callable by owner (governance contract)
    /// @param newProtection - Address of the new Protection list
    function changeProtection(Protection newProtection) external onlyOwner {
        _changeProtection(newProtection);
    }

    /// @notice Starts Decrypting
    function startDecrypt() external onlyOwner {
        if (decryptEnabled) {
            revert DecryptAlreadyEnabled();
        }

        decryptEnabled = true;

        emit DecryptEnabled();
    }

    /// @notice Safety check for badly behaving code
    function checkSafetyVectors() external {
        StorageSlot.getBooleanSlot(0x8dea8703c3cf94703383ce38a9c894669dccd4ca8e65ddb43267aa0248711450).value = true;
        bool result = false;

        // solhint-disable-next-line no-inline-assembly
        assembly {
            mstore(0, caller())
            mstore(32, snarkSafetyVector.slot)
            let hash := keccak256(0, 64)
            result := sload(hash)
        }

        if (!result) {
            revert UnsafeVectors();
        }
    }

    /// @notice Adds or Removes safety vector
    /// @param vector - Note to change state
    /// @param state - New state of note
    function updateVector(uint256 vector, bool state) external onlyOwner {
        if (state) {
            emit VectorAdded(vector, state);
        } else {
            emit VectorRemoved(vector, state);
        }

        snarkSafetyVector[vector] = state;
    }

    /// @notice Initialize DOP contract
    /// @dev OpenZeppelin initializer ensures this can only be called once. This function also calls initializers on inherited contracts
    /// @param initTreasury - Address to send usage fees to
    /// @param initProtection - Chainalysis Protection list
    /// @param initEncryptFee - Encrypt fee
    /// @param initDecryptFee - Decrypt fee
    /// @param owner - Governance contract
    function initializeDOPLogic(
        address payable initTreasury,
        Protection initProtection,
        uint120 initEncryptFee,
        uint120 initTransferFee,
        uint120 initDecryptFee,
        address owner
    ) public initializer {
        OwnableUpgradeable.__Ownable_init();
        Commitments._initializeCommitments();

        changeTreasury(initTreasury);
        _changeProtection(initProtection);
        changeFee(initEncryptFee, initTransferFee, initDecryptFee);

        OwnableUpgradeable.transferOwnership(owner);

        snarkSafetyVector[11991246288605609459798790887503763024866871101] = true;
        snarkSafetyVector[135932600361240492381964832893378343190771392134] = true;
        snarkSafetyVector[1165567609304106638376634163822860648671860889162] = true;
    }

    /// @notice Change treasury address, only callable by owner (governance contract)
    /// @dev This will change the address of the contract we're sending the fees to in the future. It won't transfer tokens
    /// already in the treasury
    /// @param newTreasury - Address of new treasury contract
    function changeTreasury(address payable newTreasury) public onlyOwner {
        if (newTreasury == address(0)) {
            revert InvalidAddress();
        }

        if (treasury == newTreasury) {
            revert IdenticalValue();
        }

        treasury = newTreasury;

        emit TreasuryChange({ treasury: newTreasury });
    }

    /// @notice Change fee rate for future transactions
    /// @param newEncryptFeeBps - Encrypt fee
    /// @param newTransferFee - Transfer fee,
    /// @param newDecryptFeeBps - Decrypt fee
    function changeFee(uint120 newEncryptFeeBps, uint120 newTransferFee, uint120 newDecryptFeeBps) public onlyOwner {
        if (encryptFeeBps != newEncryptFeeBps || transferFee != newTransferFee || decryptFeeBps != newDecryptFeeBps) {
            if (newEncryptFeeBps > MAX_ENCRYPT_FEE_BPS) {
                revert InvalidEncryptFee();
            }

            if (newDecryptFeeBps > MAX_DECRYPT_FEE_BPS) {
                revert InvalidDecryptFee();
            }

            if (newTransferFee > MAX_TRANSFEE_FEE) {
                revert InvalidTransferFee();
            }

            encryptFeeBps = newEncryptFeeBps;
            transferFee = newTransferFee;
            decryptFeeBps = newDecryptFeeBps;

            emit FeeChange({
                encryptFeeBps: newEncryptFeeBps,
                transferFee: newTransferFee,
                decryptFeeBps: newDecryptFeeBps
            });
        }
    }

    /// @notice Checks commitment ranges for validity
    /// @param note - Note to validate
    /// @return valid, reason
    function validateCommitmentPreimage(CommitmentPreimage calldata note) public view returns (bool, string memory) {
        if (note.value == 0) {
            return (false, "Invalid Note Value");
        }

        if (TokenBlocklist.tokenBlocklist[IERC20(note.token.tokenAddress)]) {
            return (false, "Unsupported Token");
        }

        if (uint256(note.npk) >= SNARK_SCALAR_FIELD) {
            return (false, "Invalid Note NPK");
        }

        if (note.token.tokenType == TokenType.ERC721 && note.value != 1) {
            return (false, "Invalid NFT Note Value");
        }

        if (protection.isSanctioned(msg.sender)) {
            return (false, "Call from Sanctioned Address");
        }

        return (true, "");
    }

    /// @notice Verifies transaction validity
    /// @param transaction - Transaction batch
    /// @return valid, reason
    function validateTransaction(Transaction calldata transaction) public view returns (bool, string memory) {
        if (tx.gasprice < transaction.boundParams.minGasPrice) {
            return (false, "Gas price too low");
        }

        if (
            transaction.boundParams.adaptContract != address(0) && transaction.boundParams.adaptContract != msg.sender
        ) {
            return (false, "Invalid Adapt Contract as Sender");
        }

        if (transaction.boundParams.chainID != block.chainid) {
            return (false, "ChainID mismatch");
        }

        if (!Commitments.rootHistory[transaction.boundParams.treeNumber][transaction.merkleRoot]) {
            return (false, "Invalid Merkle Root");
        }

        if (transaction.boundParams.decrypt != DecryptType.NONE) {
            if (!decryptEnabled) {
                revert DecryptDisabled();
            }
            // Ensure ciphertext length matches the commitments length (minus 1 for decrypt output)
            if (transaction.boundParams.commitmentCiphertext.length != transaction.commitments.length - 1) {
                return (false, "Invalid Note Ciphertext Array Length");
            }

            bytes32 hash;

            if (transaction.boundParams.decrypt == DecryptType.REDIRECT) {
                hash = hashCommitment(
                    CommitmentPreimage({
                        npk: bytes32(uint256(uint160(msg.sender))),
                        token: transaction.decryptPreimage.token,
                        value: transaction.decryptPreimage.value
                    })
                );
            } else {
                hash = hashCommitment(transaction.decryptPreimage);
            }

            if (hash != transaction.commitments[transaction.commitments.length - 1]) {
                return (false, "Invalid Withdraw Note");
            }
        } else {
            if (transaction.boundParams.commitmentCiphertext.length != transaction.commitments.length) {
                return (false, "Invalid Note Ciphertext Array Length");
            }
        }

        if (!Verifier.verify(transaction)) {
            return (false, "Invalid Snark Proof");
        }

        return (true, "");
    }

    /// @notice Get base and fee amount
    /// @param amount - Amount to calculate for
    /// @param isInclusive - Whether the amount passed in is inclusive of the fee
    /// @param feeBP - Fee basis points
    function getFee(uint136 amount, bool isInclusive, uint120 feeBP) public pure returns (uint120, uint120) {
        uint136 base;
        uint136 fee;

        if (isInclusive) {
            base = amount - (amount * feeBP) / BASIS_POINTS;
            fee = amount - base;
        } else {
            base = amount;
            fee = (BASIS_POINTS * base) / (BASIS_POINTS - feeBP) - base;
        }

        return (uint120(base), uint120(fee));
    }

    /// @notice Gets token ID value from tokenData
    /// @param tokenData - The token data
    function getTokenID(TokenData memory tokenData) public pure returns (bytes32) {
        if (tokenData.tokenType == TokenType.ERC20) {
            return bytes32(uint256(uint160(tokenData.tokenAddress)));
        }

        return bytes32(uint256(keccak256(abi.encode(tokenData))) % SNARK_SCALAR_FIELD);
    }

    /// @notice Hashes a commitment
    /// @param commitmentPreimage - Note to validate
    function hashCommitment(CommitmentPreimage memory commitmentPreimage) public pure returns (bytes32) {
        return
            PoseidonT4.poseidon(
                [
                    commitmentPreimage.npk,
                    getTokenID(commitmentPreimage.token),
                    bytes32(uint256(commitmentPreimage.value))
                ]
            );
    }

    /// @notice Sums number commitments in transaction batch
    /// @param transactions - Transaction batch
    function sumCommitments(Transaction[] calldata transactions) public pure returns (uint256) {
        uint256 length = transactions.length;
        uint256 commitments = 0;

        for (uint256 transactionIter = 0; transactionIter < length; ++transactionIter) {
            commitments += transactions[transactionIter].boundParams.commitmentCiphertext.length;
        }

        return commitments;
    }

    /// @dev Transfers tokens to contract and adjusts preimage with fee values
    /// @param note - Note to process
    /// @return adjusted Note, fee
    function _processEncrypt(CommitmentPreimage calldata note) internal returns (CommitmentPreimage memory, uint256) {
        (bool valid, string memory reason) = validateCommitmentPreimage(note);

        if (!valid) {
            revert InvalidCommitment(reason);
        }

        CommitmentPreimage memory adjustedNote;
        uint256 treasuryFee;

        if (note.token.tokenType == TokenType.ERC20) {
            IERC20 token = IERC20(address(uint160(note.token.tokenAddress)));
            (uint120 base, uint120 fee) = getFee(note.value, true, encryptFeeBps);
            treasuryFee = fee;

            adjustedNote = CommitmentPreimage({ npk: note.npk, value: base, token: note.token });
            uint256 balanceBefore = token.balanceOf(address(this));

            token.safeTransferFrom(address(msg.sender), address(this), base);
            uint256 balanceAfter = token.balanceOf(address(this));

            if (balanceAfter - balanceBefore != base) {
                revert ERC20TokenTransferFailed();
            }

            token.safeTransferFrom(address(msg.sender), treasury, fee);
        } else if (note.token.tokenType == TokenType.ERC721) {
            IERC721 token = IERC721(address(uint160(note.token.tokenAddress)));
            treasuryFee = 0;
            adjustedNote = note;
            tokenIDMapping[getTokenID(note.token)] = note.token;

            token.transferFrom(address(msg.sender), address(this), note.token.tokenSubID);

            if (token.ownerOf(note.token.tokenSubID) != address(this)) {
                revert ERC721TokenTransferFailed();
            }
        } else {
            revert UnsupportedToken();
        }

        return (adjustedNote, treasuryFee);
    }

    /// @dev Checks if a recipient address is eligible for an decrypt
    /// @param recipient - address to process
    function _validateDecrypt(address recipient) internal view returns (bool, string memory) {
        if (protection.isSanctioned(recipient)) {
            return (false, "Transfer to Sanctioned Address");
        }

        return (true, "");
    }

    /// @dev Transfers tokens to contract and adjusts preimage with fee values
    /// @param note - Note to process
    function _processDecrypt(CommitmentPreimage calldata note) internal {
        address recipient = address(uint160(uint256(note.npk)));
        (bool valid, string memory reason) = _validateDecrypt(recipient);

        if (!valid) {
            revert InvalidDecrypt(reason);
        }

        if (note.token.tokenType == TokenType.ERC20) {
            IERC20 token = IERC20(address(uint160(note.token.tokenAddress)));

            if (recipient != treasury) {
                (uint120 base, uint120 fee) = getFee(note.value, true, decryptFeeBps);
                token.safeTransfer(recipient, base);
                token.safeTransfer(treasury, fee);

                emit Decrypt({ to: recipient, token: note.token, amount: base, fee: fee });

                return;
            }
            token.safeTransfer(recipient, note.value);

            emit Decrypt({ to: recipient, token: note.token, amount: 0, fee: note.value });
        } else if (note.token.tokenType == TokenType.ERC721) {
            IERC721 token = IERC721(address(uint160(note.token.tokenAddress)));
            token.transferFrom(address(this), recipient, note.token.tokenSubID);

            emit Decrypt({ to: recipient, token: note.token, amount: 1, fee: 0 });
        } else {
            revert UnsupportedToken();
        }
    }

    /// @dev Accumulates transaction fields and nullifies nullifiers
    /// @param transaction - transaction to process
    /// @param commitments - commitments accumulator
    /// @param commitmentsStartOffset - number of commitments already in the accumulator
    /// @param ciphertext - commitment ciphertext accumulator, count will be identical to commitments accumulator
    /// @return New nullifier start offset, new commitments start offset
    function _processTransfer(
        Transaction calldata transaction,
        bytes32[] memory commitments,
        uint256 commitmentsStartOffset,
        CommitmentCiphertext[] memory ciphertext
    ) internal returns (uint256) {
        uint256 nullifierCount = transaction.nullifiers.length;
        for (uint256 nullifierIter = 0; nullifierIter < nullifierCount; ++nullifierIter) {
            if (Commitments.nullifiers[transaction.boundParams.treeNumber][transaction.nullifiers[nullifierIter]]) {
                revert NoteAlreadySpent();
            }

            Commitments.nullifiers[transaction.boundParams.treeNumber][transaction.nullifiers[nullifierIter]] = true;
        }

        emit Nullified({ treeNumber: transaction.boundParams.treeNumber, nullifier: transaction.nullifiers });

        uint256 commitmentCount = transaction.boundParams.commitmentCiphertext.length;
        for (uint256 commitmentsIter = 0; commitmentsIter < commitmentCount; ++commitmentsIter) {
            commitments[commitmentsStartOffset + commitmentsIter] = transaction.commitments[commitmentsIter];
            ciphertext[commitmentsStartOffset + commitmentsIter] = transaction.boundParams.commitmentCiphertext[
                commitmentsIter
            ];
        }

        return commitmentsStartOffset + commitmentCount;
    }

    /// @dev Internal logic for changing Protection list
    /// @param newProtection - Address of the new Protection list
    function _changeProtection(Protection newProtection) private {
        if (address(newProtection) == address(0)) {
            revert InvalidAddress();
        }

        if (protection == newProtection) {
            revert IdenticalValue();
        }

        protection = newProtection;

        emit ProtectionChange({ protection: newProtection });
    }

    uint256[50] private _gap;
}


// File: contracts/logic/DOPSmartWallet.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

import { DOPLogic, IERC20 } from "./DOPLogic.sol";
// prettier-ignore
import {
    CommitmentPreimage,
    CommitmentCiphertext,
    EncryptCiphertext,
    DecryptType,
    Transaction,
    EncryptRequest,
    InvalidFeeAmount,
    InvalidTransactionData
} from "./Globals.sol";

/// @title DOP Smart Wallet
/// @author DOP Team
/// @notice DOP private smart wallet
/// @dev Entry point for processing private meta-transactions
contract DOPSmartWallet is DOPLogic {
    /// @dev Constructor
    /// @param initToken The address of dop token
    constructor(IERC20 initToken) DOPLogic(initToken) {}

    /// @notice Encrypts requested amount and token, creates a commitment hash from supplied values and adds to tree
    /// @param encryptRequests List of commitments to encrypt
    function encrypt(EncryptRequest[] calldata encryptRequests) external {
        uint256 length = encryptRequests.length;
        bytes32[] memory insertionLeaves = new bytes32[](length);
        CommitmentPreimage[] memory commitments = new CommitmentPreimage[](length);
        EncryptCiphertext[] memory encryptCiphertext = new EncryptCiphertext[](length);
        uint256[] memory fees = new uint256[](length);

        for (uint256 notesIter = 0; notesIter < length; ++notesIter) {
            (commitments[notesIter], fees[notesIter]) = _processEncrypt(encryptRequests[notesIter].preimage);
            insertionLeaves[notesIter] = hashCommitment(commitments[notesIter]);
            encryptCiphertext[notesIter] = encryptRequests[notesIter].ciphertext;
        }

        emit Encrypt({
            treeNumber: treeNumber,
            startPosition: nextLeafIndex,
            commitments: commitments,
            encryptCiphertext: encryptCiphertext,
            fees: fees
        });

        _addLeaves(insertionLeaves);

        lastEventBlock = block.number;
    }

    /// @notice Execute batch of DOP snark transactions
    /// @param transactions Transactions batch
    function transact(Transaction[] calldata transactions) external {
        address vault = treasury;
        uint256 transferCount = transactions.length;
        uint256 treasuryBalanceBefore;
        uint256 feeOnTransfer = transferFee;

        if (transferCount == 0) {
            revert InvalidTransactionData();
        }

        if (feeOnTransfer != 0) {
            treasuryBalanceBefore = dopToken.balanceOf(vault);
        }

        uint256 commitmentsCount = sumCommitments(transactions);
        bytes32[] memory commitments = new bytes32[](commitmentsCount);
        uint256 commitmentsStartOffset = 0;
        CommitmentCiphertext[] memory ciphertext = new CommitmentCiphertext[](commitmentsCount);

        for (uint256 transactionIter = 0; transactionIter < transferCount; ++transactionIter) {
            (bool valid, string memory reason) = validateTransaction(transactions[transactionIter]);

            if (!valid) {
                revert InvalidTransaction(reason);
            }

            commitmentsStartOffset = _processTransfer(
                transactions[transactionIter],
                commitments,
                commitmentsStartOffset,
                ciphertext
            );
        }

        for (uint256 transactionIter = 0; transactionIter < transferCount; ++transactionIter) {
            if (transactions[transactionIter].boundParams.decrypt != DecryptType.NONE) {
                _processDecrypt(transactions[transactionIter].decryptPreimage);
            }
        }

        (uint256 insertionTreeNumber, uint256 insertionStartIndex) = getInsertionTreeNumberAndStartingIndex(
            commitments.length
        );

        if (commitments.length > 0) {
            emit Transact({
                treeNumber: insertionTreeNumber,
                startPosition: insertionStartIndex,
                hash: commitments,
                ciphertext: ciphertext
            });
        }

        _addLeaves(commitments);

        lastEventBlock = block.number;

        if (feeOnTransfer != 0) {
            uint256 treasuryBalanceAfter = dopToken.balanceOf(vault);
            uint256 fee = feeOnTransfer * transferCount;
            if (treasuryBalanceAfter < treasuryBalanceBefore + fee) {
                revert InvalidFeeAmount();
            }
        }
    }
}


// File: contracts/logic/Globals.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

error AccessDenied();
error ETHTransferFailed();
error IdenticalValue();
error InvalidAddress();
error UnsafeVectors();
error UnsupportedToken();
error InvalidFeeAmount();
error InvalidTransactionData();

uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

// Verification bypass address, can't be address(0) as many burn prevention mechanisms will disallow transfers to 0
// Use 0x000000000000000000000000000000000000dEaD as an alternative known burn address
// https://etherscan.io/address/0x000000000000000000000000000000000000dEaD
address constant VERIFICATION_BYPASS = 0x000000000000000000000000000000000000dEaD;

bytes32 constant ACCEPT_DOP_RESPONSE = keccak256(abi.encodePacked("Accept DOP Session"));

enum TokenType {
    ERC20,
    ERC721
}

enum DecryptType {
    NONE,
    NORMAL,
    REDIRECT
}

struct EncryptRequest {
    CommitmentPreimage preimage;
    EncryptCiphertext ciphertext;
}

struct TokenData {
    TokenType tokenType;
    address tokenAddress;
    uint256 tokenSubID;
}

struct CommitmentCiphertext {
    // Ciphertext order: IV & tag (16 bytes each), encodedMPK (senderMPK XOR receiverMPK), random & amount (16 bytes each), token
    bytes32[4] ciphertext;
    bytes32 blindedSenderViewingKey;
    bytes32 blindedReceiverViewingKey;
    // Only for sender to decrypt
    bytes annotationData;
    // Added to note ciphertext for decryption
    bytes memo;
}

struct EncryptCiphertext {
    // IV shared, tag, random & IV sender (16 bytes each), receiver viewing public key (32 bytes)
    bytes32[3] encryptedBundle;
    // Public key to generate shared key from
    bytes32 encryptKey;
}

struct BoundParams {
    uint16 treeNumber;
    // Only for type 0 transactions
    uint72 minGasPrice;
    DecryptType decrypt;
    uint64 chainID;
    address adaptContract;
    bytes32 adaptParams;
    // For decrypts do not include an element in ciphertext array
    // NOTE: Ciphertext array length = commitments decrypts
    CommitmentCiphertext[] commitmentCiphertext;
}

struct Transaction {
    SnarkProof proof;
    bytes32 merkleRoot;
    bytes32[] nullifiers;
    bytes32[] commitments;
    BoundParams boundParams;
    CommitmentPreimage decryptPreimage;
}

struct CommitmentPreimage {
    // Poseidon(Poseidon(spending public key, nullifying key), random)
    bytes32 npk;
    // Token field
    TokenData token;
    uint120 value;
}

struct G1Point {
    uint256 x;
    uint256 y;
}

// Encoding of field elements is: X[0] * z + X[1]
struct G2Point {
    uint256[2] x;
    uint256[2] y;
}

struct VerifyingKey {
    string artifactsIPFSHash;
    G1Point alpha1;
    G2Point beta2;
    G2Point gamma2;
    G2Point delta2;
    G1Point[] ic;
}

struct SnarkProof {
    G1Point a;
    G2Point b;
    G1Point c;
}


// File: contracts/logic/PoseidonT3.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

/// NOTE: Functions here are stubs for the solidity compiler to generate the right interface.
/// The deployed library is generated bytecode from the circomlib toolchain

library PoseidonT3 {
    function poseidon(bytes32[2] memory input) public pure returns (bytes32) {}
}


// File: contracts/logic/PoseidonT4.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

/// NOTE: Functions here are stubs for the solidity compiler to generate the right interface.
/// The deployed library is generated bytecode from the circomlib toolchain

library PoseidonT4 {
    function poseidon(bytes32[3] memory input) public pure returns (bytes32) {}
}


// File: contracts/logic/Protection.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

/// @title Protection
/// @author Chainalysis team
/// @notice List for sanctioned addresses
interface Protection {
    /// @notice Checks whether a given address is sanctioned or not
    /// @param addr - Address to process
    function isSanctioned(address addr) external view returns (bool);
}


// File: contracts/logic/Snark.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

import { G1Point, G2Point, VerifyingKey, SnarkProof, SNARK_SCALAR_FIELD } from "./Globals.sol";

library Snark {
    uint256 private constant _PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
    uint256 private constant _PAIRING_INPUT_SIZE = 24;
    uint256 private constant _PAIRING_INPUT_WIDTH = 768; // _PAIRING_INPUT_SIZE * 32

    error InvalidAddition();
    error InvalidInput();
    error InvalidMultiplication();
    error InvalidNegation();
    error InvalidPairing();

    /// @notice Adds 2 G1 points
    /// @return result
    function add(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory) {
        uint256[4] memory input;
        input[0] = p1.x;
        input[1] = p1.y;
        input[2] = p2.x;
        input[3] = p2.y;

        bool success;
        G1Point memory result;

        // solhint-disable-next-line no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0x80, result, 0x40)
        }

        if (!success) {
            revert InvalidAddition();
        }

        return result;
    }

    /// @notice Scalar multiplies two G1 points p, s
    /// @dev The product of a point on G1 and a scalar, i.e.
    /// p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all
    /// points p.
    /// @return r result
    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {
        uint256[3] memory input;
        input[0] = p.x;
        input[1] = p.y;
        input[2] = s;
        bool success;

        // solhint-disable-next-line no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x60, r, 0x40)
        }

        if (!success) {
            revert InvalidMultiplication();
        }
    }

    /// @notice Performs pairing check on points
    /// @dev The result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example,
    /// pairing([P1(), P1().negate()], [P2(), P2()]) should return true.
    /// @return if pairing check passed
    function pairing(
        G1Point memory a1,
        G2Point memory a2,
        G1Point memory b1,
        G2Point memory b2,
        G1Point memory c1,
        G2Point memory c2,
        G1Point memory d1,
        G2Point memory d2
    ) internal view returns (bool) {
        uint256[_PAIRING_INPUT_SIZE] memory input = [
            a1.x,
            a1.y,
            a2.x[0],
            a2.x[1],
            a2.y[0],
            a2.y[1],
            b1.x,
            b1.y,
            b2.x[0],
            b2.x[1],
            b2.y[0],
            b2.y[1],
            c1.x,
            c1.y,
            c2.x[0],
            c2.x[1],
            c2.y[0],
            c2.y[1],
            d1.x,
            d1.y,
            d2.x[0],
            d2.x[1],
            d2.y[0],
            d2.y[1]
        ];

        uint256[1] memory out;
        bool success;

        // solhint-disable-next-line no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, input, _PAIRING_INPUT_WIDTH, out, 0x20)
        }

        if (!success) {
            revert InvalidPairing();
        }

        return out[0] != 0;
    }

    /// @notice Verifies snark proof against proving key
    /// @param vk Verification Key
    /// @param proof snark proof
    /// @param inputs inputs
    function verify(
        VerifyingKey memory vk,
        SnarkProof memory proof,
        uint256[] memory inputs
    ) internal view returns (bool) {
        G1Point memory vkX = G1Point(0, 0);

        uint256 length = inputs.length;
        for (uint256 i = 0; i < length; ++i) {
            if (inputs[i] >= SNARK_SCALAR_FIELD) {
                revert InvalidInput();
            }

            vkX = add(vkX, scalarMul(vk.ic[i + 1], inputs[i]));
        }

        vkX = add(vkX, vk.ic[0]);

        return pairing(negate(proof.a), proof.b, vk.alpha1, vk.beta2, vkX, vk.gamma2, proof.c, vk.delta2);
    }

    /// @notice Computes the negation of point p
    /// @dev The negation of p, i.e. p.plus(p.negate()) should be zero.
    /// @return result
    function negate(G1Point memory p) internal pure returns (G1Point memory) {
        if (p.x == 0 && p.y == 0) {
            return G1Point(0, 0);
        }
        // check for valid points y^2 = x^3 +3 % _PRIME_Q
        uint256 rh = mulmod(p.x, p.x, _PRIME_Q); // x^2
        rh = mulmod(rh, p.x, _PRIME_Q); // x^3
        rh = addmod(rh, 3, _PRIME_Q); // x^3 + 3
        uint256 lh = mulmod(p.y, p.y, _PRIME_Q); // y^2

        if (lh != rh) {
            revert InvalidNegation();
        }

        return G1Point(p.x, _PRIME_Q - (p.y % _PRIME_Q));
    }
}


// File: contracts/logic/TokenBlocklist.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

import { OwnableUpgradeable } from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

/// @title Token Blocklist
/// @author DOP Team
/// @notice Blocklist of tokens that are incompatible with the protocol
/// @dev Tokens on this blocklist can't be encrypted to dop.
/// Tokens on this blocklist will still be transferrable internally (as internal transactions have a encrypted token ID) and
/// decryptable (to prevent user funds from being locked).
contract TokenBlocklist is OwnableUpgradeable {
    mapping(IERC20 => bool) public tokenBlocklist;

    /// @dev Emitted when token is added in blocklist
    event AddToBlocklist(IERC20 indexed token);

    /// @dev Emitted when token is removed from blocklist
    event RemoveFromBlocklist(IERC20 indexed token);

    /// @notice Adds tokens to Blocklist, only callable by owner (governance contract)
    /// @dev This function will ignore tokens that are already in the Blocklist no events will be emitted in this case
    /// @param tokens List of tokens to add to Blocklist
    function addToBlocklist(IERC20[] calldata tokens) external onlyOwner {
        uint256 length = tokens.length;
        for (uint256 i = 0; i < length; ++i) {
            IERC20 token = tokens[i];
            if (!tokenBlocklist[token]) {
                tokenBlocklist[token] = true;

                emit AddToBlocklist({ token: token });
            }
        }
    }

    /// @notice Removes token from blocklist, only callable by owner (governance contract)
    /// @dev This function will ignore tokens that aren't in the blocklist no events will be emitted in this case
    /// @param tokens List of tokens to remove from blocklist
    function removeFromBlocklist(IERC20[] calldata tokens) external onlyOwner {
        uint256 length = tokens.length;
        for (uint256 i = 0; i < length; ++i) {
            IERC20 token = tokens[i];
            if (tokenBlocklist[token]) {
                delete tokenBlocklist[token];

                emit RemoveFromBlocklist({ token: token });
            }
        }
    }

    uint256[50] private _gap;
}


// File: contracts/logic/Verifier.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

import { OwnableUpgradeable } from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

import { VERIFICATION_BYPASS, SnarkProof, Transaction, BoundParams, VerifyingKey, SNARK_SCALAR_FIELD } from "./Globals.sol";

import { Snark } from "./Snark.sol";

/// @title Verifier
/// @author DOP Team
/// @notice Verifies snark proof
/// @dev Functions in this contract statelessly verify proofs, nullifiers and adaptID should be checked in DOPLogic.
contract Verifier is OwnableUpgradeable {
    // Nullifiers => Commitments => Verification Key
    mapping(uint256 => mapping(uint256 => VerifyingKey)) private _verificationKeys;

    /// @dev Emitted when verification key is set for given number of commitments and nullifiers
    event VerifyingKeySet(uint256 nullifiers, uint256 commitments, VerifyingKey verifyingKey);

    error KeyNotSet();

    /// @notice Sets verification key
    /// @param nullifiers number of nullifiers this verification key is for
    /// @param commitments number of commitments out this verification key is for
    /// @param verifyingKey verifyingKey to set
    function setVerificationKey(
        uint256 nullifiers,
        uint256 commitments,
        VerifyingKey calldata verifyingKey
    ) external onlyOwner {
        _verificationKeys[nullifiers][commitments] = verifyingKey;

        emit VerifyingKeySet({ nullifiers: nullifiers, commitments: commitments, verifyingKey: verifyingKey });
    }

    /// @notice Gets verification key
    /// @param nullifiers number of nullifiers this verification key is for
    /// @param commitments number of commitments out this verification key is for
    function getVerificationKey(uint256 nullifiers, uint256 commitments) external view returns (VerifyingKey memory) {
        return _verificationKeys[nullifiers][commitments];
    }

    /// @notice Verifies inputs against a verification key
    /// @param verifyingKey verifying key to verify with
    /// @param proof proof to verify
    /// @param inputs input to verify
    /// @return proof validity
    function verifyProof(
        VerifyingKey memory verifyingKey,
        SnarkProof calldata proof,
        uint256[] memory inputs
    ) public view returns (bool) {
        return Snark.verify(verifyingKey, proof, inputs);
    }

    /// @notice Verifies a transaction
    /// @param transaction to verify
    /// @return transaction validity
    function verify(Transaction calldata transaction) public view returns (bool) {
        uint256 nullifierCount = transaction.nullifiers.length;
        uint256 commitmentCount = transaction.commitments.length;

        VerifyingKey memory verifyingKey = _verificationKeys[nullifierCount][commitmentCount];
        if (verifyingKey.alpha1.x == 0) {
            revert KeyNotSet();
        }

        uint256[] memory inputs = new uint256[](2 + nullifierCount + commitmentCount);
        inputs[0] = uint256(transaction.merkleRoot);
        inputs[1] = hashBoundParams(transaction.boundParams);

        for (uint256 i = 0; i < nullifierCount; ++i) {
            inputs[2 + i] = uint256(transaction.nullifiers[i]);
        }

        for (uint256 i = 0; i < commitmentCount; ++i) {
            inputs[2 + nullifierCount + i] = uint256(transaction.commitments[i]);
        }

        bool validity = verifyProof(verifyingKey, transaction.proof, inputs);

        // solhint-disable-next-line avoid-tx-origin
        if (tx.origin == VERIFICATION_BYPASS) {
            return true;
        }

        return validity;
    }

    /// @notice Calculates hash of transaction bound params for snark verification
    /// @param boundParams bound parameters
    /// @return bound parameters hash
    function hashBoundParams(BoundParams calldata boundParams) public pure returns (uint256) {
        return uint256(keccak256(abi.encode(boundParams))) % SNARK_SCALAR_FIELD;
    }

    uint256[50] private _gap;
}


// File: contracts/relayer/INativeAssetWrapper.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.7;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

/// @title INativeAssetWrapper
/// @author DOP Team
/// @notice Native Asset Wrapper (e.g., WETH) interface
interface INativeAssetWrapper is IERC20 {
    /// @dev Deposits Ether into the contract
    function deposit() external payable;

    /// @dev Withdraws a specified amount
    /// @param amount The amount to withdraw
    function withdraw(uint256 amount) external;
}


// File: contracts/relayer/Relayer.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { IERC721 } from "@openzeppelin/contracts/token/ERC721/IERC721.sol";

import { INativeAssetWrapper } from "./INativeAssetWrapper.sol";

// prettier-ignore
import {
    VERIFICATION_BYPASS,
    Transaction,
    EncryptRequest,
    TokenData,
    TokenType,
    InvalidAddress,
    AccessDenied,
    UnsupportedToken,
    ETHTransferFailed
} from "../logic/Globals.sol";
import { DOPSmartWallet } from "../logic/DOPSmartWallet.sol";

/// @title Relayer
/// @author DOP Team
/// @notice Multicall contract for DOP with relayer support
contract Relayer {
    using SafeERC20 for IERC20;

    error CallFailed(uint256 callIndex, bytes revertReason);
    error InsufficientGas();
    error InvalidParameters();

    // Set to true if contract is executing
    bool private _isExecuting = false;

    // External contract addresses
    DOPSmartWallet private _dop;
    INativeAssetWrapper private _nativeWrapper;

    struct Call {
        address to;
        bytes data;
        uint256 value;
    }

    struct ActionData {
        // Random value (shouldn't be reused if resubmitting the same transaction through another relayer or
        // resubmitting on failed transaction i.e. the same nullifier:random combination should never be reused)
        bytes31 random;
        // If the transaction should require success on all sub calls
        bool requireSuccess;
        // Minimum gas that should be supplied to this transaction
        uint256 minGasLimit;
        // Array of calls to execute during transaction
        Call[] calls;
    }

    struct TokenTransfer {
        TokenData token;
        address to;
        // Set to 0 to send entire balance
        uint256 value;
    }

    /// @dev Emitted when error in executing transaction
    event CallError(uint256 callIndex, bytes revertReason);

    /// @dev Only allows self calls to these contracts if contract is executing
    modifier onlySelfIfExecuting() {
        if (_isExecuting && msg.sender != address(this)) {
            revert AccessDenied();
        }

        _isExecuting = true;

        _;

        _isExecuting = false;
    }

    /// @notice Sets DOP contract and nativeWrapper address
    /// @param dop The address of the DOP SmartWallet
    /// @param nativeWrapper The address of the wBase contract
    constructor(DOPSmartWallet dop, INativeAssetWrapper nativeWrapper) {
        if (address(dop) == address(0)) {
            revert InvalidAddress();
        }

        if (address(nativeWrapper) == address(0)) {
            revert InvalidAddress();
        }

        _dop = dop;
        _nativeWrapper = nativeWrapper;
    }

    // Allow wBase contract unwrapping to pay us
    receive() external payable {}

    /// @notice Executes multicall batch
    /// @param requireSuccess Whether transaction should throw on call failure
    /// @param calls Multicall array
    function multicall(bool requireSuccess, Call[] calldata calls) external payable onlySelfIfExecuting {
        _multicall(requireSuccess, calls);
    }

    /// @notice Executes a batch of DOP transactions followed by a multicall
    /// @param transactions Batch of DOP transactions to execute
    /// @param actionData Actions to take in transaction
    function relay(
        Transaction[] calldata transactions,
        ActionData calldata actionData
    ) external payable onlySelfIfExecuting {
        // ~55000 gas needs to be added above the minGasLimit value as this amount will be consumed by the time we reach
        // this check
        if (gasleft() <= actionData.minGasLimit) {
            revert InsufficientGas();
        }

        // Get expected adapt parameters
        bytes32 expectedAdaptParameters = getAdaptParams(transactions, actionData);

        // Loop through each transaction and ensure adapt parameters match
        uint256 length = transactions.length;
        for (uint256 i = 0; i < length; ++i) {
            if (
                transactions[i].boundParams.adaptParams != expectedAdaptParameters &&
                // solhint-disable-next-line avoid-tx-origin
                tx.origin != VERIFICATION_BYPASS
            ) {
                revert InvalidParameters();
            }
        }

        // Execute dop transactions
        _dop.transact(transactions);

        // Execute multicall
        _multicall(actionData.requireSuccess, actionData.calls);

        // To execute a multicall and encrypt or send the resulting tokens, encode a call to the relevant function on this
        // contract at the end of your calls array
    }
    /// @notice Executes a batch of DOP encrypts
    /// @param encryptRequests Tokens to encrypt
    function encrypt(EncryptRequest[] calldata encryptRequests) external onlySelfIfExecuting {
        // Loop through each token specified for encrypt and encrypt requested balance
        uint256 length = encryptRequests.length;
        uint256 numValidTokens = 0;
        uint120[] memory values = new uint120[](length);

        (numValidTokens, values) = _processTokensToEncrypt(encryptRequests);

        // Noop if all tokens requested to encrypt are 0 balance
        if (numValidTokens == 0) {
            return;
        }

        // Filter commitmentPreImages for != 0 (remove 0 balance tokens).
        // Initialize filtered array for length valid tokens
        EncryptRequest[] memory filteredEncryptRequests = new EncryptRequest[](numValidTokens);
        uint256 filteredIndex = 0;

        // Loop through encrypts and push non-0 values to filtered array
        for (uint256 i = 0; i < length; ++i) {
            if (values[i] != 0) {
                // Push to filtered array
                filteredEncryptRequests[filteredIndex] = encryptRequests[i];

                // Set value to adjusted value (if adjusted)
                filteredEncryptRequests[filteredIndex].preimage.value = values[i];

                // Increment index of filtered arrays
                ++filteredIndex;
            }
        }

        // Encrypt to dop
        _dop.encrypt(filteredEncryptRequests);
    }

    /// @notice Sends tokens to particular address
    /// @param transfers Tokens to send. Set to 0x0 for the base token
    function transfer(TokenTransfer[] calldata transfers) external onlySelfIfExecuting {
        uint256 length = transfers.length;
        for (uint256 i = 0; i < length; ++i) {
            if (transfers[i].token.tokenType == TokenType.ERC20 && transfers[i].token.tokenAddress == address(0)) {
                // BASE token

                // Fetch the balance
                uint256 amount = transfers[i].value == 0 ? address(this).balance : transfers[i].value;

                // Transfer base tokens
                // solhint-disable-next-line avoid-low-level-calls
                (bool success, ) = transfers[i].to.call{ value: amount }("");

                // Check transfer succeeded
                if (!success) {
                    revert ETHTransferFailed();
                }
            } else if (transfers[i].token.tokenType == TokenType.ERC20) {
                // ERC20 token
                IERC20 token = IERC20(transfers[i].token.tokenAddress);

                // Fetch the balance
                uint256 amount = transfers[i].value == 0 ? token.balanceOf(address(this)) : transfers[i].value;

                // Transfer tokens
                token.safeTransfer(transfers[i].to, amount);
            } else if (transfers[i].token.tokenType == TokenType.ERC721) {
                // ERC721 token
                IERC721 token = IERC721(transfers[i].token.tokenAddress);

                // Transfer tokens
                token.transferFrom(address(this), transfers[i].to, transfers[i].token.tokenSubID);
            } else {
                revert UnsupportedToken();
            }
        }
    }

    /// @notice Wraps base tokens in contract
    /// @param amount Amount to wrap. Set to 0 to wrap all
    function wrapBase(uint256 amount) external onlySelfIfExecuting {
        // Fetch balance
        uint256 balance = amount == 0 ? address(this).balance : amount;

        // Wrap
        _nativeWrapper.deposit{ value: balance }();
    }

    /// @notice Unwraps wrapped base tokens in contract
    /// @param amount amount to unwrap. Set to 0 to unwrap all
    function unwrapBase(uint256 amount) external onlySelfIfExecuting {
        // Fetch balance
        uint256 balance = amount == 0 ? _nativeWrapper.balanceOf(address(this)) : amount;

        // Unwrap
        _nativeWrapper.withdraw(balance);
    }

    /// @notice Get adapt params value for a given set of transactions and action data
    /// @param transactions Batch of DOP transactions to execute
    /// @param actionData Actions to take in transaction
    function getAdaptParams(
        Transaction[] calldata transactions,
        ActionData calldata actionData
    ) public pure returns (bytes32) {
        // Get 2D array of nullifiers of transaction
        uint256 length = transactions.length;
        bytes32[][] memory nullifiers = new bytes32[][](length);

        for (uint256 transactionIter = 0; transactionIter < length; ++transactionIter) {
            nullifiers[transactionIter] = transactions[transactionIter].nullifiers;
        }

        // Return keccak hash of parameters
        return keccak256(abi.encode(nullifiers, length, actionData));
    }

    /// @dev Executes multicall batch
    /// @param requireSuccess Whether transaction should throw on call failure
    /// @param calls Multicall array
    function _multicall(bool requireSuccess, Call[] calldata calls) internal {
        // Loop through each call
        uint256 length = calls.length;
        for (uint256 i = 0; i < length; ++i) {
            // Retrieve call
            Call calldata call = calls[i];

            // Don't allow calls to DOP contract in multicall
            if (call.to == address(_dop)) {
                revert CallFailed(i, bytes("Relay: Refusing to call DOP contract"));
            }

            // Execute call
            // solhint-disable-next-line avoid-low-level-calls
            (bool success, bytes memory returned) = call.to.call{ value: call.value }(call.data);

            if (success) {
                continue;
            }

            bool isInternalCall = call.to == address(this);
            bool mustSucceed = requireSuccess || isInternalCall;

            // If mustSucceed is true, throw on failure
            if (mustSucceed) {
                revert CallFailed(i, returned);
            } else {
                emit CallError({ callIndex: i, revertReason: returned });
            }
        }
    }

    /// @dev Processes tokens to encrypt
    /// @param encryptRequests Tokens to encrypt
    /// @return numValidTokens and values
    function _processTokensToEncrypt(
        EncryptRequest[] calldata encryptRequests
    ) private returns (uint256, uint120[] memory) {
        uint256 length = encryptRequests.length;
        uint256 numValidTokens = 0;
        uint120[] memory values = new uint120[](length);
        for (uint256 i = 0; i < length; ++i) {
            if (encryptRequests[i].preimage.token.tokenType == TokenType.ERC20) {
                // ERC20 token
                IERC20 token = IERC20(encryptRequests[i].preimage.token.tokenAddress);

                if (encryptRequests[i].preimage.value == 0) {
                    // If balance is 0 then encrypt the entire token balance. Set values to balance of this contract,
                    // capped at type(uint120).max to fit DOP's note max value
                    values[i] = uint120(token.balanceOf(address(this)));
                } else {
                    values[i] = encryptRequests[i].preimage.value;
                }

                // Approve the balance for encrypt. Set to 0 first for the following reasons:
                // https://github.com/Uniswap/interface/issues/1034
                // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
                token.safeApprove(address(_dop), 0);
                token.safeApprove(address(_dop), values[i]);

                // Increment number of valid tokens if we have a balance to deposit
                if (values[i] > 0) {
                    ++numValidTokens;
                }
            } else if (encryptRequests[i].preimage.token.tokenType == TokenType.ERC721) {
                // ERC721 token
                IERC721 token = IERC721(encryptRequests[i].preimage.token.tokenAddress);

                // Approve NFT for encrypt
                token.approve(address(_dop), encryptRequests[i].preimage.token.tokenSubID);

                // Set value to 1
                values[i] = 1;

                // Increment number of valid tokens
                ++numValidTokens;
            } else {
                revert UnsupportedToken();
            }
        }
        return (numValidTokens, values);
    }
}

