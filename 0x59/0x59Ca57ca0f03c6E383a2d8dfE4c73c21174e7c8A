
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/platform/access_controller/PlatformAccessController.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

import "../admin_panel/PlatformAdminPanel.sol";

/**
 * @title Abstract contract from which platform contracts with admin function are inherited
 * @dev Contains the platform admin panel
 * Contains modifier that checks whether sender is platform admin, use platform admin panel
 */
abstract contract PlatformAccessController {
    address public _panel;

    error CallerNotAdmin();
    error AlreadyInitialized();

    function _initiatePlatformAccessController(address adminPanel) internal {
        if(address(_panel) != address(0))
            revert AlreadyInitialized();

        _panel = adminPanel;
    }

    /**
     * @dev Modifier that makes function available for platform admins only
     */
    modifier onlyPlatformAdmin() {
        if(!PlatformAdminPanel(_panel).isAdmin(msgSender()))
            revert CallerNotAdmin();
        _;
    }

    function _isAdmin() internal view returns (bool) {
        return PlatformAdminPanel(_panel).isAdmin(msgSender());
    }

    function msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}


// File: contracts/platform/admin_panel/Iplatform_admin_panel/IPlatformAdminPanel.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

interface IPlatformAdminPanel {
    function isAdmin(address wallet) external view returns (bool);
}


// File: contracts/platform/admin_panel/PlatformAdminPanel.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;
import "./Iplatform_admin_panel/IPlatformAdminPanel.sol";

/**
 * @title Platform admins holder contract
 * @notice Used to check accessibility of senders to admin functions in platform contracts
 */
contract PlatformAdminPanel is IPlatformAdminPanel {
    /**
     * @notice Emit during root admin set and reset
     */
    event SetRootAdmin(address indexed wallet);

    event InsertAdminList(address[] adminList);

    event RemoveAdminList(address[] adminList);

    mapping(address => bool) private _adminMap;
    address private _rootAdmin;

    modifier onlyRootAdmin() {
        require(_rootAdmin == msg.sender, "sender is not root admin");
        _;
    }

    /**
     * @notice Specify the root admin, only he has the rights to add and remove admins
     */
    constructor(address rootAdminWallet) {
        _setRootAdmin(rootAdminWallet);
    }

    /**
     * @notice Needed to determine if the user has admin rights for platform contracts
     */
    function isAdmin(address wallet)
        external
        view
        virtual
        override
        returns (bool)
    {
        return wallet == _rootAdmin || _adminMap[wallet];
    }

    function rootAdmin() external view returns (address) {
        return _rootAdmin;
    }

    /**
     * @notice Only root admin can call
     */
    function insertAdminList(address[] calldata adminList)
        external
        onlyRootAdmin
    {
        require(0 < adminList.length, "empty admin list");

        uint256 index = adminList.length;
        while (0 < index) {
            --index;

            _adminMap[adminList[index]] = true;
        }

        emit InsertAdminList(adminList);
    }

    /**
     * @notice Only root admin can call
     */
    function removeAdminList(address[] calldata adminList)
        external
        onlyRootAdmin
    {
        require(0 < adminList.length, "empty admin list");

        uint256 index = adminList.length;
        while (0 < index) {
            --index;

            _adminMap[adminList[index]] = false;
        }

        emit RemoveAdminList(adminList);
    }

    /**
     * @notice Only root admin can call
     */
    function setRootAdmin(address rootAdminWallet) external onlyRootAdmin {
        _setRootAdmin(rootAdminWallet);
    }

    function _setRootAdmin(address wallet) private {
        require(wallet != address(0), "wallet is zero address");

        _rootAdmin = wallet;

        emit SetRootAdmin(wallet);
    }
}


// File: contracts/platform/staking/PROPCStakingV2.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "../access_controller/PlatformAccessController.sol";

interface IPropcToken {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function transfer(address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external returns (uint256);
    function allowance(address owner, address spender) external returns (uint256);
}

/// @title Staking contract version 2 for Propchain's PROPC token
/// @notice Provides different staking pools with custom metrics (e.g. lockup time, rewards, penalties). Allows to stake multiple times in parallel on the same staking pool. Supports decreasing penalties, i.e. even within the lockup time penalties for forced withdrawals may decrease as time progresses.@author
/// @author Propchain Development
contract PROPCStakingV2 is PlatformAccessController  {
    using SafeERC20 for IERC20;

    /// @notice Info of each user.
    struct UserPoolInfo {
        uint256 totalAmountInPool;
    }

    /// @notice object to keep track of different rewards settings for a pool.
    struct APYInfo {
        uint256 apyPercent;     // 500 = 5%, 7545 = 75.45%, 10000 = 100%
        uint256 startTime;      // The block timestamp when this APY set
        uint256 stopTime;       // The block timestamp when the next APY set
    }

    /// @notice Info of each pool.
    struct PoolInfo {
        uint256 startTime;      // The block timestamp when Rewards Token mining starts.
        IERC20 rewardsToken;
        uint256 totalStaked;
        uint256 maxTotalStake;
        bool    active;
        uint256 claimTimeLimit;
        uint256 minStakeAmount;
        uint256 penaltyFee;     // 500 = 5%, 7545 = 75.45%, 10000 = 100%
        uint256 penaltyTimeLimit;
        address penaltyWallet;
        bool isVIPPool;
        mapping (address => bool) isVIPAddress;
        mapping (uint256 => APYInfo) apyInfo;
        uint256 lastAPYIndex;
        bool decreasingPenalty;
    }

    /// @notice dataset stored for each user / staking event
    struct Stake {
        uint256 amount;
        uint256 stakeTimestamp;
        uint256 totalRedeemed;
        uint256 lastClaimTimestamp;
    }

    IPropcToken public immutable propcToken;

    address public rewardsWallet;

    uint256 public totalPools;

    /// @dev Info of each pool.
    mapping(uint256 => PoolInfo) private poolInfo;

    /// @dev Info of each user that stakes tokens.
    mapping (uint256 => mapping (address => UserPoolInfo)) private userPoolInfo;
    mapping (uint256 => mapping(address => Stake[])) public stakes;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event Redeem(address indexed user, uint256 indexed pid, uint256 amount);
    event RewardsWalletUpdate(address indexed wallet);
    event PoolSet(
        address indexed admin,
        uint256 indexed pid,
        uint256 _apyPercent,
        uint256 _claimTimeLimit,
        uint256 _penaltyFee,
        uint256 _penaltyTimeLimit,
        bool _active,
        bool _isVIPPool,
        bool _hasDecreasingPenalty
    );
    event NewVIP(address indexed user);
    event NoVIP(address indexed user);
    event DeleteStake(address indexed user, uint256 indexed pid);

    error PoolNotOpened();
    error IndexOutOfBounds();
    error PoolInactive();
    error NotVIPQualified();
    error BelowPoolMinimum();
    error NotEnoughStaked();
    error NoRewardsAvailable();
    error ZeroAddress();
    error InsufficientBalance(uint256);
    error InsufficientRewards();
    error PoolDoesNotExist();
    error InsufficientStakeLimit();
    error APYInvalid();
    error PenaltyTooHigh();
    error NotVIPPool();
    error TooManyStakes(uint256);
    error ZeroAmount();

    /// @dev constant representing one year for rewards and penalty calculations
    uint256 public constant YEAR = 365 days;
    /// @dev constant to unify APY calculations by using a common divider for all APY values
    uint256 internal constant APY_DIVIDER = 10_000;

    /// @dev constructor initializing admin authorization and wallets.
    /// @param _propc the address of the PROPC ERC20 contract
    /// @param _rewardsWallet the wallet rewards are paid out from
    /// @param adminPanel the contract interface authorizing all admins
    constructor(
        IPropcToken _propc,
        address _rewardsWallet,
        address adminPanel
    ) {

        if(adminPanel == address(0))
            revert ZeroAddress();
        if(_rewardsWallet == address(0))
            revert ZeroAddress();

        propcToken = _propc;
        rewardsWallet = _rewardsWallet;

        _initiatePlatformAccessController(adminPanel);
    }

    /// @param _wallet the wallet rewards are paid out from
    function updateRewardsWallet(address _wallet) external onlyPlatformAdmin {
        if(_wallet == address(0))
            revert ZeroAddress();
        rewardsWallet = _wallet;
        emit RewardsWalletUpdate(_wallet);
    }

    /// @return returns the total number of pools ever created.
    function poolLength() public view returns (uint256) {
        return totalPools;
    }

    /// @dev Can only be called by an admin
    // @notice Add a new pool when _pid is 0.
    // @notice Update a pool when _pid is not 0.
    function setPool(
        uint256 _idToChange,
        uint256 _startTime,
        IERC20 _rewardsToken,
        uint256 _apyPercent,
        uint256 _claimTimeLimit,
        uint256 _penaltyFee,
        uint256 _penaltyTimeLimit,
        bool _active,
        address _penaltyWallet,
        bool _isVIPPool,
        bool _hasDecreasingPenalty,
        uint256 _minStakeAmount,
        uint256 _maxTotalStake
    ) external onlyPlatformAdmin {
        uint256 pid = _idToChange == 0 ? ++totalPools : _idToChange;

        PoolInfo storage pool = poolInfo[pid];

        if(_idToChange > 0 && pool.lastAPYIndex == 0)
            revert PoolDoesNotExist();
        if(_idToChange == 0 && _apyPercent == 0)
            revert APYInvalid();
        if(_penaltyFee > 3500)
            revert PenaltyTooHigh();
        if(_maxTotalStake == 0)
            revert InsufficientStakeLimit();
        if(_penaltyWallet == address(0))
            revert ZeroAddress();

        if (_idToChange == 0) {
            pool.startTime = _startTime;
        }

        if (_apyPercent != pool.apyInfo[pool.lastAPYIndex].apyPercent) {
            pool.apyInfo[pool.lastAPYIndex].stopTime = block.timestamp;     // current apy

            pool.lastAPYIndex ++;                                           // new apy
            APYInfo storage apyInfo = pool.apyInfo[pool.lastAPYIndex];
            apyInfo.apyPercent = _apyPercent;
            apyInfo.startTime = block.timestamp;
        }

        pool.rewardsToken       = _rewardsToken;
        pool.minStakeAmount     = _minStakeAmount;
        pool.claimTimeLimit     = _claimTimeLimit;
        pool.penaltyFee         = _penaltyFee;
        pool.penaltyTimeLimit   = _penaltyTimeLimit;
        pool.active             = _active;
        pool.penaltyWallet      = _penaltyWallet;
        pool.isVIPPool          = _isVIPPool;
        pool.decreasingPenalty  = _hasDecreasingPenalty;
        pool.maxTotalStake      = _maxTotalStake;

        emit PoolSet(
            msgSender(),
            pid,
            _apyPercent,
            _claimTimeLimit,
            _penaltyFee,
            _penaltyTimeLimit,
            _active,
            _isVIPPool,
            _hasDecreasingPenalty
        );
    }

    /// @dev only callable by an admin
    /// @notice Adds a VIP address to a specific pool
    function addVIPAddress(uint256 _pid, address _vipAddress) external onlyPlatformAdmin {
        PoolInfo storage pool = poolInfo[_pid];
        if(!pool.isVIPPool)
            revert NotVIPPool();
        if(_vipAddress == address(0))
            revert ZeroAddress();

        pool.isVIPAddress[_vipAddress] = true;
        emit NewVIP(_vipAddress);
    }

    /// @dev only callable by an admin
    /// @notice Adds multiple VIP addresses to a specific pool
    function addVIPAddresses(uint256 _pid, address[] memory _vipAddresses) external onlyPlatformAdmin {
        PoolInfo storage pool = poolInfo[_pid];
        if(!pool.isVIPPool)
            revert NotVIPPool();

        for (uint256 i = 0; i < _vipAddresses.length; i++) {
            if(_vipAddresses[i] == address(0))
                revert ZeroAddress();

            pool.isVIPAddress[_vipAddresses[i]] = true;
            emit NewVIP(_vipAddresses[i]);
        }
    }

    /// @dev only callable by an admin
    /// @notice Removes a VIP address from a specific pool
    function removeVIPAddress(uint256 _pid, address _vipAddress) external onlyPlatformAdmin {
        PoolInfo storage pool = poolInfo[_pid];
        if(!pool.isVIPPool)
            revert NotVIPPool();
        if(_vipAddress == address(0))
            revert ZeroAddress();

        pool.isVIPAddress[_vipAddress] = false;
        emit NoVIP(_vipAddress);
    }

    /// @dev only callable by an admin
    /// @notice Removes multiple VIP addresses from a specific pool
    function removeVIPAddresses(uint256 _pid, address[] memory _vipAddresses) external onlyPlatformAdmin {
        PoolInfo storage pool = poolInfo[_pid];
        if(!pool.isVIPPool)
            revert NotVIPPool();

        for (uint256 i = 0; i < _vipAddresses.length; i++) {
            if(_vipAddresses[i] == address(0))
                revert ZeroAddress();

            pool.isVIPAddress[_vipAddresses[i]] = false;
            emit NoVIP(_vipAddresses[i]);
        }
    }

    /// @notice Return reward multiplier over the given _from to _to block.
    function getTimespanInSeconds(uint256 _from, uint256 _to) public pure returns (uint256) {
        return _to - _from;
    }

    /// @dev returns the maximum of two numbers
    /// @param a comparator one
    /// @param b comparator two
    /// @return uint256 being the maximum value of both inputs
    function _max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /// @dev executes a loop over all stakes. To ensure performance the number of stakes on a pool by one user is limited during stake().
    /// @notice returns the total amount of eligible rewards for one user on a specific pool at the current point in time.
    /// @param _pid the pools ID
    /// @param _user the user's address
    /// @return uint256. the accumulated rewards.
    function rewardsForPool(uint _pid, address _user) public view returns (uint256)  {
        Stake[] memory _stakes = stakes[_pid][_user];
        uint256 rewards = 0;
        for(uint256 i = 0; i < _stakes.length; i++) {
            rewards = rewards + _pendingRewardsForStake(_pid, _stakes[i]);
        }
        return rewards;
    }

    /// @dev throws an index out of bounds error, otherwise calculates rewards using internal function.
    /// @notice returns the amount of eligible rewards for one user on a specific pool and for a specific state at the current point in time.
    /// @param _pid the pools ID
    /// @param _user the user's address
    /// @param _stakeId the stake identifier on the pool (increments with each stake() on the pool)
    /// @return uint256. the rewards.
    function pendingRewardsForStake(uint256 _pid, address _user, uint256 _stakeId) external view returns (uint256) {
        Stake[] memory _stakes = stakes[_pid][_user];
        if(_stakes.length <= _stakeId)
            revert IndexOutOfBounds();
        return _pendingRewardsForStake(_pid, _stakes[_stakeId]);
    }

    /// @dev View to retrieve pending rewards for specific stake, used internally to facilitate rewards processing.
    function _pendingRewardsForStake(uint256 _pid, Stake memory _stake) internal view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];

        uint256 pendingRewards = 0;

        for (uint256 apyIndex = pool.lastAPYIndex; apyIndex > 0; apyIndex--) {
            // last claim was after closing of pool --> no rewards
            if (pool.apyInfo[apyIndex].stopTime > 0 && _stake.lastClaimTimestamp >= pool.apyInfo[apyIndex].stopTime) {
                continue;
            }

            // not long enough in pool to retrieve rewards
            if(pool.claimTimeLimit + _stake.lastClaimTimestamp > block.timestamp)  {
                continue;
            }

            // if the period has 0% apy
            if (pool.apyInfo[apyIndex].apyPercent == 0) {
                continue;
            }

            uint256 _fromTime = _max(_stake.lastClaimTimestamp, pool.apyInfo[apyIndex].startTime);
            uint256 _toTime = block.timestamp;

            if (pool.apyInfo[apyIndex].stopTime > 0 && block.timestamp > pool.apyInfo[apyIndex].stopTime) {
                _toTime = pool.apyInfo[apyIndex].stopTime;
            }

            // if start is after end, ignore this timespan
            if (_fromTime >= _toTime) {
                continue;
            }

            uint256 timespanInPool = getTimespanInSeconds(_fromTime, _toTime); // calculates the timespan from to to
            uint256 rewardsPerAPYBlock = (timespanInPool * pool.apyInfo[apyIndex].apyPercent * _stake.amount) / (YEAR * APY_DIVIDER);
            pendingRewards = pendingRewards + rewardsPerAPYBlock;
        }

        return pendingRewards;
    }


    /// @dev Calculates the penalty to be required during withdrawals and unstakes, no penalty returned if outside the lockup timeframe.
    /// @return uint256. penalty amount.
    function _penalty(Stake memory _stake, PoolInfo storage pool, uint256 _amount) internal view returns (uint256) {
        uint256 penaltyAmount = 0;

        if (_stake.stakeTimestamp + pool.penaltyTimeLimit <= block.timestamp) // no penalty applies
            return penaltyAmount;

        if(pool.decreasingPenalty)  {
            uint256 appliedPenalty = block.timestamp - _stake.stakeTimestamp; // time spent in pool
            appliedPenalty = (pool.penaltyTimeLimit - appliedPenalty) * APY_DIVIDER / pool.penaltyTimeLimit;

            penaltyAmount = _amount * pool.penaltyFee * appliedPenalty / (APY_DIVIDER * APY_DIVIDER);
        } else  { // static
            penaltyAmount = _amount * pool.penaltyFee / APY_DIVIDER;
        }

        return penaltyAmount;
    }

    /// @dev Executes a loop over all pools, while rewardsForPool() in turn loops over all stakes on a specific pool for a user.
    /// @notice Returns all rewards available for a user on all active pools the user staked in.
    /// @param _user The user to calculate all pending rewards for.
    /// @return uint256[] List of available rewards per pool.
    function allPendingRewardsToken(address _user) external view returns (uint256[] memory) {
        uint256 length = poolLength();
        uint256[] memory pendingRewards = new uint256[](length);

        for(uint256 _pid = 1; _pid <= length; _pid++) {
            pendingRewards[_pid - 1] = rewardsForPool(_pid, _user);
        }
        return pendingRewards;
    }

    /// @dev Number of stakes per pool is limited for each user to avoid gas limit issues on withdrawals.
    /// @notice Stake tokens to contract for Rewards Token allocation.
    /// @param _pid Pool to stake on
    /// @param _amount Amount to stake
    function stake(uint256 _pid, uint256 _amount) external {
        PoolInfo storage pool = poolInfo[_pid];
        UserPoolInfo storage user = userPoolInfo[_pid][msg.sender];

        Stake[] storage _stakes = stakes[_pid][msg.sender];

        if(_amount == 0)
            revert ZeroAmount();
        if(_stakes.length >= 10)
            revert TooManyStakes(_pid);
        if(pool.startTime > block.timestamp)
            revert PoolNotOpened();
        if(!pool.active)
            revert PoolInactive();
        if(pool.isVIPPool && !pool.isVIPAddress[msg.sender])
            revert NotVIPQualified();
        if(user.totalAmountInPool + _amount < pool.minStakeAmount)
            revert BelowPoolMinimum();
        if(_amount + pool.totalStaked > pool.maxTotalStake)
            revert InsufficientStakeLimit();

        propcToken.transferFrom(msg.sender, address(this), _amount);

        _stakes.push(
            Stake(
                _amount,
                block.timestamp,
                0,
                block.timestamp
            )
        );

        user.totalAmountInPool = user.totalAmountInPool + _amount;

        pool.totalStaked = pool.totalStaked + _amount;
        emit Deposit(msg.sender, _pid, _amount);
    }

    /// @dev Internally called methods loop through pools. Potentially expensive transaction, hence number of stakes per pool / user is limited during stake.
    /// @notice Unstake all tokens from pool. Will transfer staked tokens (deducting potential penalties) and rewards to caller.
    /// @param _pid pool id to unstake from.
    function leavePool(uint256 _pid) external {
        PoolInfo storage pool = poolInfo[_pid];
        UserPoolInfo storage user = userPoolInfo[_pid][msg.sender];
        (uint256 amount, uint256 penaltyAmount, uint256 pendingRewards) = _userPoolMetrics(_pid);

        uint256 availableRewards = IERC20(pool.rewardsToken).allowance(rewardsWallet, address(this));
        if(pendingRewards > availableRewards) {
            revert InsufficientRewards();
        }

        if(pendingRewards > 0) {
            safeRewardTransfer(_pid, msg.sender, pendingRewards);
        }

        propcToken.transfer(msg.sender, amount - penaltyAmount);
        propcToken.transfer(pool.penaltyWallet, penaltyAmount);

        user.totalAmountInPool = user.totalAmountInPool - amount;

        pool.totalStaked = pool.totalStaked - amount;

        emit Withdraw(msg.sender, _pid, amount);
    }

    /// @dev Allows to leave pool without claiming rewards. Rewards are lost from user perspective.
    /// @notice Allows to withdraw tokens in case leavePool() fails due to missing rewards balance. Should not be used except for emergencies.
    /// @param _pid pool id to unstake from.
    function emergencyWithdrawal(uint256 _pid) external  {
        PoolInfo storage pool = poolInfo[_pid];
        UserPoolInfo storage user = userPoolInfo[_pid][msg.sender];
        (uint256 amount, uint256 penaltyAmount, uint256 pendingRewards) = _userPoolMetrics(_pid);

        uint256 availableRewards = IERC20(pool.rewardsToken).allowance(rewardsWallet, address(this));
        if(pendingRewards > availableRewards) {
            pendingRewards = availableRewards;
        }

        if(pendingRewards > 0) {
            safeRewardTransfer(_pid, msg.sender, pendingRewards);
        }

        propcToken.transfer(msg.sender, amount - penaltyAmount);
        propcToken.transfer(pool.penaltyWallet, penaltyAmount);

        user.totalAmountInPool = user.totalAmountInPool - amount;
        pool.totalStaked = pool.totalStaked - amount;

        emit Withdraw(msg.sender, _pid, amount);
    }

    /// @dev Gives an overview on user's stake(s) on a pool containing key data amount, penalty, rewards.
    /// @return uint256. Amount staked in pool
    /// @return uint256. Penalty at current point in time if leaving pool
    /// @return uint256. Rewards available at current point in time
    function _userPoolMetrics(uint256 _pid) internal returns(uint256, uint256, uint256){
        PoolInfo storage pool = poolInfo[_pid];
        Stake[] storage _stakes = stakes[_pid][msg.sender];

        uint256 pendingRewards = 0;
        uint256 penaltyAmount = 0;
        uint256 amount = 0;
        // from new to old stakes
        for(uint256 stakeId = _stakes.length; stakeId > 0; stakeId--)   {
            Stake memory _stake = _stakes[stakeId-1];
            uint256 pendingRewardsStake = _pendingRewardsForStake(_pid, _stake);

            amount = amount + _stake.amount;
            pendingRewards = pendingRewards + pendingRewardsStake;


            penaltyAmount = penaltyAmount + _penalty(_stake, pool, _stake.amount);
            _stakes.pop();
        }

        return (amount, penaltyAmount, pendingRewards);
    }

    /// @dev throws error if stake id is out of bounds, otherwise tries to unstake given amount from pool. Reduces remaining stake.
    /// @notice Unstake set amount from specific stake of pool. Sends rewards and tokens to caller, penalties may be deducted.
    /// @param _pid the pool to unstake from
    /// @param _amount the amount to unstake
    /// @param _stakeId the stake id of the to unstake from
    function unstake(uint256 _pid, uint256 _amount, uint256 _stakeId) external {
        PoolInfo storage pool = poolInfo[_pid];
        UserPoolInfo storage user = userPoolInfo[_pid][msg.sender];
        Stake[] storage _stakes = stakes[_pid][msg.sender];

        if(_stakeId >= _stakes.length)
            revert IndexOutOfBounds();
        if(_amount == 0)
            revert ZeroAmount();

        Stake storage _stake = _stakes[_stakeId];
        if(_amount > _stake.amount)
            revert NotEnoughStaked();

        uint256 penaltyAmount = _penalty(_stake, pool, _amount);
        uint256 pendingRewards = _pendingRewardsForStake(_pid, _stake);

        if(pendingRewards > 0) {
            safeRewardTransfer(_pid, msg.sender, pendingRewards);
        }

        if(_amount == _stake.amount)
            deleteStake(_stakes, _stakeId);
        else    {
            _stake.lastClaimTimestamp = block.timestamp;
            _stake.totalRedeemed = _stake.totalRedeemed + pendingRewards;
            _stake.amount = _stake.amount - _amount;
        }

        propcToken.transfer(msg.sender, _amount - penaltyAmount);
        propcToken.transfer(pool.penaltyWallet, penaltyAmount);

        user.totalAmountInPool = user.totalAmountInPool - _amount;
        pool.totalStaked = pool.totalStaked - _amount;

        emit Withdraw(msg.sender, _pid, _amount);
    }

    /// @dev Deletes a stake by overwriting set index with last element and dropping the last element.
    /// @dev Assumes that outOfBounds check is done before calling.
    function deleteStake(Stake[] storage _stakes, uint256 index) private    {
        _stakes[index] = _stakes[_stakes.length-1];
        _stakes.pop();
        emit DeleteStake(msgSender(), index);
    }

    /// @dev Loops over stakes on a pool. Maximum number of stakes is limited during stake() to avoid gas limit issues.
    /// @notice Redeem currently pending rewards accumulated from all stakes on the pool. Sends tokens to the caller.
    /// @param _pid the pool to redeem from
    function redeem(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        Stake[] storage _stakes = stakes[_pid][msg.sender];

        uint256 pendingRewards = 0;

        for(uint256 stakeId = _stakes.length; stakeId > 0; stakeId--)   {
            Stake storage _stake = _stakes[stakeId-1];

            if(_stake.lastClaimTimestamp + pool.claimTimeLimit > block.timestamp)
                continue;

            uint256 pendingRewardsStake = _pendingRewardsForStake(_pid, _stake);
            pendingRewards = pendingRewards + pendingRewardsStake;

            _stake.lastClaimTimestamp = block.timestamp;
            _stake.totalRedeemed = _stake.totalRedeemed + pendingRewardsStake;
        }

        if(pendingRewards == 0)
            revert NoRewardsAvailable();

        safeRewardTransfer(_pid, msg.sender, pendingRewards);
        emit Redeem(msg.sender, _pid, pendingRewards);
    }

    /// @dev Loops over all pools. Internal call loops over stakes on a pool. Maximum number of stakes is limited during stake() to avoid gas limit issues.
    /// @notice Redeem currently pending rewards accumulated from all pools. Sends tokens to the caller.
    function redeemAll() public {
        for(uint _pid = 1; _pid <= poolLength(); _pid++) {
            redeem(_pid);
        }
    }

    /// @dev internal wrapper function used to send ERC20 compliant tokens as rewards.
    function safeRewardTransfer(uint256 _pid, address _to, uint256 _amount) internal {
        IERC20(poolInfo[_pid].rewardsToken).safeTransferFrom(rewardsWallet, _to, _amount);
    }

    function getUserInfo(uint256 _pid, address _account) external view returns(uint256 amount) {
        UserPoolInfo storage user = userPoolInfo[_pid][_account];
        return (
            user.totalAmountInPool
        );
    }

    function getStakesInfo(uint256 _pid, address _account) external view returns(Stake[] memory) {
        Stake[] memory _stakes = stakes[_pid][_account];
        return _stakes;
    }

    function getPoolInfo(uint256 _pid) external view returns(
        uint256 startTime,
        address rewardsToken,
        address penaltyWallet,
        uint256 apyPercent,
        uint256 totalStaked,
        bool    active,
        uint256 claimTimeLimit,
        uint256 minStakeAmount,
        uint256 penaltyFee,
        uint256 penaltyTimeLimit,
        bool isVIPPool
    ) {
        PoolInfo storage pool = poolInfo[_pid];

        startTime           = pool.startTime;
        penaltyWallet       = pool.penaltyWallet;
        isVIPPool           = pool.isVIPPool;
        rewardsToken        = address(pool.rewardsToken);
        apyPercent          = pool.apyInfo[pool.lastAPYIndex].apyPercent;
        totalStaked         = pool.totalStaked;
        active              = pool.active;
        claimTimeLimit      = pool.claimTimeLimit;
        minStakeAmount      = pool.minStakeAmount;
        penaltyFee          = pool.penaltyFee;
        penaltyTimeLimit    = pool.penaltyTimeLimit;
    }
}

