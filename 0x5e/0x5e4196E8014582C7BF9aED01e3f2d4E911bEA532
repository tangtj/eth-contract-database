
// File: src/QUILMultiVoucherClaimer.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import {ISignatureMintERC20} from "./ISignatureMintERC20.sol";

/// @title An optimized QUIL voucher claimer
contract QUILMultiVoucherClaimer {
    ISignatureMintERC20 constant wQUIL = ISignatureMintERC20(0x8143182a775C54578c8B7b3Ef77982498866945D);

    /// @notice Claim all of the claims embedded in `claims` or fail. All claims
    ///         are assumed to be signed by msg.sender.
    /// @param validityEndTimestamp Timestamp shared by all the claims.
    /// @param claims Packed bytes of a list of reduced claims.
    function claim(uint128 validityEndTimestamp, bytes calldata claims) external {
        ISignatureMintERC20.MintRequest memory mintRequest = ISignatureMintERC20.MintRequest({
            to: msg.sender,
            primarySaleRecipient: 0xE35F2aAE042640D56c50b3c1B90bAf7D59c7cACC,
            quantity: 5000000000,
            price: 0,
            currency: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,
            validityStartTimestamp: 0,
            validityEndTimestamp: validityEndTimestamp,
            uid: 0x0
        });

        uint256 length = claims.length / 97;
        uint256 offset = 0;
        for (uint256 i = 0; i < length; i++) {
            // The list of claims is a packing of multiple uids and signatures in sequence.
            // > abi.encodePacked(  uid      ,  signature  ,
            //                      uid2     ,  signature2 ,
            //                      ...                    )
            // = abi.encodePacked(  bytes32  ,  65 bytes   ,
            //                      bytes32  ,  65 bytes   ,
            //                      ...                    )

            uint256 endUid = offset + 32;
            mintRequest.uid = bytes32(claims[offset:endUid]);

            offset += 97;

            wQUIL.mintWithSignature(mintRequest, claims[endUid:offset]);
        }
    }
}


// File: src/ISignatureMintERC20.sol
// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.0;

/// @author thirdweb

/**
 *  The 'signature minting' mechanism used in thirdweb Token smart contracts is a way for a contract admin to authorize an external party's
 *  request to mint tokens on the admin's contract.
 *
 *  At a high level, this means you can authorize some external party to mint tokens on your contract, and specify what exactly will be
 *  minted by that external party.
 */
interface ISignatureMintERC20 {
    /**
     *  @notice The body of a request to mint tokens.
     *
     *  @param to The receiver of the tokens to mint.
     *  @param primarySaleRecipient The recipient of the minted token's primary sales proceeds.
     *  @param quantity The quantity of tokens to mint.
     *  @param pricePerToken The price to pay per quantity of tokens minted.
     *  @param currency The currency in which to pay the price per token minted.
     *  @param validityStartTimestamp The unix timestamp after which the payload is valid.
     *  @param validityEndTimestamp The unix timestamp at which the payload expires.
     *  @param uid A unique identifier for the payload.
     */
    struct MintRequest {
        address to;
        address primarySaleRecipient;
        uint256 quantity;
        uint256 price;
        address currency;
        uint128 validityStartTimestamp;
        uint128 validityEndTimestamp;
        bytes32 uid;
    }

    /// @dev Emitted when tokens are minted.
    event TokensMintedWithSignature(address indexed signer, address indexed mintedTo, MintRequest mintRequest);

    /**
     *  @notice Verifies that a mint request is signed by an account holding
     *          MINTER_ROLE (at the time of the function call).
     *
     *  @param req The payload / mint request.
     *  @param signature The signature produced by an account signing the mint request.
     *
     *  returns (success, signer) Result of verification and the recovered address.
     */
    function verify(MintRequest calldata req, bytes calldata signature)
        external
        view
        returns (bool success, address signer);

    /**
     *  @notice Mints tokens according to the provided mint request.
     *
     *  @param req The payload / mint request.
     *  @param signature The signature produced by an account signing the mint request.
     */
    function mintWithSignature(MintRequest calldata req, bytes calldata signature)
        external
        payable
        returns (address signer);
}

