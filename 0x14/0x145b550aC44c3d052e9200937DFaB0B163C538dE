
// File: contracts/MessageDispatcher.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MessageDispatcher {

    function sendMessage(address recipient, bytes memory message) public payable {
        // Send the message directly in the call
        (bool sent, ) = recipient.call{value: 1 wei}(message);
        require(sent, "Failed to send message");
    }

    function sendBatchMessages(address[] memory recipients, bytes memory message) public payable {
        require(msg.value >= recipients.length, "Not enough Ether sent for all recipients");
        
        for (uint i = 0; i < recipients.length; i++) {
            sendMessage(recipients[i], message);
        }
        
        // Refund any excess Ether
        if (msg.value > recipients.length) {
            payable(msg.sender).transfer(msg.value - recipients.length);
        }
    }
}

