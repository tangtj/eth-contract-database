
// File: contracts/ConnectContract.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;
import "@openzeppelin/contracts/access/Ownable.sol";
import "./TypeLibrary.sol";

/// @title Vountain – ConnectContract
/// @notice Connecting violin, metadata, access controls and

contract ConnectContract is Ownable {
  address public violinAddress;

  mapping(uint256 => RCLib.ContractCombination) public versionToContractCombination;
  mapping(uint256 => uint256) public violinToContractVersion;
  mapping(uint256 => bool) public versionIsActive;
  mapping(uint256 => bool) public freezeConfigVersion;

  RCLib.LatestMintableVersion public latest;

  constructor() {}

  /**
   * @dev after deployment the ConnectContract and the violin contract are tied together forever
   * @param violinAddress_ the address of the violin contract
   */
  function setViolinAddress(address violinAddress_) public onlyOwner {
    //once and forever
    require(violinAddress == address(0), "already initialized");
    violinAddress = violinAddress_;
  }

  /**
   * @dev Vountain can add a contract combination for the application. Itś not possible to change a contract combination once the version was set to active
   * @param id_ the version of the contract combination
   * @param controllerContract_  the request handling logic contract
   * @param accessControlContract_  the role token contract
   * @param metadataContract_  the metadata contract
   */
  function setContractConfig(
    uint256 id_,
    address controllerContract_,
    address accessControlContract_,
    address metadataContract_,
    address moveRoleContract_
  ) public onlyOwner {
    require(!freezeConfigVersion[id_], "don't change active versions");
    versionToContractCombination[id_].controllerContract = controllerContract_;
    versionToContractCombination[id_].accessControlContract = accessControlContract_;
    versionToContractCombination[id_].metadataContract = metadataContract_;
    versionToContractCombination[id_].moveRoleContract = moveRoleContract_;
  }

  /**
   * @dev Vountain can set a version to active. All contracts has to be initialized.
   * @dev The version is frozen and can not be changed later
   * @dev The latest version is set if the config has a higher number than the last latest version
   * @param version_ the version to set active
   */
  function setVersionActive(uint256 version_) public onlyOwner {
    RCLib.ContractCombination memory contracts = versionToContractCombination[version_];

    require(
      contracts.controllerContract != address(0) &&
        contracts.accessControlContract != address(0) &&
        contracts.metadataContract != address(0) &&
        contracts.moveRoleContract != address(0),
      "initialize contracts first"
    );
    versionIsActive[version_] = true;
    freezeConfigVersion[version_] = true;
    if (version_ >= latest.versionNumber) {
      latest.versionNumber = version_;
      latest.controllerContract = versionToContractCombination[version_]
        .controllerContract;
    }
  }

  /**
   * @dev function to set a version inactive
   * @param version_ the version to set inactive
   */
  function setVersionInactive(uint256 version_) public onlyOwner {
    versionIsActive[version_] = false;
  }

  /**
   * @dev an owner of the violin can set a version to active.
   * @dev it is not possible to choose an inactive version
   * @dev a downgrade is not possible
   * @param violinID_ the violin to change the combination
   * @param version_ the version to activate
   */
  function setViolinToContractVersion(uint256 violinID_, uint256 version_) public {
    IAccessControl accessControl = IAccessControl(getAccessControlContract(violinID_));
    require(
      accessControl.checkIfAddressHasAccess(
        msg.sender,
        RCLib.Role.OWNER_ROLE,
        violinID_
      ) || msg.sender == violinAddress,
      "account is not the owner"
    );
    require(versionIsActive[version_], "version not active");
    require(version_ >= violinToContractVersion[violinID_], "no downgrade possible");
    violinToContractVersion[violinID_] = version_;
  }

  /**
   * @dev returns the contract combination for a version
   * @param violinID_ the violin to check
   */
  function getContractsForVersion(uint256 violinID_)
    public
    view
    returns (RCLib.ContractCombination memory cc)
  {
    return versionToContractCombination[violinToContractVersion[violinID_]];
  }

  /**
   * @dev returns the controller contract for the violin
   * @param violinID_ the violin to check
   */
  function getControllerContract(uint256 violinID_)
    public
    view
    returns (address controllerContract)
  {
    RCLib.ContractCombination memory contracts = getContractsForVersion(violinID_);
    return contracts.controllerContract;
  }

  /**
   * @dev returns the moveRole contract for the violin
   * @param violinID_ the violin to check
   */
  function getMoveRoleContract(uint256 violinID_)
    public
    view
    returns (address moveRoleContract)
  {
    RCLib.ContractCombination memory contracts = getContractsForVersion(violinID_);
    return contracts.moveRoleContract;
  }

  /**
   * @dev returns the access control contract for the violin
   * @param violinID_ the violin to check
   */
  function getAccessControlContract(uint256 violinID_)
    public
    view
    returns (address accessControlContract)
  {
    RCLib.ContractCombination memory contracts = getContractsForVersion(violinID_);
    return contracts.accessControlContract;
  }

  /**
   * @dev returns the metadata contract for the violin
   * @param violinID_ the violin to check
   */
  function getMetadataContract(uint256 violinID_)
    public
    view
    returns (address metadataContract)
  {
    RCLib.ContractCombination memory contracts = getContractsForVersion(violinID_);
    return contracts.metadataContract;
  }
}


// File: contracts/TypeLibrary.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

abstract contract IConnectContract {
  function getContractsForVersion(uint256 violinID_)
    public
    view
    virtual
    returns (RCLib.ContractCombination memory cc);

  function violinAddress() public view virtual returns (address violinAddress);

  function getControllerContract(uint256 violinID_)
    public
    view
    virtual
    returns (address controllerContract);

  function getMoveRoleContract(uint256 violinID_)
    public
    view
    virtual
    returns (address moveRoleContract);

  function getAccessControlContract(uint256 violinID_)
    public
    view
    virtual
    returns (address accessControlContract);

  function getMetadataContract(uint256 violinID_)
    public
    view
    virtual
    returns (address metadataContract);

  function versionIsActive(uint256 version) external view virtual returns (bool);
}

abstract contract IConfigurationContract {
  function getConfigForVersion(uint256 version_)
    public
    view
    virtual
    returns (RCLib.RequestConfig[] memory);

  function checkTasks(RCLib.Tasks task_)
    public
    pure
    virtual
    returns (RCLib.TaskCluster cluster);

  function returnRoleConfig(uint256 version_, RCLib.Tasks configId_)
    public
    view
    virtual
    returns (RCLib.RequestConfig memory);

  function violinToVersion(uint256 tokenId) external view virtual returns (uint256);
}

abstract contract IViolines {
  function mintViolin(uint256 tokenId_, address addr_) external virtual;

  function ownerOf(uint256 tokenId) public view virtual returns (address);

  function balanceOf(address owner) public view virtual returns (uint256);
}

abstract contract IViolineMetadata {
  struct EventType {
    string name;
    string description;
    string role;
    address attendee;
    uint256 eventTimestamp;
  }

  function createNewDocument(
    uint256 requestId_,
    string memory docType_,
    int256 date_,
    string memory cid_,
    string memory title_,
    string memory description_,
    string memory source_,
    uint256 value_,
    uint256 value_original_currency_,
    string memory currency_,
    uint256 tokenID_
  ) external virtual;

  function changeMetadata(
    string memory name_,
    string memory description_,
    string memory longDescription_,
    string memory image_,
    string[] memory media_,
    string[] memory model3d_,
    string[] memory attributeNames_,
    string[] memory attributeValues_,
    uint256 tokenId_
  ) external virtual;

  function readManager(uint256 tokenID_) public view virtual returns (address);

  function readLocation(uint256 tokenID_) public view virtual returns (address);

  function setTokenManager(uint256 tokenID_, address manager_) external virtual;

  function setTokenArtist(uint256 tokenID_, address artist_) external virtual;

  function setTokenOwner(uint256 tokenID_, address owner_) external virtual;

  function setExhibitor(uint256 tokenID_, address exhibitor_) external virtual;

  function setTokenViolinMaker(uint256 tokenID_, address violinMaker_) external virtual;

  function setViolinLocation(uint256 tokenID_, address violinLocation_) external virtual;

  function createNewEvent(
    uint256 requestId_,
    string memory name_,
    string memory description_,
    RCLib.Role role_,
    address attendee_,
    uint256 eventStartTimestamp_,
    uint256 eventEndTimestamp_,
    string memory link,
    string memory geolocation,
    string[] memory file,
    RCLib.Tasks eventType_,
    uint256 tokenID_
  ) external virtual;
}

abstract contract IAccessControl {
  function mintRole(
    address assignee_,
    RCLib.Role role_,
    uint256 contractValidUntil_,
    uint256 violinID_,
    string memory image,
    string memory description
  ) external virtual;

  function roleAlreadyActive(uint256 violinId_, RCLib.Role role_)
    public
    virtual
    returns (bool);

  function changeMetadata(
    uint256 tokenId_,
    string memory description_,
    string memory image_
  ) public virtual;

  function checkIfAddressHasAccess(
    address addr_,
    RCLib.Role role_,
    uint256 violinID_
  ) public view virtual returns (bool);

  function setTimestamp(
    uint256 violinID_,
    uint256 timestamp_,
    address targetAccount_,
    RCLib.Role role_
  ) external virtual;

  function burnTokens(
    address targetAccount,
    RCLib.Role affectedRole,
    uint256 violinId
  ) external virtual;

  function administrativeCleanup(uint256 violinId) external virtual;

  function returnCorrespondingTokenID(
    address addr_,
    RCLib.Role role_,
    uint256 violinID_
  ) public view virtual returns (uint256);

  function administrativeMove(
    address from,
    address to,
    uint256 violinId,
    uint256 tokenId
  ) public virtual;
}

library RCLib {
  enum Role {
    OWNER_ROLE, //0
    VOUNTAIN, //1
    INSTRUMENT_MANAGER_ROLE, //2
    MUSICIAN_ROLE, //3
    VIOLIN_MAKER_ROLE, //4
    CUSTODIAL, //5
    EXHIBITOR_ROLE //6
  }

  enum TaskCluster {
    CREATION,
    CHANGE_DURATION,
    DELISTING,
    DELEGATING,
    EVENTS,
    DOCUMENTS,
    METADATA,
    MINTING
  }

  enum Tasks {
    CREATE_INSTRUMENT_MANAGER_ROLE, // 0
    CREATE_MUSICIAN_ROLE, // 1
    CREATE_VIOLIN_MAKER_ROLE, // 2
    CREATE_OWNER_ROLE, // 3
    CREATE_EXHIBITOR_ROLE, // 4
    CHANGE_DURATION_MUSICIAN_ROLE, // 4
    CHANGE_DURATION_INSTRUMENT_MANAGER_ROLE, // 6
    CHANGE_DURATION_VIOLIN_MAKER_ROLE, // 7
    CHANGE_DURATION_OWNER_ROLE, // 8
    CHANGE_DURATION_EXHIBITOR_ROLE, // 9
    DELIST_INSTRUMENT_MANAGER_ROLE, // 10
    DELIST_MUSICIAN_ROLE, // 11
    DELIST_VIOLIN_MAKER_ROLE, // 12
    DELIST_OWNER_ROLE, // 13
    DELIST_EXHIBITOR_ROLE, // 14
    DELEGATE_INSTRUMENT_MANAGER_ROLE, // 15
    DELEGATE_MUSICIAN_ROLE, // 16
    DELEGATE_VIOLIN_MAKER_ROLE, // 17
    DELEGATE_EXHIBITOR_ROLE, // 18
    DELEGATE_OWNER_ROLE, // 19
    ADD_CONCERT, // 20
    ADD_EXHIBITION, // 21
    ADD_REPAIR, // 22
    ADD_DOCUMENT, // 23
    MINT_NEW_VIOLIN, // 24
    CHANGE_METADATA_VIOLIN, // 25
    CHANGE_METADATA_ACCESSCONTROL // 26
  }

  struct TokenAttributes {
    address owner;
    address manager;
    address artist;
    address violinMaker;
    address violinLocation;
    address exhibitor;
    RCLib.CreatedEvent[] concert;
    RCLib.CreatedEvent[] exhibition;
    RCLib.CreatedEvent[] repair;
    RCLib.CreatedDocument[] document;
    RCLib.Metadata metadata;
  }

  struct RequestConfig {
    uint256 approvalsNeeded; //Amount of Approver
    RCLib.Role affectedRole; //z.B. MUSICIAN_ROLE
    RCLib.Role[] canApprove;
    RCLib.Role[] canInitiate;
    uint256 validity; //has to be in hours!!!
  }

  struct RoleNames {
    Role role;
    string[] names;
  }

  enum PROCESS_TYPE {
    IS_APPROVE_PROCESS,
    IS_CREATE_PROCESS
  }

  struct Request {
    uint256 requestId;
    uint256 violinId;
    uint256 contractValidUntil; //Timestamp
    address creator; //Initiator
    address targetAccount; //Get Role
    bool canBeApproved; //Is it already approved
    RCLib.Role affectedRole; //Role in AccessControl Contract
    Role[] canApprove; //Rollen, who can approve
    RCLib.Tasks approvalType; //e.g. CREATE_INSTRUMENT_MANAGER_ROLE
    uint256 approvalsNeeded; //Amount of approval needed
    uint256 approvalCount; //current approvals
    uint256 requestValidUntil; //how long is the request valid?
    address mintTarget; //optional for minting
    address[] approvedAddresses; //approvers
    RCLib.Event newEvent;
    RCLib.Documents newDocument;
    RCLib.Metadata newMetadata;
    RCLib.Role requesterRole;
  }

  struct AccessToken {
    string image;
    RCLib.Role role;
    uint256 violinID;
    uint256 contractValidUntil;
    string name;
    string description;
  }

  struct Event {
    string name;
    string description;
    RCLib.Role role;
    address attendee;
    uint256 eventStartTimestamp;
    uint256 eventEndTimestamp;
    string link;
    string geolocation;
    string[] file;
  }

  struct CreatedEvent {
    string name;
    string description;
    RCLib.Role role;
    address attendee;
    uint256 eventStartTimestamp;
    uint256 eventEndTimestamp;
    string link;
    string geolocation;
    string[] file;
    uint256 requestId;
  }

  struct Documents {
    string docType;
    int256 date;
    string cid;
    string title;
    string description;
    string source;
    uint256 value;
    uint256 valueOriginalCurrency;
    string originalCurrency;
  }

  struct CreatedDocument {
    string docType;
    int256 date;
    string cid;
    string title;
    string description;
    string source;
    uint256 value;
    uint256 valueOriginalCurrency;
    string originalCurrency;
    uint256 requestId;
  }

  struct Metadata {
    string name;
    string description;
    string longDescription;
    string image;
    string optionalOwnerImage;
    string[] media;
    string[] model3d;
    string[] attributeNames;
    string[] attributeValues;
  }

  struct ContractCombination {
    address controllerContract;
    address accessControlContract;
    address metadataContract;
    address moveRoleContract;
  }

  struct LatestMintableVersion {
    uint256 versionNumber;
    address controllerContract;
  }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

