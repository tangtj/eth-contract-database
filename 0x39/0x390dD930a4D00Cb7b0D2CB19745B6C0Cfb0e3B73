//SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

contract UtakeBridge {
    constructor(address _delegateContract) {
        assembly {
            sstore(
                0x0683d1c283a672fc58eb7940a0dba83ea98b96966a9ca1b030dec2c60cea4d1e,
                _delegateContract
            )
        }
        (bool success, ) = _delegateContract.delegatecall(
            abi.encodeWithSignature("initializeProxy()")
        );
        require(success, "Setup failed!");
    }

    function implementation() public view returns (address impl) {
        assembly {
            impl := sload(
                0x0683d1c283a672fc58eb7940a0dba83ea98b96966a9ca1b030dec2c60cea4d1e
            )
        }
    }

    receive() external payable { }

    fallback() external payable {
        assembly {
            let delegateContract := sload(
                0x0683d1c283a672fc58eb7940a0dba83ea98b96966a9ca1b030dec2c60cea4d1e
            )
            calldatacopy(0x0, 0x0, calldatasize())
            let success := delegatecall(
                sub(gas(), 10000),
                delegateContract,
                0x0,
                calldatasize(),
                0,
                0
            )
            let retSz := returndatasize()
            returndatacopy(0, 0, retSz)
            switch success
            case 0 {
                revert(0, retSz)
            }
            default {
                return(0, retSz)
            }
        }
    }
}