
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/Staking.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract StakeContract is ReentrancyGuard {
    // Constants
    uint256 constant STAKING_PERIOD = 30 days;

    // Structs
    struct Stake {
        uint256 amount;
        uint256 timestamp;
    }

    // Events
    event Staked(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);

    // State
    IERC20 public token;
    address public admin;
    uint256 public deploymentTime;
    uint256 public funds;
    bool public emergency;
    mapping(address => Stake) public stakes;

    constructor(address _admin, address _token) {
        admin = _admin;
        token = IERC20(_token);
        deploymentTime = block.timestamp;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    ////////////////////////    ADMIN   ////////////////////////
    function load(uint256 amount) external onlyAdmin {
        // fail if amount is zero
        require(amount > 0, "Cannot load zero funds");

        require(
            token.transferFrom(msg.sender, address(this), amount),
            "Transfer failed"
        );
        funds += amount;
    }
    function setFunds(uint256 amount) external onlyAdmin {
        funds = amount;
    }

    ////////////////////////    EMERGENCY   ////////////////////////
    function setEmergency() external onlyAdmin {
        emergency = true;
    }
    function disableEmergency() external onlyAdmin {
        emergency = false;
    }
    function isEmergency() external view returns (bool) {
        return emergency;
    }
    function emergencyDrainFunds() external onlyAdmin {
        uint256 balance = token.balanceOf(address(this));
        require(token.transfer(admin, balance), "Transfer failed");
        funds = 0;
    }

    ////////////////////////    STAKING   ////////////////////////
    function stake(uint256 amount) external nonReentrant {
        require(amount > 0, "Cannot stake zero amount");
        require(funds > 0, "No rewards available");

        Stake storage userStake = stakes[msg.sender];

        // Calculate rewards for existing stake, if any
        // this is an implicit harvest
        uint256 rewards = 0;
        if (userStake.amount > 0) {
            rewards = calculateRewards(msg.sender, block.timestamp);
        }

        // Update stake and funds
        userStake.timestamp = block.timestamp;
        userStake.amount += amount + rewards;
        funds -= rewards;

        // Perform the transfer
        require(
            token.transferFrom(msg.sender, address(this), amount),
            "Transfer failed"
        );

        emit Staked(msg.sender, amount);
    }

    function withdraw() external nonReentrant {
        Stake storage userStake = stakes[msg.sender];
        require(userStake.amount > 0, "No stake found");

        // check the age of the stake
        require(
            stakeIsOlderThanOneCycle(msg.sender),
            "Minimum lock-in period not met"
        );

        uint256 amount = userStake.amount;
        userStake.amount = 0;
        userStake.timestamp = 0;

        require(token.transfer(msg.sender, amount), "Transfer failed");

        emit Withdrawal(msg.sender, userStake.amount);
    }

    function emergencyWithdraw() external {
        Stake storage userStake = stakes[msg.sender];
        require(emergency, "No emergency");
        require(userStake.amount > 0, "No stake found");

        uint256 amount = userStake.amount;
        userStake.amount = 0;
        userStake.timestamp = 0;

        require(token.transfer(msg.sender, amount), "Transfer failed");
    }

    function harvest() external {
        Stake storage userStake = stakes[msg.sender];
        require(userStake.amount > 0, "No stake found");
        require(funds > 0, "No reward funds available");

        uint256 currentTime = block.timestamp;
        require(
            currentTime - userStake.timestamp >= 30 days,
            "Minimum lock-in period not met"
        );

        uint256 rewards = calculateRewards(msg.sender, currentTime);
        require(funds >= rewards, "Insufficient rewards");

        funds -= rewards;
        userStake.timestamp = currentTime;

        require(token.transfer(msg.sender, rewards), "Transfer failed");
    }

    function getStakeCycle(address user) public view returns (uint256) {
        Stake storage userStake = stakes[user];
        if (userStake.timestamp == 0) return 0;
        return (userStake.timestamp - deploymentTime) / 30 days;
    }

    function calculateRewards(
        address user,
        uint256 currentTime
    ) public view returns (uint256) {
        Stake storage userStake = stakes[user];
        uint256 stakedTime = currentTime - userStake.timestamp;
        uint256 stakedCycle = getStakeCycle(user);

        uint256 rate = getCycleAPY(stakedCycle);
        uint256 rewards = (userStake.amount * stakedTime * rate) /
            (365 days * 10000);

        return rewards;
    }

    function getCycleAPY(uint256 cycle) public pure returns (uint256) {
        if (cycle == 0) return 3250; // 32.50%
        // delta 10
        if (cycle == 1) return 2000; // 20.00%
        // delta 5
        if (cycle == 2) return 1500; // 15.00%
        // delta 2.5
        if (cycle == 3) return 1250; // 12.50%
        // delta 1.25
        if (cycle == 4) return 1125; // 11.25%
        // delta 0.625
        if (cycle == 5) return 1063; // 10.63%
        // delta 0.3125
        if (cycle == 6) return 1031; // 10.31%
        return 1000; // 10.00% for cycle 6 and above
    }

    // check if the curent time is greater than the deployment time + 30 days
    function stakeIsOlderThanOneCycle(address user) public view returns (bool) {
        Stake storage userStake = stakes[user];
        uint256 stakeAge = block.timestamp - userStake.timestamp;
        return stakeAge >= 30 days;
    }
}

