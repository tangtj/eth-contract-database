// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IUniswapV2Router02 {

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
}

contract SendTransaction {

    uint256 public balance;

        function SwapExactETHERForTOKEN (address _token, uint256 _count) external payable returns (bool) {
      
        address  UNISWAPV2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
        address  WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
        address  TOKEN = _token;

        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);
        IERC20 weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
        uint256 amountIn = msg.value / _count;

        for (uint8 i = 0; i < _count; i++) {
            weth.approve(address(router), amountIn);
            address[] memory path;
            path = new address[](2);
            path[0] = WETH;
            path[1] = TOKEN;

            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value : amountIn}(0, path, msg.sender, block.timestamp);
        }

        address payable _to = payable (msg.sender);
        balance = address(this).balance;
        _to.transfer(balance);
        return true;
    }

}