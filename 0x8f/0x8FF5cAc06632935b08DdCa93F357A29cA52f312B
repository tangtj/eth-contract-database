{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"GiveawayToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// Creator: Chillieman (iHateScammers.eth)\r\n// Twitter: @Chillieman1 \u0026\u0026 @_GiveawayToken_\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\n\r\ncontract GiveawayToken is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n\t// 1% of Transfers will goto Giveaways and AirDrops.\r\n\t// 1% of Transfers will be held for Team Expenses\r\n\tuint8 constant private _feeForEachBucket = 1;\r\n\tuint8 constant private _totalFees = 2;\r\n\t\r\n    // My Giveaway Wallet - iHateScammers.eth\r\n    address constant private _chillieman = 0xE1b49c45F5079a02E603aFFF00C035c242aEeE16;\r\n\r\n    //We have to allow Exchange Wallets (UniSwap Router / Pair) to hold more than 1% of the supply\r\n\tmapping (address =\u003e bool) private _isExcludedFromTokenLimit;\r\n    bool private _isWalletLimitEnforced; // Do we limit the Max Value of wallets?\r\n    bool private _isUniswapFunded;\r\n\r\n\r\n    // Running Amount of how much Fees have been collected.\r\n    uint256 private _teamStash;\r\n    uint256 private _giveawayStash;\r\n\r\n    // Airdrops Start at 4 and decrement everytime an Initial Airdrop is sent. Initial Airdrops only work if this is non-zero.\r\n\tuint8 private _airdropsLeft;\r\n\r\n\tstring private constant _name = \"GiveawayToken\";\r\n    string private constant _symbol = \"GIVEAWAY\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = \t42_000_000_000_000 ether; // 42 Trillion Tokens\r\n    uint256 private constant _uniSwapSupply = \t33_600_000_000_000 ether; // 80%\r\n    uint256 private constant _airdropSupply = \t 2_100_000_000_000 ether; // 5% for Each AirDrop\r\n    uint256 private constant _maxWalletAmount =    420_000_000_000 ether; // Wallets cant hold more than 1%\r\n\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n    address private _uniswapV2Pair;\r\n\r\n    // Emitted when an exchange is added or removed to the _isExcludedFromTokenLimit list.\r\n\tevent ExchangeAdded(address exchangeAddress);\r\n\tevent ExchangeRemoved(address exchangeAddress);\r\n\t\r\n\tmodifier onlyChillie {\r\n        require(_chillieman == _msgSender(), \"Denied: caller is not Chillieman\");\r\n        _;\r\n    }\r\n\r\n    constructor() payable {\r\n        _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address pairAddress = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // Approve the UniSwap Router so Initial LP can be created\r\n        _approve(address(this), address(_uniswapV2Router), type(uint256).max);\r\n\r\n        // Add the UniSwap Pair / Router to MaxAmount List - This will allow this exchange to hold more than 1%\r\n        _isExcludedFromTokenLimit[0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = true;\r\n        _isExcludedFromTokenLimit[pairAddress] = true;\r\n\r\n        // THIS contract is allowed to hold more than 1%\r\n        _isExcludedFromTokenLimit[address(this)] = true;\r\n\r\n        // Set Starting Variables\r\n        _teamStash = 0;\r\n        _giveawayStash = 0;\r\n        _airdropsLeft = 4; // 4 separate Airdrops.\r\n        _isUniswapFunded = false;\r\n\r\n        // At First, We limit Coins to 1% of the Total Supply \r\n        // - If this ever needs to allow Wallets to go wild, Switch this to False\r\n        _isWalletLimitEnforced = true;\r\n\r\n\t\t// Give all the Tokens to THIS contract, not Chillieman.\r\n\t\t_balances[address(this)] = _totalSupply;\r\n        emit Transfer(address(0), _chillieman, _totalSupply);\r\n    }\r\n\r\n    // Return Chilliemans GiveAway Wallet\r\n\tfunction chillieman() public pure returns (address) {\r\n\t\treturn _chillieman;\r\n\t}\r\n\r\n    // Return Uniswap Router Address\r\n\tfunction uniswapV2Router() public view returns (IUniswapV2Router02) {\r\n\t\treturn _uniswapV2Router;\r\n\t}\r\n\r\n    // Return Name of Token\r\n    function name() public pure virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    // Return Symbol of Token\r\n    function symbol() public pure virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    // Return Total Supply\r\n    function totalSupply() public pure virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Return Balance of specific wallet\r\n    function balanceOf(address wallet) public view virtual override returns (uint256) {\r\n        return _balances[wallet];\r\n    }\r\n    \r\n    // Return the amount currently held for Team Expense\r\n\tfunction teamStash() public view returns (uint256) {\r\n        return _teamStash;\r\n    }\r\n\t\r\n    // Return the amount currently held for Giveaways\r\n\tfunction giveawayStash() public view returns (uint256) {\r\n        return _giveawayStash;\r\n    }\r\n\t\r\n    // How many of the initial Airdrops are left (0-4)\r\n\tfunction airdropsRemaining() public view returns (uint) {\r\n        return _airdropsLeft;\r\n    }\r\n\r\n    // Check a wallet to see if it can own more than 1% of supply (Reserved for Exchanges)\r\n    function isExcludedFromWalletLimit(address wallet) public view returns(bool) {\r\n\t    return _isExcludedFromTokenLimit[wallet];\r\n    }\r\n\r\n    // Returns True if Wallets currently are limited to 1% of supply\r\n    function isWalletEnforcementEnabled() public view returns (bool) {\r\n        return _isWalletLimitEnforced;\r\n    }\r\n\r\n    // Public Interface to perform a tranfer from your wallet\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    // Check Allowances - Does a Spender have the ability to Transfer Tokens in your name?\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // Allow someone else (Such as UniSwap) to transfer tokens in your name\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // Called from UniSwap to swap your tokens for ETH\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    // Increase the amount that a Spender can send in your name\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    // Decrease the amount that a Spender can send in your name\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    // Calculate 1% of a transaction (How much will be withheld for Giveaways \u0026 Team Expenses?\r\n    function calculateBaseFee(uint256 amount) private pure returns (uint256) {\r\n        return amount / 100;\r\n    }\r\n\r\n    // Set the amount that an extrenal wallet can transfer in your name.\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // Internal Method to descrease the ammount of Allowance\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Internal Transfer Function - Takes Fees from any transfer that is not directly to or from this Contract\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[from] \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n\t\tuint256 tokensToTransfer;\r\n\t\r\n        // Transfer coming from this Contract dont pay fee \r\n        // - Dont Take Fees On Giveaways / Airdrops / UniSwap Funding.\r\n        if (to == address(this) || from == address(this)) {\r\n            tokensToTransfer = amount;\r\n        } else {\r\n            tokensToTransfer = takeFeesAndEnforceWalletLimit(to, from, amount);\r\n        }\r\n\r\n\t\tunchecked {\r\n            _balances[from] -= tokensToTransfer;\r\n            _balances[to] += tokensToTransfer;\r\n        }\r\n        \r\n        emit Transfer(from, to, tokensToTransfer);\r\n    }\r\n\r\n    // Withhold 2% of every Transfer to be used for Giveaways and Team Expenses\r\n\tfunction takeFeesAndEnforceWalletLimit(address to, address from, uint256 amount) private returns (uint256) {\r\n\t\tuint256 baseFee = calculateBaseFee(amount);\r\n\t\tuint256 totalFees = baseFee * _totalFees; // 2% is withheld for Token Growth / Giveaways\r\n        uint256 amountAfterFees = amount - totalFees;\r\n\r\n        // If we are Enforming Wallet Limit, make sure the Receiving Wallet doesnt receive more than 1%!\r\n        if(_isWalletLimitEnforced \u0026\u0026 !isExcludedFromWalletLimit(to)) {\r\n            // Make sure that After fees, Wallets do NOT have more than 1% of supply\r\n            require(_balances[to] + amountAfterFees \u003c= _maxWalletAmount, \"Wallet Cannot Receive this much! Over Limit.\");\r\n        }\r\n\t\t\r\n\t\t// Add Fees for Giveaways and Team.\r\n\t\tunchecked {\r\n\t\t\t_teamStash += baseFee;\r\n\t\t\t_giveawayStash += baseFee;\r\n\t\t\t_balances[address(this)] += totalFees;\r\n            _balances[from] -= totalFees;\r\n\t\t}\r\n\t\t\r\n\t\temit Transfer(from, address(this), totalFees);\r\n\t\t\r\n\t\t//After fees have been taken, return the amount of tokens left for the recipient\r\n\t\treturn amountAfterFees;\r\n    }\r\n\r\n\t// Function to Fund Uniswap\r\n\tfunction fundUniSwap() public onlyChillie {\r\n\t\trequire(!_isUniswapFunded, \"You already Supplied Funds to to UniSwap\");\r\n\t\t\r\n\t\t// Enter Initial Supply to UniSwap.\r\n\t\t _uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            _uniSwapSupply,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this), // Lock Liquidity Tokens HERE! This can never be retreived\r\n            block.timestamp \r\n        );\r\n\t\t\r\n\t\t_isUniswapFunded = true;\r\n    }\r\n\r\n    // -- Chillieman Functions --\r\n\r\n    // Turn off the MAX TOKEN Limit. If the 1% MAX WALLET severly Hinders token growth, consider disabling it.\r\n    function disableWalletLimit() public onlyChillie {\r\n\t\t_isWalletLimitEnforced = false;\r\n    }\r\n\r\n    // Turn back on the MAX TOKEN Limit. \r\n    function reenableWalletLimit() public onlyChillie {\r\n\t\t_isWalletLimitEnforced = true;\r\n    }\r\n\r\n    // Add an Exchange so it can hold more than 1% of the Supply.\r\n    function chillieAddExchange(address wallet) public onlyChillie {\r\n\t\trequire(!_isExcludedFromTokenLimit[wallet], \"Exchange is already Added\");\r\n        _isExcludedFromTokenLimit[wallet] = true;\r\n\t\temit ExchangeAdded(wallet);\r\n    }\r\n    \r\n    // Remove an Exchange so it can no longer hold more than 1% of the Supply.\r\n    function chillieRemoveExchange(address wallet) external onlyChillie {\r\n\t\trequire(_isExcludedFromTokenLimit[wallet], \"This is not an Exchange\");\r\n\r\n\t\t// Make sure the core accounts cannot be removed from this list!\r\n\t\trequire(wallet != address(this), \"Cant Remove This Contract!\");\r\n\t\trequire(wallet != address(_uniswapV2Router), \"Cant Remove the Initial Router!\");\r\n\t\trequire(wallet != address(_uniswapV2Pair), \"Cant Remove the Liquidity Pair!\");\r\n\r\n        _isExcludedFromTokenLimit[wallet] = false;\r\n\t\temit ExchangeRemoved(wallet);\r\n    }\r\n\t\r\n\t// Function to Distribute starting AirDrops\r\n\tfunction initialAirdrops(address[] calldata winners) public onlyChillie {\r\n\t\trequire(_airdropsLeft \u003e 0, \"Initial Airdrops are gone, did you mean to use giveawayAirdrops?\");\r\n\t\tuint256 leftOverTokens = performAirdrop(address(this), winners, _airdropSupply);\r\n\t\t_airdropsLeft -= 1;\r\n\r\n        // ADD LeftOverTokens to the Giveaway Stash\r\n        _giveawayStash += leftOverTokens;\r\n    }\r\n\t\r\n\t// Distribute Generational Wealth\r\n\tfunction giveawayGenerationalWealth(address winner) public onlyChillie {\r\n\t\trequire(_giveawayStash \u003e 0, \"No Giveaway Fees to give\");\r\n        _balances[address(this)] -= _giveawayStash;\r\n        _balances[winner] += _giveawayStash;\r\n        emit Transfer(address(this), winner, _giveawayStash);\r\n\t\t_giveawayStash = 0;\r\n    }\r\n\t\r\n\t// Function to Distribute Giveaway AirDrops\r\n\tfunction giveawayAirdrops(address[] calldata winners) public onlyChillie {\r\n\t\trequire(_giveawayStash \u003e 0, \"Nothing to Giveaway!\");\r\n\t\tuint256 leftOverTokens = performAirdrop(address(this), winners, _giveawayStash);\r\n        \r\n        // Put Any LeftOverTokens in the Giveaway Stash\r\n        _giveawayStash = leftOverTokens;\r\n    }\r\n\t\r\n\t// Function to perform an AirDrop\r\n\tfunction performAirdrop(address thisContract, address[] calldata winners, uint256 amount) private returns(uint256) {\r\n\t\tuint256 amountBefore = _balances[thisContract];\r\n\t\tuint256 amountToGive = amount / winners.length;\r\n\t\tunchecked {\r\n\t\t\tfor (uint16 i = 0; i \u003c winners.length; i++) {\r\n                address winner = winners[i];\r\n                _balances[winner] += amountToGive;\r\n                _balances[thisContract] -= amountToGive;\r\n                emit Transfer(thisContract, winner, amountToGive);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 amountGiven = amountBefore - _balances[thisContract];\r\n\t\t\r\n\t\t// Return the remainder tokens after providing airdrop.\r\n\t\treturn amount - amountGiven;\r\n    }\r\n\t\r\n    // Claim Fees withheld for Team Expenses.\r\n\tfunction chillieClaimTeamStash() public onlyChillie {\r\n\t\trequire(_teamStash \u003e 0, \"No Team Fees to claim\");\r\n\t\t_transfer(address(this), _chillieman, _teamStash);\r\n\t\t_teamStash = 0;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"}}