{"BEBEToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract BEBEToken is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    string private _name = \u0027Bebe\u0027;\r\n    string private _symbol = \u0027BEBE\u0027;\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 420690000000000 * 10 ** uint256(_decimals);\r\n\r\n    address private _fundAddress;\r\n    address private _marketingAddress;\r\n\r\n    uint256 public _fundFee = 2;\r\n    uint256 private _previousFundFee = _fundFee;\r\n    uint256 private _fundFeeTotal;\r\n\r\n    mapping(address =\u003e bool) private _isExcludedFromFee;\r\n    mapping (address =\u003e bool) private automatedMarketMakerPairs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    constructor (address fundAddress, address marketingAddress) {\r\n        _fundAddress = fundAddress;\r\n        _marketingAddress = marketingAddress;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[fundAddress] = true;\r\n        _isExcludedFromFee[marketingAddress] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n    \r\n    receive () external payable {}\r\n    \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function totalFundFee() public view returns (uint256) {\r\n        return _fundFeeTotal;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != address(0), \"The UniSwap pair set to the zero address\");\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n    \r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n \r\n        if(\r\n            _isExcludedFromFee[sender] || \r\n            _isExcludedFromFee[recipient] || \r\n            (!automatedMarketMakerPairs[sender] \u0026\u0026 !automatedMarketMakerPairs[recipient])\r\n        ) {\r\n            removeAllFee();\r\n        }\r\n        _transferStandard(sender, recipient, amount);\r\n        if(\r\n            _isExcludedFromFee[sender] || \r\n            _isExcludedFromFee[recipient] || \r\n            (!automatedMarketMakerPairs[sender] \u0026\u0026 !automatedMarketMakerPairs[recipient])\r\n        ) {\r\n            restoreAllFee();\r\n        } \r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 tTransferAmount, uint256 tFund) = _getValues(tAmount);\r\n\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n\r\n        if(\r\n            !_isExcludedFromFee[sender] \u0026\u0026 \r\n            !_isExcludedFromFee[recipient] \u0026\u0026\r\n            (automatedMarketMakerPairs[sender] || automatedMarketMakerPairs[recipient])\r\n        ) {\r\n            uint256 fundAmount = tFund.div(2);\r\n            _balances[_fundAddress] = _balances[_fundAddress].add(fundAmount);\r\n            _balances[_marketingAddress] = _balances[_marketingAddress].add(tFund.sub(fundAmount));\r\n            _fundFeeTotal = _fundFeeTotal.add(tFund);\r\n            emit Transfer(sender, _fundAddress, fundAmount);\r\n            emit Transfer(sender, _marketingAddress, tFund.sub(fundAmount));\r\n        }\r\n    \r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function calculateFundFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_fundFee).div(\r\n            10 ** 2\r\n        );\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFund) = _getTValues(tAmount);\r\n        return (tTransferAmount, tFund);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        uint256 tFund = calculateFundFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFund);\r\n        return (tTransferAmount, tFund);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if(_fundFee == 0) return;\r\n        _previousFundFee = _fundFee;\r\n        _fundFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _fundFee = _previousFundFee;\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ninterface IERC20 {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath#mul: OVERFLOW\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b \u003e 0, \"SafeMath#div: DIVISION_BY_ZERO\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n}\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003c= a, \"SafeMath#sub: UNDERFLOW\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c \u003e= a, \"SafeMath#add: OVERFLOW\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the air of two unsigned integers, reverting on overflow.\r\n    * Counterpart to Solidity\u0027s `++` operator.\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n    function air(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\r\n    return a % b;\r\n  }\r\n\r\n}"}}