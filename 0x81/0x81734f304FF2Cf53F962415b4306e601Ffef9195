
// File: UniswapV3FeeCollector.sol
// SPDX-License-Identifier: GPL-3.0-only

/* ========== Requirements and Imports ========== 
================================================
*/

pragma solidity 0.8.9;

import "Ownable.sol";
import "INonfungiblePositionManager.sol";

contract LPFeeCollector is Ownable {
    // Addresses //

    address private immutable _EEFI_FURNACE =
        0xe9B230DA91FE0f451d9b92Fd5213Bde058567Cd1;

    address private constant _POSITION_MANAGER =
        0xC36442b4a4522E871399CD717aBDD847Ab11FE88;

    //Interface //
    INonfungiblePositionManager public constant position_manager =
        INonfungiblePositionManager(_POSITION_MANAGER);

    /**
     * @notice Returns data about fee balances from a Uniswap V3 position
     * @dev Reverts if caller is not owner and the contract is not authorized to call 'collect' on the position manager.
     */

    function getCurrentReward(
        uint256 _tokenId,
        uint128 _amount0Max,
        uint128 _amount1Max
    ) public onlyOwner returns (uint256 amount0, uint256 amount1) {
        CollectParams memory params = CollectParams({
            tokenId: _tokenId,
            recipient: _EEFI_FURNACE,
            amount0Max: _amount0Max,
            amount1Max: _amount1Max
        });

        (amount0, amount1) = position_manager.collect(params);
    }

    /**
     * @notice Collects fees from a Uniswap V3 position and sends assets to EEFI Furnace.
     * @dev Reverts if the caller is not the Owner. Contract must be authorized to manage position.
     */

    function collectUniswapV3Fees(
        uint256 _tokenId,
        uint128 _amount0Max,
        uint128 _amount1Max
    ) external onlyOwner {
        position_manager.collect(
            CollectParams({
                tokenId: _tokenId,
                recipient: _EEFI_FURNACE,
                amount0Max: _amount0Max,
                amount1Max: _amount1Max
            })
        );
    }
}


// File: Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: INonfungiblePositionManager.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.4.23 <0.9.0;

struct CollectParams {
    uint256 tokenId;
    address recipient;
    uint128 amount0Max;
    uint128 amount1Max;
}

/// tokenId The ID of the NFT for which tokens are being collected,
/// recipient The account that should receive the tokens,
/// amount0Max The maximum amount of token0 to collect,
/// amount1Max The maximum amount of token1 to collect
/// amount0 The amount of fees collected in token0
/// amount1 The amount of fees collected in token1

interface INonfungiblePositionManager {
    function collect(
        CollectParams calldata params
    ) external payable returns (uint256 amount0, uint256 amount1);
}

