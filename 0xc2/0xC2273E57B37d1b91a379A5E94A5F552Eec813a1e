
// File: LiquidityManager.sol
// SPDX-License-Identifier: -- BCOM --

pragma solidity =0.8.25;

import "./IERC20.sol";
import "./ISwapsPair.sol";
import "./ISwapsRouter.sol";

contract LiquidityManager {

    address public owner;
    address public worker;

    ISwapsPair public pair;
    ISwapsRouter public router;

    address public token0;
    address public token1;

    modifier onlyOwner() {
        require(
            msg.sender == owner,
            "Caller is not the owner"
        );
        _;
    }

    modifier onlyWorker() {
        require(
            msg.sender == worker,
            "Caller is not the worker"
        );
        _;
    }

    event LogQuote(
        uint256 requiredWethForSwap,
        uint256 minAmountVerseToBuy,
        uint256 reserve0,
        uint256 reserve1
    );

    event LogOut(
        uint256 amountWeth,
        uint256 amountVerse
    );

    event LogAdded(
        uint256 addedVerse,
        uint256 addedWeth,
        uint256 liquidity
    );

    constructor() {

        owner = msg.sender;
        worker = msg.sender;

        router = ISwapsRouter(
            0xB4B0ea46Fe0E9e8EAB4aFb765b527739F2718671
        );

        token0 = 0x249cA82617eC3DfB2589c4c17ab7EC9765350a18;
        token1 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

        IERC20(token0).approve(
            address(router),
            type(uint256).max
        );

        IERC20(token1).approve(
            address(router),
            type(uint256).max
        );

        pair = ISwapsPair(
            router.pairFor(
                router.FACTORY(),
                token0,
                token1
            )
        );

        pair.approve(
            address(router),
            type(uint256).max
        );
    }

    function buyBackVerseToken(
        uint256 _liquidityAmountToUse,
        uint256 _expectMinVerseRemoved,
        uint256 _expectMinWethRemoved,
        uint256 _minAmountVerseToBuy,
        uint256 _maxAmountWethForSwap,
        uint256 _desiredVerseToAddBack,
        uint256 _desiredWethToAddBack,
        uint256 _expectMinVerseToAddBack,
        uint256 _expectMinWethToAddBack
    )
        external
        onlyWorker
    {
        pair.approve(
            address(router),
            _liquidityAmountToUse
        );

        (
            uint256 _amountVerse,
            uint256 _amountWeth
        ) = router.removeLiquidity(
            token0,
            token1,
            _liquidityAmountToUse,
            _expectMinVerseRemoved,
            _expectMinWethRemoved,
            address(this),
            block.timestamp
        );

        emit LogOut(
            _amountWeth,
            _amountVerse
        );

        (
            uint256 reserve0,
            uint256 reserve1,
        ) = pair.getReserves();

        uint256 requiredWethForSwap = router.quote(
            _minAmountVerseToBuy,
            reserve0,
            reserve1
        );

        emit LogQuote(
            requiredWethForSwap,
            _minAmountVerseToBuy,
            reserve0,
            reserve1
        );

        if (requiredWethForSwap > _maxAmountWethForSwap) {
            revert("LiquidityManager: TOO_EXPENSIVE");
        }

        router.swapExactTokensForTokens(
            _maxAmountWethForSwap,
            _minAmountVerseToBuy,
            _getSwapPathFromWethToVerse(),
            address(this),
            block.timestamp
        );

        IERC20(token0).approve(
            address(router),
            _desiredVerseToAddBack
        );

        IERC20(token1).approve(
            address(router),
            _desiredWethToAddBack
        );

        (
            uint256 addedVerse,
            uint256 addedWeth,
            uint256 liquidity
        ) = router.addLiquidity(
            token0,
            token1,
            _desiredVerseToAddBack,
            _desiredWethToAddBack,
            _expectMinVerseToAddBack,
            _expectMinWethToAddBack,
            address(this),
            block.timestamp
        );

        emit LogAdded(
            addedVerse,
            addedWeth,
            liquidity
        );
    }

    function buyBackVerseTokenSimple(
        uint256 _liquidityAmountToUse,
        uint256 _expectMinVerseRemoved,
        uint256 _expectMinWethRemoved,
        uint256 _minAmountVerseToBuy,
        uint256 _maxAmountWethForSwap,
        uint256 _expectMinVerseToAddBack,
        uint256 _expectMinWethToAddBack
    )
        external
        onlyWorker
    {
        (
            uint256 _amountVerse,
            uint256 _amountWeth
        ) = router.removeLiquidity(
            token0,
            token1,
            _liquidityAmountToUse,
            _expectMinVerseRemoved,
            _expectMinWethRemoved,
            address(this),
            block.timestamp
        );

        emit LogOut(
            _amountWeth,
            _amountVerse
        );

        (
            uint256 reserve0,
            uint256 reserve1,
        ) = pair.getReserves();

        uint256 requiredWethForSwap = router.quote(
            _minAmountVerseToBuy,
            reserve0,
            reserve1
        );

        emit LogQuote(
            requiredWethForSwap,
            _minAmountVerseToBuy,
            reserve0,
            reserve1
        );

        if (requiredWethForSwap > _maxAmountWethForSwap) {
            revert("LiquidityManager: TOO_EXPENSIVE");
        }

        router.swapExactTokensForTokens(
            _maxAmountWethForSwap,
            _minAmountVerseToBuy,
            _getSwapPathFromWethToVerse(),
            address(this),
            block.timestamp
        );

        (
            uint256 addedVerse,
            uint256 addedWeth,
            uint256 liquidity
        ) = router.addLiquidity(
            token0,
            token1,
            IERC20(token0).balanceOf(address(this)),
            IERC20(token1).balanceOf(address(this)),
            _expectMinVerseToAddBack,
            _expectMinWethToAddBack,
            address(this),
            block.timestamp
        );

        emit LogAdded(
            addedVerse,
            addedWeth,
            liquidity
        );
    }

    function withdrawTokens(
        address _token,
        address _to,
        uint256 _amount
    )
        external
        onlyOwner
    {
        IERC20(_token).transfer(
            _to,
            _amount
        );
    }

    function withdrawETH(
        address _to,
        uint256 _amount
    )
        external
        onlyOwner
    {
        payable(_to).transfer(
            _amount
        );
    }

    function setWorker(
        address _worker
    )
        external
        onlyOwner
    {
        worker = _worker;
    }

    function setOwner(
        address _owner
    )
        external
        onlyOwner
    {
        owner = _owner;
    }

    function getVerseBalanceSelf()
        public
        view
        returns (uint256)
    {
        return IERC20(token0).balanceOf(
            address(this)
        );
    }

    function getWethBalanceSelf()
        public
        view
        returns (uint256)
    {
        return IERC20(token1).balanceOf(
            address(this)
        );
    }

    function _getSwapPathFromWethToVerse()
        private
        view
        returns (address[] memory path)
    {
        path = new address[](2);
        path[0] = token1; // WETH
        path[1] = token0; // VERSE
    }
}


// File: ISwapsRouter.sol
// SPDX-License-Identifier: -- BCOM --

pragma solidity =0.8.25;

interface ISwapsRouter {

    function WETH()
        external
        returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint[] memory amounts
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB
        );

    function getReserves(
        address factory,
        address tokenA,
        address tokenB
    )
        external
        view
        returns (
            uint112 reserveA,
            uint112 reserveB,
            uint32 blockTimestampLast
        );

    function FACTORY()
        external
        view
        returns (address);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    )
        external
        pure
        returns (uint256 amountB);

    function pairFor(
        address factory,
        address tokenA,
        address tokenB
    )
        external
        pure
        returns (address);
}


// File: ISwapsPair.sol
// SPDX-License-Identifier: BCOM

pragma solidity =0.8.25;

import "./ISwapsERC20.sol";

interface ISwapsPair is ISwapsERC20 {

    function MINIMUM_LIQUIDITY()
        external
        pure
        returns (uint256);

    function factory()
        external
        view
        returns (address);

    function token0()
        external
        view
        returns (address);

    function token1()
        external
        view
        returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast()
        external
        view
        returns (uint256);

    function price1CumulativeLast()
        external
        view
        returns (uint256);

    function kLast()
        external
        view
        returns (uint256);

    function mint(
        address _to
    )
        external
        returns (uint256 liquidity);

    function burn(
        address _to
    )
        external
        returns (
            uint256 amount0,
            uint256 amount1
        );

    function swap(
        uint256 _amount0Out,
        uint256 _amount1Out,
        address _to,
        bytes calldata _data
    )
        external;

    function skim()
        external;

    function initialize(
        address,
        address
    )
        external;
}


// File: IERC20.sol
// SPDX-License-Identifier: -- BCOM --

pragma solidity =0.8.25;

interface IERC20 {

    function balanceOf(
        address _owner
    )
        external
        view
        returns (uint256);

    function transfer(
        address _to,
        uint256 _value
    )
        external
        returns (bool);

    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    )
        external
        returns (bool);

    function approve(
        address _spender,
        uint256 _value
    )
        external
        returns (bool);
}


// File: ISwapsERC20.sol
// SPDX-License-Identifier: BCOM

pragma solidity =0.8.25;

interface ISwapsERC20 {

    function name()
        external
        pure
        returns (string memory);

    function symbol()
        external
        pure
        returns (string memory);

    function decimals()
        external
        pure
        returns (uint8);

    function totalSupply()
        external
        view
        returns (uint256);

    function balanceOf(
        address _owner
    )
        external
        view
        returns (uint256);

    function allowance(
        address _owner,
        address _spender
    )
        external
        view
        returns (uint256);

    function approve(
        address _spender,
        uint256 _value
    )
        external
        returns (bool);

    function transfer(
        address _to,
        uint256 _value
    )
        external
        returns (bool);

    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    )
        external
        returns (bool);

    function DOMAIN_SEPARATOR()
        external
        view
        returns (bytes32);

    function PERMIT_TYPEHASH()
        external
        pure
        returns (bytes32);

    function nonces(
        address _owner
    )
        external
        view
        returns (uint256);

    function permit(
        address _owner,
        address _spender,
        uint256 _value,
        uint256 _deadline,
        uint8 _v,
        bytes32 _r,
        bytes32 _s
    )
        external;
}

