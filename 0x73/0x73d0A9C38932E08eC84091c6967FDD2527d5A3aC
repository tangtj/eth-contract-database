
// File: src/Redemption.sol
// SPDX-License-Identifier: Apache-2.0
pragma solidity 0.8.20;

import {Math} from "openzeppelin/utils/math/Math.sol";
import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol";
import {IHashes} from "./interfaces/IHashes.sol";
import {IHashesDAO} from "./interfaces/IHashesDAO.sol";

/// @title Redemption
/// @notice A Redemption contract for the Hashes system. This Redemption
///         contract is funded with ether and allows Hashes tokens to be
///         redeemed for the funded ether before a deadline.
contract Redemption is ReentrancyGuard {
    /// @notice The cap for the DEX Labs Hashes.
    uint256 public constant DEX_LABS_CAP = 100;

    /// @notice The hashes contract used by the this redemption contract.
    IHashes public constant HASHES =
        IHashes(address(0xD07e72b00431af84AD438CA995Fd9a7F0207542d));

    /// @notice The HashesDAO contract that the ETH in the redemption will be
    ///         returned to after the deadline has passed.
    IHashesDAO public constant HASHES_DAO =
        IHashesDAO(address(0xbD3Af18e0b7ebB30d49B253Ab00788b92604552C));

    /// @notice The deadline to redeem a hash. Redemptions are considered
    ///         finalized after this deadline and funds can be moved back into
    ///         the hashes DAO.
    uint256 public immutable deadline;

    /// @notice The total amount of ether that is eligible to be redeemed.
    uint256 public totalFunding;

    /// @notice The total number of commitments that were submitted. This is
    ///         used to determine the amount of ETH that each committed Hash
    ///         should receive.
    uint256 public totalCommitments;

    /// @notice The commitments that have been processed. This is mapping from
    ///         token ID to the address that submitted the commitment.
    mapping(uint256 => address) public commitments;

    /// @notice A flag indicating whether or not unused funds have been drawn
    ///         back to the HashesDAO.
    bool public wasDrawn;

    /// @notice Thrown when the current timestamp is after the deadline but the
    ///         function can only be called before the deadline.
    error AfterDeadline();

    /// @notice Thrown when the excess funds were already drawn to the DAO.
    error AlreadyDrawn();

    /// @notice Thrown when the current timestamp is before the deadline but the
    ///         function can only be called after the deadline.
    error BeforeDeadline();

    /// @notice Thrown when the hash isn't eligible for redemption.
    error IneligibleHash();

    /// @notice Thrown when the duration is invalid.
    error InvalidDuration();

    /// @notice Thrown when ether can't be transferred.
    error TransferFailed();

    /// @notice Thrown when the token IDs aren't monotonically increasing.
    error UnsortedTokenIds();

    /// @notice Thrown when a hash wasn't committed by the sender or wasn't
    ///         committed at all.
    error UncommittedHash();

    /// @dev Ensures that the function is being called before the deadline.
    modifier beforeDeadline() {
        if (block.timestamp >= deadline) {
            revert AfterDeadline();
        }
        _;
    }

    /// @dev Ensures that the function is being called after the deadline.
    modifier afterDeadline() {
        if (block.timestamp < deadline) {
            revert BeforeDeadline();
        }
        _;
    }

    modifier notDrawn() {
        if (wasDrawn) {
            revert AlreadyDrawn();
        }
        _;
    }

    /// @notice Instantiates the Hashes redemption contract.
    /// @param _duration The duration of the redemption.
    constructor(uint256 _duration) {
        // Ensure that the duration is greater than zero.
        if (_duration == 0) {
            revert InvalidDuration();
        }

        // Initialize the deadline.
        deadline = block.timestamp + _duration;
    }

    /// @notice Allows the contract to receive ether before the deadline.
    fallback() external payable beforeDeadline {
        // Increase the total funding by the message value.
        totalFunding += msg.value;
    }

    /// @notice Allows the contract to receive ether before the deadline.
    receive() external payable beforeDeadline {
        // Increase the total funding by the message value.
        totalFunding += msg.value;
    }

    /// @notice Commits a set of Hashes for redemption.
    /// @param _tokenIds The token IDs to commit for redemption.
    function commit(
        uint256[] calldata _tokenIds
    ) external nonReentrant beforeDeadline {
        // Iterate over the list of token IDs. The token IDs should be
        // monotonically increasing, should refer to DAO hashes, and should
        // refer to Hashes that haven't been deactivated. If any of these
        // conditions are violated, we revert. Assuming all of the conditions
        // hold, we take custody of the Hashes token and add the token to the
        // list of commitments.
        uint256 lastTokenId;
        uint256 governanceCap = HASHES.governanceCap();
        for (uint256 i = 0; i < _tokenIds.length; i++) {
            // Ensure that the current token ID is either the first token ID to
            // be processed or is strictly greater than the last token ID.
            lastTokenId = _verifyTokenId(_tokenIds, i, lastTokenId);

            // Ensure that the token ID refers to an active DAO hash that is
            // not a DEX Labs Hash.
            if (
                lastTokenId < DEX_LABS_CAP ||
                lastTokenId >= governanceCap ||
                HASHES.deactivated(lastTokenId)
            ) {
                revert IneligibleHash();
            }

            // Take custody of the Hashes token.
            HASHES.transferFrom(msg.sender, address(this), lastTokenId);

            // Process the commitment.
            totalCommitments += 1;
            commitments[lastTokenId] = msg.sender;
        }
    }

    /// @notice Revokes a set of Hashes from redemption.
    /// @param _tokenIds The token IDs to revoke from redemption.
    function revoke(
        uint256[] calldata _tokenIds
    ) external nonReentrant beforeDeadline {
        // Iterate over the list of token IDs. The token IDs should be
        // monotonically increasing and should refer to Hashes that have already
        // been committed. If either of these conditions are violated, we revert.
        // Assuming all of the conditions hold, the Hashes tokens are
        // transferred to the revoker and the commitments are revoked.
        uint256 lastTokenId;
        for (uint256 i = 0; i < _tokenIds.length; i++) {
            // Ensure that the current token ID is either the first token ID to
            // be processed or is strictly greater than the last token ID.
            lastTokenId = _verifyTokenId(_tokenIds, i, lastTokenId);

            // Ensure that the token ID refers to a commitment owned by the
            // sender.
            if (commitments[lastTokenId] != msg.sender) {
                revert UncommittedHash();
            }

            // Revoke the commitment.
            totalCommitments -= 1;
            commitments[lastTokenId] = address(0);

            // Transfer the Hash to the sender.
            HASHES.transferFrom(address(this), msg.sender, lastTokenId);
        }
    }

    /// @notice Redeems a set of Hashes from redemption.
    /// @param _tokenIds The token IDs to redeem.
    function redeem(
        uint256[] calldata _tokenIds
    ) external nonReentrant afterDeadline {
        // Iterate over the list of token IDs. The token IDs should be
        // monotonically increasing and should refer to Hashes that have already
        // been committed. If either of these conditions are violated, we revert.
        uint256 lastTokenId;
        for (uint256 i = 0; i < _tokenIds.length; i++) {
            // Ensure that the current token ID is either the first token ID to
            // be processed or is strictly greater than the last token ID.
            lastTokenId = _verifyTokenId(_tokenIds, i, lastTokenId);

            // Ensure that the token ID refers to a commitment owned by the
            // sender.
            if (commitments[lastTokenId] != msg.sender) {
                revert UncommittedHash();
            }

            // Reset the commitment to prevent double spends.
            commitments[lastTokenId] = address(0);
        }

        // The amount of ether that the sender will receive is calculated as:
        //
        // redeemAmount = _tokenIds.length * min(
        //     balance / totalCommitments,
        //     1 ether
        // )
        //
        // To increase the precision of the calculation, we process the
        // multiplication before the division.
        uint256 redeemAmount = Math.min(
            (_tokenIds.length * totalFunding) / totalCommitments,
            _tokenIds.length * 1 ether
        );
        (bool success, ) = msg.sender.call{value: redeemAmount}("");
        if (!success) {
            revert TransferFailed();
        }
    }

    /// @notice Allows anyone to transfer any ether that isn't needed to process
    ///         redemptions to the DAO.
    function draw() external notDrawn nonReentrant afterDeadline {
        // Set the flag to indicate that funds were drawn.
        wasDrawn = true;

        // If the price per commitment is less than one ether, all of the ether
        // will be consumed by redemptions, and we can exit early.
        if (totalFunding / totalCommitments <= 1 ether) {
            return;
        }

        // The amount of ether that can be returned to the DAO is given by:
        //
        // unusedFunds = totalFunding - totalCommitments * 1 ether
        //
        // If the unused funds amount is greater than zero, we transfer the
        // unused funds to the hashes DAO.
        uint256 redeemFunds = totalCommitments * 1 ether;

        // Transfer the unused funds to the HashesDAO.
        (bool success, ) = address(HASHES_DAO).call{
            value: totalFunding - redeemFunds
        }("");
        if (!success) {
            revert TransferFailed();
        }
    }

    /// @notice Allows anyone to reclaim hashes to the HashesDAO.
    /// @param _tokenIds The token IDs to reclaim.
    function reclaim(
        uint256[] calldata _tokenIds
    ) external nonReentrant afterDeadline {
        // Iterate over the list of token IDs. The token IDs should be
        // monotonically increasing. If the list of token IDs isn't
        // monotonically increasing, we revert. Assuming the list is sorted,
        // the Hashes are transferred to the HashesDAO contract.
        uint256 lastTokenId;
        for (uint256 i = 0; i < _tokenIds.length; i++) {
            // Ensure that the current token ID is either the first token ID to
            // be processed or is strictly greater than the last token ID.
            lastTokenId = _verifyTokenId(_tokenIds, i, lastTokenId);

            // Transfer the Hash to the HashesDAO.
            HASHES.transferFrom(
                address(this),
                address(HASHES_DAO),
                lastTokenId
            );
        }
    }

    /// @dev Verify the next entry in a list of token IDs.
    /// @param _tokenIds The list of token IDs.
    /// @param _idx The index of the item in the list.
    /// @param _lastTokenId The previous token ID in the list.
    /// @return The token ID at the specified index in the list.
    function _verifyTokenId(
        uint256[] memory _tokenIds,
        uint256 _idx,
        uint256 _lastTokenId
    ) internal pure returns (uint256) {
        // Ensure that the current token ID is either the first token ID to
        // be processed or is strictly greater than the last token ID.
        uint256 tokenId = _tokenIds[_idx];
        if (_idx != 0 && tokenId <= _lastTokenId) {
            revert UnsortedTokenIds();
        }
        return tokenId;
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Muldiv operation overflow.
     */
    error MathOverflowedMulDiv();

    enum Rounding {
        Floor, // Toward negative infinity
        Ceil, // Toward positive infinity
        Trunc, // Toward zero
        Expand // Away from zero
    }

    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds towards infinity instead
     * of rounding towards zero.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        if (b == 0) {
            // Guarantee the same behavior as in a regular Solidity division.
            return a / b;
        }

        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
     * denominator == 0.
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
     * Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0 = x * y; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            if (denominator <= prod1) {
                revert MathOverflowedMulDiv();
            }

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.

            uint256 twos = denominator & (0 - denominator);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
            // works in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
     * towards zero.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);
        }
    }

    /**
     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
     */
    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
        return uint8(rounding) % 2 == 1;
    }
}


// File: lib/solmate/src/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/// @notice Gas optimized reentrancy protection for smart contracts.
/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)
/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)
abstract contract ReentrancyGuard {
    uint256 private locked = 1;

    modifier nonReentrant() virtual {
        require(locked == 1, "REENTRANCY");

        locked = 2;

        _;

        locked = 1;
    }
}


// File: src/interfaces/IHashes.sol
// SPDX-License-Identifier: Apache-2.0
pragma solidity 0.8.20;

import {IERC721Enumerable} from "openzeppelin/interfaces/IERC721Enumerable.sol";

interface IHashes is IERC721Enumerable {
    function deactivated(uint256 _tokenId) external view returns (bool);

    function governanceCap() external view returns (uint256);
}


// File: src/interfaces/IHashesDAO.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {IHashes} from "./IHashes.sol";

interface IHashesDAO {
    function hashesToken() external view returns (IHashes);
}


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC721Enumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Enumerable.sol)

pragma solidity ^0.8.20;

import {IERC721Enumerable} from "../token/ERC721/extensions/IERC721Enumerable.sol";


// File: lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.20;

import {IERC721} from "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.20;

import {IERC165} from "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
     *   a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or
     *   {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
     *   a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the address zero.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

