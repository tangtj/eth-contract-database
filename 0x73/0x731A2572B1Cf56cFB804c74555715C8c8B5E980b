
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/Vepoch.sol
// SPDX-License-Identifier: BUSL-1.1
// Developed by Moai Labs LLC, owned by EPOCH DAO
pragma solidity 0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract VEpoch is ERC20, Ownable {
    // @dev Unknown tokens will/must not be used with this contract

    struct Deposit {
        address owner;
        uint32 depositTs;
        uint32 lockDuration;
        uint256 depositTokenBalance;
    }
    mapping(uint256 => Deposit) public deposits;
    uint256 public depositCount;
    uint256 public maxDepositDuration = 730 days;

    IERC20 public immutable depositToken;

    // Admin functionalities that can be locked forever
    bool public maxDepositDurationLocked;
    bool public authorisedLocked;

    mapping(address => bool) public authorised;

    event Deposited(uint256 depositId);
    event DepositExtend(uint256 _depositId, uint32 _secondsExtended);
    event WithdrawnForfeit(uint256 depositId, uint256 depositTokensReturned, uint256 veTokensBurned, uint256 rewardForfeit);
    event Withdrawn(uint256 depositId, uint256 depositTokensReturned, uint256 veTokensBurned);
    event Authorised(address authorisedAddress, bool newAuthorisationStatus);
    event MaxDepositDurationSet(uint256 newMaxDepositDuration);
    event DepositOwnershipTransferred(uint256 depositId, address newOwner);
    event RewardClaimed(uint256 depositId, uint256 yieldTokenAmount);
    event RewardForfeit(uint256 depositId, uint256 yieldTokenAmount);

    // Yield earning related
    IERC20Metadata public immutable rewardToken;
    mapping(uint256 => uint256) public rewardStakingPower;
    uint256 private rewardIndex;
    mapping(uint256 => uint256) private rewardIndexOf;
    mapping(uint256 => uint256) private earned;
    mapping(uint256 => uint256) public rewardTokensClaimed;

    constructor(address _depositToken, address _yieldToken, address _newOwner) ERC20("Vote Escrow Epoch", "vEPOCH") {
        depositToken = IERC20(_depositToken);
        rewardToken = IERC20Metadata(_yieldToken);
        authorised[address(this)] = true;

        _transferOwnership(_newOwner);
    }

    /// @notice Allows only authorised addresses to transfer tokens from their address
    /// @dev Can only be called by anyone but will revert if caller is not authorised
    /// @param to - The address to send veTokens to
    /// @param amount - The amount of veTokens to send
    /// @return boolean on success
    function transfer(address to, uint256 amount) public override returns (bool) {
        require(authorised[msg.sender], "NON TRANSFERABLE");

        _transfer(msg.sender, to, amount);
        return true;
    }

    /// @notice Allows only authorised addresses to transfer tokens from/to any address
    /// @dev Note: Authorised addresses NEED approvals from users (allowance)
    /// @param from - The address to send veTokens from
    /// @param to - The address to send veTokens to
    /// @param amount - The amount of veTokens to send
    /// @return boolean on success
    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {
        require(authorised[msg.sender], "NON TRANSFERABLE");

        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /// @notice Allows anyone to add reward tokens (which will be distributed proportionally)
    /// @param _tokenAmount - The number of reward tokens to deposit
    function addRewardTokens(uint256 _tokenAmount) external {
        rewardIndex += (_tokenAmount * 1e18) / totalSupply();
        rewardToken.transferFrom(msg.sender, address(this), _tokenAmount);
    }

    /// @notice Computes reward tokens for a given depositId
    /// @param _depositId - The depositId to calculate rewards for
    /// @return The number of pending reward tokens
    function _calculateRewards(uint256 _depositId) private view returns (uint256) {
        uint256 shares = rewardStakingPower[_depositId];
        return (shares * (rewardIndex - rewardIndexOf[_depositId])) / 1e18;
    }

    /// @notice Determine the total number of reward tokens earned for a given depositId
    /// @param _depositId - The depositId you want information for
    /// @return The number of unclaimed reward tokens
    function calculateRewardsEarned(uint256 _depositId) external view returns (uint256) {
        return earned[_depositId] + _calculateRewards(_depositId);
    }

    /// @notice Updates rewards earned for a given depositId
    /// @param _depositId - The depositId you want to update rewards earned for
    function _updateRewards(uint256 _depositId) private {
        earned[_depositId] += _calculateRewards(_depositId);
        rewardIndexOf[_depositId] = rewardIndex;
    }

    /// @notice Used internally to update state before reward transfer
    /// @param _depositId - The depositId you want to update state for
    /// @return reward - The number of reward tokens available to claim
    function _claimYield(uint256 _depositId) private returns (uint256 reward) {
        // Ensure the claimer owns the specified deposit
        require(deposits[_depositId].owner == msg.sender, "NOT OWNER");
        _updateRewards(_depositId);

        reward = earned[_depositId];
        earned[_depositId] = 0;
        rewardTokensClaimed[_depositId] += reward;

        emit RewardClaimed(_depositId, reward);
    }

    /// @notice Allows user to claim reward tokens earned for a given depositId
    /// @param _depositId - The depositId you want to claim rewards from
    function claimYield(uint256 _depositId) public {
        uint256 reward = _claimYield(_depositId);
        rewardToken.transfer(msg.sender, reward);
    }

    /// @notice Allows user to claim reward tokens earned for one to many depositId's
    /// @param _depositIds -  An array of depositIds you want to claim rewards from
    function claimYield(uint256[] calldata _depositIds) public {
        uint256 totalRewards;
        for(uint256 i = 0; i < _depositIds.length; i++) {
            totalRewards += _claimYield(_depositIds[i]);
        }
        rewardToken.transfer(msg.sender, totalRewards);
    }

    /// @notice Returns the veTokens minted for a given tokenAmount and duration
    /// @dev This function will IGNORE the maximum deposit duration
    /// @param _tokenAmount - The number of deposit tokens to lock
    /// @param _duration - The duration in seconds to lock for
    /// @return The number of veTokens that would be minted
    function calculateVeTokens(uint256 _tokenAmount, uint256 _duration) public pure returns(uint256) {
        // @dev 0.000011574074074075 veTokens per 1 deposit token for 1 second
        // @dev 365 days lock = ~ 365
        return (_tokenAmount * (11574074074075 * _duration)) / 1e18;
    }

    /// @notice Deposits depositToken for a given duration and mints veTokens
    /// @dev Deposits can be made on behalf of another address
    /// @param _tokenAmount - The number of deposit tokens to lock
    /// @param _duration - The duration in seconds to lock for
    /// @param _behalfOf - The address that will own this newly created deposit
    /// @return _depositCount - The new newly created depositId
    function deposit(uint256 _tokenAmount, uint32 _duration, address _behalfOf) external returns(uint256 _depositCount) {

        require(_duration > 3599 && _duration <= maxDepositDuration, "INVALID DURATION");

        _depositCount = ++depositCount;
        deposits[_depositCount] = Deposit(
            _behalfOf,
            uint32(block.timestamp),
            _duration,
            _tokenAmount
        );

        uint256 veTokensMinted = calculateVeTokens(_tokenAmount, _duration);
        require(veTokensMinted > 0, "INSUFFICIENT VEPOCH MINTED");
        _mint(_behalfOf, veTokensMinted);

        // Ensure this deposit is earning
        _updateRewards(_depositCount);
        rewardStakingPower[_depositCount] += veTokensMinted;

        depositToken.transferFrom(msg.sender, address(this), _tokenAmount);

        emit Deposited(_depositCount);

        return _depositCount;
    }

    /// @notice Allows withdrawing of deposit tokens which will forfeit some number of reward tokens
    /// @dev Users can withdraw in full or partially
    /// @param _depositId - The depositId you want to withdrawForfeit from
    /// @param _depositTokensToRemove - The number of deposit tokens to remove
    function withdrawForfeit(uint256 _depositId, uint256 _depositTokensToRemove) external {
        Deposit storage d = deposits[_depositId];

        // Ensure the caller is the owner of said deposit
        require(d.owner == msg.sender, "NOT OWNER");
        // Ensure this function is only used for deposits where lock has not ended
        require(
            (d.depositTs + d.lockDuration) > block.timestamp,
            "DEPOSIT IS MATURED"
        );
        require(d.depositTs != block.timestamp, "DEPOSIT IN SAME BLOCK");

        // Compute what percentage of depositTokens user wants to remove
        uint256 percentage = (_depositTokensToRemove * 1e18) / d.depositTokenBalance;

        // Decrease deposit balance first, then compute new veToken balance
        d.depositTokenBalance -= _depositTokensToRemove;
        uint256 veEndTokenBalance = calculateVeTokens(d.depositTokenBalance, d.lockDuration);

        // Determine veToken amount to burn
        uint256 burnAmount = rewardStakingPower[_depositId] - veEndTokenBalance;
        require(burnAmount > 0, "INSUFFICIENT VEPOCH BURNED");
        _burn(msg.sender, burnAmount);  // Burn them

        // Update rewards, then reduce staking power
        _updateRewards(_depositId);
        rewardStakingPower[_depositId] -= burnAmount;

        uint256 forfeitReward = ((earned[_depositId] + rewardTokensClaimed[_depositId]) * percentage) / 1e18;

        // IF number of EPOCH to return is GREATER than pending unclaimed rewards
        // Transfer the excess from the user's wallet
        if(forfeitReward > earned[_depositId]) {
            // Calculate diff and transfer this many tokens from the user
            rewardTokensClaimed[_depositId] -= (forfeitReward - earned[_depositId]);

            // Since the user didn't have enough earned and had to transfer tokens
            // This means we can set this to 0
            earned[_depositId] = 0;
            rewardToken.transferFrom(msg.sender, address(this), forfeitReward - earned[_depositId]);
        } else {
            // The number of yield tokens the user has earned is greater than the number that needs to be forfeit
            // we can therefore just deduct from their balance.
            earned[_depositId] -= forfeitReward;
        }

        // Redistribute these forfeit rewards
        rewardIndex += (forfeitReward * 1e18) / totalSupply();

        emit WithdrawnForfeit(_depositId, _depositTokensToRemove, burnAmount, forfeitReward);

        // If this deposit has no associated deposit tokens, delete the deposit (dust protection)
        if(d.depositTokenBalance == 0) {
            delete deposits[_depositId];
        }

        // Transfer the LP tokens back
        depositToken.transfer(msg.sender, _depositTokensToRemove);
    }

    /// @notice Burns veTokens for matured deposits and returns deposited tokens
    /// @dev Users can withdraw in full or partially
    /// @param _depositId - The depositId you want to withdraw from
    /// @param _tokenAmount - The number of deposit tokens to remove
    function withdraw(uint256 _depositId, uint256 _tokenAmount) external {
        Deposit storage d = deposits[_depositId];

        require(d.owner == msg.sender, "NOT OWNER");
        require(
            block.timestamp > (d.depositTs + d.lockDuration),
            "DEPOSIT NOT MATURED"
        );
        uint256 veTokensBurned = calculateVeTokens(d.depositTokenBalance, d.lockDuration);
        _updateRewards(_depositId);

        if(_tokenAmount == d.depositTokenBalance) {
            _burn(msg.sender, veTokensBurned);

            // Reduce staking power
            rewardStakingPower[_depositId] = 0;

            claimYield(_depositId);

            delete deposits[_depositId];

            depositToken.transfer(msg.sender, _tokenAmount);

            emit Withdrawn(_depositId, _tokenAmount, veTokensBurned);
            return;
        }

        veTokensBurned = (veTokensBurned * ((_tokenAmount * 1e18) / d.depositTokenBalance)) / 1e18;

        d.depositTokenBalance -= _tokenAmount;

        require(veTokensBurned > 0, "INSUFFICIENT VEPOCH BURNED");
        _burn(msg.sender, veTokensBurned);

        // Reduce staking power
        rewardStakingPower[_depositId] -= veTokensBurned;

        depositToken.transfer(msg.sender, _tokenAmount);

        emit Withdrawn(_depositId, _tokenAmount, veTokensBurned);
    }

    /// @notice Allows deposit owner to extend deposit up to maximum deposit duration
    /// @param _depositId - The depositId you want to extend
    /// @param _secondsToExtend - The number of seconds to extend this deposit by
    function extendDeposit(uint256 _depositId, uint32 _secondsToExtend) external {
        Deposit storage d = deposits[_depositId];

        require(d.owner == msg.sender, "NOT OWNER");
        require(maxDepositDuration >= d.lockDuration + _secondsToExtend, "INVALID DURATION");

        // Determine how many more veTokens should be minted
        uint256 veTokenDiff = calculateVeTokens(d.depositTokenBalance, _secondsToExtend);
        _mint(msg.sender, veTokenDiff);

        // Update rewards
        _updateRewards(_depositId);
        rewardStakingPower[_depositId] += veTokenDiff;
        deposits[_depositId].lockDuration += _secondsToExtend;

        emit DepositExtend(_depositId, _secondsToExtend);
    }

    /// @notice Allows user to transfer ownership of their deposit
    /// @param _depositId - The depositId you want to transfer
    /// @param _newOwner - The address of the new owner
    function transferDepositOwnership(uint256 _depositId, address _newOwner) external {
        Deposit storage d = deposits[_depositId];

        require(d.owner == msg.sender, "NOT OWNER");

        // Transfer veTokens from old owner to new owner
        _transfer(msg.sender, _newOwner, calculateVeTokens(d.depositTokenBalance, d.lockDuration));

        // Transfer ownership of deposit
        d.owner = _newOwner;

        emit DepositOwnershipTransferred(_depositId, _newOwner);
    }

    /// @notice Allows Owner to disable veToken transfer authorised functionality forever
    function setAuthorisedLocked() external onlyOwner {
        authorisedLocked = true;
    }

    /// @notice Allows Owner to disable setMaxDepositDuration functionality forever
    function setMaxDepositDurationLocked() external onlyOwner {
        maxDepositDurationLocked = true;
    }

    /// @notice This allows the owner to determine which addresses are authorised for token transfers
    /// @dev Can only be called by the owner of the contract
    /// @param _address - The address you want to change authorisation status of
    /// @param _newAuthorisationStatus - The new authorisation status
    function setAuthorised(address _address, bool _newAuthorisationStatus) external onlyOwner {
        require(!authorisedLocked);

        authorised[_address] = _newAuthorisationStatus;
        emit Authorised(_address, _newAuthorisationStatus);
    }

    /// @notice This allows the owner to set the maximum deposit duration
    /// @dev Can only be called by the owner of the contract
    /// @param _newMaxDepositDuration - The new maximum deposit duration in seconds
    function setMaxDepositDuration(uint32 _newMaxDepositDuration) external onlyOwner {
        require(!maxDepositDurationLocked);

        require(_newMaxDepositDuration <= 3650 days, "10 YEAR MAX");
        maxDepositDuration = _newMaxDepositDuration;
        emit MaxDepositDurationSet(_newMaxDepositDuration);
    }
}

