
// File: bitesDraft.sol
// SPDX-License-Identifier: Frensware

pragma solidity ^0.8.20;

bytes32 constant
    nameData = 
        0x6235320000000000000000000000000000000000000000000000000000000000; 
bytes32 constant
    nameLength =
        0x0000000000000000000000000000000000000000000000000000000000000003;
 
bytes32 constant
    symbolData =
        0x4235320000000000000000000000000000000000000000000000000000000000; 
bytes32 constant
    symbolLength =
        0x0000000000000000000000000000000000000000000000000000000000000003; 

bytes32 constant
    allowanceError =
        0x689c22716bc6f868769c9f108f2504c1a1115ab4db66410e8a48bd8797222bb7;
bytes32 constant
    transferError =
        0x4ffddc7cd3d35a21977f8035daee75dcf80dc6f05d181b97b2492a7f85bc4a0d;
bytes32 constant
    transferHash =
        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;
bytes32 constant
    approvalHash =
        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;
        

contract bites52 {
    uint256 internal _totalSupply;

    constructor(uint256 initialSupply, address owner) {
        assembly {
            mstore(0x00, owner)
            mstore(0x20, 0x00)
            let slot := keccak256(0x00, 0x40)
            sstore(slot, initialSupply) //100000000000000000000000000
            sstore(0x02, initialSupply)
            mstore(0x00, initialSupply)
            log3(0x00, 0x20, transferHash, 0x00, owner)
        }
    }

    function burn(uint256 amount) external {
        assembly {
            let memptr := mload(0x40)
            mstore(memptr, caller())
            mstore(add(memptr, 0x20), 0x00)
            
            let callerBalanceSlot := keccak256(memptr, 0x40)
            let callerBalance := sload(callerBalanceSlot)

            if lt(callerBalance, amount) {
                mstore(0x00, transferError)
                revert(0x00, 0x20)
            }

            sstore(callerBalanceSlot, sub(callerBalance, amount))
            sstore(0x02, sub(sload(0x02), amount))
            mstore(0x00, amount)
            log3(0x00, 0x20, transferHash, caller(), 0x00)
        }
    }


    function transfer(address receiver, uint256 value) public returns (bool) {
        assembly {
            let memptr := mload(0x40)
            mstore(memptr, caller())
            mstore(add(memptr, 0x20), 0x00)

            let callerBalanceSlot := keccak256(memptr, 0x40)
            let callerBalance := sload(callerBalanceSlot)

            if lt(callerBalance, value) {
                mstore(0x00, transferError)
                revert(0x00, 0x20)
            }

            let newCallerBalance := sub(callerBalance, value)
            sstore(callerBalanceSlot, newCallerBalance)
            mstore(memptr, receiver)
            mstore(add(memptr, 0x20), 0x00)

            let receiverBalanceSlot := keccak256(memptr, 0x40)
            let receiverBalance := sload(receiverBalanceSlot)
            let newReceiverBalance := add(receiverBalance, value)
            sstore(receiverBalanceSlot, newReceiverBalance)
            mstore(0x00, value)

            log3(0x00, 0x20, transferHash, caller(), receiver)
            mstore(0x00, 0x01)
            return(0x00, 0x20)
        }
    }


    function transferFrom(
        address sender,
        address receiver,
        uint256 amount
    ) public returns (bool) {
        assembly {
            let memptr := mload(0x40)

            mstore(0x00, sender)
            mstore(0x20, 0x01)
            let innerHash := keccak256(0x00, 0x40)
            mstore(0x00, caller())
            mstore(0x20, innerHash)
            let allowanceSlot := keccak256(0x00, 0x40)
            let callerAllowance := sload(allowanceSlot)

            if lt(callerAllowance, amount) {
                mstore(memptr, allowanceError)
                mstore(add(memptr, 0x04), sender)
                mstore(add(memptr, 0x24), caller())
                revert(memptr, 0x44)
            }

            if not(eq(callerAllowance, not(0))) {
                sstore(allowanceSlot, sub(callerAllowance, amount))
            }

            mstore(memptr, sender)
            mstore(add(memptr, 0x20), 0x00)
            let senderBalanceSlot := keccak256(memptr, 0x40)

            let senderBalance := sload(senderBalanceSlot)

            if lt(senderBalance, amount) {
                mstore(0x00, transferError)
                revert(0x00, 0x04)
            }

            sstore(senderBalanceSlot, sub(senderBalance, amount))

            mstore(memptr, receiver)
            mstore(add(memptr, 0x20), 0x00)
            let receiverBalanceSlot := keccak256(memptr, 0x40)
            let receiverBalance := sload(receiverBalanceSlot)

            sstore(receiverBalanceSlot, add(receiverBalance, amount))

            mstore(0x00, amount)
            log3(0x00, 0x20, transferHash, sender, receiver)
            mstore(0x00, 0x01)
            return(0x00, 0x20)
        }
    }


    function balanceOf(address owner) public view returns (uint256) {
        assembly {
            mstore(0x00, owner)
            mstore(0x20, 0x00)
            mstore(0x00, sload(keccak256(0x00, 0x40)))
            return(0x00, 0x20)
        }
    }

    function allowance(address owner, address spender)
        public
        view
        returns (uint256)
    {
        assembly {
            mstore(0x00, owner)
            mstore(0x20, 0x01)
            let innerHash := keccak256(0x00, 0x40)

            mstore(0x00, spender)
            mstore(0x20, innerHash)

            let allowanceSlot := keccak256(0x00, 0x40)
            let allowanceValue := sload(allowanceSlot)

            mstore(0x00, allowanceValue)
            return(0x00, 0x20)
        }
    }


    function approve(address spender, uint256 amount) public returns (bool) {
        assembly {
            mstore(0x00, caller())
            mstore(0x20, 0x01)
            let innerHash := keccak256(0x00, 0x40)
            mstore(0x00, spender)
            mstore(0x20, innerHash)
            let allowanceSlot := keccak256(0x00, 0x40)

            sstore(allowanceSlot, amount)

            mstore(0x00, amount)
            log3(0x00, 0x20, approvalHash, caller(), spender)

            mstore(0x00, 0x01)
            return(0x00, 0x20)
        }
    }


    function totalSupply() public view returns (uint256) {
        assembly {
            mstore(0x00, sload(0x02))
            return(0x00, 0x20)
        }
    }


    function name() public pure returns (string memory) {
        assembly {
            let memptr := mload(0x40)

            mstore(memptr, 0x20)
            mstore(add(memptr, 0x20), nameLength)
            mstore(add(memptr, 0x40), nameData)

            return(memptr, 0x60)
        }
    }


    function symbol() public pure returns (string memory) {
        assembly {
            let memptr := mload(0x40)
            mstore(memptr, 0x20)
            mstore(add(memptr, 0x20), symbolLength)
            mstore(add(memptr, 0x40), symbolData)
            return(memptr, 0x60)
        }
    }


    function decimals() public pure returns (uint8) {
        assembly {
            mstore(0, 18)

            return(0x00, 0x20)
        }
    }
}

