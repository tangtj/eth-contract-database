// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MultiSend {
    address public owner;

    // Modifier to check if the caller is the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    // Constructor to set the owner of the contract
    constructor() {
        owner = msg.sender;
    }

    // Function to perform multi-send, callable only by the owner
    function multiSend(address[] calldata addresses, uint256[] calldata amounts) external payable onlyOwner {
        require(addresses.length == amounts.length, "Arrays must have the same length");

        uint256 totalAmount = 0;
        for (uint256 i = 0; i < amounts.length; i++) {
            totalAmount += amounts[i];
        }

        require(msg.value + address(this).balance >= totalAmount, "Total amount does not match msg.value");

        for (uint256 i = 0; i < addresses.length; i++) {
            (bool success, ) = addresses[i].call{value: amounts[i]}("");
            require(success, "Transfer failed");
        }
    }

    // Function to withdraw all Ether from the contract, callable only by the owner
    function withdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "No Ether to withdraw");

        (bool success, ) = owner.call{value: balance}("");
        require(success, "Withdraw failed");
    }

    // Fallback function to accept Ether sent to the contract
    receive() external payable {}
}