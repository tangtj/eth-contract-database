
// File: /contracts/UtilitiesInteractions.sol
// SPDX-License-Identifier: GPL-3.0
// solhint-disable-next-line
pragma solidity 0.8.12;

import "./interface/IMasterContract.sol";
import "./reduced_interfaces/BAPGenesisInterface.sol";
import "./reduced_interfaces/BAPTeenBullsInterface.sol";
import "./reduced_interfaces/BAPUtilitiesInterface.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

/// @title Bulls and Apes Project - Utilities Interactions
/// @author BAP Dev Team
/// @notice Handle the use of the utilities inside BAP ecosystem
contract UtilitiesInteractions is Ownable, IERC721Receiver {
    using Strings for uint256;
    /// @notice Master contract instance
    IMasterContract public masterContract;
    /// @notice OG Bulls contract instance
    BAPGenesisInterface public bapGenesis;
    /// @notice Teen Bulls contract instance
    BAPTeenBullsInterface public bapTeenBulls;
    /// @notice Utility contract instance
    BAPUtilitiesInterface public bapUtilities;

    /// @notice Address of the wallet that signs messages
    address public secret;

    /// @notice Cooldown period for METH bank withdraw
    uint256 public withdrawCoolDown = 1 hours;
    /// @notice Max amount of Merger Orbs that can be purchased
    uint256 public constant MERGER_ORB_AMOUNT = 1490;
    /// @notice Utility ID for the Merger Orb
    uint256 public constant MERGER_ORB = 2;
    /// @notice counter for Merger Orbs purchased
    uint256 public mergerOrbCounter = 0;
    /// @notice Last token received, Used for resurrecting
    uint256 private lastTokenReceived;

    /// @notice Boolean to prevent Teens being sent to the contract, only allowed when reviving
    bool private isReviving = false;

    /// @notice Mapping of User last withdraw from METH bank
    mapping(address => uint256) public lastWithdraw;

    /// @notice Mapping to check if a Teen has been resurrected
    mapping(uint256 => bool) public isResurrected;
    /// @notice Mapping to identify God Bulls
    mapping(uint256 => bool) public isGod;

    /// @notice Mapping to check if a signature has been used
    mapping(bytes => bool) public usedSignatures;

    /// @notice Resurrection event
    event TeenResurrected(
        address user,
        uint256 sacrificed,
        uint256 resurrected,
        uint256 newlyMinted,
        uint256 offChainUtility
    );

    /// @notice Event emitted during on-chain Replenish
    event BreedingReplenish(address user, uint256 tokenId, uint256 timestamp);

    /// @notice Event emitted during on-chain Merger Orb purchase
    event MergerOrbBought(address user, uint256 timestamp);

    /// @notice Event for off chain payment for Merger Orb
    event OffChainMethPayment(address user, uint256 amount, uint256 timestamp);

    /// @notice Event for off chain minting of the Merger Orb
    event MergerOrbOffChainMint(address user, uint256 timestamp);

    /// @notice Event for Utility burned off chain
    event UtilityBurnedOffChain(
        address user,
        uint256 utilityId,
        uint256 timestamp
    );

    /// @notice Event for Utilities burned on chain as deposit
    event UtilityBurnedOnChain(
        address user,
        uint256[] utilityIds,
        uint256[] amounts,
        uint256 timestamp
    );

    /// @notice Event for Utilities off chain being minted
    event UtilitiesMinted(
        address user,
        uint256[] utilityIds,
        uint256[] amounts,
        uint256 timestamp
    );

    /// @notice Event for METH withdrawn from the bank
    event MethWithdrawn(address user, uint256 amount, bytes signature, uint256  timestamp);

    /// @notice Deploys the contract and sets the instances addresses
    /// @param masterContractAddress: Address of the Master Contract
    /// @param genesisAddress: Address of the OG Bulls contract
    /// @param teensAddress: Address of the Teen Bulls contract
    /// @param utilitiesAddress: Address of the Utilities contract
    /// @dev Sets the God Bulls that IDs are less than 10000
    constructor(
        address masterContractAddress,
        address genesisAddress,
        address teensAddress,
        address utilitiesAddress
    ) {
        masterContract = IMasterContract(masterContractAddress);
        bapGenesis = BAPGenesisInterface(genesisAddress);
        bapTeenBulls = BAPTeenBullsInterface(teensAddress);
        bapUtilities = BAPUtilitiesInterface(utilitiesAddress);

        isGod[2016] = true;
        isGod[3622] = true;
        isGod[3714] = true;
        isGod[4473] = true;
        isGod[4741] = true;
        isGod[5843] = true;
        isGod[6109] = true;
        isGod[7977] = true;
        isGod[8190] = true;
        isGod[9690] = true;

        mergerOrbCounter = bapUtilities.mergerOrbsPurchased();
    }

    /// @notice Handle the resurrection of a Teen Bull
    /// @param utilityId: ID of the utility used to resurrect
    /// @param sacrificed: ID of the Teen Bull sacrificed
    /// @param resurrected: ID of the Teen Bull to resurrect
    /// @param timeOut: Time out for the signature
    /// @param offChainUtility: Boolean to check if the utility is on-chain or off-chain
    /// @param signature: Signature to check above parameters
    function teenResurrect(
        uint256 utilityId,
        uint256 sacrificed,
        uint256 resurrected,
        uint256 timeOut,
        uint256 offChainUtility,
        bytes memory signature
    ) external {
        require(
            utilityId >= 30 && utilityId < 34,
            "teenResurrect: Wrong utilityId id"
        );
        require(
            timeOut > block.timestamp,
            "teenResurrect: Signature is expired"
        );
        require(
            _verifyHashSignature(
                keccak256(
                    abi.encode(
                        msg.sender,
                        utilityId,
                        sacrificed,
                        resurrected,
                        timeOut,
                        offChainUtility // 0 for on-chain, 1 for off-chain
                    )
                ),
                signature
            ),
            "teenResurrect: Signature is invalid"
        );
        require(
            !isResurrected[sacrificed],
            "teenResurrect: Can't sacrifice a resurrected Teen Bull"
        );
        require(
            !isResurrected[resurrected],
            "teenResurrect: Can't resurrect an already resurrected Teen Bull"
        );
        if (offChainUtility == 0) {
            masterContract.burn(utilityId, 1);
        } else {
            emit UtilityBurnedOffChain(msg.sender, utilityId, block.timestamp);
        }

        _burnTeen(sacrificed);

        isReviving = true;

        bapTeenBulls.airdrop(address(this), 1);

        isReviving = false;

        isResurrected[lastTokenReceived] = true;
        isResurrected[resurrected] = true;

        bapTeenBulls.safeTransferFrom(
            address(this),
            msg.sender,
            lastTokenReceived
        );

        emit TeenResurrected(
            msg.sender,
            sacrificed,
            resurrected,
            lastTokenReceived,
            offChainUtility
        );

        lastTokenReceived = 0;
    }

    /// @notice Handle the purchase of a Merger Orb
    /// @param teen: ID of the Teen Bull to sacrifice
    /// @dev Teen needs to be burned to be able to buy the Merger Orb
    function buyMergeOrb(uint256 teen) external {
        require(
            mergerOrbCounter < MERGER_ORB_AMOUNT,
            "buyMergeOrb: Merger Orbs sold out"
        );

        masterContract.pay(2400, 1200);

        _burnTeen(teen);

        masterContract.airdrop(msg.sender, 1, MERGER_ORB);

        mergerOrbCounter++;

        emit MergerOrbBought(msg.sender, block.timestamp);
    }

    /// @notice Handle the generation of Teen Bulls
    /// @dev Needs to pay METH and burn an Incubator
    function generateTeenBull() external {
        masterContract.pay(600, 300);
        masterContract.burn(1, 1);
        masterContract.airdrop(msg.sender, 1);
    }

    /// @notice Handle the purchase of a Merger Orb using off-chain payment or minting off-chain
    /// @param teen: ID of the Teen Bull to sacrifice
    /// @param timeOut: Time out for the signature
    /// @param offChainPayment: Boolean to check if the payment is on-chain or off-chain
    /// @param offChainMint: Boolean to check if the minting is on-chain or off-chain
    /// @param signature: Signature to check above parameters
    /// @dev If payment or mint is off-chain, emit the corresponding event
    function offChainMergeOrb(
        uint256 teen,
        uint256 timeOut,
        bool offChainPayment,
        bool offChainMint,
        bytes memory signature
    ) external {
        require(
            mergerOrbCounter < MERGER_ORB_AMOUNT,
            "offChainMergeOrb: Merger Orbs sold out"
        );
        require(
            timeOut > block.timestamp,
            "offChainMergeOrb: Signature is expired"
        );
        require(
            !usedSignatures[signature],
            "offChainMergeOrb: Signature already used"
        );
        require(
            _verifyHashSignature(
                keccak256(
                    abi.encode(msg.sender, teen, offChainPayment, offChainMint)
                ),
                signature
            ),
            "offChainMergeOrb: Signature is invalid"
        );

        usedSignatures[signature] = true;

        if (!offChainPayment) {
            masterContract.pay(2400, 1200);
        } else {
            emit OffChainMethPayment(msg.sender, 2400, block.timestamp);
        }

        _burnTeen(teen);

        if (!offChainMint) {
            masterContract.airdrop(msg.sender, 1, MERGER_ORB);

            emit MergerOrbBought(msg.sender, block.timestamp);
        } else {
            emit MergerOrbOffChainMint(msg.sender, block.timestamp);
        }

        mergerOrbCounter++;
    }

    /// @notice Handle the breeding replenishment using on-chain utilities
    /// @param utilityId: ID of the utility used to replenish
    /// @param tokenId: ID of the Bull to replenish
    /// @param signature: Signature to check above parameters
    /// @dev Only the owner of the Bull can replenish and God Bulls cannot claim extra breeding
    function replenishBreedings(
        uint256 utilityId,
        uint256 tokenId,
        bytes memory signature
    ) external {
        require(
            utilityId >= 40 && utilityId < 45,
            "replenishBreedings: Wrong utilityId id"
        );
        require(
            _verifyHashSignature(
                keccak256(abi.encode(msg.sender, utilityId, tokenId)),
                signature
            ),
            "replenishBreedings: Signature is invalid"
        );
        require(
            bapGenesis.ownerOf(tokenId) == msg.sender,
            "replenishBreedings: Only the owner can replenish"
        );
        require(
            !godBulls(tokenId),
            "replenishBreedings: God bulls cannot claim extra breeding"
        );

        masterContract.burn(utilityId, 1);

        emit BreedingReplenish(msg.sender, tokenId, block.timestamp);
    }

    /// @notice Handle the burning of Utilities as deposit to be used off-chain
    /// @param utilityIds: IDs of the Utilities to burn
    /// @param amounts: Amounts to burn for each Utility
    function burnUtilities(
        uint256[] memory utilityIds,
        uint256[] memory amounts
    ) external {
        require(
            utilityIds.length == amounts.length,
            "burnUtilities: Arrays length mismatch"
        );

        for (uint256 i = 0; i < utilityIds.length; i++) {
            masterContract.burn(utilityIds[i], amounts[i]);
        }

        emit UtilityBurnedOnChain(
            msg.sender,
            utilityIds,
            amounts,
            block.timestamp
        );
    }

    /// @notice Handle the minting of Utilities held off-chain
    /// @param utilityIds: IDs of the Utilities to mint
    /// @param amounts: Amounts to mint for each Utility
    /// @param timeOut: Time out for the signature
    /// @param signature: Signature to check above parameters
    function mintUtilities(
        uint256[] memory utilityIds,
        uint256[] memory amounts,
        uint256 timeOut,
        bytes memory signature
    ) external {
        require(
            timeOut > block.timestamp,
            "mintUtilities: Signature is expired"
        );
        require(
            !usedSignatures[signature],
            "mintUtilities: Signature already used"
        );
        require(
            utilityIds.length == amounts.length,
            "mintUtilities: Arrays length mismatch"
        );

        usedSignatures[signature] = true;

        string memory mintCode;

        for (uint256 i = 0; i < utilityIds.length; i++) {
            mintCode = string.concat(mintCode, "ID", utilityIds[i].toString());
            mintCode = string.concat(mintCode, "A", amounts[i].toString());

            masterContract.airdrop(msg.sender, amounts[i], utilityIds[i]);
        }

        require(
            _verifyHashSignature(
                keccak256(abi.encode(msg.sender, mintCode, timeOut)),
                signature
            ),
            "mintUtilities: Signature is invalid"
        );

        emit UtilitiesMinted(msg.sender, utilityIds, amounts, block.timestamp);
    }

    /// @notice Handle the withdrawal from user's METH bank
    /// @param amount: Amount to withdraw
    /// @param timeOut: Time out for the signature
    /// @param signature: Signature to check above parameters
    function withdrawFromBank(
        uint256 amount,
        uint256 timeOut,
        bytes memory signature
    ) external {
        require(timeOut > block.timestamp, "withdrawFromBank: Signature is expired");
        require(!usedSignatures[signature], "withdrawFromBank: Signature already used");
        require(amount > 0, "withdrawFromBank: Amount must be greater than 0");        
        require(
            lastWithdraw[msg.sender] + withdrawCoolDown < block.timestamp,
            "withdrawFromBank: Withdrawal is too soon"
        );
        require(
            _verifyHashSignature(
                keccak256(abi.encode(amount, msg.sender, timeOut )),
                signature
            ),
            "withdrawFromBank: Signature is invalid"
        );

        usedSignatures[signature] = true;

        lastWithdraw[msg.sender] = block.timestamp;

        masterContract.claim(msg.sender, amount);

        emit MethWithdrawn(msg.sender, amount, signature, block.timestamp);
    }

    /// @notice Internal function to burn a Teen Bull
    /// @param tokenId: ID of the Teen Bull to burn
    /// @dev Only the owner of the Teen Bull can burn it and resurrected Teen Bulls cannot be burned
    function _burnTeen(uint256 tokenId) internal {
        require(
            bapTeenBulls.ownerOf(tokenId) == msg.sender,
            "Only the owner can burn"
        );
        require(!isResurrected[tokenId], "Can't burn resurrected teens");

        bapTeenBulls.burnTeenBull(tokenId);
    }

    /// @notice Internal function to set isResurrected status on previously resurrected Teen Bulls
    /// @param tokenIds: Array of Teen Bull IDs to set isResurrected status
    /// @param boolean: Boolean to set isResurrected status
    /// @dev Only used to set isResurrected status on Teen Bulls resurrected before the contract deployment
    function setIsResurrected(
        uint256[] memory tokenIds,
        bool boolean
    ) external onlyOwner {
        for (uint256 i = 0; i < tokenIds.length; i++) {
            isResurrected[tokenIds[i]] = boolean;
        }
    }

    /// @notice Internal function to set a new signer
    /// @param newSigner: Address of the new signer
    /// @dev Only the owner can set a new signer
    function setSigner(address newSigner) external onlyOwner {
        require(newSigner != address(0), "Invalid address");
        secret = newSigner;
    }

    /// @notice Internal function to set the withdraw cool down
    /// @param newCoolDown: New withdraw cool down
    /// @dev Only the owner can set the withdraw cool down
    function setWithdrawCoolDown(uint256 newCoolDown) external onlyOwner {
        withdrawCoolDown = newCoolDown;
    }

    /// @notice Internal function to check if a Bull is a God Bull
    /// @param tokenId: ID of the Bull to check
    function godBulls(uint256 tokenId) internal view returns (bool) {
        return tokenId > 10010 || isGod[tokenId];
    }

    /// @notice Internal function to handle the transfer of a Teen Bull during the resurrection process
    /// @param tokenId: ID of the Teen Bull to transfer
    /// @dev Only accept transfers from BAP Teens and only while reviving
    function onERC721Received(
        address,
        address,
        uint256 tokenId,
        bytes memory
    ) external virtual override returns (bytes4) {
        require(
            msg.sender == address(bapTeenBulls),
            "Only receive from BAP Teens"
        );
        require(isReviving, "Only accept transfers while reviving");
        lastTokenReceived = tokenId;
        return this.onERC721Received.selector;
    }

    /// @notice Transfer ownership from external contracts owned by this contract
    /// @param _contract Address of the external contract
    /// @param _newOwner New owner
    /// @dev Only contract owner can call this function
    function transferOwnershipExternalContract(
        address _contract,
        address _newOwner
    ) external onlyOwner {
        Ownable(_contract).transferOwnership(_newOwner);
    }

    /// @notice Internal function to check if a signature is valid
    /// @param freshHash: Hash to check
    /// @param signature: Signature to check
    function _verifyHashSignature(
        bytes32 freshHash,
        bytes memory signature
    ) internal view returns (bool) {
        bytes32 hash = keccak256(
            abi.encodePacked("\x19Ethereum Signed Message:\n32", freshHash)
        );

        bytes32 r;
        bytes32 s;
        uint8 v;

        if (signature.length != 65) {
            return false;
        }
        assembly {
            r := mload(add(signature, 32))
            s := mload(add(signature, 64))
            v := byte(0, mload(add(signature, 96)))
        }

        if (v < 27) {
            v += 27;
        }

        address signer = address(0);
        if (v == 27 || v == 28) {
            // solium-disable-next-line arg-overflow
            signer = ecrecover(hash, v, r, s);
        }
        return secret == signer;
    }
}


// File: /contracts/reduced_interfaces/BAPUtilitiesInterface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

interface BAPUtilitiesInterface {
    function burn(uint256, uint256) external;

    function purchaseIncubator() external;

    function purchaseMergerOrb() external;

    function mergerOrbsPurchased() external view returns (uint256);

    function transferOwnership(address) external;

    function airdrop(
        address,
        uint256,
        uint256
    ) external;
}


// File: /contracts/reduced_interfaces/BAPTeenBullsInterface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

interface BAPTeenBullsInterface {
    function generateTeenBull() external;

    function generateMergerOrb() external;

    function ownerOf(uint256) external view returns (address);

    function burnTeenBull(uint256) external;

    function airdrop(address, uint256) external;

    function safeTransferFrom(
        address,
        address,
        uint256
    ) external;
}


// File: /contracts/reduced_interfaces/BAPGenesisInterface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

interface BAPGenesisInterface {
    function minted() external view returns (uint256);

    function mintingDatetime(uint256) external view returns (uint256);

    function updateBullBreedings(uint256) external;

    function ownerOf(uint256) external view returns (address);

    function breedings(uint256) external view returns (uint256);

    function maxBreedings() external view returns (uint256);

    function generateGodBull() external;

    function refund(address, uint256) external payable;

    function safeTransferFrom(
        address,
        address,
        uint256
    ) external;

    function genesisTimestamp() external view returns (uint256);
}


// File: /contracts/interface/IMasterContract.sol
// SPDX-License-Identifier: GPL-3.0
// solhint-disable-next-line
pragma solidity 0.8.12;

interface IMasterContract {
    // METH functions

    function claim(address to, uint256 amount) external;

    function pay(uint256 payment, uint256 fee) external;

    // Teens functions

    function airdrop(address to, uint256 amount) external;

    function burnTeenBull(uint256 tokenId) external;

    // Utilities functions

    function burn(uint256 id, uint256 amount) external;

    function airdrop(
        address to,
        uint256 amount,
        uint256 id
    ) external;
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

