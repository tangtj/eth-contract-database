{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.8.0;\n// SPDX-License-Identifier: Unlicense\n\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}"},"StateStaking.sol":{"content":"// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./TransferHelper.sol\";\n\ncontract StateContext {\n    using TransferHelper for IERC20;\n    \n    bool public isStakeActive = true;\n    bool public isUnStakeActive = true;\n    bool public apyEnabled = true;\n    \n    uint256 public apyTier = 1618;\n    uint256 public totalStaked;\n\n    IERC20 public token;\n    address public rewardingWallet;\n    mapping(address =\u003e User) public deposit;\n\n    struct User {\n        uint256 stakedAmount;\n        uint256 totalAmount;\n        uint256 depositTime;\n        uint256 lastClaimTime;\n        uint256 reward;\n    }\n\n    event Stake(address indexed staker, uint256 _amount, uint256 _lockPeriod);\n    event Unstake(address indexed unstaker, uint256 unstakeTime);\n    event Emergencyunstake(address indexed unstaker, uint256 unstakeTime);\n    event Withdraw(address indexed withdrawer);\n    event WithdrawToken(address indexed withdrawer, uint256 amount);\n    event Claim(address staker, uint256 reward);\n}\n\ncontract StakeSTATE is StateContext, Ownable, ReentrancyGuard {\n\n    using SafeMath for uint256;\n\n    constructor(IERC20 _token, address wallet) {\n        token = _token;\n        rewardingWallet = wallet;\n    }\n\n    receive() external payable {}\n    \n    /**\n      * function to Enable or Disable the Reward\n      */\n    function flipApyEnabled() public onlyOwner {\n        apyEnabled = !apyEnabled;\n    }\n\n    /**\n      * function to set the apy. It takes one argument and it should be multiplied with 100.\n      */\n    function setApy(uint256 apy) public onlyOwner {\n        apyTier = apy;\n    }\n    \n    /**\n      * function to set the rewarding Wallet. It takes one argument as address of wallet.\n      */\n    function setRewardingWallet(address wallet) public onlyOwner {\n        rewardingWallet = wallet;\n    }\n\n    /**\n      * function to change the state of staking. Enable or Disable staking.\n      */\n    function flipStakeState() public onlyOwner {\n        isStakeActive = !isStakeActive;\n    }\n\n    /**\n      * function to change the state of Unstaking. Enable or Disable Unstaking.\n      */\n    function flipUnStakeState() public onlyOwner {\n        isUnStakeActive = !isUnStakeActive;\n    }\n    \n    /**\n      * function to set the Token Address. It takes one argument of token address.\n      */\n    function setTokenAddress(IERC20 _token) public onlyOwner {\n        token = _token;\n    }\n    \n    /**\n      * Public function to stake the $STATE tokens. It takes one argument of amount as input.\n      */\n    function stake(uint256 _amount) public nonReentrant {\n        require(token.balanceOf(_msgSender()) \u003e= _amount, \"You Do Not Have Sufficient Balance\");\n        require(token.allowance(_msgSender(), address(this)) \u003e= _amount, \"Tokens Not Approved\");\n        require(isStakeActive, \"Staking Is Paused\");\n\n        _stakeTokens(_amount);\n    }\n\n    /**\n      * Internal function to stake the $STATE tokens. It takes one argument of amount as input and called from public function.\n      */\n    function _stakeTokens(uint256 _amount) internal {        \n        User storage wUser = deposit[_msgSender()];\n        uint256 prevReward = checkReward(_msgSender());\n\n        wUser.stakedAmount = wUser.stakedAmount.add(_amount);\n        wUser.totalAmount = wUser.stakedAmount.add(_amount).add(prevReward);\n        wUser.depositTime = block.timestamp;\n        wUser.lastClaimTime = block.timestamp;\n        wUser.reward = prevReward;\n\n        TransferHelper.safeTransferFrom(address(token), _msgSender(), address(this), _amount);\n\n        totalStaked += _amount;\n      \n        emit Stake(_msgSender(), _amount, block.timestamp);\n    }\n\n    /**\n      * Public function to unstake the tokens. It takes one argument as an input.\n      */\n    function UnstakeTokens(uint256 amount) public nonReentrant {\n        require(isUnStakeActive, \"Unstaking Is Paused\");\n\n        _unstakeTokens(_msgSender(), amount);\n    }\n\n    /**\n      * Internal function to unstake the tokens. It takes one argument as an input and called from public function.\n      */\n    function _unstakeTokens(address _address, uint256 amount) internal {\n        User storage wUser = deposit[_address];\n        require(wUser.stakedAmount \u003e= amount, \"Stake First To Unstake Tokens\");\n\n        if(apyEnabled) {\n            _claim(_address);\n        }\n      \n        token.transfer(_address, amount);\n\n        totalStaked -= amount;\n\n        wUser.stakedAmount = wUser.stakedAmount.sub(amount);\n        wUser.totalAmount = wUser.totalAmount.sub(amount);\n        wUser.depositTime = block.timestamp;\n\n        emit Unstake(_address, block.timestamp);\n    }\n\n    /**\n      * Intenal function to claim the token reward. It takes one argument of staker wallet address.\n      */\n    function _claim(address _address) internal {\n        User storage info = deposit[_address];\n        \n        uint256 claimcurrentReward = checkReward(_address);\n        claimcurrentReward = claimcurrentReward.add(info.reward);\n        info.totalAmount = info.totalAmount.sub(claimcurrentReward);\n\n        if(claimcurrentReward \u003c= pendingRewards()) {\n            TransferHelper.safeTransferFrom(address(token), rewardingWallet, _address, claimcurrentReward);\n        } else {\n            require(false, \"Pending Rewards Not Allocated\");\n        }\n        \n        info.lastClaimTime = block.timestamp;\n        info.reward = 0;\n        \n        emit Claim(_address, claimcurrentReward);\n    }\n\n    /**\n      * Public function to claim the token reward.\n      */\n    function claim() public nonReentrant {\n        User memory info = deposit[_msgSender()];\n        require(info.stakedAmount \u003e 0, \"Not Staked\");\n        require(apyEnabled, \"APY is not enabled\");\n\n        uint256 reward = checkReward(_msgSender());\n        reward = reward.add(info.reward);\n        require(reward \u003e 0, \"Current Reward Is 0\");\n        \n        _claim(_msgSender());\n    }\n\n    /**\n      * function to check the pending or approved rewarding amount of tokens.\n      */\n    function pendingRewards() public view returns (uint256) {\n        return token.allowance(rewardingWallet, address(this));\n    }\n\n    /**\n      * To withdraw tokens stuck in the smart contract. Only owner of contract can call this method.\n      */\n    function withdrawAnyTokens(address _token, address recipient, uint256 amount) public onlyOwner {\n        IERC20 anyToken = IERC20(_token);\n        anyToken.transfer(recipient, amount);\n        \n        emit WithdrawToken(recipient, amount);\n    }\n\n    /**\n      * To withdraw Eth stuck in the contract. Only owner of contract can call this method.\n      */\n    function withdrawFunds() public onlyOwner {\n       payable(_msgSender()).transfer(address(this).balance);\n       \n       emit Withdraw(_msgSender());\n    }\n\n    /**\n      * function to get the ETH Balance of contract\n      */\n    function contracEthBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n      * Public function to check the Reward of staker wallet. It takes one argument as input and returns the rewarding amoun.\n      */\n    function checkReward(address _address) public view returns (uint256) {\n        User memory cUser = deposit[_address];\n        \n        if(block.timestamp + 1 days \u003e cUser.lastClaimTime) {\n            uint256 stakedtime = (block.timestamp).sub(cUser.lastClaimTime);\n            stakedtime = stakedtime / 1 days;\n\n            uint256 reward = apyTier.mul(stakedtime).mul(cUser.stakedAmount).div(10000).div(365);\n            \n            return reward;\n        } else {\n            return 0;\n        }\n    }\n}\n"},"TransferHelper.sol":{"content":"\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\n            \u0027TransferHelper::safeApprove: approve failed\u0027\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\n            \u0027TransferHelper::safeTransfer: transfer failed\u0027\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\n            \u0027TransferHelper::transferFrom: transferFrom failed\u0027\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \u0027TransferHelper::safeTransferETH: ETH transfer failed\u0027);\n    }\n}\n"}}