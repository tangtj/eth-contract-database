// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

/// @title $EMRLD Staking
/// @author Andre Costa @ MyWeb3Startup.com


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

/**
 * @dev Interface of the ERC-20 standard as defined in the ERC.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

/**
 * @dev Interface for the optional metadata functions from the ERC-20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

/**
 * @dev Standard ERC-20 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.
 */
interface IERC20Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC20InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC20InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     * @param allowance Amount of tokens a `spender` is allowed to operate with.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC20InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC20InvalidSpender(address spender);
}

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC-20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the ERC may not emit
 * these events, as it isn't required by the specification.
 */
abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
    mapping(address account => uint256) private _balances;

    mapping(address account => mapping(address spender => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `value`.
     */
    function transfer(address to, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, value);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, value);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the ERC. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `value`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `value`.
     */
    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, value);
        _transfer(from, to, value);
        return true;
    }

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _transfer(address from, address to, uint256 value) internal virtual {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(from, to, value);
    }

    /**
     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
     * this function.
     *
     * Emits a {Transfer} event.
     */
    function _update(address from, address to, uint256 value) internal virtual {
        if (from == address(0)) {
            // Overflow check required: The rest of the code assumes that totalSupply never overflows
            _totalSupply += value;
        } else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < value) {
                revert ERC20InsufficientBalance(from, fromBalance, value);
            }
            unchecked {
                // Overflow not possible: value <= fromBalance <= totalSupply.
                _balances[from] = fromBalance - value;
            }
        }

        if (to == address(0)) {
            unchecked {
                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
                _totalSupply -= value;
            }
        } else {
            unchecked {
                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
                _balances[to] += value;
            }
        }

        emit Transfer(from, to, value);
    }

    /**
     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
     * Relies on the `_update` mechanism
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _mint(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(address(0), account, value);
    }

    /**
     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
     * Relies on the `_update` mechanism.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead
     */
    function _burn(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        _update(account, address(0), value);
    }

    /**
     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     *
     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
     */
    function _approve(address owner, address spender, uint256 value) internal {
        _approve(owner, spender, value, true);
    }

    /**
     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
     *
     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
     * `Approval` event during `transferFrom` operations.
     *
     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
     * true using the following override:
     * ```
     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
     *     super._approve(owner, spender, value, true);
     * }
     * ```
     *
     * Requirements are the same as {_approve}.
     */
    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
        if (owner == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[owner][spender] = value;
        if (emitEvent) {
            emit Approval(owner, spender, value);
        }
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `value`.
     *
     * Does not update the allowance value in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Does not emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < value) {
                revert ERC20InsufficientAllowance(spender, currentAllowance, value);
            }
            unchecked {
                _approve(owner, spender, currentAllowance - value, false);
            }
        }
    }
}

// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);
}

contract EMRLDStaking is Ownable, ERC20 {

    /**
     * @dev Struct to represent a staking pool with specific parameters.
     */
    struct StakingPool {
        uint256 apr; // Annual Percentage Rate for the staking pool.
        uint256 minStake; // Minimum staking amount allowed.
        uint256 maxStake; // Maximum staking amount allowed.
        uint256 totalMaxStakeAmount; // Total maximum amount that can be staked in this pool.
        uint256 totalStaked; // Total amount currently staked in this pool.
        uint256 totalStakers; // Total number of stakers in this pool.
        bool active; // Boolean to indicate if the pool is active.
    }
    mapping(uint256 => StakingPool) public stakingPools; // Mapping of staking pool IDs to their respective pools.

    /**
     * @dev Struct to represent a stake made by a user.
     */
    struct Stake {
        uint256 totalStaked;  // Total amount of ETH staked by the user.
        uint256 stakeTimestamp;  // Last timestamp the user's staking data was updated.
        bool isActive; // Boolean to indicate if the stake is currently active.
    }
    mapping(address => mapping(uint256 => Stake)) public stakes;  // Maps user addresses to their staking information.

    mapping(address => uint256) public tokensClaimed; // Mapping of user addresses to the total amount of tokens claimed.

    IERC20Metadata public EMRLD;  // ERC20 token for EMRLD.

    /**
     * @dev Enum to represent the state of the contract.
     */
    enum ContractState { OFF, OPEN }  // States of contract: OFF for not accepting stakes, OPEN for accepting stakes.
    ContractState public contractState = ContractState.OPEN;  // Initial state of the contract.

    /**
     * @dev Event emitted when a new staking pool is created.
     * @param lock The lock period for the staking pool.
     * @param apr The APR for the staking pool.
     * @param minStake The minimum stake amount for the staking pool.
     * @param maxStake The maximum stake amount for the staking pool.
     * @param totalMaxStakeAmount The total maximum stake amount for the staking pool.
     * @param active Whether the staking pool is active.
     */
    event StakingPoolCreated(uint256 lock, uint256 apr, uint256 minStake, uint256 maxStake, uint256 totalMaxStakeAmount, bool active);

    /**
     * @dev Event emitted when a user stakes tokens.
     * @param user The address of the user.
     * @param lock The ID of the staking pool.
     * @param amount The amount of tokens staked.
     */
    event Staked(address indexed user, uint256 indexed lock, uint256 amount);

    /**
     * @dev Event emitted when a user unstakes tokens.
     * @param user The address of the user.
     * @param lock The ID of the staking pool.
     * @param amount The amount of tokens unstaked.
     * @param rewards The amount of rewards earned.
     */
    event Unstaked(address indexed user, uint256 indexed lock, uint256 amount, uint256 rewards);

    /**
     * @dev Event emitted when a user restakes tokens.
     * @param user The address of the user.
     * @param lock The ID of the staking pool.
     * @param amount The amount of tokens restaked.
     * @param rewards The amount of rewards earned.
     */
    event Restaked(address indexed user, uint256 indexed lock, uint256 amount, uint256 rewards);

    /**
     * @dev Constructor to set the name and symbol for the staked tokens.
     */
    constructor() ERC20("xEMRLD", "xEMRLD") {
        EMRLD = IERC20Metadata(0xeBB1AFb0A4ddC9b1f84D9Aa72FF956cD1c1Eb4be);
    }

    /**
     * @dev Modifier to check the contract's current state before proceeding.
     * @param requiredState The state that the contract must be in.
     */
    modifier isContractState(ContractState requiredState) {
        require(contractState == requiredState, "Contract is not in the required state");
        _;
    }

    /**
     * @dev Function to stake tokens in a specific pool.
     * @param lock The ID of the staking pool.
     * @param amount The amount of tokens to stake.
     */
    function stake(uint256 lock, uint256 amount) external isContractState(ContractState.OPEN) {
        StakingPool storage pool = stakingPools[lock];
        Stake storage userStake = stakes[msg.sender][lock];

        require(pool.active, "Staking pool is not active");
        require(amount + stakes[msg.sender][lock].totalStaked >= pool.minStake, "Amount is less than minimum stake");
        require(amount + stakes[msg.sender][lock].totalStaked <= pool.maxStake, "Amount exceeds maximum stake");
        require(pool.totalStaked + amount <= pool.totalMaxStakeAmount, "Exceeds total maximum stake amount");
        require(!userStake.isActive, "User already has an active stake in this pool");

        EMRLD.transferFrom(msg.sender, address(this), amount);

        userStake.totalStaked = amount;
        userStake.stakeTimestamp = block.timestamp;
        userStake.isActive = true;

        pool.totalStaked += amount;
        pool.totalStakers++;

        _mint(msg.sender, amount);

        emit Staked(msg.sender, lock, amount);
    }

    /**
     * @dev Function to unstake tokens from a specific pool.
     * @param lock The ID of the staking pool.
     */
    function unstake(uint256 lock) external isContractState(ContractState.OPEN) {
        Stake storage userStake = stakes[msg.sender][lock];
        require(userStake.isActive, "No active stake found");
        
        StakingPool storage pool = stakingPools[lock];
        require(block.timestamp >= userStake.stakeTimestamp + lock * 86400, "Lock period has not passed");

        uint256 amountStaked = userStake.totalStaked;
        uint256 rewards = calculateReward(msg.sender, lock);
        tokensClaimed[msg.sender] += rewards;

        // Transfer the staked amount and rewards back to the user
        // EMRLD.transfer(msg.sender, rewards);
        EMRLD.transfer(msg.sender, amountStaked);

        // Update the user's stake and the pool's totals
        userStake.isActive = false;
        pool.totalStaked -= amountStaked;
        pool.totalStakers -= 1;

        _burn(msg.sender, amountStaked);

        emit Unstaked(msg.sender, lock, amountStaked, rewards);
    }

    /**
     * @dev Function to restake tokens and rewards in a specific pool.
     * @param lock The ID of the staking pool.
     */
    function restake(uint256 lock) external isContractState(ContractState.OPEN) {
        Stake storage userStake = stakes[msg.sender][lock];
        require(userStake.isActive, "No active stake found");

        StakingPool storage pool = stakingPools[lock];
        require(block.timestamp >= userStake.stakeTimestamp + lock * 86400, "Lock period has not passed");

        uint256 amountStaked = userStake.totalStaked;
        uint256 rewards = calculateReward(msg.sender, lock);

        // Ensure the total amount to be restaked doesn't exceed pool's maximum limits
        uint256 totalToRestake = amountStaked + rewards;
        require(totalToRestake >= pool.minStake, "Restake amount is less than minimum stake");
        require(totalToRestake <= pool.maxStake, "Restake amount exceeds maximum stake");
        require(pool.totalStaked + rewards <= pool.totalMaxStakeAmount, "Exceeds total maximum stake amount");

        // Update user's stake
        userStake.totalStaked = totalToRestake;
        userStake.stakeTimestamp = block.timestamp;

        // Update the pool's total staked amount (adding only rewards, as the initial staked amount is already included)
        pool.totalStaked += rewards;

        _mint(msg.sender, rewards);

        emit Restaked(msg.sender, lock, amountStaked, rewards);
    }

    /**
     * @dev Emergency function for the owner to unstake tokens for a user.
     * @param user The address of the user.
     * @param lock The ID of the staking pool.
     */
    function emergencyUnstake(address user, uint256 lock) external onlyOwner {
        Stake storage userStake = stakes[user][lock];
        require(userStake.isActive, "No active stake found");

        StakingPool storage pool = stakingPools[lock];

        uint256 amountStaked = userStake.totalStaked;

        uint256 rewards;
        if (block.timestamp >= userStake.stakeTimestamp + lock * 86400) {
            rewards = calculateReward(msg.sender, lock);
            tokensClaimed[user] += rewards;
        }

        // Transfer the staked amount and rewards back to the user
        // EMRLD.transfer(msg.sender, rewards);
        EMRLD.transfer(msg.sender, amountStaked);

        // Update the user's stake and the pool's totals
        userStake.isActive = false;
        pool.totalStaked -= amountStaked;
        pool.totalStakers -= 1;

        _burn(user, amountStaked);

        emit Unstaked(user, lock, amountStaked, rewards);
    }

    /**
     * @dev Calculates the total rewards earned by a staker based on the staked amounts and time elapsed.
     * @param staker The address of the staker.
     * @param lock The ID of the staking pool.
     * @return The total rewards earned.
     */
    function calculateReward(address staker, uint256 lock) public view returns (uint256) {
        uint256 timeStaked = block.timestamp - stakes[staker][lock].stakeTimestamp;
        return (((stakes[staker][lock].totalStaked * stakingPools[lock].apr) / 10000) * timeStaked) / (365 days);
    }

    ///
    /// SETTERS
    ///

    /**
     * @dev Function to set up a staking pool.
     * @param lock The lock period for the staking pool.
     * @param apr The APR for the staking pool.
     * @param minStake The minimum stake amount.
     * @param maxStake The maximum stake amount.
     * @param totalMaxStakeAmount The total maximum amount that can be staked in the pool.
     * @param active Boolean indicating if the pool is active.
     */
    function setStakingPool(
        uint256 lock,
        uint256 apr,
        uint256 minStake,
        uint256 maxStake,
        uint256 totalMaxStakeAmount,
        bool active
    ) public onlyOwner {
        require(apr > 0 && apr <= 10000, "APR must be between 1 and 100");
        require(minStake > 0, "Minimum stake must be greater than 0");
        require(maxStake >= minStake, "Maximum stake must be greater than or equal to minimum stake");
        require(totalMaxStakeAmount >= maxStake, "Total maximum stake amount must be greater than or equal to maximum stake");

        StakingPool storage pool = stakingPools[lock];
        pool.apr = apr;
        pool.minStake = minStake;
        pool.maxStake = maxStake;
        pool.totalMaxStakeAmount = totalMaxStakeAmount;
        pool.active = active;

        emit StakingPoolCreated(lock, apr, minStake, maxStake, totalMaxStakeAmount, active);
    }

    /**
     * @dev Sets the contract's operational state.
     * @param newState The new state to set the contract to (0 for OFF, 1 for OPEN).
     */
    function setContractState(uint256 newState) external onlyOwner {
        require(newState < 2, "Invalid State!");
        contractState = ContractState(newState);
    }

    /**
     * @dev Sets the USDB ERC20 token contract.
     * @param _EMRLD The address of the EMRLD ERC20 token contract.
     */
    function setEMRLD(address _EMRLD) external onlyOwner {
        EMRLD = IERC20Metadata(_EMRLD);
    }

    ///
    /// MISC
    ///
    
    /**
     * @notice Withdraws Ether from the contract.
     * @param recipient The address to receive the Ether.
     * @param amount The amount of Ether to withdraw.
     */
    function withdrawEther(address recipient, uint256 amount) external onlyOwner {
        require(recipient != address(0), "Invalid Address!");
        require(amount > 0 && address(this).balance >= amount, "Invalid Amount!");

        (bool sent, ) = recipient.call{value: amount}("");
        require(sent, "Failed to send Ether");
    }

    /**
     * @notice Withdraws ERC20 tokens from the contract.
     * @param recipient The address to receive the tokens.
     * @param amount The amount of tokens to withdraw.
     * @param token The address of the token contract.
     */
    function withdrawToken(address recipient, uint256 amount, address token) external onlyOwner {
        require(recipient != address(0), "Invalid Address!");
        require(amount > 0, "Invalid Amount!");
        require(token != address(0), "Invalid Token!");

        require(IERC20(token).transfer(recipient, amount), "Unsuccessful Transfer!");
    }
}