
// File: ../../node_modules/@openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: ../../node_modules/@openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: ../../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: src/DepositEarly.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

interface IVault {
    function receiveEarlyDeposits(uint256 amount) external;
}

/// @notice Kairos NFT index token early deposit contract, deposit now to get a boosted position when the index launches
///     This contract is used as a public deal offer to join the Kairos NFT index early, the offer goes as follows:
///     The public can deposit as much as desired until a limit date, after which the core team has a limited time to
///     publicly submit the vault contract, which will actually manage the index. The public can freely deposit and
///     withdraw until the vault is submitted, during the implementation period, deposits and withdraw are disabled.
///     Once the vault is submitted, the public can review it for a limited time, time during which whithdraws are
///     enabled. After the review period, anyone can transfer remaining deposits to the vault. The core team
///     can abort the program at any time, in which case the public can withdraw their deposits.
contract DepositEarly is Ownable {
    /// @notice Once the limit deposit time has passed, max time the core team has to implement the vault
    uint256 public constant MAX_IMPLEMENTATION_TIME = 90 days;
    /// @notice Once the vault is published, min time the public has to review it before deposits are transferred
    uint256 public constant MIN_PUBLIC_AUDIT_TIME = 7 days;
    /// @notice ERC20 token used for deposits
    IERC20 public immutable vaultCurrency;
    /// @notice amount deposited (possibly claimable) by address
    mapping(address => uint256) public amountDepositedBy;
    /// @notice total amount deposited held in contract
    uint256 public totalDeposited;
    /// @notice date after which deposits are no longer accepted, may be extended by the owner
    uint256 public depositLimitDate;
    /// @notice date on which the vault were publicly submitted
    /// @dev the date is 0 until the vault is submitted
    uint256 public vaultSubmitDate;
    /// @notice address of the vault contract
    IVault public vault;
    /// @notice whether the program was aborted by the owner, in which case the public can withdraw their deposits
    bool public programAborted;
    /// @notice whether the funds were transferred to the vault, ending the early deposit program
    bool public fundsWereTransferred;

    /// @notice emitted when a deposit is made
    /// @param from address of the depositor
    /// @param amount amount deposited
    event Deposited(address indexed from, uint256 amount);

    /// @notice emitted when a deposit is withdrawn
    /// @param from address of the withdrawer
    /// @param amount amount withdrawn
    event Withdrawn(address indexed from, uint256 amount);

    error WithdrawAmountExceedsBalance(uint256 amount, uint256 balance);
    error DepositLimitPassed(uint256 depositLimitDate);
    error DepositPeriodIsStillActive(uint256 depositLimitDate);
    error VaultReviewPeriodIsStillActive(uint256 vaultSubmitDate);
    error ImplementationTimeExceeded();
    error VaultNotSubmitted();
    error VaultIsAlreadySubmitted();
    error VaultIsActive();
    error ProgramAborted();
    error NewDepositDateIsBeforeOldOne();

    constructor(IERC20 _vaultCurrency, uint256 _depositLimitDate, address _owner) {
        vaultCurrency = _vaultCurrency;
        depositLimitDate = _depositLimitDate;
        transferOwnership(_owner);
    }

    modifier programNotAborted() {
        if (programAborted) revert ProgramAborted();
        _;
    }

    /// @notice deposit tokens to the early deposit program
    /// @param amount amount to deposit
    function deposit(uint256 amount) external programNotAborted {
        if (block.timestamp > depositLimitDate) revert DepositLimitPassed(depositLimitDate);
        amountDepositedBy[msg.sender] += amount;
        totalDeposited += amount;
        vaultCurrency.transferFrom(msg.sender, address(this), amount);
        emit Deposited(msg.sender, amount);
    }

    /// @notice withdraw tokens from the early deposit program
    /// @param amount amount to withdraw
    function withdraw(uint256 amount) external {
        uint256 callerBalance = amountDepositedBy[msg.sender];
        if (amount > callerBalance) revert WithdrawAmountExceedsBalance(amount, callerBalance);
        checkDepositsAreWhithdrawable();
        amountDepositedBy[msg.sender] -= amount;
        totalDeposited -= amount;
        vaultCurrency.transfer(msg.sender, amount);
        emit Withdrawn(msg.sender, amount);
    }

    function transferDepositsToVault() external programNotAborted {
        if (address(vault) == address(0)) revert VaultNotSubmitted();
        if (block.timestamp <= vaultSubmitDate + MIN_PUBLIC_AUDIT_TIME)
            revert VaultReviewPeriodIsStillActive(vaultSubmitDate);
        if (fundsWereTransferred) revert VaultIsActive();
        fundsWereTransferred = true;
        vaultCurrency.transfer(address(vault), totalDeposited);
        vault.receiveEarlyDeposits(totalDeposited);
    }

    // ~~~ admin methods ~~~ //

    function extendDepositPeriod(uint256 newDepositLimitDate) external onlyOwner programNotAborted {
        if (newDepositLimitDate <= depositLimitDate) revert NewDepositDateIsBeforeOldOne();
        if (block.timestamp > depositLimitDate) revert DepositLimitPassed(depositLimitDate);
        depositLimitDate = newDepositLimitDate;
    }

    function submitVault(address _vault) external onlyOwner programNotAborted {
        if (block.timestamp <= depositLimitDate) revert DepositPeriodIsStillActive(depositLimitDate);
        if (block.timestamp > depositLimitDate + MAX_IMPLEMENTATION_TIME) revert ImplementationTimeExceeded();
        if (address(vault) != address(0)) revert VaultIsAlreadySubmitted();
        vaultSubmitDate = block.timestamp;
        vault = IVault(_vault);
    }

    function abortProgram() external onlyOwner programNotAborted {
        if (fundsWereTransferred) revert VaultIsActive();
        programAborted = true;
    }

    // ~~~ interal methods ~~~ //

    function checkDepositsAreWhithdrawable() internal view {
        if (programAborted) return;
        if (block.timestamp <= depositLimitDate) return;
        if (vaultSubmitDate == 0) {
            if (block.timestamp > depositLimitDate + MAX_IMPLEMENTATION_TIME) {
                return;
            } else {
                revert VaultNotSubmitted();
            }
        } else {
            if (fundsWereTransferred) {
                revert VaultIsActive();
            } else {
                return;
            }
        }
    }
}

