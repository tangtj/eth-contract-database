
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/SQUIDGame.sol
// SQUID Game (SQUID) is originally a meme coin on Binance Smart Chain.
// It is now following in the footsteps of $BTC, $DOGE, and $SHIB. A token with no founder team, and fully driven by the communities.
// A passionate and committed team of community volunteers has breathed new life into the SQUID project, rescuing it from its unfortunate past and steering it towards a promising future. They're launching the expansion of SQUID Token on the Ethereum Mainnet, and it's packed with some seriously impressive features.
// This is a genuine resurrection and a redemption story like no other!

// Here at ETH, SQUID Game Token is a community driven, fair launched DeFi Token, governed by SQUID DAO Contract.
// SQUID Game spirit is to create a community that is united and strong, bonded by the will to survive and win.
// With SQUID Frontman advocating for fairness, transparency, and sharing wealth to the masses, SQUID Game Token is a token that is built to last.

//
//
// Website: https://SQUIDGameHolders.Club
// Twitter: https://twitter.com/SQUIDHolders
// Telegram: https://t.me/squidcrypt

// Message from the SQUID Frontman
// Everyone should be the winner!
// Let's stand together and fight for our rights to be the winner!
// Let's unite! We are strong together!
// https://SQUIDGameHolders.Club/docs/messagefromsquidfrontman2/

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract SquidToken is Ownable, ERC20, ReentrancyGuard {
    bool public limited = false;
    uint256 public maxHoldingAmount;
    uint256 public minHoldingAmount;
    address public uniswapV2Pair;
    mapping(address => bool) public blacklists;

    address public SQUIDFrontman;
    address public SquidDAOAddress;
    // bool private marketingWalletSet = false;
    bool private marketingWalletSet = true; // pre-defined marketing wallet; cannot be changed.
    address public MarketingWallet = 0x4440D4a8aB47412849613cba42Fd2c40Db7c2ef0;
    address public SquidGameTokenDevelopmentWallet =
        0x8ef6B893e9C9375449859feC1A4e9e54efBa203e;
    address public DevelopmentWalletFailSafe =
        0x9f095a94553D2EFfcc1A34b65b2a632DB65ae1e6;
    address public MarketingWalletFailSafe =
        0xf24e471bA10D791298B4AA55F447C2aaCe2E4aAe;

    address public winner;
    bool public rewardClaimed = false;
    bool public initialDistributionDone = false;
    uint256 public rewardAmount = 50000 * (10 ** 18);

    address public ultimateDrawWinner;
    bool public ultimateRewardClaimed = false;
    uint256 public ultimateRewardAmount = 1000000 * 10 ** 18; // 1 million SQUID tokens

    // max limit reward to 500,000 SQUID tokens
    uint256 public constant maxRewardAmount = 500000 * (10 ** 18);

    //daily transfer limit for marketing wallet and development wallet
    uint256 public constant dailyTransferLimit = 10000000 * (10 ** 18);
    mapping(address => uint256) public dailyTransfered;
    mapping(address => uint256) public lastTransfered;

    uint256 public lastDistributed;
    uint256 public lastWinnerSet;
    uint256 public contractDeploymentTimestamp;

    event UltimateDrawWinnerSet(address winner);
    event UltimateRewardDistributed(address winner, uint256 amount);

    event RewardDistributed(address indexed luckyHolder, uint256 amount);
    event MarketingWalletSet(address indexed marketingWallet);
    event EmergencyTransfer(
        address indexed fromWallet,
        address indexed toWallet,
        uint256 amount
    );
    event WinnerSet(address indexed winner);
    event LargeTransfer(
        address indexed from,
        address indexed to,
        uint256 amount
    );

    constructor() Ownable() ERC20("Squid Game", "SQUID") {
        _mint(msg.sender, 488000000 * (10 ** 18));
        SQUIDFrontman = msg.sender;

        initialDistribution();
        lastDistributed = block.timestamp;
        lastWinnerSet = block.timestamp;
        contractDeploymentTimestamp = block.timestamp;
    }

    modifier onlySquidFrontmanOrDAO() {
        require(
            msg.sender == SQUIDFrontman ||
                (msg.sender == SquidDAOAddress &&
                    SquidDAOAddress != address(0)),
            "Not authorized"
        );
        _;
    }
    modifier onlySquidFrontman() {
        require(msg.sender == SQUIDFrontman, "Caller is not the SQUIDFrontman");
        _;
    }

    modifier dailyLimitCheck(address from, uint256 amount) {
        if (
            from == MarketingWallet || from == SquidGameTokenDevelopmentWallet
        ) {
            // If it's been more than 24 hours since the last transfer by SQUID Marketing and Dev Wallets, reset the daily transfer amount
            // any unauthorized transfer ; the emergency transfer function will be used to transfer the funds to fail safe address.
            // SQUID Frontman has designed this to prevent any unauthorized transfer of funds from the Marketing and Dev Wallets
            // movements of these wallets should be transparent and traceable
            if (block.timestamp > lastTransfered[from] + 24 hours) {
                dailyTransfered[from] = 0;
            }

            // If it is less than one year since contract deployment, do not allow any transfers from SquidGameTokenDevelopmentWallet
            // This is to prevent any unauthorized transfer of funds from the Development Wallet
            // SQUID Frontman has designed this to build trust and confidence in the whole crypto community.
            // We aspire to be the most transparent and traceable token in the whole crypto space.
            if (
                from == SquidGameTokenDevelopmentWallet &&
                block.timestamp < contractDeploymentTimestamp + 365 days
            ) {
                revert(
                    "Transfer: The timelock for SquidGameTokenDevelopmentWallet has not expired yet"
                );
            }

            require(
                block.timestamp > lastTransfered[from] + 24 hours,
                "Transfer: Daily transfer limit reached, wait until 24 hours passed since last transfer"
            );
            require(
                dailyTransfered[from] + amount <= dailyTransferLimit,
                "Transfer: Transfer amount exceeds daily limit"
            );

            // Only update lastTransfered and dailyTransfered after the transfer is successful
            _;

            dailyTransfered[from] += amount;
            lastTransfered[from] = block.timestamp;
        } else {
            _;
        }
    }

    // The winner of the ultimate draw will be set by the SQUID Frontman or SQUID DAO after the SQUID VRF function generateRandomAddressIndexForUltimateDraw is called
    // generateRandomAddressIndexForUltimateDraw can only be called once by the SQUID Frontman
    // The addressIndex which should be accessible in the SQUID Game token website is mapped to the winning SQUID Holder address.
    // The emitted event UltimateDrawWinnerGenerated at the SquidRandomNumberConsumer VRFV2WrapperConsumerBase contract  will be used to update the SQUID Game token website to display the winning address.
    // All should be transparent and traceable.
    // The winner of the ultimate draw will be able to claim the ultimate reward by calling the claimUltimateReward function
    // Wishing that the SQUID DAO COntract will execute this when SQUID is at least $1 so that the winner will get $1 million USD worth of SQUID tokens

    function setUltimateDrawWinner(
        address _winner
    ) external onlySquidFrontmanOrDAO nonReentrant {
        require(
            ultimateDrawWinner == address(0),
            "Ultimate draw has already been done"
        );
        ultimateDrawWinner = _winner;
        ultimateRewardClaimed = false;

        emit UltimateDrawWinnerSet(_winner);
    }

    function claimUltimateReward() external nonReentrant {
        require(
            msg.sender == ultimateDrawWinner,
            "Not the ultimate draw winner"
        );
        require(!ultimateRewardClaimed, "Ultimate reward already claimed");
        require(balanceOf(msg.sender) > 0, "Not a SQUID holder");

        ultimateRewardClaimed = true;
        _transfer(MarketingWallet, ultimateDrawWinner, ultimateRewardAmount);

        emit UltimateRewardDistributed(
            ultimateDrawWinner,
            ultimateRewardAmount
        );
    }

    function distributeReward(
        address luckyHolder
    ) external onlySquidFrontmanOrDAO nonReentrant {
        require(luckyHolder != address(0), "Cannot reward to the zero address");
        require(
            balanceOf(luckyHolder) > 0,
            "Address must be a SQUID Game token holder"
        );
        require(
            balanceOf(MarketingWallet) >= rewardAmount,
            "Marketing Wallet balance is insufficient"
        );
        require(
            block.timestamp > lastDistributed + 7 days,
            "Cannot distribute reward more than once per week"
        );

        _transfer(MarketingWallet, luckyHolder, rewardAmount);
        emit RewardDistributed(luckyHolder, rewardAmount);

        lastDistributed = block.timestamp;
    }

    function claimReward() external {
        require(msg.sender == winner, "Not the winner");
        require(!rewardClaimed, "Reward already claimed");
        require(balanceOf(msg.sender) > 0, "Not a SQUID holder");
        rewardClaimed = true;
        _transfer(MarketingWallet, winner, rewardAmount);
        emit RewardDistributed(winner, rewardAmount);
    }

    // Allows enforcement agent to blacklist an address, in order to be compliant with regulations.
    // Of course CoinmarketCap and CoinGecko should not display this warning without understanding the context specially when it is renounced.
    function blacklist(
        address _address,
        bool _isBlacklisting
    ) external onlyOwner {
        blacklists[_address] = _isBlacklisting;
    }

    function setDAOAddress(address _SquidDAOAddress) external {
        require(
            msg.sender == SQUIDFrontman,
            "Only the SQUIDFrontman can set the DAO address"
        );
        SquidDAOAddress = _SquidDAOAddress;
    }

    // in case this is not set before the renouncement, need to set it to start trading;
    // This helps prevent any possible issues with trading or transfers if SQUIDFrontman forgets to set uniswapV2Pair before renounces ownership.

    function setUniswapV2Pair(address _uniswapV2Pair) external {
        require(
            msg.sender == SQUIDFrontman,
            "Only the SQUIDFrontman can set the UniswapV2Pair address"
        );
        require(
            _uniswapV2Pair != address(0),
            "UniswapV2Pair cannot be the zero address"
        );
        uniswapV2Pair = _uniswapV2Pair;
    }

    function initialDistribution() internal {
        require(!initialDistributionDone, "Initial distribution already done");
        initialDistributionDone = true;

        uint256 totalSupply = totalSupply();
        uint256 marketingAllocation = (totalSupply * 20) / 100; // 20%
        uint256 developmentAllocation = (totalSupply * 10) / 100; // 10%

        _transfer(msg.sender, MarketingWallet, marketingAllocation);
        _transfer(
            msg.sender,
            SquidGameTokenDevelopmentWallet,
            developmentAllocation
        );
    }

    function setMarketingWallet(
        address _marketingWallet
    ) external onlySquidFrontmanOrDAO {
        require(!marketingWalletSet, "MarketingWallet can only be set once");
        require(
            _marketingWallet != address(0),
            "MarketingWallet cannot be the zero address"
        );

        MarketingWallet = _marketingWallet;
        marketingWalletSet = true;

        emit MarketingWalletSet(_marketingWallet);
    }

    function setWinner(
        address _winner
    ) external onlySquidFrontmanOrDAO nonReentrant {
        require(
            block.timestamp > lastWinnerSet + 7 days,
            "Cannot set winner more than once per week"
        );

        winner = _winner;
        rewardClaimed = false;

        emit WinnerSet(_winner);

        lastWinnerSet = block.timestamp;
    }

    function setRewardAmount(
        uint256 _rewardAmount
    ) external onlySquidFrontmanOrDAO nonReentrant {
        require(
            _rewardAmount <= maxRewardAmount,
            "Exceeds maximum reward amount"
        );
        rewardAmount = _rewardAmount;
    }

    function setRule(
        bool _limited,
        address _uniswapV2Pair,
        uint256 _maxHoldingAmount,
        uint256 _minHoldingAmount
    ) external onlyOwner {
        limited = _limited;
        uniswapV2Pair = _uniswapV2Pair;
        maxHoldingAmount = _maxHoldingAmount;
        minHoldingAmount = _minHoldingAmount;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        require(!blacklists[to] && !blacklists[from], "Blacklisted");

        if (uniswapV2Pair == address(0)) {
            require(from == owner() || to == owner(), "trading is not started");
            return;
        }

        if (limited && from == uniswapV2Pair) {
            require(
                super.balanceOf(to) + amount <= maxHoldingAmount &&
                    super.balanceOf(to) + amount >= minHoldingAmount,
                "Forbid"
            );
        }
    }

    function transfer(
        address recipient,
        uint256 amount
    )
        public
        virtual
        override
        dailyLimitCheck(_msgSender(), amount)
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);

        // Check if sender is MarketingWallet or SquidGameTokenDevelopmentWallet
        // and if the amount is greater than 3M SQUID
        if (
            (_msgSender() == MarketingWallet ||
                _msgSender() == SquidGameTokenDevelopmentWallet) &&
            amount > 3000000 * (10 ** 18)
        ) {
            emit LargeTransfer(_msgSender(), recipient, amount);
        }

        return true;
    }

    // in case of emergency where SQUID wallets are compromised, we can transfer the funds out to the fail safe address

    function emergencyTransfer() external onlySquidFrontmanOrDAO nonReentrant {
        uint256 marketingWalletBalance = balanceOf(MarketingWallet);
        uint256 developmentWalletBalance = balanceOf(
            SquidGameTokenDevelopmentWallet
        );

        _transfer(
            MarketingWallet,
            MarketingWalletFailSafe,
            marketingWalletBalance
        );
        _transfer(
            SquidGameTokenDevelopmentWallet,
            DevelopmentWalletFailSafe,
            developmentWalletBalance
        );

        // update wallets
        MarketingWallet = MarketingWalletFailSafe;
        SquidGameTokenDevelopmentWallet = DevelopmentWalletFailSafe;

        emit EmergencyTransfer(
            MarketingWallet,
            MarketingWalletFailSafe,
            marketingWalletBalance
        );
        emit EmergencyTransfer(
            SquidGameTokenDevelopmentWallet,
            DevelopmentWalletFailSafe,
            developmentWalletBalance
        );
    }

    function burn(uint256 value) external {
        _burn(msg.sender, value);
    }
}

