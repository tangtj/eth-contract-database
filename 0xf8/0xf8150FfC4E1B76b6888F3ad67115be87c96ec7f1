
// File: /contracts/SubscriptionManager.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract SubscriptionManager is AccessControl, ReentrancyGuard {
  /**
   * @dev Struct to store information about promo codes.
   * @param _address The address associated with the promo code.
   * @param commissionRate The commission rate for the promo code.
   * @param discountRate The discount rate provided by the promo code.
   * @param deadline The expiration time of the promo code.
   */
  struct PromoCode {
    address _address;
    uint commissionRate;
    uint discountRate;
    uint deadline;
  }

  /**
   * @dev Emitted when a subscription is updated.
   * @param id The ID of the subscription.
   * @param _address The address of the subscriber.
   * @param duration The duration of the subscription.
   * @param deadline The deadline of the subscription.
   */
  event UpdateSubscription(
    uint indexed id,
    address indexed _address,
    int duration,
    uint deadline
  );

  /**
   * @dev Emitted when a promo code is added.
   * @param _address The address associated with the promo code.
   * @param name The name of the promo code.
   * @param commissionRate The commission rate for the promo code.
   * @param discountRate The discount rate provided by the promo code.
   * @param deadline The expiration time of the promo code.
   */
  event PromoCodeAddition(
    address indexed _address,
    string name,
    uint commissionRate,
    uint discountRate,
    uint deadline
  );

  /**
   * @dev Emitted when a subscription is created.
   * @param id The ID of the subscription.
   * @param subscriber The address of the subscriber.
   * @param duration The duration of the subscription.
   * @param cost The cost of the subscription.
   * @param deadline The deadline of the subscription.
   */
  event Subscription(
    uint indexed id,
    address indexed subscriber,
    uint duration,
    uint cost,
    uint deadline
  );

  /**
   * @dev Emitted when a subscription is created with a promo code.
   * @param id The ID of the subscription.
   * @param subscriber The address of the subscriber.
   * @param promoCode The name of the promo code used.
   * @param duration The duration of the subscription.
   * @param cost The cost of the subscription after applying the promo code discount.
   * @param deadline The deadline of the subscription.
   */
  event SubscriptionWithPromoCode(
    uint indexed id,
    address indexed subscriber,
    string indexed promoCode,
    uint duration,
    uint cost,
    uint deadline
  );

  /**
   * @dev Error thrown when an invalid plan duration is provided.
   * @param duration The invalid duration that was provided.
   */
  error InvalidPlan(uint duration);

  /**
   * @dev Error thrown when an empty promo code is used.
   */
  error EmptyPromoCode();

  /**
   * @dev Error thrown when trying to add a promo code that already exists.
   * @param promoCode The name of the promo code that already exists.
   */
  error PromoCodeAlreadyExists(string promoCode);

  /**
   * @dev Error thrown when an invalid promo code is used.
   * @param promoCode The name of the promo code that is invalid.
   */
  error InvalidPromoCode(string promoCode);

  /**
   * @dev Error thrown when a promo code is used past its expiration date.
   * @param promoCode The name of the expired promo code.
   */
  error ExpiredPromoCode(string promoCode);

  /**
   * @dev Error thrown when the provided plans are invalid.
   */
  error InvalidPlans();

  /**
   * @dev Error thrown when a transfer of Ether fails.
   */
  error EtherTransferFailed();

  /**
   * @dev Error thrown when the funds provided for a subscription are incorrect.
   */
  error IncorrectFunds();

  // Role identifier for moderators
  bytes32 public constant MODERATOR_ROLE = keccak256("MODERATOR_ROLE");

  // Multiplier used for rate calculations. 10000 corresponds to 100% in Basis Point System (BPS)
  uint private constant RATE_MULTIPLIER = 10000;

  // Address where collected subscription funds will be sent
  address payable private _treasuryAddress;

  // Array storing durations of all subscription plans
  uint[] private _planDurations;

  // Array storing costs of all subscription plans
  uint[] private _planCosts;

  // Mapping from subscription plan duration to its cost
  mapping(uint => uint) private _plans; // duration => cost

  // Mapping from subscription id to its deadline
  mapping(uint256 => uint) private _subscriptions; // id => deadline

  // Mapping from promo code name to its details
  mapping(string => PromoCode) private _promoCodes; // name => promo code

  /**
   * @dev Sets up the subscription manager contract with initial configuration.
   * @param treasuryAddress The address where collected funds will be sent.
   * @param planDurations An array of durations for the subscription plans.
   * @param planCosts An array of costs for the subscription plans.
   */
  constructor(
    address payable treasuryAddress,
    uint[] memory planDurations,
    uint[] memory planCosts
  ) {
    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender); // Assigns the deployer the default admin role
    _treasuryAddress = treasuryAddress; // Sets the treasury address where funds will be collected

    // Loop through the provided plan durations and costs to initialize the plans
    uint length = planDurations.length;
    for (uint i = 0; i < length; i++) {
      uint duration = planDurations[i];
      _plans[duration] = planCosts[i]; // Maps the duration to its cost
      _planDurations.push(duration); // Stores the duration in an array for retrieval
      _planCosts.push(planCosts[i]); // Stores the cost in an array for retrieval
    }
  }

  // Public View Methods

  /**
   * @dev Returns the durations and costs of all subscription plans.
   *
   * @return Two arrays containing the durations and costs of all subscription plans.
   */
  function plans() public view returns (uint[] memory, uint[] memory) {
    return (_planDurations, _planCosts);
  }

  /**
   * @dev Returns the address of the treasury wallet.
   *
   * @return The address of the treasury wallet.
   */
  function treasuryWallet() public view returns (address) {
    return _treasuryAddress;
  }

  /**
   * @dev Returns the cost of a subscription plan for a given duration.
   *
   * @param duration The duration of the subscription plan.
   * @return The cost of the subscription plan.
   */
  function planCost(uint duration) public view returns (uint) {
    return _plans[duration];
  }

  /**
   * @dev Returns the deadline of a subscription for a given ID.
   *
   * @param _id The ID of the subscription.
   * @return The deadline of the subscription.
   */
  function subscriptionDeadline(uint256 _id) public view returns (uint) {
    return _subscriptions[_id];
  }

  /**
   * @dev Returns the promo code for a given name.
   *
   * @param name The name of the promo code.
   * @return The promo code.
   */
  function promoCode(string memory name) public view returns (PromoCode memory) {
    return _promoCodes[name];
  }

  /**
   * @dev Checks if a subscription is active for a given ID.
   *
   * @param _id The ID of the subscription.
   * @return True if the subscription is active, false otherwise.
   */
  function subscriptionActive(uint _id) public view returns (bool) {
    return _subscriptions[_id] > block.timestamp;
  }

  // Moderator Actions

  /**
   * @dev Updates the subscription plans.
   * This function first validates the input arrays, then clears the existing plans, and finally sets up the new plans.
   * Emits an {InvalidPlans} event if the input arrays are not of the same length or if any duration is zero.
   *
   * Requirements:
   * - The caller must have the `MODERATOR_ROLE`.
   * - The `durations` and `costs` arrays must have the same length.
   * - No duration can be zero.
   *
   * @param durations An array of durations for the new plans.
   * @param costs An array of costs for the new plans.
   */
  function updatePlans(
    uint[] calldata durations,
    uint[] calldata costs
  ) public onlyRole(MODERATOR_ROLE) {
    // Check if the lengths of the input arrays match
    if (durations.length != costs.length) revert InvalidPlans();
    // Clear the existing plans
    for (uint i = 0; i < _planDurations.length; i++) {
      delete _plans[_planDurations[i]];
    }
    // Set up the new plans
    for (uint i = 0; i < durations.length; i++) {
      // Check if any duration is zero
      if (durations[i] == 0) revert InvalidPlans();
      _plans[durations[i]] = costs[i];
    }
    // Update the storage arrays with the new plans
    _planDurations = durations;
    _planCosts = costs;
  }

  /**
   * @dev Adds a new subscription or extends an existing one for a given ID and duration.
   * Emits an {UpdateSubscription} event indicating the update.
   *
   * Requirements:
   * - The caller must have the `MODERATOR_ROLE`.
   *
   * @param _id The ID of the subscription to add or extend.
   * @param duration The duration in days to add to the subscription's deadline.
   */
  function addSubscription(uint _id, uint duration) public onlyRole(MODERATOR_ROLE) {
    uint deadline = _updateDeadline(_id, duration);
    emit UpdateSubscription(_id, msg.sender, int(duration), deadline);
  }

  /**
   * @dev Subtracts a given duration from an existing subscription's deadline.
   * Emits an {UpdateSubscription} event indicating the update.
   *
   * Requirements:
   * - The caller must have the `MODERATOR_ROLE`.
   *
   * @param _id The ID of the subscription to subtract the duration from.
   * @param duration The duration in days to subtract from the subscription's deadline.
   */
  function subtractSubscription(
    uint _id,
    uint duration
  ) public onlyRole(MODERATOR_ROLE) {
    uint newDeadline = _subscriptions[_id] - duration * 1 days;
    _subscriptions[_id] = newDeadline;
    emit UpdateSubscription(_id, msg.sender, -int(duration), newDeadline);
  }

  /**
   * @dev Sets a new promo code or updates an existing one.
   * Emits a {PromoCodeAddition} event indicating the addition or update of a promo code.
   *
   * Requirements:
   * - The caller must have the `MODERATOR_ROLE`.
   * - The `name` cannot be an empty string.
   * - A promo code with the same `name` must not already exist.
   *
   * @param _address The address associated with the promo code.
   * @param name The name of the promo code.
   * @param commissionRate The commission rate for the promo code.
   * @param discountRate The discount rate for the promo code.
   * @param duration The duration in days for which the promo code is valid.
   */
  function setPromoCode(
    address _address,
    string memory name,
    uint commissionRate,
    uint discountRate,
    uint duration
  ) public onlyRole(MODERATOR_ROLE) {
    // Ensure the promo code name is not empty
    if (bytes(name).length == 0) revert EmptyPromoCode();
    // Ensure the promo code does not already exist
    if (_promoCodes[name]._address != address(0)) revert PromoCodeAlreadyExists(name);

    // Calculate the deadline for the promo code based on the current block timestamp and the given duration
    uint deadline = block.timestamp + duration * 1 days;

    // Create or update the promo code in the mapping with the provided details
    PromoCode storage _promoCode = _promoCodes[name];
    _promoCode._address = _address;
    _promoCode.commissionRate = commissionRate;
    _promoCode.discountRate = discountRate;
    _promoCode.deadline = deadline;

    // Emit an event to log the addition or update of the promo code
    emit PromoCodeAddition(_address, name, commissionRate, discountRate, deadline);
  }

  // Subscriber Actions

  /**
   * @dev Allows a user to subscribe to a plan.
   * The cost of the plan is determined by the `duration` parameter and must be paid in full.
   * The payment is sent to the treasury address.
   * Emits a {Subscription} event upon successful subscription.
   *
   * Requirements:
   * - The plan associated with the `duration` must be valid.
   * - The `msg.value` must equal the cost of the plan.
   * - The transaction must not be reentrant.
   *
   * @param _id The ID of the subscription plan.
   * @param duration The duration of the subscription plan.
   */
  function subscribe(uint _id, uint duration) public payable nonReentrant {
    // Determine the cost of the subscription plan based on the duration
    uint cost = _plans[duration];
    // Revert the transaction if the plan is invalid (cost is 0)
    if (cost == 0) revert InvalidPlan(duration);
    // Revert the transaction if the funds sent do not match the cost of the plan
    if (msg.value != cost) revert IncorrectFunds();
    // Attempt to transfer the cost to the treasury address
    (bool sentToTreasury, ) = _treasuryAddress.call{value: cost}("");
    // Revert the transaction if the transfer fails
    if (!sentToTreasury) {
      revert EtherTransferFailed();
    }

    // Update the subscription deadline for the user
    uint deadline = _updateDeadline(_id, duration);

    // Emit an event to log the new subscription
    emit Subscription(_id, msg.sender, duration, cost, deadline);
  }

  /**
   * @dev Allows a user to subscribe to a plan using a promo code.
   * The cost of the plan is determined by the `duration` parameter and must be paid in full.
   * The payment is sent to the treasury address and the promoter of the promo code.
   * Emits a {SubscriptionWithPromoCode} event upon successful subscription.
   *
   * Requirements:
   * - The plan associated with the `duration` must be valid.
   * - The `msg.value` must equal the discounted cost of the plan.
   * - The transaction must not be reentrant.
   * - The promo code must be valid and not expired.
   *
   * @param _id The ID of the subscription plan.
   * @param duration The duration of the subscription plan.
   * @param promoCodeName The name of the promo code.
   */
  function subscribeWithPromoCode(
    uint _id,
    uint duration,
    string memory promoCodeName
  ) public payable nonReentrant {
    // Determine the cost of the subscription plan based on the duration
    uint cost = _plans[duration];
    // Revert the transaction if the plan is invalid (cost is 0)
    if (cost == 0) revert InvalidPlan(duration);

    // Fetch the promo code details
    PromoCode memory _promoCode = _promoCodes[promoCodeName];
    // Revert the transaction if the promo code is invalid (address is 0)
    if (_promoCode._address == address(0)) revert InvalidPromoCode(promoCodeName);
    // Revert the transaction if the promo code is expired
    if (_promoCode.deadline < block.timestamp) revert ExpiredPromoCode(promoCodeName);

    // Calculate the discounted cost based on the promo code discount rate
    uint discountedCost = cost - (cost * _promoCode.discountRate) / RATE_MULTIPLIER;

    // Revert the transaction if the funds sent do not match the discounted cost of the plan
    if (msg.value != discountedCost) revert IncorrectFunds();
    uint balance = discountedCost;

    // Calculate the amount to be sent to the promoter based on the promo code commission rate
    uint promoCodeAmount = (balance * _promoCode.commissionRate) / RATE_MULTIPLIER;
    balance -= promoCodeAmount;

    // Attempt to transfer the promo code amount to the promoter address
    (bool sentToPromoter, ) = _promoCode._address.call{value: promoCodeAmount}("");
    // Revert the transaction if the transfer fails
    if (!sentToPromoter) {
      revert EtherTransferFailed();
    }
    // After sending to the promoter, send the rest to the treasury
    (bool sentToTreasury, ) = _treasuryAddress.call{value: balance}("");
    // Revert the transaction if the transfer fails
    if (!sentToTreasury) {
      revert EtherTransferFailed();
    }

    // Update the subscription deadline for the user
    uint deadline = _updateDeadline(_id, duration);

    // Emit an event to log the new subscription with a promo code
    emit SubscriptionWithPromoCode(
      _id,
      msg.sender,
      promoCodeName,
      duration,
      discountedCost,
      deadline
    );
  }

  // Private Methods

  /**
   * @dev Updates the subscription deadline for a given subscription ID.
   * If the current deadline is 0 or has passed, the new deadline is set to the current block timestamp plus the duration.
   * If the current deadline has not passed, the new deadline is set to the current deadline plus the duration.
   * The duration is expected to be in days.
   *
   * @param _id The ID of the subscription to update.
   * @param duration The duration to add to the current deadline, in days.
   * @return The new deadline timestamp.
   */
  function _updateDeadline(uint _id, uint duration) private returns (uint) {
    uint currentDeadline = _subscriptions[_id];
    uint newDeadline;

    if (currentDeadline == 0 || block.timestamp > currentDeadline) {
      newDeadline = block.timestamp + duration * 1 days;
    } else {
      newDeadline = currentDeadline + duration * 1 days;
    }

    _subscriptions[_id] = newDeadline;

    return newDeadline;
  }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role, _msgSender());
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}

