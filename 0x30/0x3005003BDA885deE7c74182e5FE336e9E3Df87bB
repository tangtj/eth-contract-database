{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(\n        address spender,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IXDToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\nimport \"./IERC20.sol\";\n\ninterface IXDToken is IERC20{\n  function lastEmissionTime() external view returns (uint256);\n\n  function claimMasterRewards(uint256 amount) external returns (uint256 effectiveAmount);\n  function masterEmissionRate() external view returns (uint256);\n  function burn(uint256 amount) external;\n}"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c \u003c a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b \u003e a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a % b;\n    }\n}"},"XDToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\n\nimport \"./Ownable.sol\";\nimport \"./Math.sol\";\nimport \"./SafeMath.sol\";\nimport \"./ERC20.sol\";\n\nimport \"./IXDToken.sol\";\n\ncontract XDToken is Ownable, ERC20(\"XD Token\", \"XD\"), IXDToken {\n    using SafeMath for uint256;\n\n    uint256 public constant MAX_EMISSION_RATE = 2 ether;\n    uint256 public constant MAX_SUPPLY_LIMIT = 200000000 ether;\n    uint256 public elasticMaxSupply; // Once deployed, controlled through governance only\n    uint256 public emissionRate; // Token emission per second\n\n    uint256 public override lastEmissionTime;\n    uint256 public masterReserve; // Pending rewards for the master\n\n    uint256 public constant ALLOCATION_PRECISION = 100;\n    // Allocations emitted over time. When \u003c 100%, the rest is minted into the treasury (default 15%)\n    uint256 public masterAllocation = 85; // = 85%\n\n    address public masterAddress;\n    address public treasuryAddress;\n    address public constant BURN_ADDRESS =\n        0x000000000000000000000000000000000000dEaD;\n\n    constructor(\n        uint256 maxSupply_,\n        uint256 initialSupply,\n        uint256 initialEmissionRate,\n        address treasuryAddress_\n    ) {\n        require(\n            initialEmissionRate \u003c= MAX_EMISSION_RATE,\n            \"invalid emission rate\"\n        );\n        require(maxSupply_ \u003c= MAX_SUPPLY_LIMIT, \"invalid initial maxSupply\");\n        require(initialSupply \u003c maxSupply_, \"invalid initial supply\");\n        require(treasuryAddress_ != address(0), \"invalid treasury address\");\n\n        elasticMaxSupply = maxSupply_;\n        emissionRate = initialEmissionRate;\n        treasuryAddress = treasuryAddress_;\n\n        _mint(msg.sender, initialSupply);\n    }\n\n    /********************************************/\n    /****************** EVENTS ******************/\n    /********************************************/\n\n    event ClaimMasterRewards(uint256 amount);\n    event AllocationsDistributed(uint256 masterShare, uint256 treasuryShare);\n    event InitializeMasterAddress(address masterAddress);\n    event InitializeEmissionStart(uint256 startTime);\n    event UpdateAllocations(\n        uint256 masterAllocation,\n        uint256 treasuryAllocation\n    );\n    event UpdateEmissionRate(\n        uint256 previousEmissionRate,\n        uint256 newEmissionRate\n    );\n    event UpdateMaxSupply(uint256 previousMaxSupply, uint256 newMaxSupply);\n    event UpdateTreasuryAddress(\n        address previousTreasuryAddress,\n        address newTreasuryAddress\n    );\n\n    /***********************************************/\n    /****************** MODIFIERS ******************/\n    /***********************************************/\n\n    /*\n     * @dev Throws error if called by any account other than the master\n     */\n    modifier onlyMaster() {\n        require(\n            msg.sender == masterAddress,\n            \"XDToken: caller is not the master\"\n        );\n        _;\n    }\n\n    /**************************************************/\n    /****************** PUBLIC VIEWS ******************/\n    /**************************************************/\n\n    /**\n     * @dev Returns master emission rate\n     */\n    function masterEmissionRate() public view override returns (uint256) {\n        return emissionRate.mul(masterAllocation).div(ALLOCATION_PRECISION);\n    }\n\n    /**\n     * @dev Returns treasury allocation\n     */\n    function treasuryAllocation() public view returns (uint256) {\n        return uint256(ALLOCATION_PRECISION).sub(masterAllocation);\n    }\n\n    /*****************************************************************/\n    /******************  EXTERNAL PUBLIC FUNCTIONS  ******************/\n    /*****************************************************************/\n\n    /**\n     * @dev Mint rewards and distribute it between master and treasury\n     *\n     * Treasury share is directly minted to the treasury address\n     * Master incentives are minted into this contract and claimed later by the master contract\n     */\n    function emitAllocations() public {\n        uint256 circulatingSupply = totalSupply();\n        uint256 currentBlockTimestamp = _currentBlockTimestamp();\n\n        uint256 _lastEmissionTime = lastEmissionTime; // gas saving\n        uint256 _maxSupply = elasticMaxSupply; // gas saving\n\n        // if already up to date or not started\n        if (\n            currentBlockTimestamp \u003c= _lastEmissionTime || _lastEmissionTime == 0\n        ) {\n            return;\n        }\n\n        // if max supply is already reached or emissions deactivated\n        if (_maxSupply \u003c= circulatingSupply || emissionRate == 0) {\n            lastEmissionTime = currentBlockTimestamp;\n            return;\n        }\n\n        uint256 newEmissions = currentBlockTimestamp.sub(_lastEmissionTime).mul(\n            emissionRate\n        );\n\n        // cap new emissions if exceeding max supply\n        if (_maxSupply \u003c circulatingSupply.add(newEmissions)) {\n            newEmissions = _maxSupply.sub(circulatingSupply);\n        }\n\n        // calculate master and treasury shares from new emissions\n        uint256 masterShare = newEmissions.mul(masterAllocation).div(\n            ALLOCATION_PRECISION\n        );\n        // sub to avoid rounding errors\n        uint256 treasuryShare = newEmissions.sub(masterShare);\n\n        lastEmissionTime = currentBlockTimestamp;\n\n        // add master shares to its claimable reserve\n        masterReserve = masterReserve.add(masterShare);\n        // mint shares\n        _mint(address(this), masterShare);\n        _mint(treasuryAddress, treasuryShare);\n\n        emit AllocationsDistributed(masterShare, treasuryShare);\n    }\n\n    /**\n     * @dev Sends to Master contract the asked \"amount\" from masterReserve\n     *\n     * Can only be called by the MasterContract\n     */\n    function claimMasterRewards(\n        uint256 amount\n    ) external override onlyMaster returns (uint256 effectiveAmount) {\n        // update emissions\n        emitAllocations();\n\n        // cap asked amount with available reserve\n        effectiveAmount = Math.min(masterReserve, amount);\n\n        // if no rewards to transfer\n        if (effectiveAmount == 0) {\n            return effectiveAmount;\n        }\n\n        // remove claimed rewards from reserve and transfer to master\n        masterReserve = masterReserve.sub(effectiveAmount);\n        _transfer(address(this), masterAddress, effectiveAmount);\n        emit ClaimMasterRewards(effectiveAmount);\n    }\n\n    /**\n     * @dev Burns \"amount\" of XD by sending it to BURN_ADDRESS\n     */\n    function burn(uint256 amount) external override {\n        _transfer(msg.sender, BURN_ADDRESS, amount);\n    }\n\n    /*****************************************************************/\n    /****************** EXTERNAL OWNABLE FUNCTIONS  ******************/\n    /*****************************************************************/\n\n    /**\n     * @dev Setup Master contract address\n     *\n     * Can only be initialized once\n     * Must only be called by the owner\n     */\n    function initializeMasterAddress(\n        address masterAddress_\n    ) external onlyOwner {\n        require(\n            masterAddress == address(0),\n            \"initializeMasterAddress: master already initialized\"\n        );\n        require(\n            masterAddress_ != address(0),\n            \"initializeMasterAddress: master initialized to zero address\"\n        );\n\n        masterAddress = masterAddress_;\n        emit InitializeMasterAddress(masterAddress_);\n    }\n\n    /**\n     * @dev Set emission start time\n     *\n     * Can only be initialized once\n     * Must only be called by the owner\n     */\n    function initializeEmissionStart(uint256 startTime) external onlyOwner {\n        require(\n            lastEmissionTime == 0,\n            \"initializeEmissionStart: emission start already initialized\"\n        );\n        require(\n            _currentBlockTimestamp() \u003c startTime,\n            \"initializeEmissionStart: invalid\"\n        );\n\n        lastEmissionTime = startTime;\n        emit InitializeEmissionStart(startTime);\n    }\n\n    /**\n     * @dev Updates emission allocations farming incentives and treasury\n     *\n     * Must only be called by the owner\n     */\n    function updateAllocations(uint256 masterAllocation_) external onlyOwner {\n        // apply emissions before changes\n        emitAllocations();\n\n        // total sum of allocations can\u0027t be \u003e 100%\n        require(\n            masterAllocation_ \u003c= 100,\n            \"updateAllocations: total allocation is too high\"\n        );\n\n        // set new allocations\n        masterAllocation = masterAllocation_;\n\n        emit UpdateAllocations(masterAllocation_, treasuryAllocation());\n    }\n\n    /**\n     * @dev Updates XD emission rate per second\n     *\n     * Must only be called by the owner\n     */\n    function updateEmissionRate(uint256 emissionRate_) external onlyOwner {\n        require(\n            emissionRate_ \u003c= MAX_EMISSION_RATE,\n            \"updateEmissionRate: can\u0027t exceed maximum\"\n        );\n\n        // apply emissions before changes\n        emitAllocations();\n\n        emit UpdateEmissionRate(emissionRate, emissionRate_);\n        emissionRate = emissionRate_;\n    }\n\n    /**\n     * @dev Updates XD max supply\n     *\n     * Must only be called by the owner\n     */\n    function updateMaxSupply(uint256 maxSupply_) external onlyOwner {\n        require(\n            maxSupply_ \u003e= totalSupply(),\n            \"updateMaxSupply: can\u0027t be lower than current circulating supply\"\n        );\n        require(\n            maxSupply_ \u003c= MAX_SUPPLY_LIMIT,\n            \"updateMaxSupply: invalid maxSupply\"\n        );\n\n        emit UpdateMaxSupply(elasticMaxSupply, maxSupply_);\n        elasticMaxSupply = maxSupply_;\n    }\n\n    /**\n     * @dev Updates treasury address\n     *\n     * Must only be called by owner\n     */\n    function updateTreasuryAddress(\n        address treasuryAddress_\n    ) external onlyOwner {\n        require(\n            treasuryAddress_ != address(0),\n            \"updateTreasuryAddress: invalid address\"\n        );\n\n        emit UpdateTreasuryAddress(treasuryAddress, treasuryAddress_);\n        treasuryAddress = treasuryAddress_;\n    }\n\n    /********************************************************/\n    /****************** INTERNAL FUNCTIONS ******************/\n    /********************************************************/\n\n    /**\n     * @dev Utility function to get the current block timestamp\n     */\n    function _currentBlockTimestamp() internal view virtual returns (uint256) {\n        /* solhint-disable not-rely-on-time */\n        return block.timestamp;\n    }\n}\n"}}