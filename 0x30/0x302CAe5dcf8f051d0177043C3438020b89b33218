
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/IUniswapV2Pair.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
}

interface IPair {
  event Approval(address indexed owner, address indexed spender, uint value);
  event Transfer(address indexed from, address indexed to, uint value);

  function name() external pure returns (string memory);
  function symbol() external pure returns (string memory);
  function decimals() external pure returns (uint8);
  function totalSupply() external view returns (uint);
  function balanceOf(address owner) external view returns (uint);
  function allowance(address owner, address spender) external view returns (uint);

  function approve(address spender, uint value) external returns (bool);
  function transfer(address to, uint value) external returns (bool);
  function transferFrom(address from, address to, uint value) external returns (bool);

  function DOMAIN_SEPARATOR() external view returns (bytes32);
  function PERMIT_TYPEHASH() external pure returns (bytes32);
  function nonces(address owner) external view returns (uint);

  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

  event Mint(address indexed sender, uint amount0, uint amount1);
  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
  event Swap(
    address indexed sender,
    uint amount0In,
    uint amount1In,
    uint amount0Out,
    uint amount1Out,
    address indexed to
  );

  event Sync(uint112 reserve0, uint112 reserve1);

  function MINIMUM_LIQUIDITY() external pure returns (uint);
  function factory() external view returns (address);
  function token0() external view returns (address);
  function token1() external view returns (address);
  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
  function price0CumulativeLast() external view returns (uint);
  function price1CumulativeLast() external view returns (uint);
  function kLast() external view returns (uint);

  function mint(address to) external returns (uint liquidity);
  function burn(address to) external returns (uint amount0, uint amount1);
  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
  function skim(address to) external;
  function sync() external;

  function initialize(address, address) external;
}

interface IRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: contracts/Token.sol
/**

=========================================================================================
=      ======    ======    =====      ===        ====     =====    ====    ==  =======  =
=  ===  ====  ==  ====  ==  ===  ====  =====  ======  ===  ===  ==  ====  ===   ======  =
=  ====  ==  ====  ==  ====  ==  ====  =====  =====  ========  ====  ===  ===    =====  =
=  ===  ===  ====  ==  ====  ===  ==========  =====  ========  ====  ===  ===  ==  ===  =
=      ====  ====  ==  ====  =====  ========  =====  ========  ====  ===  ===  ===  ==  =
=  ===  ===  ====  ==  ====  =======  ======  =====  ========  ====  ===  ===  ====  =  =
=  ====  ==  ====  ==  ====  ==  ====  =====  =====  ========  ====  ===  ===  =====    =
=  ===  ====  ==  ====  ==  ===  ====  =====  ======  ===  ===  ==  ====  ===  ======   =
=      ======    ======    =====      ======  =======     =====    ====    ==  =======  =

Website- http://boostco.in
Telegram- https://t.me/BoostCoinOfficial
Twitter- https://twitter.com/theboostcoin

**/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {IFactory} from "./IUniswapV2Pair.sol";
import {IRouter} from "./IUniswapV2Pair.sol";

contract Token is ERC20, Ownable {

    uint256 constant public REWARD_WINDOW = 1 hours;
    uint256 constant public NO_SELL_WINDOW = 2 days;
    uint16 constant public MAX_BASIS_POINT  = 10_000;
    uint16 constant public SOLD_OR_TRANSFER_CLAIM_PERCENTAGE = 7500;
    uint16 constant public THIRTY_BASIS_POINT = 3_000;
    uint16 constant public TWENTY_FIVE_BASIS_POINT = 2500;
    uint16 constant public TWENTY_BASIS_POINT = 2_000;
    uint16 constant public FIFTEEN_BASIS_POINT = 1500;
    uint16 constant public TEN_BASIS_POINT = 1_000;
    uint16 constant public FIVE_BASIS_POINT = 500;
    uint16 public buyTaxRateBasisPoint;
    uint16 public sellTaxRateBasisPoint;
    uint256 public maxSellTaxLimit = 5_000_000 * 10**18;

    bool public limited; // Whether trading is limited
    bool public isTradingEnabled; // Whether trading is enabled
    bool public isTaxDisabled; // Whether taxes are disabled

    IRouter immutable public router;
    uint256 immutable public tokenClaimConstraint;
    address public pair;

    uint256 public maxTokenHolding; // Maximum token holding limit for each user
    uint256 public minTokenHolding; // Minimum token holding limit for each user
    uint256 public firstTradingEnabledTimestamp;
    uint256 public sellTax; // Tax amount paid by each user

    mapping(address => bool) private blacklistUser; // Blacklisted addresses
    mapping(address => bool) private userSoldOrTransferToken;
    mapping(address => bool) public exemptFee;
    mapping(address => uint256) public userBuyTaxAmount;
    mapping(address => uint256) public userBuyAmountInRewardWindow;

    /**
     * @dev Emitted when tokens are claimed by a recipient.
     * @param recipient The address of the recipient who claimed tokens.
     * @param amount The amount of tokens claimed by the recipient.
     */
    event TokensClaimed(address indexed recipient, uint256 amount);

    event SellTaxBasisPointChanged(uint256 basisPoint);
    event BuyTaxBasisPointChanged(uint256 basisPoint);

    modifier tradingEnabled(address sender_, address recipient_) {
        require(isTradingEnabled || exemptFee[sender_] || exemptFee[recipient_], "Trading is currently disabled.");
        _;
    }

    constructor(
        string memory name_,
        string memory symbol_,
        uint256 totalSupply_,
        bool isTradingEnabled_
    ) ERC20(name_, symbol_) {
        //! Todo Change the router address according to network.
        // main net 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        // sepolia net 0x86dcd3293C53Cf8EFd7303B57beb2a3F671dDE98
        IRouter router_ = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);

        address pair_ = IFactory(router_.factory()).createPair(address(this), router_.WETH());

        router = router_;
        pair = pair_;
        isTradingEnabled = isTradingEnabled_;
        isTaxDisabled = false;
        // solhint-disable-next-line not-rely-on-time
        tokenClaimConstraint = block.timestamp + 18 days;
        exemptFee[msg.sender] = true;
        exemptFee[address(this)] = true;

        _mint(msg.sender, totalSupply_);
    }

    function setIsTradingEnabled(bool status_) external onlyOwner {
        isTradingEnabled = status_;
        if((firstTradingEnabledTimestamp == uint256(0)) && (status_ == true)) {
            firstTradingEnabledTimestamp = block.timestamp;
        }
    }

    function setBuyTaxRateBasisPoint(uint16 newBuyTaxRateBasisPoint_) external onlyOwner {
        require(newBuyTaxRateBasisPoint_ <= MAX_BASIS_POINT, "Claim percentage exceeds maximum allowed value.");
        buyTaxRateBasisPoint = newBuyTaxRateBasisPoint_;

        emit BuyTaxBasisPointChanged(newBuyTaxRateBasisPoint_);
    }    
    function setSellTaxRateBasisPoint(uint16 newSellTaxRateBasisPoint_) external onlyOwner {
        require(newSellTaxRateBasisPoint_ <= MAX_BASIS_POINT, "Claim percentage exceeds maximum allowed value.");
        sellTaxRateBasisPoint = newSellTaxRateBasisPoint_;

        emit SellTaxBasisPointChanged(newSellTaxRateBasisPoint_);
    }

    function setBlacklist(address address_, bool isBlacklisting_) external onlyOwner {
        blacklistUser[address_] = isBlacklisting_;
    }

    function setRule(
        bool limited_,
        uint256 maxTokenHolding_,
        uint256 minTokenHolding_
    ) external onlyOwner {
        limited = limited_;
        maxTokenHolding = maxTokenHolding_;
        minTokenHolding = minTokenHolding_;
    }

    function setIsTaxDisabled(bool isTaxDisabled_) external onlyOwner {
        isTaxDisabled = isTaxDisabled_;
    }

    function setMaxSellTaxLimit(uint256 limit) external onlyOwner {
        maxSellTaxLimit = limit;
    }

    /**
     * @notice address balance should be greater than token total calimable amount always 
     */
    function claimTokens(address reciever_) external {
        require(block.timestamp > firstTradingEnabledTimestamp + 2 days, "Claiming Tokens has not started yet.");
        require(block.timestamp < tokenClaimConstraint, "Claim Period has ended.");
        require(!blacklistUser[reciever_], "Not eligible for tax claim.");
        require(balanceOf(reciever_) >= userBuyAmountInRewardWindow[reciever_], "Account balance is less then buy amount in reward houre.");
        
        uint256 tokensToClaim = claimableTokens(reciever_);

        require(tokensToClaim > 0, "No tokens to claim.");

        userBuyTaxAmount[reciever_] = 0;
        // Caution won't be able to claim if the msg sender doesn't lie between the max and min holding value.
        _tokenTransfer(address(this), reciever_, tokensToClaim);

        emit TokensClaimed(reciever_, tokensToClaim);
    }

    function claimableTokens(address reciever_) public view returns(uint256) {
        uint256 tokensToClaim = userBuyTaxAmount[reciever_];
        if(userSoldOrTransferToken[reciever_]) {
            tokensToClaim = (tokensToClaim * SOLD_OR_TRANSFER_CLAIM_PERCENTAGE) / MAX_BASIS_POINT;
        }
        return tokensToClaim;
    }

    function isBlacklisted(address address_) public view returns (bool) {
        return blacklistUser[address_];
    }

    function userSoldToken(address address_) public view returns (bool) {
        return userSoldOrTransferToken[address_];
    }

    function _transfer(
        address sender_,
        address recipient_,
        uint256 amount_
    ) internal virtual override tradingEnabled(sender_, recipient_) {
        if (isTaxDisabled) {
            // Taxes are disabled, no tax calculation needed
            _tokenTransfer(sender_, recipient_, amount_);
        } 
        else {
            // Apply tax rate
            uint256 taxAmount = _calculateTax(amount_, recipient_, sender_);
            if(taxAmount == 0) {
                _tokenTransfer(sender_, recipient_, amount_);
            }
            else {
                bool isBuyTransfer = sender_ == pair;
                // solhint-disable-next-line not-rely-on-time
                if (isBuyTransfer && (block.timestamp <= firstTradingEnabledTimestamp + REWARD_WINDOW)) {
                    // recipient will get to reclaim as the tax is deducted from their share
                    userBuyTaxAmount[recipient_] += taxAmount;
                    userBuyAmountInRewardWindow[recipient_] += amount_ - taxAmount;
                }
                // solhint-disable-next-line not-rely-on-time
                if (!(isBuyTransfer) && (block.timestamp < firstTradingEnabledTimestamp + NO_SELL_WINDOW)) {
                    userSoldOrTransferToken[sender_] = true;
                }

                _tokenTransfer(sender_, recipient_, amount_ - taxAmount);

                if(isBuyTransfer) {
                    _tokenTransfer(sender_, address(this), taxAmount);
                } else {
                    _tokenTransfer(sender_, address(this), taxAmount);
                    sellTax += taxAmount;
                    if (sellTax > maxSellTaxLimit) {
                        swapTokensForETH(sellTax);
                        sellTax = 0;
                    }
                }
            }
        }
    }

    function _tokenTransfer(
        address sender_,
        address recipient_,
        uint256 amount_
    ) internal {
        super._transfer(sender_, recipient_, amount_);
    }

    // Calculates tax based on amount and tax rate.
    function _calculateTax(uint256 amount_, address recipient_, address sender_) internal view returns (uint256) {
        uint256 taxRate;
        // solhint-disable-next-line not-rely-on-time
        if(sender_!=pair && recipient_ !=pair){
            return 0;
        }
        else {
            if(sender_ == pair) {
                taxRate = buyTaxRate();
            } 
            if (recipient_ == pair ) {
                taxRate = sellTaxRate();
            } 
        }
        if (exemptFee[recipient_] || exemptFee[sender_]) {
            return 0;
        }
        uint256 taxAmount = (amount_ * taxRate) / MAX_BASIS_POINT;
        return taxAmount;
    }

    function _beforeTokenTransfer(
        address from_,
        address to_,
        uint256 amount_
    ) internal virtual override {
        require(!blacklistUser[from_], "Sender is blacklisted.");
        require(!blacklistUser[to_], "Recipient is blacklisted.");
        
        if (limited && msg.sender != owner() && to_!=pair && to_ != address(this)) {
            uint256 recipientBalance = super.balanceOf(to_);
            uint256 newBalance = recipientBalance + amount_;

            require(newBalance <= maxTokenHolding && newBalance >= minTokenHolding, "Not within max/min holding limits.");
        }
    }

    function swapTokensForETH(uint256 tokenAmount_) internal {
        // generate the pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();

        _approve(address(this), address(router), tokenAmount_);
        
        // make the swap
        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount_,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    receive() external payable {}

    function buyTaxRate() view public returns(uint256) {
        if(block.timestamp < firstTradingEnabledTimestamp + 10 minutes) {
            return THIRTY_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 20 minutes) {
            return TWENTY_FIVE_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 30 minutes) {
            return TWENTY_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 40 minutes) {
            return FIFTEEN_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 50 minutes) {
            return TEN_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 60 minutes) {
            return FIVE_BASIS_POINT;
        }
        else {
            return buyTaxRateBasisPoint;
        }
    }

    function sellTaxRate() view public returns(uint256) {
        if(block.timestamp < firstTradingEnabledTimestamp + 30 minutes) {
            return THIRTY_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 60 minutes) {
            return TWENTY_FIVE_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 90 minutes) {
            return TWENTY_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 120 minutes) {
            return FIFTEEN_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 150 minutes) {
            return TEN_BASIS_POINT;
        }
        if(block.timestamp < firstTradingEnabledTimestamp + 180 minutes) {
            return FIVE_BASIS_POINT;
        }
        else {
            return sellTaxRateBasisPoint;
        }
    }

    function withdrawETH() external onlyOwner returns(bool){
        (bool success, bytes memory data) = owner().call{value: address(this).balance}("");
        return success;
    }

    function withdrawTokens() external onlyOwner {
        require(block.timestamp > tokenClaimConstraint, "Claiming Period has not ended.");
        uint256 amount = balanceOf(address(this));
        _tokenTransfer(address(this), owner(), amount);
    }
}

