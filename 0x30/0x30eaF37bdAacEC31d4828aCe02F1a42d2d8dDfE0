
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: src/active/stakingpool/StakingPoolV3Flat.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.4;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

// StakingPoolV3
// - Fixed total, reward per second
// - Dynamic APY based on pool size
// - Multiple deposit packages with separate locking time
contract StakingPoolV3Flat is Ownable, ReentrancyGuard {
  using SafeERC20 for IERC20;

  struct UserInfo {
    bool isAdded;
    address addr;
    uint256 totalAmount;
    uint256 nextDepositId;
  }

  struct DepositInfo {
    uint256 amount;
    uint256 lockFrom;
    uint256 lockTo;
    uint256 rewardDebt;
    uint256 rewardPending;
  }

  // The precision factor. Should be 1e12 to avoid overflow.
  uint256 private constant _PRECISION_FACTOR = 1e12;

  IERC20 public rewardToken;
  IERC20 public stakedToken;

  // Info of each user that stakes tokens (stakedToken)
  mapping(address => UserInfo) public userInfos;
  // User list
  address[] public userList;

  // depositInfos[user][depositId] = DepositInfo
  mapping(address => mapping(uint256 => DepositInfo)) public depositInfos;

  // Reward tokens created per second.
  uint256 public rewardPerSecond;
  // The time when Pool mining starts.
  uint256 public startTime;
  // The time when Pool mining ends.
  uint256 public endTime;

  // The time of the last pool update
  uint256 public lastRewardTime;
  // Accumulated token per share
  uint256 public accTokenPerShare;

  // Total staking tokens
  uint256 public totalStakingTokens;
  // Total reward tokens
  uint256 public totalRewardTokens;

  // Freeze start time
  uint256 public freezeStartTime;
  // Freeze end time
  uint256 public freezeEndTime;

  // The pool limit (0 if none)
  uint256 public poolLimitPerUser;
  // Minimum deposit amount
  uint256 public minDepositAmount;

  // The locking duration for each deposit package
  uint256 public lockDuration;

  // delegators[staker][delegate] = status
  mapping(address => mapping(address => bool)) public delegators;

  event EDeposit(address indexed user, uint256 amount, uint256 depositId);
  event EWithdraw(address indexed user, uint256 amount, uint256 depositId);
  event EAddRewardTokens(address indexed user, uint256 amount);

  constructor(
    IERC20 _stakedToken,
    IERC20 _rewardToken,
    uint256 _rewardPerSecond,
    uint256 _startTime,
    uint256 _endTime,
    uint256 _lockDuration
  ) {
    stakedToken = _stakedToken;
    rewardToken = _rewardToken;
    rewardPerSecond = _rewardPerSecond;
    startTime = _startTime;
    endTime = _endTime;
    lockDuration = _lockDuration;
    lastRewardTime = startTime;
  }

  /*
   * @notice isFrozen is true => user cannot call deposit, withdraw function
   */
  function isFrozen() public view returns (bool) {
    return block.timestamp >= freezeStartTime && block.timestamp <= freezeEndTime;
  }

  /*
   * @notice View function to see pending reward on frontend.
   * @param _user: user address
   * @param _depositId: deposit id
   * @return Pending reward for a given user and depositId
   */
  function pendingReward(address _user, uint256 _depositId) external view returns (uint256) {
    DepositInfo storage deposit = depositInfos[_user][_depositId];
    if (block.timestamp > lastRewardTime && totalStakingTokens != 0) {
      uint256 multiplier = _getMultiplier(lastRewardTime, block.timestamp);
      uint256 tokenReward = multiplier * rewardPerSecond;
      uint256 adjustedTokenPerShare = accTokenPerShare + ((tokenReward * _PRECISION_FACTOR) / totalStakingTokens);
      return
        deposit.rewardPending + (((deposit.amount * adjustedTokenPerShare) / _PRECISION_FACTOR) - deposit.rewardDebt);
    } else {
      return deposit.rewardPending + (((deposit.amount * accTokenPerShare) / _PRECISION_FACTOR) - deposit.rewardDebt);
    }
  }

  /*
   * @notice Length of users
   */
  function getUserListLength() external view returns (uint) {
    return userList.length;
  }

  /*
   * @notice View function to get users.
   * @param _offset: offset for paging
   * @param _limit: limit for paging
   * @return get users, next offset and total users
   */
  function getUsersPaging(
    uint _offset,
    uint _limit
  ) external view returns (UserInfo[] memory users, uint nextOffset, uint total) {
    uint totalUsers = userList.length;
    if (_limit == 0) {
      _limit = 1;
    }

    if (_limit > totalUsers - _offset) {
      _limit = totalUsers - _offset;
    }

    UserInfo[] memory values = new UserInfo[](_limit);
    for (uint i = 0; i < _limit; i++) {
      values[i] = userInfos[userList[_offset + i]];
    }

    return (values, _offset + _limit, totalUsers);
  }

  /*
   * @notice Deposit staked tokens and collect reward tokens (if any)
   * @param _amount: amount to withdraw (in rewardToken)
   */
  function depositTokens(uint256 _amount) external nonReentrant {
    require(block.timestamp >= startTime && block.timestamp <= endTime, "Invalid time");
    require(!isFrozen(), "Deposit is frozen");
    require(_amount > 0, "Invalid amount");
    address sender_ = _msgSender();

    UserInfo storage user = userInfos[sender_];
    require(_amount + user.totalAmount >= minDepositAmount, "User amount below minimum");
    if (poolLimitPerUser > 0) {
      require(_amount + user.totalAmount <= poolLimitPerUser, "User amount above limit");
    }

    _updatePool();

    if (!user.isAdded) {
      user.isAdded = true;
      user.addr = sender_;
      userList.push(sender_);
    }

    DepositInfo storage deposit = depositInfos[sender_][user.nextDepositId++];
    if (deposit.amount > 0) {
      deposit.rewardPending += ((deposit.amount * accTokenPerShare) / _PRECISION_FACTOR) - deposit.rewardDebt;
    }

    // Check real amount to avoid taxed token
    uint256 previousBalance_ = stakedToken.balanceOf(address(this));
    stakedToken.safeTransferFrom(sender_, address(this), _amount);
    uint256 newBalance_ = stakedToken.balanceOf(address(this));
    uint256 addedAmount_ = newBalance_ - previousBalance_;

    user.totalAmount += addedAmount_;
    totalStakingTokens += addedAmount_;

    deposit.amount += addedAmount_;
    deposit.lockFrom = block.timestamp;
    deposit.lockTo = block.timestamp + lockDuration;
    deposit.rewardDebt = (deposit.amount * accTokenPerShare) / _PRECISION_FACTOR;

    emit EDeposit(sender_, addedAmount_, user.nextDepositId - 1);
  }

  /*
   * @notice Withdraw staked tokens and collect reward tokens
   */
  function withdrawTokens(address _staker, uint256 _amount, uint256 _depositId) external nonReentrant {
    require(!isFrozen(), "Withdraw is frozen");
    require(_amount > 0, "Invalid amount");
    address trigger_ = _msgSender();

    if (trigger_ != _staker) {
      require(delegators[_staker][trigger_], "Invalid user");
    }

    DepositInfo storage deposit = depositInfos[_staker][_depositId];
    require(deposit.amount >= _amount, "Amount to withdraw too high");
    require(block.timestamp >= deposit.lockTo, "Invalid time to withdraw");

    _updatePool();

    deposit.rewardPending += ((deposit.amount * accTokenPerShare) / _PRECISION_FACTOR) - deposit.rewardDebt;
    uint256 pending = deposit.rewardPending;
    if (pending > 0) {
      deposit.rewardPending = 0;
      _safeRewardTransfer(trigger_, pending);
    }

    UserInfo storage user = userInfos[_staker];
    user.totalAmount -= _amount;
    totalStakingTokens -= _amount;

    deposit.amount -= _amount;
    stakedToken.safeTransfer(trigger_, _amount);
    deposit.rewardDebt = (deposit.amount * accTokenPerShare) / _PRECISION_FACTOR;

    emit EWithdraw(_staker, _amount, _depositId);
  }

  /*
   * @dev Set delegator
   */
  function setDelegators(address _delegator, bool _status) external nonReentrant {
    delegators[_msgSender()][_delegator] = _status;
  }

  /*
   * @dev Update lock duration
   */
  function setLockDuration(uint256 _duration) external onlyOwner {
    lockDuration = _duration;
  }

  /**
   * @notice It allows the admin to add reward tokens
   * @param _amount: amount of tokens
   * @dev This function is only callable by admin.
   */
  function addRewardTokens(uint256 _amount) external onlyOwner {
    // Check real amount to avoid taxed token
    uint256 previousBalance_ = rewardToken.balanceOf(address(this));
    rewardToken.safeTransferFrom(msg.sender, address(this), _amount);
    uint256 newBalance_ = rewardToken.balanceOf(address(this));
    uint256 addedAmount_ = newBalance_ - previousBalance_;

    totalRewardTokens += addedAmount_;
    emit EAddRewardTokens(msg.sender, addedAmount_);
  }

  /**
   * @notice It allows the admin to correct reward tokens
   */
  function correctRewardTokens(uint256 _amount) external onlyOwner {
    totalRewardTokens = _amount;
  }

  /**
   * @notice It allows the admin to recover wrong tokens sent to the contract
   * @param _tokenAddress: the address of the token to withdraw
   * @param _tokenAmount: the number of tokens to withdraw
   * @dev This function is only callable by admin.
   */
  function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {
    require(_tokenAddress != address(stakedToken), "Cannot be staked token");
    require(_tokenAddress != address(rewardToken), "Cannot be reward token");

    IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);
  }

  /*
   * @notice Stop rewards
   * @dev Only callable by owner
   */
  function stopReward() external onlyOwner {
    endTime = block.timestamp;
  }

  /*
   * @notice Stop Freeze
   * @dev Only callable by owner
   */
  function stopFreeze() external onlyOwner {
    freezeStartTime = 0;
    freezeEndTime = 0;
  }

  /*
   * @notice Update reward per second
   * @dev Only callable by owner.
   * @param _rewardPerSecond: the reward per second
   */
  function setRewardPerSecond(uint256 _rewardPerSecond) external onlyOwner {
    _updatePool();
    rewardPerSecond = _rewardPerSecond;
  }

  /**
   * @notice It allows the admin to update start and end time
   * @dev This function is only callable by owner.
   * @param _startTime: the new start time
   * @param _endTime: the new end time
   */
  function setStartAndEndTimes(uint256 _startTime, uint256 _endTime) external onlyOwner {
    require(block.timestamp > endTime, "Pool has started");
    require(_startTime < _endTime, "Invalid start and end block");
    endTime = _endTime;

    if (_startTime > block.timestamp) {
      startTime = _startTime;
      // Set the lastRewardTime as the startTime
      lastRewardTime = startTime;
    }
  }

  /**
   * @notice It allows the admin to update freeze start and end time
   * @dev This function is only callable by owner.
   * @param _freezeStartTime: the new freeze start time
   * @param _freezeEndTime: the new freeze end time
   */
  function setFreezaTimes(uint256 _freezeStartTime, uint256 _freezeEndTime) external onlyOwner {
    require(_freezeStartTime < _freezeEndTime, "Invalid start and end time");
    require(block.timestamp < _freezeStartTime, "Invalid start and current");

    freezeStartTime = _freezeStartTime;
    freezeEndTime = _freezeEndTime;
  }

  /*
   * @notice Update pool limit per user
   * @dev Only callable by owner.
   * @param _poolLimitPerUser: new pool limit per user
   */
  function setPoolLimitPerUser(uint256 _poolLimitPerUser) external onlyOwner {
    poolLimitPerUser = _poolLimitPerUser;
  }

  /**
   * @notice Update minimum deposit amount
   * @dev This function is only callable by owner.
   * @param _minDepositAmount: the new minimum deposit amount
   */
  function setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {
    minDepositAmount = _minDepositAmount;
  }

  /*
   * @notice Stop rewards
   * @dev Only callable by owner. Needs to be for emergency.
   */
  function safeWithdrawReward(uint256 _amount) external onlyOwner {
    totalRewardTokens -= _amount;
    rewardToken.safeTransfer(msg.sender, _amount);
  }

  /**
   * @dev Emergency case withdraw tokens
   * @param _token token address
   * @param _to destination address
   * @param _amount token amount
   */
  function emergencyWithdrawTokens(address _token, address _to, uint256 _amount) external onlyOwner {
    IERC20(_token).safeTransfer(_to, _amount);
  }

  /*
   * @notice Update reward variables of the given pool to be up-to-date.
   */
  function _updatePool() private {
    if (block.timestamp <= lastRewardTime) {
      return;
    }

    if (totalStakingTokens == 0) {
      lastRewardTime = block.timestamp;
      return;
    }

    uint256 multiplier = _getMultiplier(lastRewardTime, block.timestamp);
    uint256 tokenReward = multiplier * rewardPerSecond;
    accTokenPerShare += (tokenReward * _PRECISION_FACTOR) / totalStakingTokens;
    lastRewardTime = block.timestamp;
  }

  /*
   * @notice Return reward multiplier over the given _from to _to time.
   * @param _from: time to start
   * @param _to: time to finish
   */
  function _getMultiplier(uint256 _from, uint256 _to) private view returns (uint256) {
    if (_to <= endTime) {
      return _to - _from;
    } else if (_from >= endTime) {
      return 0;
    } else {
      return endTime - _from;
    }
  }

  /*
   * @notice Transfer reward tokens.
   * @param _to: address where tokens will transfer
   * @param _amount: amount of tokens
   */
  function _safeRewardTransfer(address _to, uint256 _amount) private {
    uint256 rewardTokenBal = totalRewardTokens;
    if (_amount > rewardTokenBal) {
      totalRewardTokens -= rewardTokenBal;
      rewardToken.safeTransfer(_to, rewardTokenBal);
    } else {
      totalRewardTokens -= _amount;
      rewardToken.safeTransfer(_to, _amount);
    }
  }
}

