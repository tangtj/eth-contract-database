
// File: src/Stake.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.25;

import { Math } from "@openzeppelin/contracts/utils/math/Math.sol";
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { ReentrancyGuard } from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

import { IStake } from "src/interfaces/IStake.sol";
import { IPonzioTheCat } from "src/interfaces/IPonzioTheCat.sol";
import { IWrappedPonzioTheCat } from "src/interfaces/IWrappedPonzioTheCat.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { IUniswapV2Router02 } from "src/interfaces/UniswapV2/IUniswapV2Router02.sol";

/**
 * @title Stake
 * @notice This contract allows users to stake LP tokens and earn rewards.
 */
contract Stake is IStake, ReentrancyGuard {
    using Math for uint256;
    using SafeERC20 for IPonzioTheCat;
    using SafeERC20 for IERC20;

    /// @inheritdoc IStake
    IERC20 public immutable LP_TOKEN;
    /// @inheritdoc IStake
    IPonzioTheCat public immutable PONZIO;
    /// @inheritdoc IStake
    IWrappedPonzioTheCat public immutable WRAPPED_PONZIO;
    /// @inheritdoc IStake
    uint256 public constant PRECISION_FACTOR = 1e18;

    /// @notice the address of the Uniswap V2 Router
    address internal constant UNISWAPV2_ROUTER_ADDR = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;

    /// @notice Mapping from user address to UserInfo
    mapping(address => UserInfo) internal _userInfo;
    ///@notice internal data used to compute the number of rewards to distribute to each staker.
    uint256 internal _accRewardPerShare;
    /// @notice the last reward amount
    uint256 internal _lastRewardAmount;
    /// @notice the LP_TOKEN balance
    uint256 internal _lpBalance;

    constructor(address lpToken, address wrappedPonzioTheCatAddress) {
        LP_TOKEN = IERC20(lpToken);
        WRAPPED_PONZIO = IWrappedPonzioTheCat(wrappedPonzioTheCatAddress);
        PONZIO = IWrappedPonzioTheCat(wrappedPonzioTheCatAddress).asset();
    }

    receive() external payable { }

    /* -------------------------------------------------------------------------- */
    /*                             external functions                             */
    /* -------------------------------------------------------------------------- */

    /// @inheritdoc IStake
    function userInfo(address userAddr) external view returns (UserInfo memory) {
        return _userInfo[userAddr];
    }

    /// @inheritdoc IStake
    function reinvest(uint256 amountPonzioMin, uint256 amountEthMin) external payable nonReentrant {
        if (msg.value == 0) {
            revert Stake_valueNeeded();
        }

        uint256 balanceBefore = PONZIO.balanceOf(address(this));
        // first harvest the user rewards
        _harvest(_userInfo[msg.sender], msg.sender, address(this));
        uint256 amountPonzio = PONZIO.balanceOf(address(this)) - balanceBefore;

        // slither-disable-next-line incorrect-equality
        if (amountPonzio == 0) {
            revert Stake_noPendingRewards();
        }

        if (PONZIO.allowance(address(this), UNISWAPV2_ROUTER_ADDR) < amountPonzio) {
            PONZIO.forceApprove(UNISWAPV2_ROUTER_ADDR, type(uint256).max);
        }

        (uint256 amountPonzioDeposited, uint256 amountETHDeposited, uint256 liquidity) = IUniswapV2Router02(
            UNISWAPV2_ROUTER_ADDR
        ).addLiquidityETH{ value: msg.value }(
            address(PONZIO), amountPonzio, amountPonzioMin, amountEthMin, address(this), block.timestamp
        );

        // stake the LP
        _deposit(liquidity, msg.sender, address(this));

        if (amountPonzioDeposited < amountPonzio) {
            PONZIO.safeTransfer(msg.sender, amountPonzio - amountPonzioDeposited);
        }

        if (amountETHDeposited < msg.value) {
            (bool success,) = msg.sender.call{ value: msg.value - amountETHDeposited }("");
            if (!success) {
                revert Stake_refundFailed();
            }
        }
    }

    /// @inheritdoc IStake
    function pendingRewards(address userAddr) external view returns (uint256 pendingRewards_) {
        UserInfo memory userInfoMem = _userInfo[userAddr];
        // slither-disable-next-line incorrect-equality
        if (userInfoMem.amount == 0) {
            return 0;
        }

        (uint256 newTotalShares, uint256 newTotalSupply, uint256 fees) = PONZIO.computeNewState();

        uint256 wrappedRewards = 0;
        if (PONZIO.feesCollector() == address(this) && fees != 0) {
            wrappedRewards = WRAPPED_PONZIO.previewWrap(fees, newTotalShares, newTotalSupply);
        }

        (uint256 accRewardPerShare,) = _getUpdatedRewardPerShare(wrappedRewards);
        uint256 pendingRewardsShares_ = _pendingRewards(userInfoMem, accRewardPerShare);
        pendingRewards_ = WRAPPED_PONZIO.previewUnwrap(pendingRewardsShares_, newTotalShares, newTotalSupply);
    }

    /// @inheritdoc IStake
    function deposit(uint256 amount, address recipient) external nonReentrant {
        _deposit(amount, recipient, msg.sender);
    }

    /// @inheritdoc IStake
    function withdraw(uint256 amount, address recipient) external nonReentrant {
        _withdraw(amount, recipient);
    }

    /// @inheritdoc IStake
    function harvest(address recipient) external nonReentrant {
        _harvest(_userInfo[msg.sender], msg.sender, recipient);
    }

    /// @inheritdoc IStake
    function sync() external {
        uint256 rewardBalance = PONZIO.balanceOf(address(this));

        if (rewardBalance != 0) {
            if (PONZIO.allowance(address(this), address(WRAPPED_PONZIO)) < rewardBalance) {
                PONZIO.forceApprove(address(WRAPPED_PONZIO), type(uint256).max);
            }
            // slither-disable-next-line unused-return
            WRAPPED_PONZIO.wrap(rewardBalance, address(this));
        }
    }

    /// @inheritdoc IStake
    function emergencyWithdraw() external nonReentrant {
        UserInfo storage user = _userInfo[msg.sender];
        uint256 amount = user.amount;
        if (amount > 0) {
            user.amount = 0;
            user.rewardDebt = 0;
            _lpBalance -= amount;
            LP_TOKEN.safeTransfer(msg.sender, amount);
            emit EmergencyWithdraw(msg.sender, amount);
        }
    }

    /// @inheritdoc IStake
    function skim() external nonReentrant {
        uint256 lpBalance = _lpBalance;
        uint256 balance = LP_TOKEN.balanceOf(address(this));
        if (balance > lpBalance) {
            LP_TOKEN.safeTransfer(msg.sender, balance - lpBalance);
            emit Skim(msg.sender, balance - lpBalance);
        }
    }

    /* -------------------------------------------------------------------------- */
    /*                             internal functions                             */
    /* -------------------------------------------------------------------------- */

    /**
     * @notice returns the pending rewards of a user.
     * @param user information of the user
     * @param accRewardPerShare the accumulated reward per share
     * @return pendingRewards_ amount of rewards pending to claim
     * @dev Used when userInfo where already loaded to memory, to avoid multiple SLOAD operations.
     */
    function _pendingRewards(UserInfo memory user, uint256 accRewardPerShare)
        internal
        pure
        returns (uint256 pendingRewards_)
    {
        pendingRewards_ = user.amount.mulDiv(accRewardPerShare, PRECISION_FACTOR) - user.rewardDebt;
    }

    /**
     * @notice Deposits staking tokens to the contract.
     * @param amount amount of staking tokens to deposit
     * @param recipient address of the recipient
     * @param from address of the sender
     */
    function _deposit(uint256 amount, address recipient, address from) internal {
        // slither-disable-next-line incorrect-equality
        if (amount == 0) {
            revert Stake_depositZeroAmount();
        }
        UserInfo memory user = _userInfo[recipient];

        // slither-disable-next-line reentrancy-no-eth
        uint256 accRewardPerShare = _harvest(user, recipient, recipient);

        user.amount += amount;
        user.rewardDebt = user.amount.mulDiv(accRewardPerShare, PRECISION_FACTOR);
        _userInfo[recipient] = user;

        _lpBalance += amount;
        if (from != address(this)) {
            LP_TOKEN.safeTransferFrom(from, address(this), amount);
        }

        emit Deposit(recipient, from, amount);
    }

    /**
     * @notice Withdraws staking tokens from the contract.
     * @param amount amount of staking tokens to withdraw
     * @param recipient address of the recipient
     */
    function _withdraw(uint256 amount, address recipient) internal {
        UserInfo memory user = _userInfo[msg.sender];

        if (amount > user.amount) {
            revert Stake_withdrawTooHigh(amount, user.amount);
        } else if (amount == 0) {
            revert Stake_withdrawZeroAmount();
        }

        // slither-disable-next-line reentrancy-no-eth
        uint256 accRewardPerShare = _harvest(user, msg.sender, recipient);

        unchecked {
            user.amount -= amount;
        }
        user.rewardDebt = user.amount.mulDiv(accRewardPerShare, PRECISION_FACTOR);
        _userInfo[msg.sender] = user;

        _lpBalance -= amount;
        LP_TOKEN.safeTransfer(recipient, amount);
        emit Withdraw(msg.sender, recipient, amount);
    }

    /**
     * @notice Harvests the pending rewards of a user and transfers them to the user.
     * @param user information of the user
     * @param userAddr address of the user
     * @param recipient address of the receiver of the rewards
     * @return accRewardPerShare_ The updated reward per share.
     * @dev Used when userInfo where already loaded to memory, to avoid multiple SLOAD operations.
     */
    function _harvest(UserInfo memory user, address userAddr, address recipient)
        internal
        returns (uint256 accRewardPerShare_)
    {
        // slither-disable-next-line reentrancy-no-eth
        (accRewardPerShare_,) = _updatePool();

        if (user.amount > 0) {
            uint256 pendingReward = _pendingRewards(user, accRewardPerShare_);

            if (pendingReward > 0) {
                uint256 lastRewardAmountMem = _lastRewardAmount;
                if (pendingReward > lastRewardAmountMem) {
                    pendingReward = lastRewardAmountMem;
                }

                _lastRewardAmount -= pendingReward;
                _userInfo[userAddr].rewardDebt = user.amount.mulDiv(accRewardPerShare_, PRECISION_FACTOR);

                uint256 rewards = WRAPPED_PONZIO.unwrap(pendingReward, recipient);
                emit ClaimReward(userAddr, recipient, rewards);
            }
        }
    }

    /**
     * @notice Updates the pool and returns the updated reward per share and the last reward amount.
     * @return accRewardPerShare_ The updated reward per share.
     * @return newLastRewardAmount_ The last reward amount.
     */
    function _updatePool() internal returns (uint256 accRewardPerShare_, uint256 newLastRewardAmount_) {
        PONZIO.updateTotalSupply();
        (accRewardPerShare_, newLastRewardAmount_) = _getUpdatedRewardPerShare(0);

        _accRewardPerShare = accRewardPerShare_;
        _lastRewardAmount = newLastRewardAmount_;
    }

    /**
     * @notice Returns the updated reward per share and the last reward amount.
     * @param newRewards The new rewards to distribute.
     * @return accRewardPerShare_ The updated reward per share.
     * @return newLastRewardAmount_ The last reward amount.
     */
    function _getUpdatedRewardPerShare(uint256 newRewards)
        internal
        view
        returns (uint256 accRewardPerShare_, uint256 newLastRewardAmount_)
    {
        uint256 lpBalance = _lpBalance;
        // slither-disable-next-line incorrect-equality
        if (lpBalance == 0) {
            return (_accRewardPerShare, _lastRewardAmount);
        }

        uint256 currentRewardAmount = WRAPPED_PONZIO.balanceOf(address(this));

        currentRewardAmount += newRewards;

        newLastRewardAmount_ = currentRewardAmount;
        accRewardPerShare_ =
            _accRewardPerShare + (currentRewardAmount - _lastRewardAmount).mulDiv(PRECISION_FACTOR, lpBalance);
    }
}


// File: node_modules/@openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Muldiv operation overflow.
     */
    error MathOverflowedMulDiv();

    enum Rounding {
        Floor, // Toward negative infinity
        Ceil, // Toward positive infinity
        Trunc, // Toward zero
        Expand // Away from zero
    }

    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds towards infinity instead
     * of rounding towards zero.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        if (b == 0) {
            // Guarantee the same behavior as in a regular Solidity division.
            return a / b;
        }

        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
     * denominator == 0.
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
     * Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0 = x * y; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            if (denominator <= prod1) {
                revert MathOverflowedMulDiv();
            }

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.

            uint256 twos = denominator & (0 - denominator);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
            // works in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
     * towards zero.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);
        }
    }

    /**
     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
     */
    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
        return uint8(rounding) % 2 == 1;
    }
}


// File: node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: src/interfaces/IStake.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.25;

import { IPonzioTheCat } from "src/interfaces/IPonzioTheCat.sol";
import { IWrappedPonzioTheCat } from "src/interfaces/IWrappedPonzioTheCat.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IStake {
    /**
     * @notice Information about each staker's balance and reward debt.
     * @param amount staked amount
     * @param rewardDebt reward debt of the user used to calculate the pending rewards
     */
    struct UserInfo {
        uint256 amount;
        uint256 rewardDebt;
    }

    /**
     * @notice Emitted when a user deposits LP tokens to the contract.
     * @param recipient address of the recipient
     * @param depositBy address of the msg.sender
     * @param amount amount of deposited tokens
     */
    event Deposit(address indexed recipient, address depositBy, uint256 amount);

    /**
     * @notice Emitted when a user withdraws LP tokens from the contract.
     * @param user address of the user
     * @param recipient address of the recipient
     * @param amount amount of withdrawn tokens
     */
    event Withdraw(address indexed user, address recipient, uint256 amount);

    /**
     * @notice Emitted when a user claims rewards from the contract.
     * @param user address of the user
     * @param recipient address of the recipient
     * @param reward amount of claimed tokens
     */
    event ClaimReward(address indexed user, address recipient, uint256 reward);

    /**
     * @notice Emitted when a user forces the withdrawal of LP tokens from the contract.
     * @param user address of the user
     * @param amount amount of withdrawn LP tokens
     */
    event EmergencyWithdraw(address indexed user, uint256 amount);

    /**
     * @notice Emitted when the contract is skimmed.
     * @param user address of the user
     * @param amount amount of skimmed lp tokens
     */
    event Skim(address indexed user, uint256 amount);

    /// @notice Reverted when the user tries to deposit an amount of 0 tokens.
    error Stake_depositZeroAmount();

    /// @notice Reverted when the user tries to withdraw an amount of 0 tokens.
    error Stake_withdrawZeroAmount();

    /// @notice Revert when the refund fails.
    error Stake_refundFailed();

    /// @notice Revert when the refund fails.
    error Stake_noPendingRewards();

    /// @notice Revert when no value was added to the transaction but it was needed
    error Stake_valueNeeded();

    /**
     * @notice Revert when the user tries to withdraw an amount higher than the staked amount.
     * @param withdrawAmount amount the user tries to withdraw
     * @param stakedAmount amount the user has staked
     */
    error Stake_withdrawTooHigh(uint256 withdrawAmount, uint256 stakedAmount);

    /**
     * @notice Returns the address of the staking token.
     * @return IERC20 address of the staking token
     */
    function LP_TOKEN() external view returns (IERC20);

    /**
     * @notice Returns the address of the Ponzio.
     * @return IPonzioTheCat address of the Ponzio
     */
    function PONZIO() external view returns (IPonzioTheCat);

    /**
     * @notice Returns the address of the Ponzio token vault.
     * @return IWrappedPonzioTheCat address of the Ponzio token vault
     */
    function WRAPPED_PONZIO() external view returns (IWrappedPonzioTheCat);

    /**
     * @notice Returns the staked amount and the reward debt of a user.
     * @param user address of the user
     * @return struct containing the user's staked amount and reward debt
     */
    function userInfo(address user) external view returns (UserInfo memory);

    /**
     * @notice Returns the precision factor used to compute the reward per share.
     * @return The precision factor.
     */
    function PRECISION_FACTOR() external view returns (uint256);

    /**
     * @notice Reinvests the user's rewards by adding liquidity to the Uniswap pair and staking the LP tokens.
     * @param amountPonzioMin The minimum amount of Ponzio tokens the user wants to add as liquidity.
     * @param amountEthMin The minimum amount of ETH the user wants to add as liquidity.
     *
     * This function first harvests the user's rewards.
     *
     * It then adds liquidity to the Uniswap pair with the harvested rewards and the ETH sent by the user. The LP
     * tokens received from adding liquidity are then staked.
     *
     * If there are any ETH or Ponzio tokens left in the contract, they are sent back to the user.
     *
     * Requirement:
     * - The `msg.value` (amount of ETH sent) must not be zero.
     */
    function reinvest(uint256 amountPonzioMin, uint256 amountEthMin) external payable;

    /**
     * @notice Returns the reward amount that a user has pending to claim.
     * @param userAddr address of the user
     * @return rewards_ amount of pending rewards
     */
    function pendingRewards(address userAddr) external view returns (uint256 rewards_);

    /**
     * @notice Deposits staking tokens to the contract.
     * @param amount amount of staking tokens to deposit
     * @param recipient address of the recipient
     */
    function deposit(uint256 amount, address recipient) external;

    /**
     * @notice Withdraws staking tokens from the contract.
     * @param amount amount of staking tokens to withdraw
     * @param recipient address of the recipient
     */
    function withdraw(uint256 amount, address recipient) external;

    /**
     * @notice Updates the pool and sends the pending reward amount of msg.sender.
     * @param recipient address of the recipient
     */
    function harvest(address recipient) external;

    /**
     * @notice Convert all rewards to vault tokens
     * @dev Only call the vault if the balance is not zero
     */
    function sync() external;

    /**
     * @notice Function to force the withdrawal of LP tokens from the contract.
     * @dev This function is used to withdraw the LP tokens in case of emergency.
     * It will send the LP tokens to the user without claiming the rewards.
     */
    function emergencyWithdraw() external;

    /**
     * @notice Function to skim any excess lp tokens sent to the contract.
     * @dev Receiver is msg.sender
     */
    function skim() external;
}


// File: src/interfaces/IPonzioTheCat.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.25;

import { IERC20Rebasable } from "src/interfaces/IERC20Rebasable.sol";
import { IUniswapV2Pair } from "src/interfaces/UniswapV2/IUniswapV2Pair.sol";

interface IPonzioTheCat is IERC20Rebasable {
    /// @notice Error code is thrown when the contract is being initialized a 2nd time.
    error PONZIO_alreadyInitialized();

    /// @notice Error code thrown in setFeesCollector when the contract has not been initialized yet.
    error PONZIO_notInitialized();

    /// @notice Error code thrown in setFeesCollector when the new feesCollector is the zero address.
    error PONZIO_feeCollectorZeroAddress();

    /**
     * @notice Emitted when the max shares are reached.
     * @param timestamp The timestamp at which the maximum is reached.
     */
    event MaxSharesReached(uint256 timestamp);

    /**
     * @notice Emitted FeesCollector changes.
     * @param feesCollector The new feesCollector.
     * It's ok to set the feesCollector to the zero address, in which case no fees will be collected.
     */
    event FeesCollectorSet(address indexed feesCollector);

    /**
     * @notice Emitted when the Uniswap V2 pair address is set.
     * @param uniV2PoolPair The new uniV2PoolPair.
     */
    event UniV2PoolPairSet(address indexed uniV2PoolPair);

    /**
     * @notice Emitted when an account is blacklisted for UpdateTotalSupply.
     * @param account The account that is blacklisted.
     * @param value The new value of the blacklist.
     */
    event BlacklistForUpdateSupplySet(address indexed account, bool indexed value);

    /**
     * @notice Emitted when the total supply is updated.
     * @param oldTotalSupply The old total supply.
     * @param newTotalSupply The new total supply.
     * @param oldTotalShare The old total share.
     * @param newTotalShare The new total share.
     * @param fees The fees collected.
     */
    event TotalSupplyUpdated(
        uint256 oldTotalSupply, uint256 newTotalSupply, uint256 oldTotalShare, uint256 newTotalShare, uint256 fees
    );

    /**
     * @notice Initial supply of the token.
     * @return The initial supply of the token.
     */
    function INITIAL_SUPPLY() external view returns (uint256);

    /**
     * @notice Time between each halving.
     * @return The time between each halving.
     */
    function HALVING_EVERY() external view returns (uint256);

    /**
     * @notice Time between each debasing.
     * @return The time between each debasing.
     */
    function DEBASE_EVERY() external view returns (uint256);

    /**
     * @notice Number of debasing per halving.
     * @return The number of debasing per halving.
     */
    function NB_DEBASE_PER_HALVING() external view returns (uint256);

    /**
     * @notice Minimum total supply. When the total supply reaches this value, it can't go lower.
     * @return The minimum total supply.
     */
    function MINIMUM_TOTAL_SUPPLY() external view returns (uint256);

    /**
     * @notice The time at which the contract was deployed.
     * @return The time at which the contract was deployed.
     */
    function DEPLOYED_TIME() external view returns (uint256);

    /**
     * @notice Fees collected on each debasing, in FEES_BASE percent.
     * @return The fees collected on each debasing.
     */
    function FEES_STAKING() external view returns (uint256);

    /**
     * @notice The fee base used for FEES_STAKING
     * @return The fee base
     */
    function FEES_BASE() external view returns (uint256);

    /**
     * @notice The address that collects the fees (the staking contract)
     * @return The address that collects the fees
     */
    function feesCollector() external view returns (address);

    /**
     * @notice returns if the max shares are reached.
     * @return True if the max shares are reached, false otherwise.
     * @dev The max shares are reached when the total of shares is about to overflow.
     * When reached, fees are not collected anymore.
     */
    function maxSharesReached() external view returns (bool);

    /**
     * @notice The Uniswap V2 pair to sync when debasing.
     * @return The Uniswap V2 pair.
     */
    function uniswapV2Pair() external view returns (IUniswapV2Pair);

    /**
     * @notice Changes the Uniswap V2 pair address.
     * @param uniV2PoolAddr_ The new Uniswap V2 pair address.
     * @dev Set the Uniswap V2 pair address to zero address to disable syncing.
     */
    function setUniswapV2Pair(address uniV2PoolAddr_) external;

    /**
     * @notice Changes the fees collector.
     * @param feesCollector_ The new fees collector.
     */
    function setFeesCollector(address feesCollector_) external;

    /**
     * @notice Blacklist an address for UpdateTotalSupply.
     * @param addrToBlacklist The address to blacklist.
     * @param value The new value of the blacklist.
     */
    function setBlacklistForUpdateSupply(address addrToBlacklist, bool value) external;

    /**
     * @notice Initialize the contract by setting the fees collector and staking the first amount of tokens.
     * @param feesCollector_ The address that will collect the fees.
     * @param uniV2PoolAddr_ The address of the uniswap V2 pool.
     */
    function initialize(address feesCollector_, address uniV2PoolAddr_) external;

    /**
     * @notice Return the real-time balance of an account after an UpdateTotalSupply() call.
     * @param account_ The account to check the balance of.
     * @return balance_ The real-time balance of the account.
     * @dev This function will only return the right balance if the feesCollector is set.
     */
    function realBalanceOf(address account_) external view returns (uint256 balance_);

    /**
     * @notice Compute the total supply and the fees to collect.
     * @return totalSupply_ The new total supply.
     * @return fees_ The fees to collect.
     */
    function computeSupply() external view returns (uint256 totalSupply_, uint256 fees_);

    /**
     * @notice Compute the total shares, supply and the fees to collect.
     * @return totalShares_ The new total shares.
     * @return totalSupply_ The new total supply.
     * @return fees_ The fees to collect.
     */
    function computeNewState() external view returns (uint256 totalShares_, uint256 totalSupply_, uint256 fees_);
}


// File: src/interfaces/IWrappedPonzioTheCat.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.25;

import { IPonzioTheCat } from "src/interfaces/IPonzioTheCat.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IWrappedPonzioTheCat is IERC20 {
    /// @notice Returns the underlying asset of the wrapped token.
    function asset() external view returns (IPonzioTheCat);

    /**
     * @notice Returns the amount of wrapped tokens that will be minted when wrapping the underlying assets given the
     * new total shares and total supply.
     * @param assets The amount of underlying assets to be wrapped.
     * @param newTotalShares The new total shares of the wrapped token.
     * @param newTotalSupply The new total supply of the wrapped token.
     * @return amount_ The amount of wrapped tokens that will be minted.
     */
    function previewWrap(uint256 assets, uint256 newTotalShares, uint256 newTotalSupply)
        external
        view
        returns (uint256 amount_);

    /**
     * @notice Wraps the underlying assets into the wrapped token.
     * @param assets The amount of underlying assets to be wrapped.
     * @return amount_ The amount of wrapped tokens minted.
     */
    function wrap(uint256 assets) external returns (uint256 amount_);

    /**
     * @notice Wraps the underlying assets into the wrapped token and mints them to the receiver.
     * @param assets The amount of underlying assets to be wrapped.
     * @param receiver The address to which the wrapped tokens are minted.
     * @return amount_ The amount of wrapped tokens minted.
     */
    function wrap(uint256 assets, address receiver) external returns (uint256 amount_);

    /**
     * @notice Wraps the underlying shares into the wrapped token and mints them to the receiver.
     * @param shares The amount of underlying shares to be wrapped.
     * @param receiver The address to which the wrapped tokens are minted.
     * @return amount_ The amount of wrapped tokens minted.
     */
    function wrapShares(uint256 shares, address receiver) external returns (uint256 amount_);

    /**
     * @notice Returns the amount of underlying assets that will be received when unwrapping the wrapped tokens.
     * @param amount The amount of wrapped tokens to be unwrapped.
     * @return assets_ The amount of underlying assets that will be received.
     */
    function previewUnwrap(uint256 amount) external view returns (uint256 assets_);

    /**
     * @notice Returns the amount of underlying assets that will be received when unwrapping the wrapped tokens given
     * the new total shares and total supply.
     * @param amount The amount of wrapped tokens to be unwrapped.
     * @param newTotalShares The new total shares of the wrapped token.
     * @param newTotalSupply The new total supply of the wrapped token.
     * @return assets_ The amount of underlying assets that will be received.
     */
    function previewUnwrap(uint256 amount, uint256 newTotalShares, uint256 newTotalSupply)
        external
        view
        returns (uint256 assets_);

    /**
     * @notice Unwraps the wrapped tokens into the underlying assets.
     * @param amount The amount of wrapped tokens to be unwrapped.
     * @return assets_ The amount of underlying assets received.
     */
    function unwrap(uint256 amount) external returns (uint256 assets_);

    /**
     * @notice Unwraps the wrapped tokens into the underlying assets and sends them to the receiver.
     * @param amount The amount of wrapped tokens to be unwrapped.
     * @param receiver The address to which the underlying assets are sent.
     * @return assets_ The amount of underlying assets received.
     */
    function unwrap(uint256 amount, address receiver) external returns (uint256 assets_);

    /**
     * @notice Returns the amount of wrapped tokens that will be minted when wrapping the underlying assets.
     * @param assets The amount of underlying assets to be wrapped.
     * @return amount_ The amount of wrapped tokens that will be minted.
     */
    function previewWrap(uint256 assets) external view returns (uint256 amount_);
}


// File: node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: src/interfaces/UniswapV2/IUniswapV2Router02.sol
// SPDX-License-Identifier: Unlicense
pragma solidity >=0.6.2;

import "src/interfaces/UniswapV2/IUniswapV2Router01.sol";

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}


// File: node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: node_modules/@openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: src/interfaces/IERC20Rebasable.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.25;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { IERC20Permit } from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol";

interface IERC20Rebasable is IERC20, IERC20Permit {
    /**
     * @notice returns the precision factor for shares.
     * @return The precision factor for shares.
     */
    function SHARES_PRECISION_FACTOR() external view returns (uint256);

    /**
     * @notice returns the total shares.
     * @return The total shares.
     */
    function totalShares() external view returns (uint256);

    /**
     * @notice returns the share of the user.
     * @param user The address of the user to get the share of.
     * @return The share of the user.
     */
    function sharesOf(address user) external view returns (uint256);

    /**
     * @notice Transfer tokens to a specified address by specifying the share amount.
     * @param to The address to transfer the tokens to.
     * @param shares The amount of shares to be transferred.
     * @return True if the transfer was successful, revert otherwise.
     */
    function transferShares(address to, uint256 shares) external returns (bool);

    /**
     * @notice Transfer shares from a specified address to another specified address.
     * @param from The address to transfer the shares from.
     * @param to The address to transfer the shares to.
     * @param shares The amount of shares to be transferred.
     * @return True if the transfer was successful, revert otherwise.
     * @dev This function tries to update the total supply by calling `updateTotalSupply()`
     */
    function transferSharesFrom(address from, address to, uint256 shares) external returns (bool);

    /**
     * @notice update the total supply, compute the debase accordingly and transfer the fees to the feesCollector.
     * @dev This function is already called at each approval and transfer. It needs to be implemented by a child
     * contract
     */
    function updateTotalSupply() external;

    /**
     * @notice Convert tokens to shares.
     * @param amount The amount of tokens to convert to shares.
     * @return shares_ The number of shares corresponding to the tokens.
     */
    function tokenToShares(uint256 amount) external view returns (uint256 shares_);

    /**
     * @notice Convert tokens to shares given the new total shares and total supply.
     * @param amount The amount of tokens to convert to shares.
     * @param newTotalShares The new total shares.
     * @param newTotalSupply The new total supply.
     * @return shares_ The number of shares corresponding to the tokens.
     */
    function tokenToShares(uint256 amount, uint256 newTotalShares, uint256 newTotalSupply)
        external
        view
        returns (uint256 shares_);

    /**
     * @notice Convert shares to tokens.
     * @param shares The amount of shares to convert to tokens.
     * @return tokenAmount_ The amount of tokens corresponding to the shares.
     */
    function sharesToToken(uint256 shares) external view returns (uint256 tokenAmount_);

    /**
     * @notice Convert shares to tokens given the new total shares and total supply.
     * @param shares The amount of shares to convert to tokens.
     * @param newTotalShares The new total shares.
     * @param newTotalSupply The new total supply.
     * @return tokenAmount_ The amount of tokens corresponding to the shares.
     */
    function sharesToToken(uint256 shares, uint256 newTotalShares, uint256 newTotalSupply)
        external
        view
        returns (uint256 tokenAmount_);
}


// File: src/interfaces/UniswapV2/IUniswapV2Pair.sol
// SPDX-License-Identifier: Unlicense
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint256);

    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
        external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint256);
    function price1CumulativeLast() external view returns (uint256);
    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);
    function burn(address to) external returns (uint256 amount0, uint256 amount1);
    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: src/interfaces/UniswapV2/IUniswapV2Router01.sol
// SPDX-License-Identifier: Unlicense
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);
    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);
    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);
    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)
        external
        payable
        returns (uint256[] memory amounts);
    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)
        external
        payable
        returns (uint256[] memory amounts);

    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);
    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)
        external
        pure
        returns (uint256 amountOut);
    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)
        external
        pure
        returns (uint256 amountIn);
    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

