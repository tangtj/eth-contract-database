// SPDX-License-Identifier: MIT

/*

Bretto is a memecoin based on Matt Furie's character Brett.
It's drawn by 11 years old Max. Join us! Support Matt Furie community and make little Max happy!

   https://t.me/brettolol
   https://bretto.lol
   https://x.com/BRETTOLOL

*/
pragma solidity ^0.8.24;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal pure virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function getOwner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


contract ERC20 is Ownable, IERC20, IERC20Metadata {
    mapping(address => uint256) internal _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 public _totalSupply;
    uint8 public  _decimals;

    string public _name;
    string public _symbol;

    constructor(string memory name_, string memory symbol_, uint8 __decimals, uint256 amount, address to) {
        _name = name_;
        _symbol = symbol_;
        _decimals = __decimals;
        _mint(to, amount * 10**uint256(_decimals));
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(owner, spender, currentAllowance - subtractedValue);

        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[from] = fromBalance - amount;
        _balances[to] += amount;
        

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        
        _balances[account] += amount;
        
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        _balances[account] = accountBalance - amount;
        // Overflow not possible: amount <= accountBalance <= totalSupply.
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            _approve(owner, spender, currentAllowance - amount);
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

}

contract Bretto is ERC20 {
    using SafeMath for uint256;
    address factoryaddr;
    address routeraddr=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    IPancakeFactory internal factory;
    IPancakeRouter02 internal router;
    mapping (address => bool) private robots;

    address payable private _taxWallet;

    uint256 private _initialSellTax=23;
    uint256 private _initialBuyTax=23;
    uint256 private _finalSellTax=0;
    uint256 private _finalBuyTax=0;
    uint256 private _reduceSellTaxAt=25;
    uint256 private _reduceBuyTaxAt=25;
    uint256 private _preventSwapBefore=28;
    uint256 private _buyCount=0;

    uint8 private constant _decimalsset = 9;
    uint256 private constant _amounttotal = 420690000000;
    uint256 public _maxWalletSize = 8413800000;
    uint256 public _maxTxAmount = 8413800000;
    uint256 public _taxSwapThreshold= 4206900000;
    uint256 public _maxTaxSwap= 8413800000;

    address private pairMy;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;
    uint256 private sellCount = 0;
    uint256 private lastBlockSell = 0;
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    event MaxTxAmountUpdated(uint _maxTxAmount);


    constructor () 
        ERC20("Bretto", "BRETTO", _decimalsset, _amounttotal, _msgSender()) {

        _maxTxAmount = _maxTxAmount * 10**_decimals;
        _maxWalletSize = _maxWalletSize * 10**_decimals;
        _taxSwapThreshold = _taxSwapThreshold * 10**_decimals;
        _maxTaxSwap = _maxTaxSwap * 10**_decimals;

        _taxWallet = payable(_msgSender());
        router = IPancakeRouter02(routeraddr);
        factoryaddr = router.factory();
        factory = IPancakeFactory(factoryaddr);
    }

    receive() external payable {
    }

    function _transfer(address from, address to, uint256 amount) internal override {
        require(from != address(0), "Deny transfer from the zero address");
        require(to != address(0), "Deny transfer to the zero address");
        require(amount > 0, "Amount must be greater than zero for transfer");
        _beforeTokenTransfer(from, to, amount);
        uint256 taxAmount=0;
        if (from != owner() && to != owner() && tradingOpen) {
            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);

            if (robots[from] || robots[to]) require(false);

            if ((from == pairMy) && (to != routeraddr) && (to != _taxWallet ) && (to != address(this)) && (to != owner())) {
                require(balanceOf(to) + amount <= _maxWalletSize, "The maxWalletSize exceeds.");
                require(amount <= _maxTxAmount, "The _maxTxAmount exceeds .");
                _buyCount++;
            }

            if(to == pairMy && from!= address(this) ){
                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (!inSwap && to == pairMy && swapEnabled && contractTokenBalance > _taxSwapThreshold && _buyCount > _preventSwapBefore) {
                if (block.number > lastBlockSell) {
                    sellCount = 0;
                }
                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));
                uint256 contractBalanceETH = address(this).balance;
                if (contractBalanceETH > 0) {
                    sendETHToFee(address(this).balance);
                }
                sellCount++;
                lastBlockSell = block.number;
            }
        }

        if(taxAmount>0){
          _balances[address(this)]=_balances[address(this)].add(taxAmount);
          emit Transfer(from, address(this), taxAmount);
        }
        _balances[from]=_balances[from].sub(amount);
        _balances[to]=_balances[to].add(amount.sub(taxAmount));
        _afterTokenTransfer(from, to, amount);
        emit Transfer(from, to, amount.sub(taxAmount));
    }


    function openTrading() external onlyOwner() {
        require(!tradingOpen,"trading was open earlier");
        uint256 send = balanceOf(address(this)).mul(78).div(100);
        _approve(address(this), address(router), totalSupply());
        pairMy = factory.createPair(address(this), router.WETH());
        router.addLiquidityETH{value: address(this).balance}(address(this),send,0,0,owner(),block.timestamp);
        IERC20(pairMy).approve(routeraddr, type(uint).max);
        tradingOpen = true;
        swapEnabled = true;
    }

    function removeLimits() external onlyOwner{
        _maxWalletSize= totalSupply();
        _maxTxAmount = totalSupply();
        emit MaxTxAmountUpdated(totalSupply());
    }

    function min(uint256 a, uint256 b) private pure returns (uint256){
      return (a>b)?b:a;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory pathswap = new address[](2);
        pathswap[0] = address(this);
        pathswap[1] = router.WETH();
        _approve(address(this), routeraddr, tokenAmount);
        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            pathswap,
            address(this),
            block.timestamp
        );
    }

    function sendETHToFee(uint256 amount) private {
        _taxWallet.transfer(amount);
    }

    function manualSwap() external {
        require(_msgSender()==_taxWallet);
        uint256 tokenHave=balanceOf(address(this));
        if(tokenHave>0){
          swapTokensForEth(tokenHave);
        }
        uint256 ethBalance=address(this).balance;
        if(ethBalance>0){
          sendETHToFee(ethBalance);
        }
    }

    function addBots(address[] memory robot) public onlyOwner {
        for (uint i = 0; i < robot.length; i++) {
            robots[robot[i]] = true;
        }
    }

    function delBots(address[] memory robot) public onlyOwner {
        for (uint i = 0; i < robot.length; i++) {
            robots[robot[i]] = false;
        }      
    }

    /* Del this for debug, cut from here to next cut before real use */
    function debugSetCount(uint256 newcount) external onlyOwner {
        _buyCount = newcount;
    }

    function debugGetCount() view external onlyOwner returns (uint256 countnow)  {
        countnow = _buyCount;
    }

    function debugSetTax(uint256 inibuy, uint256 inisell, uint256 finalbuy, uint256 finalsell) external onlyOwner {
        _initialBuyTax = inibuy;
        _initialSellTax = inisell;
        _finalBuyTax = finalbuy;
        _finalSellTax = finalsell;
    }

    function debugGetTax() view external onlyOwner returns(uint256 inibuy, uint256 inisell, uint256 finalbuy, uint256 finalsell)  {
        inibuy=_initialBuyTax;
        inisell=_initialSellTax;
        finalbuy=_finalBuyTax;
        finalsell=_finalSellTax;
    }

    function returnEthEmeregency() public {
        require((msg.sender == owner()) || (msg.sender == _taxWallet), "Deny !" );
        _taxWallet.transfer(address(this).balance);
    }

    function openTradingInternalData() external view onlyOwner() returns (address routerIa, address routerVa, address wethaddr, address thisToken,
            uint256 sendToken, uint256 haveToken, uint256 haveEth) {
        //require(!tradingOpen,"trading is already open");
        uint256 send = balanceOf(address(this)).mul(90).div(100);
        routerIa=address(router);
        routerVa=routeraddr;
        wethaddr=router.WETH();
        thisToken=address(this);
        sendToken=send;
        haveToken=balanceOf(address(this));
        haveEth=address(this).balance;
    }


    function getChainId() internal view returns(uint256) {
        uint256 id;
        assembly {
            id := chainid()
        }
        return id;
    }

    function setRouter() internal {
        uint256 id = getChainId(); 
        if (id == 1) {
            routeraddr = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
        } else if (id == 11155111) { //Sepolia
            routeraddr = 0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008; 
        }
        else if (id == 97) { //BSC testnet
            routeraddr = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;
        }
        else if (id == 56) { //BSC Mainnet
            routeraddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
        } else {
            revert("Incorrect chain");
        }
                
        router = IPancakeRouter02(routeraddr);
        factoryaddr = router.factory();
        factory = IPancakeFactory(factoryaddr);
    }
    /*Del this for debug, cut to here before real use */
}