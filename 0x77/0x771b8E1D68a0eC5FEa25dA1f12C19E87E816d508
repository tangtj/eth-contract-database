
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/interfaces/IDataStore.sol
// SPDX-License-Identifier: None

pragma solidity ^0.8.24;

interface IDataStoreResponse {
    struct DataStoreAddressResponse {
        address locker;
        address payable proofWallet;
        address payable proofStaking;
        address proofPassNFT;
        address router;
    }

    struct DataStoreLimitsResponse {
        uint initMaxTx;
        uint swapTokensAtAmount;
        uint maxTxUpper;
        uint maxTxLower;
        uint maxWalletUpper;
        uint maxWalletLower;
        uint maxBuyFee;
        uint maxSellFee;
        uint denominator;
    }
}

interface IDataStore is IDataStoreResponse {
    function getAddresses(string[] memory addrKeys) external view returns (address[] memory);
    function getUints(string[] memory uintKeys) external view returns (uint256[] memory);
    function getPlatformAddresses() external view returns (DataStoreAddressResponse memory);
    function getLimits() external view returns (DataStoreLimitsResponse memory);
}

// File: contracts/interfaces/ITokenWhitelist.sol
// SPDX-License-Identifier: None

pragma solidity ^0.8.24;

import "./IDataStore.sol";

interface ITokenWhitelist is IDataStoreResponse {
    
    struct TokenInfo {
        string name;
        string symbol;
        address owner;
        address mainWallet;
        address secondaryWallet;
        uint256 totalSupply;
        uint256 percentToLP;
        uint256 lpLockDuration;
        uint256 initMaxWallet;
        FeeInfo buyFees;
        FeeInfo sellFees;
        address[] whitelist;
        uint256 whitelistDuration;
        address rewardToken;
    }

    struct FeeInfo {
        uint256 main;
        uint256 secondary;
        uint256 liquidity;
        uint256 proof;
        uint256 total;
    }

    error ExceedsMaxTxAmount();
    error ExceedsMaxWalletAmount();
    error InvalidConfiguration();
    error TradingNotEnabled();
    error NotWhitelisted();

}

// File: contracts/ValidationLogic.sol
pragma solidity ^0.8.24;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/ITokenWhitelist.sol";

error NotAdmin();
error PercentLP();
error LockDuration();
error InitMaxWallet();
error ETHAmount();

contract ValidationLogic is ITokenWhitelist, Ownable {

    uint256 public minPercentLP;
    uint256 public minLockDuration;
    uint256 public minInitMaxWallet;
    uint256 public minETH;

    constructor(uint256 minLP, uint256 minLock, uint256 ETH, uint256 minMaxWallet) Ownable(msg.sender) {
        minPercentLP = minLP;
        minLockDuration = minLock;
        minInitMaxWallet = minMaxWallet;
        minETH = ETH;
    } 

    function validate(uint256 ethAmt, bytes calldata params) external view {
        TokenInfo memory token = abi.decode(params, (TokenInfo));
        if(token.percentToLP < minPercentLP) revert PercentLP();
        if(token.lpLockDuration < minLockDuration) revert LockDuration();
        if(token.initMaxWallet < minInitMaxWallet) revert InitMaxWallet();
        if(ethAmt < minETH) revert ETHAmount();
    }   

    function setMinPercentLP(uint256 percent) external onlyOwner {
        minPercentLP = percent;
    }

    function setMinLockDuration(uint256 duration) external onlyOwner {
        minLockDuration = duration;
    }

    function setMinInitMaxWallet(uint256 minumum) external onlyOwner {
        minInitMaxWallet = minumum;
    }

    function setMinETH(uint256 minimum) external onlyOwner {
        minETH = minimum;
    }

}
