
// File: contracts/Depositor.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.6.6;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";

interface ITokenMinter {
    function mint(address, uint256) external;

    function burn(address, uint256) external;
}

interface ILocker {
    function lockToken(
        address _reciver,
        uint256 _amount,
        uint256 _lockTime
    ) external;
}

contract PufEthDepositor is Ownable, Pausable {
    address public immutable pufEth;

    address public immutable staker;
    address public immutable wPufEth;
    address public immutable locker;

    uint256 public constant denominator = 10000;
    uint256 public feeRatio = 100;
    uint256 public collectRatio = 0;
    uint256 public maxSupply = 0;

    event Deposit(address indexed reciver, uint256 amount);
    event Withdraw(address indexed reciver, uint256 amount);
    event FeeRatioChanged(uint256 oldFeeRatio, uint256 newFeeRatio);

    constructor(
        address _staker,
        address _wPufEth,
        address _pufEth,
        address _locker
    ) public Ownable() {
        require(_staker != address(0), "Can not set 0x0 address");
        require(_wPufEth != address(0), "Can not set 0x0 address");
        require(_pufEth != address(0), "Can not set 0x0 address");
        require(_locker != address(0), "Can not set 0x0 address");
        staker = _staker;
        wPufEth = _wPufEth;
        pufEth = _pufEth;
        locker = _locker;
    }

    function depositWithLock(
        uint256 _amount,
        bool lock,
        uint256 _lockTime
    ) public whenNotPaused {
        require(_amount > 0, "amount must be > 0");

        uint256 totalSupply = IERC20(wPufEth).totalSupply();
        require(maxSupply >= totalSupply + _amount, "can not over max supply");

        IERC20(pufEth).transferFrom(msg.sender, address(this), _amount);

        if (lock) {
            //mint here
            ITokenMinter(wPufEth).mint(address(this), _amount);
            // lock token for msg.sender
            IERC20(wPufEth).approve(locker, 0);
            IERC20(wPufEth).approve(locker, _amount);
            ILocker(locker).lockToken(msg.sender, _amount, _lockTime);
        } else {
            //mint for msg.sender
            ITokenMinter(wPufEth).mint(msg.sender, _amount);
        }

        _collectBalance(_amount);
        emit Deposit(msg.sender, _amount);
    }

    function updateFeeRatio(uint256 _feeRatio) external onlyOwner {
        require(
            _feeRatio >= 0 && _feeRatio <= 1000 && _feeRatio != feeRatio,
            "feeRatio must be between 0 and 1000 or not changed"
        );
        uint256 oldFeeRatio = feeRatio;
        feeRatio = _feeRatio;
        emit FeeRatioChanged(oldFeeRatio, _feeRatio);
    }

    function updateMaxSupply(uint256 _maxSupply) external onlyOwner {
        require(_maxSupply != maxSupply, "maxSupply not changed");
        maxSupply = _maxSupply;
    }

    function updateCollectRatio(uint256 _collectRatio) external onlyOwner {
        require(
            _collectRatio >= 0 &&
                _collectRatio <= 8000 &&
                _collectRatio != collectRatio,
            "collectRatio must be between 0 and 8000 or not changed"
        );
        collectRatio = _collectRatio;
    }

    function deposit(uint256 _amount) external {
        depositWithLock(_amount, false, 0);
    }

    function depositAll(bool lock, uint256 _lockTime) external {
        uint256 bal = IERC20(pufEth).balanceOf(msg.sender);
        depositWithLock(bal, lock, _lockTime);
    }

    function withdraw(uint256 _amount) public whenNotPaused {
        require(_amount > 0, "amount must be > 0");
        ITokenMinter(wPufEth).burn(msg.sender, _amount);

        uint256 fee = (_amount * feeRatio) / denominator;
        IERC20(pufEth).transfer(staker, fee);

        IERC20(pufEth).transfer(msg.sender, _amount - fee);
        emit Withdraw(msg.sender, _amount);
    }

    function withdrawAll() external {
        uint256 bal = IERC20(wPufEth).balanceOf(msg.sender);
        withdraw(bal);
    }

    function _collectBalance(uint256 _amount) internal {
        IERC20(pufEth).transfer(staker, (_amount * collectRatio) / denominator);
    }

    function kickCollectBalance(uint256 _amount) external onlyOwner {
        _collectBalance(_amount);
    }

    function setPaused(bool _paused) external onlyOwner {
         require(_paused != paused(), "Paused not changed");
        if (_paused) {
            _pause();
        } else {
            _unpause();
        }
    }
}


// File: @openzeppelin/contracts/utils/Pausable.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "./Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor () internal {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "../utils/Context.sol";
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

