
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/AutoCompounder.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

interface IRebalanceContract {
    function rebalance(address asset) external;
}

interface ICurveVault {
    function deposit(uint256) external returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);
}

interface IStakeDAO {
    function deposit(address, uint256, bool) external;

    function balanceOf(address account) external view returns (uint256);

    function claimRewards(address[] calldata, bool) external;

    function claimable_reward(address, address) external view returns (uint256);
}

interface ICurve {
    function exchange(
        uint256 i,
        uint256 j,
        uint256 dx,
        uint256 min_dy
    ) external payable returns (uint256);
}

interface ICurveCVX {
    function exchange(
        uint256 i,
        uint256 j,
        uint256 dx,
        uint256 min_dy,
        bool useEth
    ) external payable returns (uint256);
}

contract AutoCompounder is ReentrancyGuard {
    address public owner;
    ICurve public curveRouterCRV;
    ICurveCVX public curveRouterCVX;
    ICurve public curveRouterSDT;
    ICurveVault public curveVault;
    IStakeDAO public stakeDAO;
    IStakeDAO public stakeDAORewards;
    IRebalanceContract public rebalanceContract;
    IERC20 public crvToken;
    IERC20 public cvxToken;
    IERC20 public curveUSDToken;
    IERC20 public weth;
    IERC20 public sdtToken;
    address public sdcvcrvUSDToken;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    constructor(
        address _curveUSDToken,
        address _curveVault,
        address _stakeDAO,
        address _sdcvcrvUSDToken,
        address _stakeDAORewards,
        address _crvToken,
        address _cvxToken,
        address _curveRouterCRV,
        address _curveRouterCVX,
        address _weth,
        address _sdtToken,
        address _curveRouterSDT,
        address _rebalanceContract
    ) {
        owner = msg.sender;
        curveUSDToken = IERC20(_curveUSDToken);
        curveVault = ICurveVault(_curveVault);
        stakeDAO = IStakeDAO(_stakeDAO);
        sdcvcrvUSDToken = _sdcvcrvUSDToken;
        stakeDAORewards = IStakeDAO(_stakeDAORewards);
        crvToken = IERC20(_crvToken);
        cvxToken = IERC20(_cvxToken);
        curveRouterCRV = ICurve(_curveRouterCRV);
        curveRouterCVX = ICurveCVX(_curveRouterCVX);
        weth = IERC20(_weth);
        sdtToken = IERC20(_sdtToken);
        curveRouterSDT = ICurve(_curveRouterSDT);
        rebalanceContract = IRebalanceContract(_rebalanceContract);
    }

    event Swap(uint256 amountRewardToken, uint256 amountCrvUSD, string token);
    event Staked(uint256 amount);
    event RewardsClaimed(
        uint256 amountCRV,
        uint256 amountCVX,
        uint256 amountSDT
    );

    function changeOwnership(address _newOwner) external onlyOwner {
        require(_newOwner != address(0), "Invalid address");
        owner = _newOwner;
    }

    function withdraw(address _token) external onlyOwner {
        IERC20 token = IERC20(_token);
        uint256 balance = token.balanceOf(address(this));
        token.transfer(owner, balance);
    }

    function invest(uint256 _amount) external onlyOwner nonReentrant {
        require(_amount > 0, "Amount must be greater than zero");
        curveUSDToken.transferFrom(msg.sender, address(this), _amount);
        curveUSDToken.approve(address(curveVault), _amount);

        uint256 cvcrvUSD = curveVault.deposit(_amount);

        if (cvcrvUSD > 0) {
            _stake(cvcrvUSD);
            emit Staked(cvcrvUSD);
        }
    }

    function harvest(
        bool claimCRV,
        bool claimCVX,
        bool claimSDT
    ) external onlyOwner nonReentrant {
        _claimRewards();

        uint256 crvBalance = crvToken.balanceOf(address(this));
        uint256 cvxBalance = cvxToken.balanceOf(address(this));
        uint256 sdtBalance = sdtToken.balanceOf(address(this));

        emit RewardsClaimed(crvBalance, cvxBalance, sdtBalance);

        if (claimCRV && crvBalance > 0) {
            uint256 crvUSDfromCRVswap = _swapCRV(crvBalance);
            emit Swap(crvBalance, crvUSDfromCRVswap, "CRV");
        }
        if (claimCVX && cvxBalance > 0) {
            uint256 crvUSDfromCVXswap = _swapCVX(cvxBalance);
            emit Swap(cvxBalance, crvUSDfromCVXswap, "CVX");
        }

        if (claimSDT && sdtBalance > 0) {
            uint256 crvUSDfromSDTswap = _swapSDT(sdtBalance);
            emit Swap(sdtBalance, crvUSDfromSDTswap, "SDT");
        }

        uint256 crvUSDBalance = curveUSDToken.balanceOf(address(this));

        if (crvUSDBalance > 0) {
            curveUSDToken.approve(address(curveVault), crvUSDBalance);
            uint256 cvcrvUSD = curveVault.deposit(crvUSDBalance);
            if (cvcrvUSD > 0) {
                _stake(cvcrvUSD);
                emit Staked(cvcrvUSD);
            }
        }
    }

    function _stake(uint256 _cvcrvUSD) internal {
        curveVault.approve(address(stakeDAO), _cvcrvUSD);
        stakeDAO.deposit(address(this), _cvcrvUSD, true);
    }

    function _claimRewards() internal {
        address[] memory gauges = new address[](1);
        gauges[0] = sdcvcrvUSDToken;
        stakeDAORewards.claimRewards(gauges, false);
    }

    function swap(
        bool swapCRV,
        bool swapCVX,
        bool swapSDT,
        bool stake
    ) external onlyOwner nonReentrant {
        uint256 crvBalance = crvToken.balanceOf(address(this));
        uint256 cvxBalance = cvxToken.balanceOf(address(this));
        uint256 sdtBalance = sdtToken.balanceOf(address(this));

        if (swapCRV && crvBalance > 0) {
            uint256 crvUSDfromCRVswap = _swapCRV(crvBalance);
            emit Swap(crvBalance, crvUSDfromCRVswap, "CRV");
        }
        if (swapCVX && cvxBalance > 0) {
            uint256 crvUSDfromCVXswap = _swapCVX(cvxBalance);
            emit Swap(cvxBalance, crvUSDfromCVXswap, "CVX");
        }

        if (swapSDT && sdtBalance > 0) {
            uint256 crvUSDfromSDTswap = _swapSDT(sdtBalance);
            emit Swap(sdtBalance, crvUSDfromSDTswap, "SDT");
        }

        uint256 crvUSDBalance = curveUSDToken.balanceOf(address(this));

        if (stake && crvUSDBalance > 0) {
            curveUSDToken.approve(address(curveVault), crvUSDBalance);
            uint256 cvcrvUSD = curveVault.deposit(crvUSDBalance);
            if (cvcrvUSD > 0) {
                _stake(cvcrvUSD);
                emit Staked(cvcrvUSD);
            }
        }
    }

    function _swapCRV(uint256 amount) internal returns (uint256) {
        crvToken.approve(address(curveRouterCRV), amount);
        uint256 crvUSDfromCRVswap = curveRouterCRV.exchange(2, 0, amount, 1);
        require(crvUSDfromCRVswap > 0, "Swap failed: No CRVUSD received");
        return crvUSDfromCRVswap;
    }

    function _swapSDT(uint256 amount) internal returns (uint256) {
        sdtToken.approve(address(curveRouterSDT), amount);
        uint256 crvUSDfromSDTswap = curveRouterSDT.exchange(2, 0, amount, 1);
        require(crvUSDfromSDTswap > 0, "Swap failed: No CRVUSD received");
        return crvUSDfromSDTswap;
    }

    function _swapCVX(uint256 amount) internal returns (uint256) {
        cvxToken.approve(address(curveRouterCVX), amount);
        uint256 wethBalance = curveRouterCVX.exchange(1, 0, amount, 0, false);
        require(wethBalance > 0, "Swap failed: No WETH received");
        weth.approve(address(curveRouterCRV), wethBalance);
        uint256 crvUSDfromCVXswap = curveRouterCRV.exchange(
            1,
            0,
            wethBalance,
            1
        );
        return crvUSDfromCVXswap;
    }

    function rebalance() external onlyOwner {
        rebalanceContract.rebalance(address(curveVault));
    }

    function stakedAmount() external view returns (uint256) {
        return stakeDAO.balanceOf(address(this));
    }

    function claimableCRV() external view returns (uint256) {
        return stakeDAO.claimable_reward(address(this), address(crvToken));
    }

    function claimableCVX() external view returns (uint256) {
        return stakeDAO.claimable_reward(address(this), address(cvxToken));
    }

    function claimableSDT() external view returns (uint256) {
        return stakeDAO.claimable_reward(address(this), address(sdtToken));
    }

    receive() external payable {}
}

