
// File: /contracts/token_1/MadDog.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../interfaces/IERC20.sol";
import "../role/Ownable.sol";

contract MadDog is IERC20 , Ownable {
    string public override name;
    string public override symbol;
    uint8 public override decimals;

    uint256 public override totalSupply;
    uint256 public remainedSupply;

    mapping(address => uint256) public override balanceOf;
    mapping(address => mapping(address => uint256)) public override allowance;

    mapping(address => bool) public blacklist;
    bool public transferEnable = false;

    constructor() {
        name = "Maddog coin";
        symbol = "Maddog";
        decimals = 18;
        remainedSupply = 550000000000 * 1e18;

        _mint(msg.sender,remainedSupply);
    }

    function setBlacklist(address user,bool flag) public onlyOwner{
        blacklist[user] = flag;
    }

    function batchSetBlacklist(address[] calldata users,bool flags) public onlyOwner{
        for (uint i = 0; i < users.length; i++) {
            blacklist[users[i]] = flags;
        }
    }

    function setTransferEnable(bool _transferEnable) public onlyOwner{
        transferEnable = _transferEnable;
    }
   

    function _mint(address to,uint256 amount) private{
        require(to != address(0), "zero address");
        require(remainedSupply >= amount, "mint too much");
        remainedSupply = remainedSupply-amount;
        totalSupply = totalSupply+amount;
        balanceOf[to] = balanceOf[to]+amount;

        emit Transfer(address(0), to, amount);
    }

    function _burn(address from, uint256 amount) private {
        require(balanceOf[from] >= amount, "balance not enough");

        balanceOf[from] = balanceOf[from] - amount;
        totalSupply = totalSupply-amount;

        emit Transfer(from, address(0), amount);
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }

    function burnFrom(address from, uint256 amount) external {
        require(allowance[from][msg.sender] >= amount, "allowance not enough");

        allowance[from][msg.sender] = allowance[from][msg.sender]-amount;
        _burn(from, amount);
    }

    function _customerTransfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(blacklist[from] != true,"transfer failed");
        require(transferEnable == true,"transfer not begin");

        _transfer(from, to, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(balanceOf[from] >= amount, "balance not enough");

        balanceOf[from] = balanceOf[from]-amount;
        balanceOf[to] = balanceOf[to]+amount;

        emit Transfer(from, to, amount);
    }

    function transfer(
        address to,
        uint256 amount
    ) external override returns (bool) {
        _customerTransfer(msg.sender, to, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external override returns (bool) {
        require(allowance[from][msg.sender] >= amount, "allowance not enough");

        allowance[from][msg.sender] = allowance[from][msg.sender]-amount;
        _customerTransfer(from, to, amount);

        return true;
    }

    function approve(
        address spender,
        uint256 amount
    ) external override returns (bool) {
        require(spender != address(0), "zero address");

        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);

        return true;
    }

}


// File: /contracts/role/Ownable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Context {
    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this;
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: /contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);
}

