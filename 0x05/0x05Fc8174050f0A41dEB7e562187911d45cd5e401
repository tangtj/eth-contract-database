
// File: contracts/Splitter.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import {IERC20, SafeERC20} from "contracts/token/ERC20/utils/SafeERC20.sol";

interface IGaugeController {
    struct VotedSlope {
        uint slope;
        uint power;
        uint end;
    }

    function vote_user_slopes(
        address user,
        address gauge
    ) external view returns (VotedSlope memory);

    function gauge_types(address gauge) external view returns (int128);
}

interface IProxy {
    function claimAdminFees() external returns (uint);

    function canClaim() external view returns (bool);
}

interface IVoter {
    function strategy() external view returns (IProxy);
}

interface IVault {
    function deposit(uint amount, address receiver) external returns (uint);

    function asset() external view returns (IERC20);

    function approve(address, uint) external returns (bool);

    function transfer(address, uint) external returns (bool);

    function balanceOf(address) external view returns (uint);
}

contract YCRVSplitter {
    using SafeERC20 for IERC20;

    uint public constant PRECISION = 1e18;
    address public constant VOTER = 0xF147b8125d2ef93FB6965Db97D6746952a133934;
    address public constant POOL = 0x99f5aCc8EC2Da2BC0771c32814EFF52b712de1E5;
    address public constant VE = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2;
    address public constant VAULT = 0x27B5739e22ad9033bcBf192059122d163b60349D;
    IGaugeController public constant GAUGE_CONTROLLER =
        IGaugeController(0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB);
    address public constant YBS = 0xE9A115b77A1057C918F997c32663FdcE24FB873f;
    IERC20 public constant YCRV =
        IERC20(0xFCc5c47bE19d06BF83eB04298b026F81069ff65b);
    IERC20 public constant YVECRV =
        IERC20(0xc5bDdf9843308380375a611c18B50Fb9341f502A);
    IERC20 public constant CRVUSD =
        IERC20(0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E);
    IVault public constant REWARD_TOKEN =
        IVault(0xBF319dDC2Edc1Eb6FDf9910E39b37Be221C8805F); // V3 vault

    address public immutable FEE_BURNER;
    uint public ybsVoteIncentiveRatio = 9e17;
    address public owner = 0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52;
    address public guardian = 0x4444AAAACDBa5580282365e25b16309Bd770ce4a;
    Recipients public recipients;
    uint public ycrvGaugesLength;
    uint public partnerGaugesLength;
    uint public discretionaryGaugesLength;
    address[] public discretionaryGauges;
    address[] public ycrvGauges;
    address[] public partnerGauges;
    mapping(address caller => bool approved) public approvedSplitCallers;
    bool public onlyTokenized = true;

    event AdminFeeSplit(uint ybs, uint treasury, uint remainder);
    event VoteIncentiveSplit(uint ybs, uint treasury, uint remainder);
    event OwnerSet(address indexed owner);
    event GuardianSet(address indexed guardian);

    struct BaseBalances {
        uint ybs;
        uint lp;
        uint loose;
        uint unmigrated;
        uint partners;
        uint untokenized;
        uint veTotal;
    }

    struct Split {
        uint ybsRatio;
        uint treasuryRatio;
        uint remainderRatio;
    }

    struct Recipients {
        address ybs;
        address treasury;
        address remainderTarget;
    }

    constructor(
        address _feeBurner,
        address _receiver2,
        address[] memory ycrvGauges,
        address[] memory partnerGauges,
        address[] memory discretionaryGauges
    ) public {
        _setYCrvGauges(ycrvGauges);
        _setPartnerGauges(partnerGauges);
        _setDiscretionaryGauges(discretionaryGauges);

        recipients.ybs = _receiver2;
        recipients.treasury = 0x93A62dA5a14C80f265DAbC077fCEE437B1a0Efde;
        recipients.remainderTarget = 0x794f80E899c772de9E326eC83cCfD8D94e208B49;
        FEE_BURNER = _feeBurner;

        CRVUSD.approve(address(REWARD_TOKEN), type(uint).max);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "!Owner");
        _;
    }

    modifier onlyAdmins() {
        require(msg.sender == owner || msg.sender == guardian, "!Admin");
        _;
    }

    /// @notice Split according to on-chain calculations.
    function executeSplit() external {
        require(
            approvedSplitCallers[msg.sender] ||
                msg.sender == owner ||
                msg.sender == guardian
        );
        (
            Split memory adminFeeSplits,
            Split memory voteIncentiveSplits
        ) = getSplits();
        _splitDepositAndSend(
            _claimAdminFees(),
            CRVUSD.balanceOf(FEE_BURNER),
            adminFeeSplits,
            voteIncentiveSplits
        );
    }

    /// @notice Supply manual split values to override on-chain claculations.
    function executeManualSplit(
        Split memory adminFeeSplits,
        Split memory voteIncentiveSplits
    ) external onlyOwner {
        uint total = adminFeeSplits.ybsRatio +
            adminFeeSplits.remainderRatio +
            adminFeeSplits.treasuryRatio;
        require(total == PRECISION, "adminFeeSplits sum !100%");
        total =
            voteIncentiveSplits.ybsRatio +
            voteIncentiveSplits.remainderRatio +
            voteIncentiveSplits.treasuryRatio;
        require(total == PRECISION, "voteIncentiveSplits sum !100%");

        _splitDepositAndSend(
            _claimAdminFees(),
            CRVUSD.balanceOf(FEE_BURNER),
            adminFeeSplits,
            voteIncentiveSplits
        );
    }

    /// @dev Allow admins to manually push crvUSD as admin fees. Nice to have in event
    ///      where admin fees might flow to old receiver.
    function depositAdminFeesAndSplit(
        uint _adminFeeAmount
    ) external onlyAdmins {
        CRVUSD.transferFrom(msg.sender, address(this), _adminFeeAmount);
        (
            Split memory adminFeeSplits,
            Split memory voteIncentiveSplits
        ) = getSplits();

        _splitDepositAndSend(
            _adminFeeAmount,
            CRVUSD.balanceOf(FEE_BURNER),
            adminFeeSplits,
            voteIncentiveSplits
        );
    }

    function _splitDepositAndSend(
        uint adminFeeAmount,
        uint incentiveAmount,
        Split memory adminFeeSplits,
        Split memory voteIncentiveSplits
    ) internal {
        incentiveAmount = incentiveAmount > PRECISION ? incentiveAmount : 0;
        uint total = incentiveAmount + adminFeeAmount;

        if (total == 0) return;
        if (incentiveAmount != 0) {
            CRVUSD.transferFrom(FEE_BURNER, address(this), incentiveAmount);
            incentiveAmount = (incentiveAmount * PRECISION) / total; // Ratio
        }
        if (adminFeeAmount != 0) adminFeeAmount = PRECISION - incentiveAmount; // Ratio
        total = _depositToVault(total);

        Recipients memory _recipients = recipients;
        _sendAdminFees(
            (total * adminFeeAmount) / PRECISION,
            adminFeeSplits,
            _recipients
        );
        _sendVoteIncentives(
            (total * incentiveAmount) / PRECISION,
            voteIncentiveSplits,
            _recipients
        );
    }

    function _sendVoteIncentives(
        uint _amount,
        Split memory splits,
        Recipients memory _recipients
    ) internal returns (uint amount) {
        if (_amount == 0) return 0;
        if (splits.ybsRatio > 0) {
            splits.ybsRatio = (splits.ybsRatio * _amount) / PRECISION;
            REWARD_TOKEN.transfer(_recipients.ybs, splits.ybsRatio);
        }
        if (splits.treasuryRatio > 0) {
            splits.treasuryRatio = (splits.treasuryRatio * _amount) / PRECISION;
            REWARD_TOKEN.transfer(_recipients.treasury, splits.treasuryRatio);
        }
        if (splits.remainderRatio > 0) {
            REWARD_TOKEN.transfer(
                _recipients.remainderTarget,
                REWARD_TOKEN.balanceOf(address(this))
            );
        }
        emit VoteIncentiveSplit(
            splits.ybsRatio,
            splits.treasuryRatio,
            splits.remainderRatio
        );
        return amount;
    }

    function _claimAdminFees() internal returns (uint) {
        return _getProxy().claimAdminFees();
    }

    function _sendAdminFees(
        uint _amount,
        Split memory splits,
        Recipients memory _recipients
    ) internal returns (uint) {
        if (_amount == 0) return 0;
        if (splits.ybsRatio > 0) {
            splits.ybsRatio = (splits.ybsRatio * _amount) / PRECISION;
            REWARD_TOKEN.transfer(_recipients.ybs, splits.ybsRatio);
        }
        // Note: Skip splits.treasuryRatio since it is effectively always hardcoded to 0.
        if (splits.remainderRatio > 0) {
            splits.remainderRatio =
                (splits.remainderRatio * _amount) /
                PRECISION;
            REWARD_TOKEN.transfer(
                _recipients.remainderTarget,
                splits.remainderRatio
            );
        }
        emit AdminFeeSplit(
            splits.ybsRatio,
            splits.treasuryRatio,
            splits.remainderRatio
        );
        return _amount;
    }

    function getBaseBalances() public view returns (BaseBalances memory base) {
        base.veTotal = yearnVeBalance();
        base.ybs = ybsBalance();
        base.lp = YCRV.balanceOf(POOL);
        base.partners = getPartnerVotes();
        uint recognizedPositions = base.ybs + base.lp + base.partners;
        uint ycrvTotalSupply = YCRV.totalSupply();
        require(recognizedPositions < ycrvTotalSupply, "PartnerBalanceTooHigh");
        base.loose = ycrvTotalSupply - recognizedPositions;
        base.unmigrated = unmigrated();
        base.untokenized = base.veTotal - ycrvTotalSupply - base.unmigrated;
        return base;
    }

    function getAdminFeeSplitRatios(
        BaseBalances memory base
    ) public view returns (Split memory splits) {
        if (onlyTokenized) {
            splits.ybsRatio =
                (PRECISION * base.ybs) /
                (base.veTotal - base.untokenized);
        } else {
            splits.ybsRatio = (PRECISION * base.ybs) / (base.veTotal);
        }
        splits.remainderRatio = PRECISION - (splits.ybsRatio);
    }

    function getVoteIncentiveSplitRatios(
        BaseBalances memory base
    ) public view returns (Split memory splits) {
        uint nonVoteIncentiveVotes = getDiscretionaryVotes() +
            getYcrvVotes() +
            getPartnerVotes();
        uint totalVoteIncentiveVotes = base.veTotal - nonVoteIncentiveVotes;
        if (totalVoteIncentiveVotes == 0) return Split(0, 0, PRECISION);
        splits.ybsRatio =
            (base.ybs * ybsVoteIncentiveRatio) /
            totalVoteIncentiveVotes;
        splits.treasuryRatio =
            (PRECISION * (base.untokenized - getDiscretionaryVotes())) /
            totalVoteIncentiveVotes;
        splits.remainderRatio =
            PRECISION -
            splits.ybsRatio -
            splits.treasuryRatio;
    }

    /// @notice Preview split ratios.
    function getSplits()
        public
        view
        returns (Split memory adminFeeSplits, Split memory voteIncentiveSplits)
    {
        BaseBalances memory base = getBaseBalances();
        adminFeeSplits = getAdminFeeSplitRatios(base);
        voteIncentiveSplits = getVoteIncentiveSplitRatios(base);
    }

    /// @dev Deposits full balance of crvUSD.
    /// @param _amount Amount to deposit.
    /// @return amount Total balance of reward token.
    function _depositToVault(uint _amount) internal returns (uint) {
        if (_amount == 0) return 0;
        return REWARD_TOKEN.deposit(_amount, address(this));
    }

    function getDiscretionaryVotes() public view returns (uint) {
        return sumGaugeBias(discretionaryGauges);
    }

    function getPartnerVotes() public view returns (uint) {
        return sumGaugeBias(partnerGauges);
    }

    function getYcrvVotes() public view returns (uint) {
        return sumGaugeBias(ycrvGauges);
    }

    function unmigrated() public view returns (uint) {
        uint migrated = YVECRV.balanceOf(address(YCRV));
        return YVECRV.totalSupply() - migrated;
    }

    function ybsBalance() public view returns (uint) {
        return (YCRV.balanceOf(address(YBS)) + YCRV.balanceOf(address(VAULT)));
    }

    function yearnVeBalance() public view returns (uint) {
        return IERC20(VE).balanceOf(VOTER);
    }

    /// @dev Sum all active bias (veCRV contributed by Yearn) for a list of gauges.
    function sumGaugeBias(address[] memory gauges) public view returns (uint) {
        uint biasTotal;
        uint currentWeekTimestamp = getCurrentWeekStartTime();
        for (uint i; i < gauges.length; i++) {
            IGaugeController.VotedSlope memory slopeData = GAUGE_CONTROLLER
                .vote_user_slopes(VOTER, gauges[i]);
            uint end = slopeData.end;
            if (currentWeekTimestamp + 1 weeks < end)
                biasTotal += slopeData.slope * (end - currentWeekTimestamp);
        }
        return biasTotal;
    }

    function getCurrentWeekStartTime() public view returns (uint) {
        return (block.timestamp / 1 weeks) * 1 weeks;
    }

    /// @notice Manually specify gauges used for yCRV voting.
    function setYCrvGauges(address[] memory _gauges) external onlyAdmins {
        _setYCrvGauges(_gauges);
    }

    function _setYCrvGauges(address[] memory _gauges) internal {
        require(_validateGaugeList(_gauges), "Invalid gauge list");
        delete ycrvGauges;
        ycrvGauges = _gauges;
        ycrvGaugesLength = _gauges.length;
    }

    /// @notice Manually specify gauges used for partner voting.
    function setPartnerGauges(address[] memory _gauges) external onlyAdmins {
        _setPartnerGauges(_gauges);
    }

    function _setPartnerGauges(address[] memory _gauges) internal {
        require(_validateGaugeList(_gauges), "Invalid gauge list");
        delete partnerGauges;
        partnerGauges = _gauges;
        partnerGaugesLength = _gauges.length;
    }

    /// @notice Manually specify gauges that Yearn elects to use its own veCRV balance to vote for.
    function setDiscretionaryGauges(
        address[] memory _gauges
    ) external onlyAdmins {
        _setDiscretionaryGauges(_gauges);
    }

    function _setDiscretionaryGauges(address[] memory _gauges) internal {
        require(_validateGaugeList(_gauges), "Invalid gauge list");
        delete discretionaryGauges;
        discretionaryGauges = _gauges;
        discretionaryGaugesLength = _gauges.length;
    }

    function sweep(IERC20 token, uint amount) external onlyOwner {
        token.safeTransfer(owner, amount);
    }

    function setRecipients(
        address _ybs,
        address _treasury,
        address _remainderTarget
    ) external onlyOwner {
        require(
            _ybs != address(0) &&
                _treasury != address(0) &&
                _remainderTarget != address(0),
            "Invalid target"
        );
        recipients.ybs = _ybs;
        recipients.treasury = _treasury;
        recipients.remainderTarget = _remainderTarget;
    }

    function setApprovedSplitCaller(
        address _caller,
        bool _approved
    ) external onlyOwner {
        approvedSplitCallers[_caller] = _approved;
    }

    function setOnlyTokenized(bool _onlyTokenized) external onlyOwner {
        onlyTokenized = _onlyTokenized;
    }

    function setOwner(address _owner) external onlyOwner {
        require(_owner != address(0), "zero address");
        require(_owner != owner, "already set");
        owner = _owner;
        emit OwnerSet(_owner);
    }

    function setGuardian(address _guardian) external onlyOwner {
        require(_guardian != address(0), "zero address");
        require(_guardian != guardian, "already set");
        guardian = _guardian;
        emit GuardianSet(_guardian);
    }

    function _getProxy() internal returns (IProxy) {
        return IVoter(VOTER).strategy();
    }

    /// @dev Prevents duplicates and unapproved gauges
    function _validateGaugeList(
        address[] memory _gauges
    ) internal returns (bool) {
        for (uint i = 0; i < _gauges.length; i++) {
            for (uint k = 0; k < i; k++) {
                // Loop through only the part of the array that has been processed
                if (i != k && _gauges[i] == _gauges[k]) {
                    return false;
                }
            }
            // Reverts if Curve gov has not approved this address.
            try GAUGE_CONTROLLER.gauge_types(_gauges[i]) {} catch {
                return false;
            }
        }
        return true;
    }
}


// File: contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "contracts/token/ERC20/IERC20.sol";
import "contracts/token/ERC20/extensions/IERC20Permit.sol";
import "contracts/utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File: contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

