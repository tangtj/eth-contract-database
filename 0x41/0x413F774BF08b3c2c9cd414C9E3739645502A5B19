
// File: contracts/mythics.sol
// SPDX-License-Identifier: No License
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/// @title MythicsOfTheMultichain
/// @notice ERC-721 NFT contract for the Mythics of the Multichain collection, which are 16x16 pixel art pieces that accrue points over time that are claimable by the owner through the MythicTreasury contract.
/// @author Matto (AKA MonkMatto), 2024. More info: matto.xyz
contract MythicsOfTheMultichain is ERC721Royalty, Ownable(msg.sender) {
    constructor() ERC721("Mythics of the Multichain", "MYTHICS") {}
    uint256 private _nextTokenId;
    using Strings for string;

    bool public mintActive;
    uint96 public royaltyBPS;
    uint256 public mintFee;
    address public mythicTreasuryContract;
    mapping(uint256 => uint256) public pointAccrualStartTime;
    mapping(uint256 => uint256) public totalPointsClaimed;
    string public description;
    string public chainName;
    string public chainColor;
    string public blendMode;
    string public website;
    string[] public chain;

    // Each element in the art array represents the pixel brightness of a 16 x 16 pixel image (0 = darkest...f = brightest) in rows going left to right, top to bottom. This data is then combined with the chain color through a blending mode to create the final art.
    string[] public art = [
        "0000000000000000000b000b8880000000ddd0ddbb88000000dfd0ddbbb8700000dfd0db00077000000d00b0f0f0700000030088000700000008000777770000000000787778000000dd00788887000000dd000888800dd00000000dfff00dd00006007777770000000800888888000000080888888800000000000000000000",
        "0000000000000000000008bd000078700008888bbb0003000077777777707870000000000000030000030f0f0300060000036000730006000000667bb000060000000000000006000007666667000000006638883660bb00008837773360bb0000663333300000000000bdddb000060000006606600006000000000000000000",
        "000000000000000000000000000080b000b0800888000b00000b00877780000000000070007000000000000f0f000060006000700070000000008007770080000000bb00000bb00000000b87078b00000b080037073000000080003333300300000000773770000000000b66776b00000000bdddbbbbb0000000000000000000",
        "0000000000000000000d00077736700000d6d0dd7f700000000d0000d77300f0030000dd77700fd000000000788ffdf00f00ffff6666dfd00dffddddd888fd0000ddfffffd666000000fdddd00887000000000000066600000000d000888000000800000666000600006807677000000030000000000d0000000000000000000",
        "00000000000000000000000ddd000000000f00d000d00000000f0d0bbb0d000000df00bbbbb0d0000d00d0b000bb00000b00b07f0fbb000000bd007000bb0000000f000777b000000000000666b0000000bb000bb870bb0000bb00088880bb000000007777770000000b077778877000000b000000000000000b008b08b00000",
        "000000000000000000000000000000000008bbd00000000000888bdb0f000f000088000b0d0f0d000080f0f00d0d0d00000000000bbbbb00000bbbbb000800000063bb8b0008000000638b836000000008883838880dd00006666366660dd000000bdfdb00000000000860680008000000066066000800000000000000000000",
        "00000000000000000000000006000000000000f00000b00000b00f0b00000b000000006000000b00000000000666060007700b00777bbb0000760b0b67b6f6f00066867686b6f6f000676b6b668bbbb0006363686b67777000000373b38300000000bb7383000000000bbbbb00000f0000000000000000000000000000000000",
        "0000000000000000000d00000bb00000000d00006700000000b00d000770000000bbb0006666000000b000077766000000700070007000000000000f0f0000000dd0008000800dd00dd000bb0b700dd00000008b88730000007003738736600000600683738800000060886636666000006088876677b0000000000000000000",
        "0000000000000000000707000d770000003737006dd770000730000777333300000b8330662f2f20008883306667777006666633066000b0000036633007b0000bb00066333000000b8b00668880bb000f8f00863360f8b000000888836008f00000bb8668bb00000000bbb006bdd000000fdd000bddf0000000000000000000",
        "0000000000000000000dd0066600000000fdd02f2f20000000ff002f2f20000000ff00622260000000df00066600888000dd00700070ddd00000000bdb00dfd000dd00707070fff000dd000bdb00dfd0000000007000ddd00008000b0b006860000d007000700600000000b000b0000000000070000700000000000000000000",
        "000000000000000000000000b00000000000dd00000fd000000667d000fddb000067f70d0dd000b00d6777000dd0d0000003333000bd0f0000003366860b0d0000003676b66b00000000886b67670000000006768686600000b00008677bbb00070b00000300000000700000060000700000000dddd000000000000000000000",
        "000000000000000000000dbb70000000007067776700000000003f3f3600700000003f3f360000000b00866778000dd0000008888b008bd00000003bb70080d00dd003bb666000000db808663b6000300d080663bb76b00000000776b76638000000bb6873706000000873670670070000080060060000000000000000000000",
        "00000000000000000bbb00000000bbb00888b003000b888000088800008880000bb7008836077bb000770bbbb360770000700bddb363070000000bddb3830000000000bb3383000000dd000338800dd000dd000666600dd000000088008000000300008800880030000000088008800000007000000000000000000000000000",
        "00000000000000000000000bb00000000300008bbb00000000600888bbb0000000060680008800000000060f0f080000000066000006000000006360006000000000833666000000000088333060000000006886860600b000066688880030d0000666688800ffd003006888800fff00003666600dfff0000000000000000000",
        "0000000000000000000000000000000000d000030000000000000000066777000000000076637f700000300077d077700000000007b000b006000077007d0b0000000377777b000000b0033dbdbd00000b0006b00db000d00830007d000000000063677bb0000800000dbdbd0006000000000000000000000000000000000000",
        "000000000000000000d0000d0000000000d0770d00fd0000000388800f33d000003f3f370d33b0b00088787800bb00000bbb88870000000000007770000bb0700008888000dbbb00000887300dd0b800000368880000880000088873000878000700368878787800000008868688600000b00068688300000000000000000000",
        "000000000000000000000ddddd000b000000d000ddb0307000b00f0f0bbb030007030f0f0b8b000000308000888b80b000000888080060000000066600600000030088666000f0f0000ddb866000d0d0006668860000bbb000ddbb8660660b00006668886668b000000ddbb8888b000000006688db8000000000000000000000",
        "00000000000000000000d00000d000f0000d0000000d0ff0000dd088b0dd0ff00000dd788dd00dd00000677777600600000073f2f3700b00000071f1f1700b0000032677762300000023326662330dd00030033333300dd00000068bb86000000dd0030003000b000dd0003033000b0000008660066006000000000000000000",
        "0000000000000000000000000000000000000000000000000066bd00007070000600bdd03376760030000000737763003000000337f7f630030bbbb76773766000b88883367776300b88788836363300088767887636030007763667777300000880330008830000078030000883300000bb330000bb33000000000000000000",
        "000000000000000000000dffffd000000600d888888d00600bb0880000880bb0066080f00f0806600bb080f00f080bb00660880000880660000008888880000006000777777000600bb0007667000bb00bb0006666000bb000000088880000000800088888800080060006888860006008006666666600800000000000000000",
        "00000000000000000000b00bb00b00000bb0bb00808b0bb00b000b70870000b000b7787877087b000000807000800000000b800f0f0000000000008000800000000000088800000000000088b000dd00000dd088dd00dd00000dd0088bb000000800000088dd00000880000888bb000000888bdbdbdd00000000000000000000",
        "0000000000000000000068dd000070000088bbbdd000700000067bbbd000000000888000d000dd0000070f0f0080dd00006000000880000000006666836077000008233336008800008886666000bb00088622333000bb000000688860008b000dd0bdfdb80088000dd088008800770000066000660070000000000000000000",
        "0000000000000000000000000000000000000000000000000000088000880000000003630363000000ff03077703ff000f8bf00f7f0fb8f00b08bf0777fb80b00d080b6373b080d0000006663660000000003b8666b3000000033683336330000002366226332000000020b00b02000000002080080200000000000000000000",
        "00000000000000000000008d800000000000088d880000000000070007000000000000f0f000fd0000000700070f73f000000b3b3b0d73f00000007b7000df000000bd000db0000000070bdfdb07007000b007737700b7000000038b6600000000000338b70000000000b86666700000000bb888777700000000000000000000",
        "00000000000000000000008000000000000008880000000000006333600000000000888880000000000b00800b000000000b0f0f0b00000000080000080000000000660660778bb0000d00000d8000b000d688b88680d0800008bbbbb080f0700dd067b76080d0700dd088688080007000008080800777000000000000000000",
        "0000000000000000000d0b00660b000000fd0b777bbb000000ff00f7f770000000dd06677330000000bb066638880000000b0000bb8b300000060003bb8b3600000000638888000000ddd06038830dd0000dd00066660dd000000000333300d0000300066666600000060008800880000006000bb00bb0000000000000000000",
        "0000000000000000000000000000000000f000f00000ff0000b000b000ffbdd000b888b00fbdbdd0000f8f83fdbdb0d0000888837dbd000000006663676000b000000337676700000000fdb767676000000fbdb00076600000fdb000b007600000fd00000b660000000dd0b00000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000077700000000000077f7f0000000000677777000000000066b77600000000006dddd600000000003bbbb30b000000003ddd3000b00000003bb30000b0000003bdd3000880000077dbb6336600000677dd6673300000086666338800000000787878700000000000000000000000",
        "00000000000000000000000000000000000888b000b00030008788dd000060000066778dd000000000677888bb006600000677888b0000600b0667f3f8000060000067888808b6000060077880000b00060300077766b00006003388888b03000060bb8030000030000b0000306060300000bb80066066000000000000000000",
        "0000000000000000000000000000070000000bbd000006b00000b888d000b700000878767b0006b0007777766660b70000677766dd6006b00066766bbbb0b6000066666bfbf006b0006363638830030000033333333000000bb066bb6000bb000bb003330000bb00000030003000000000066000660003000000000000000000",
        "000000000000000000000000000000000000000000000f0000000000000f0ff000f00000000ffbb00bf0f000000bbbb00bffb000000bbbb00bbbb000000bb7700bbbb0f0f007770007bbb00888860300007770888866630000030006666830000000366080808330000000306060603000000000000000000000000000000000",
        "0000000000000000000000000fffddd00b000000fbbbbb000dd00000d888800000b77000dbbbbb00007887000d8888000f3f7600dbbbb0000777637db888000006600787bbb660000000367767776800000336666678868000300700036666700066070000300770000006000030006000006600066006600000000000000000",
        "000000000000000000000b0000b000000000b008870b00000000b877788b0000003300f7f770000003fd30777880000003db3008778300000033003773733000000003638336330000b0b3683768030000bbb0b6b6b603000000006768678bb000000036763080b0000000330330000000000066066000000000000000000000",
        "000000000000000000000000007700000300bbbdd007b000003666666000bd000307b000d0000d0000070f0f00000d000007700000000d000000bbbb80ff0d0008b82b3b00ff0df008bbb66600000d000006223300000d000000688860000d00000022222000bd00000088008007b00000006000607700000000000000000000",
        "00000000000000000000fddbb0000000000fff00bb000d00000dd0000b0f0000000dd0f0f00f0f00000bb0000b0fdd70000bb7000b0d0bb00000b777b00dd0d00007b8777000bf0000077788700000000dd07888800ddd000dd0bdddb00dd0000006666660000000006666666600000000777777777000000000000000000000",
        "000000000000000000000222220000000000366666630000000776666667700000b67700077760000bb860fff0768b0008bb86000678bbb0088886666678888006888033330886600733006333033770077700066607777000000033330700000ddd00666600ddd00ddd0b6006b0ddd00ddd0db00bd0ddd00000000000000000",
        "000000000000000000000007700000000000007777000000000000f3f6000000000000f3f607000000000706600000000000000000d07000000870d0b00778000066700006706600007660b66730677000b8003dd33008b00077006336300070000000663660000000dd076666600dd000dd0dbb0bbd0dd00000000000000000",
        "00000000000000000b00000bb00000b00b00b07dd70b00b008b0b0f77f0b0b800bb7807dd7087bb00087700bb00778000033000880003300006600bddb0066000066008888006600007700bddb0077000078068888608700008b87bddb78b8000bb8b87bb78b8bb00bb8bd7337db8bb00bb7873333787bb00000000000000000",
        "00000000000000000bb0bb000000000000b07b680000000000077763d000000000f3f7363700000000777763337b0000003330366766b00000330003777767000000003bb660bb00000033388860bb000ddb3307777000000000000b873300000000007770366000000000b800067700000000b8000077000000000000000000",
        "000000000000000000007700000000000007f77000dddd0000b777300d8bb00000bb0330d8dddd0000b0066d8bbb00000000066d8dd07000000067bd8d877000000b777dd7687000000b876666b770000007768bbb670000000087666670000000000b88d7000000000000d0d0dd000000000000070d00000000000000000000",
        "00000000000000000088880000000000083336bb00000000030003b80000db0000d0d08bb00dd080000b0b80000dd00006bbbb000000bb00003b336000000bb00003366887877860006668868686883000000368386886000bb00383868863000bb000000377800000000bb000b0bb0000000bb00bb00b000000000000000000",
        "000000000000000000000000000000000000d00bb00d00000dd0d0bbbb0d0dd000bbd0bffb0dbb00078bd0bffb0db8700070b00dd00b07000000bb0000bb000000000777777000000dd000bbbb000dd00dd0700bb0070dd0000660077006600000066077770660000000006666000000000008bddb8000000000000000000000",
        "00000000000000000070000bbbb0000000300077777b000000b0003f3f3700000030003f3f3770000070000777007000003000000000000000b000778bb0070000000338bbb800000dd08b36bb6770000dd00b766633000000000077b3300dd0003000036b000dd0007000076660000000300077777700000000000000000000",
        "000000000000000000db0000000000000bbbb000088888000b0b680088ddddd0000688088dbbbbb000088788dbdddd0000b87dddbdbbb000007776dbdbdd000000b66776bd000b0000077bb8876000b0000b666888760080000670bb888736000003300668870000000660003667000000770007777000000000000000000000",
        "00000000000000000000000bbb0700000ff00d0000000ff00ddf00088800fdd00dddf00bbb0fddd000ddf00bbb0fdd000ffddf333ffddff0000dd36666ddd00000fdd36886dddf000000d36666d00000000003688000007000d000366000d0000000000880070d00000000060000700000070080000000000000000000000000",
        "00000000000000000000077770000000000072223700000000b03f2f2300bb000b70722237077bb007360777706277700666600000663770026603333036666002330883880332200776066366306670070003636330000000000333333000000ddd00666600ddd00ddd00000000ddd00ddd07760670ddd00000000000000000",
        "0000000000000000000000000000000000db0000000000000ddbb000000000000d00700000000000000070000bbbdd0000070000dddb770000300000bbb3f3f00300000dddd6770003bddb86bbbb66000d8868866ddbb0000863666666bbd000063386868668d000003333863306880000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000b000bddbb000000b000707770b08800700d00bdd078800030000bbbb778800003b88bb783d7d0000b877d78837770000777dd777338b000667777777633000066670033066000000663033007600000066202007700000000600000b0000000000000000000000",
        "000000000000000000000000000000000b000077700600000000072227000000000002f2f2000f00000802f2f200b0f00000072227000b0000003377733000000603330066330000000660ff0677008000bb0fffd0bb000000bb0fffd0bb0000000660dd06666000000dbb00667bdd0000bbbb76677bbb000000000000000000",
        "0000000000000000000000000000000000dd000000000000000dbb00000ffff00d00bfb000fbbbb00dd00bb30fb7770000bbbb366b7bb0000000b7667b0000000000066bb67000000000778368867000000000078b6b6b0000000077068683000000000000003660000000000b0007700000000000bb88000000000000000000",
        "0000000000000000000000000fbb000000000000fbb0fff0000b0b00bb0fdd0000008783b0fdd00000b877333fdd0000087d78637778600003777688777786000777077777777b00000037678867760000033760666776000003076000367600000030b0003060000000000b0030bb0000000000000000000000000000000000",
        "000000000000000008b00bdbbbdb000008800bdbfbdb000007770bdbbbdb000000770bdbfbdb0000003000bbbbb0000000700700000700000000070f0f07000000bb00700070000000bb0007770000000000078888700bb00070077788b70bb0007000887778000000700bb8878bb0000070bbbb888bb0000000000000000000",
        "0000000000000000000000bbbb00000000000677776000000ff00b0000b00ff00ff007f00f700ff00880070bb07008800066007bb7006600000880000008800000000088880000000ff8803663088ff00000008888000000000880766708800000880038830088000ff0008668000ff00ff0088008800ff00000000000000000",
        "00000000000000000000000000000000008030bbb030800000bb0fffff0bb000000b0000000b000000000ff0ff000000000308f0f803000000060b808b06000000bb70b0b07bb000007b7700077b70000667dfffffd7660000000677760000000dd00bbbbb00dd000dd0b67776b0dd000000ddb0bdd000000000000000000000",
        "0000000000000000000000000000000000dddd000ddddd000d080d000d0800d00d000d6666008000000003bb3330000000000bddb660000000000bffb3330000000033bb338330000008300888838000008380066660330000880088008088000ddd00bb00b08dd00d0d00b000b0d0d000000880008800000000000000000000",
        "0000000000000000000000000000000000bddd0000000000000888dd000000000fffff88b0077bf00bbbbbff803f700000ddddddf8377bd0000bbbbbf806660000000dddf8038000000000bbf863300000066767f6666000008378673768000006807070000b000003000b0b0000b00000760000000000000000000000000000",
        "000000000000000000000000000000000000006000ffddd000fd00000fbbbb000fb7b000db7dd0000d0bb37d7bb00000000076868630007000037b0006730360000736b0b676767006006777700676000000673330000000000b83d3d700300000000733300603000000b8877000600000800080700000000000000000000000",
        "00000000000000000000000dfd000000000000b000b0000000bb000777000bb000888070007088800088770d0d077880000677700077760000066007770066000bb700bdbdb007bb00870776b6770780000707066607070000000006760000000000bb07770bb0000000db00700bd00000000000000000000000000000000000",
        "000000000000000000000bbb0000bb000008bbbbb00bffb00088bbdddd0bffb0088880000d00bb0008880f0f0b00080008080f0f08000b0000008000800008000007788870000b000008777770000000008888888800dd000088b88bb800dd00008b88888800000000bbb88bb8000b0000bbbbbbbb0008000000000000000000",
        "0000000000000000080080008b00b000066070086000060000333b08660030000000786767760000000377f777f70b00006007ff7ff73000000b00777776000000000072772700000000072227270000000006222222b00000000682772780000000376b86663300000b677667bb670000660336777077000000000000000000",
        "0000000000000000000008d8d000f0000000b8d8db00ff000008b0000000ff0000b808888000ff0000b088000800dd00008088f0f800dd00000078000700bb00000007707700bb0000880000000000000bb8bb888b0dd0000000b88b880dd0000dd00bbbb00000000dd077777700b000000088808800b0000000000000000000",
        "0000000000000000000000000000000000000000ff0000000ff0000fdd0000000ddff00fd067770000dddf0d067f77000000dd70b77f70000000007d687767000000ddd888670000000b868686760000008768877770300007880677607030000b70bb7300b003000bb0b033000b000000000000000000000000000000000000",
        "00000000000000000000000000000000000b00000b000b00000b07777b0000000d0bb777bb70000000007700077080b0008070f0f0700000000070f0f07000000bb007000770bb000bb006666660bb0000000777777600000000688bb88600000006668886666000000666667777770000bbddddddddbbb00000000000000000",
        "000000000000000000ddbb8dd00000000d2222880000000002f2f2bdd000000002b2b28000000000002222bb7bddd000008b8b867bbdbd000038383667b7b7b00003336676766770000666b777b7b760003336bb7b7b7b6003000b67b76b6b0003003b03b33b0b0006006b06b30d0d0006006b06b30d0d000000000000000000"
    ];
    string[] public name = [
        "Slash the Lightbringer",
        "Gazlittatoo the Wanderer",
        "Villager the Vampire Lord",
        "Dragonblaze the Phoenix",
        "Point the Dwarf Queen",
        "Neptune the Trident Guy",
        "Koiata the Namazu",
        "Firemageddon the Wizard",
        "Psychic the Werewolf",
        "Cobra the Skeleton Warrior",
        "Chickenbutt the Cockatrice",
        "Ghost the Ghost",
        "Tootoo the Harpy",
        "Grimmie the Sleepy Reaper",
        "Lick the Dragon",
        "Slitherwah the Shifty Seahorse",
        "Boat the Siren",
        "Bub the Demon",
        "Fiing the Manticore",
        "Code the Portal Mage",
        "Hydra the Gorgon",
        "Demo the Slayer",
        "Coffee the Ramgoyle",
        "Trumble the Sorceror",
        "Puzzle the Paladin",
        "Ramulade the Mooseataur",
        "Bite the Camzotz",
        "Shake the Big Snake",
        "Superpus the Kraken",
        "Swords the Hunched Goblin",
        "Clamps the Karkinos",
        "Rip the Flying Unicorn",
        "Oracow the Bull Prophet",
        "Hyudra Night the Archer",
        "Attack the Fire Mage",
        "Crumble the Golem Cyclops",
        "Strongosaur the Sasquatch",
        "Kewool the Robot Crab",
        "Whither the Minotaur",
        "Chickenmacaroni the Dodo",
        "Money Spice the Monkey-Cat",
        "Gem the Cultist",
        "Hammerhead the Elf",
        "Gyro the Vulture-Dog",
        "Splotch the Fairy King",
        "Eyeball the Robot Boxer",
        "Kade the Sphinx",
        "Vroomoose the Headless Horseman",
        "Noname the Diviner",
        "Magknow the Flying Alligator",
        "Popuh the Flying Hamster",
        "Butt the Shaman",
        "Arachne the Spider",
        "Nightso the Enchanted Armor",
        "Imposter the Flying Monkey",
        "Mwgawing the Griffin",
        "Nicholas the Abomination",
        "Winger the Fairy Queen",
        "Smack the Sleepy Gnome",
        "Eatchew of the Dark Forest",
        "Pebble the Knight",
        "Rex the Capybara Chimera",
        "Samurai Slug the Wee Demon",
        "Slugzo the Daddy Shortlegs"
    ];

    /// @notice Mints tokens to an address, requires minting to be active and the correct fee to be paid
    /// @param _to The address to mint the token to
    function safeMint(address _to) external payable {
        require(_nextTokenId < 64, "All tokens have been minted");
        if (mintActive) {
            require(msg.value == mintFee, "Insufficient funds");
        } else {
            require(msg.sender == owner(), "Minting is not active");
        }
        _safeMint(_to, _nextTokenId);
        _nextTokenId++;
    }

    /// @notice Claims Mythic Points for a token and restarts the cooldown
    /// @param _tokenId The token ID to claim Mythic Points for
    function claimMythicPoints(uint256 _tokenId) external returns (uint256) {
        require(
            msg.sender == mythicTreasuryContract,
            "Only the point claim contract can call this function"
        );
        uint256 mythicPoints = getMythicPoints(_tokenId);
        if (mythicPoints > 0) {
            totalPointsClaimed[_tokenId] += mythicPoints;
            pointAccrualStartTime[_tokenId] = block.timestamp;
        }
        return mythicPoints;
    }

    /// @notice Checks the cooldown time remaining for a token
    /// @param _tokenId The token ID to check the cooldown for
    function getCooldownTimeRemaining(uint256 _tokenId) public view returns (uint256) {
        uint256 cooldownEnd = getCooldownEnd(_tokenId);
        if (block.timestamp >= cooldownEnd) {
            return 0;
        } else {
            return cooldownEnd - block.timestamp;
        }
    }

    /// @notice Checks the cooldown end time for a token
    /// @param _tokenId The token ID to check the cooldown for
    function getCooldownEnd(uint256 _tokenId) public view returns (uint256) {
        return pointAccrualStartTime[_tokenId] + 7 days;
    }

    /// @notice Checks the Mythic Points claimable for a token by the current owner
    /// @param _tokenId The token ID to check the Mythic Points for
    function getMythicPoints(uint256 _tokenId) public view returns (uint256) {
        require(_tokenId < _nextTokenId, "Token does not exist");
        if (getCooldownTimeRemaining(_tokenId) == 0) {
            return ((block.timestamp - pointAccrualStartTime[_tokenId]) / 3600) * 100; // 100 points per 3600 seconds (1 hour)
        } else {
            return 0;
        }
    }

    /// @notice Assembles the SVG for a token
    /// @param _tokenId The token ID to assemble the SVG for
    function getSVG(uint256 _tokenId) public view returns (string memory) {
        string memory svg = string(
            abi.encodePacked(
                '<?xml version="1.0" encoding="utf-8"?><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 1600">',
                "<desc>Mythics of the Multichain, by Matto",
                ", Token ID: ",
                Strings.toString(_tokenId),
                ", Name: ",
                name[_tokenId],
                " (",
                chainName,
                "), Project Website: ",
                website,
                "</desc>",
                '<defs><filter id="colorTint" x="0" y="0" width="100%" height="100%"><feFlood flood-color="',
                chainColor,
                '" result="floodFill"/><feBlend in="SourceGraphic" in2="floodFill" mode="',
                blendMode,
                '"/></filter></defs>',
                '<g filter="url(#colorTint)">'
            )
        );
        for (uint i = 0; i < 256; i++) {
            uint x = i % 16;
            uint y = i / 16;
            string memory char = _getCharacter(art[_tokenId], i);
            string memory color = string(
                abi.encodePacked("#", char, char, char)
            );
            svg = string(
                abi.encodePacked(
                    svg,
                    '<rect x="',
                    Strings.toString(x * 100),
                    '" y="',
                    Strings.toString(y * 100),
                    '" width="100" height="100" fill="',
                    color,
                    '" stroke="',
                    color,
                    '"/>'
                )
            );
        }
        svg = string(abi.encodePacked(svg, "</g></svg>"));
        return svg;
    }

    /// @notice Lists the chains that tokens have been deployed on
    function listChains() public view returns (string memory) {
        string memory chains = "\\n\\nOfficial Deployments:\\n";
        for (uint i = 0; i < chain.length; i++) {
            chains = string(abi.encodePacked(chains, chain[i], "\\n"));
        }
        return chains;
    }

    /// @notice Lists the tokens owned by an address
    /// @param owner The address to list the tokens for
    function listOwnedTokens(
        address owner
    ) external view returns (uint[] memory) {
        uint256 ownerTokenCount = balanceOf(owner);
        uint[] memory ownedTokens = new uint[](ownerTokenCount);
        uint256 counter = 0;
        for (
            uint256 i = 0;
            i < _nextTokenId && counter < ownerTokenCount;
            i++
        ) {
            if (ownerOf(i) == owner) {
                ownedTokens[counter] = i;
                counter++;
            }
        }
        return ownedTokens;
    }

    /// @notice Token URI function for ERC721
    /// @param _tokenId The token ID to get the URI for
    function tokenURI(
        uint256 _tokenId
    ) public view override returns (string memory) {
        require(
            _tokenId < _nextTokenId,
            "ERC721Metadata: URI query for nonexistent token"
        );
        string memory base64SVG = string(
            abi.encodePacked(
                "data:image/svg+xml;base64,",
                Base64.encode(bytes(getSVG(_tokenId)))
            )
        );
        uint256 cooldown = getCooldownTimeRemaining(_tokenId);
        string memory combinedDescription;
        if (cooldown == 0) {
            combinedDescription = string(
                abi.encodePacked(
                    "\\nClaimable Mythic Points: ",
                    Strings.toString(getMythicPoints(_tokenId))
                )
            );
        } else {
            combinedDescription = string(
                abi.encodePacked(
                    "\\nCooldown time remaining: ",
                    Strings.toString(cooldown),
                    " seconds"
                )
            );
        }
        combinedDescription = string(
            abi.encodePacked(
                description,
                listChains(),
                combinedDescription
            )
        );
        string memory uri = string(
            abi.encodePacked(
                '{"artist": "Matto", "name": "',
                name[_tokenId],
                " (",
                chainName,
                ')", "description": "',
                combinedDescription,
                '", "external_url": "',
                website,
                '", "image": "',
                base64SVG,
                '", "attributes": [{"trait_type": "Chain", "value": "',
                chainName,
                '"}, {"trait_type": "Mythic Points Claimed", "value": ',
                Strings.toString(totalPointsClaimed[_tokenId]),
                '}]}'
            )
        );
        return
            string(
                abi.encodePacked(
                    "data:application/json;base64,",
                    Base64.encode(bytes(uri))
                )
            );
    }

    /// @notice Returns the total supply of tokens
    function totalSupply() external view returns (uint256) {
        return _nextTokenId;
    }

    /// @notice Allows contract owner to add a chain to the list of deployments
    /// @param _chain The chain to add to the list of deployments
    function addChain(string memory _chain) external onlyOwner {
        chain.push(_chain);
    }

    /// @notice Allows contract owner to edit a chain in the list of deployments
    /// @param index The index of the chain to edit
    /// @param _chain The new chain to replace the old chain
    function editChain(uint index, string memory _chain) external onlyOwner {
        chain[index] = _chain;
    }

    /// @notice Allows owner to set the chain details
    /// @param _chainName The name of the chain
    /// @param _chainColor The color of the chain to be applied to the art
    /// @param _blendMode The blend mode to be applied to the art
    function setChainDetails(
        string memory _chainName,
        string memory _chainColor,
        string memory _blendMode
    ) external onlyOwner {
        chainName = _chainName;
        chainColor = _chainColor;
        blendMode = _blendMode;
    }

    /// @notice Allows owner to set the contract details
    /// @param _mintFee The fee to mint a token, in Wei
    /// @param _royaltyBPS The royalty basis points to be applied to the contract
    /// @param _mythicTreasuryContract The address of the Mythic Treasury contract
    function setContractDetails(
        uint256 _mintFee,
        uint96 _royaltyBPS,
        address _mythicTreasuryContract
    ) external onlyOwner {
        mintFee = _mintFee;
        require(
            _royaltyBPS <= 1000,
            "Royalty BPS must be less than or equal to 1000"
        );
        royaltyBPS = _royaltyBPS;
        require(
            _mythicTreasuryContract != address(0),
            "Invalid address for Mythic Claim Contract"
        );
        mythicTreasuryContract = _mythicTreasuryContract;
        _setDefaultRoyalty(mythicTreasuryContract, royaltyBPS);
    }

    /// @notice Allows owner to set the main description
    /// @param _description The new description to be set
    function setDescription(string memory _description) external onlyOwner {
        description = _description;
    }

    /// @notice Allows owner to set the website
    /// @param _website The new website to be set
    function setWebsite(string memory _website) external onlyOwner {
        website = _website;
    }

    /// @notice Allows owner to toggle minting
    function toggleMinting() external onlyOwner {
        mintActive = !mintActive;
    }

    /// @notice Allows owner to withdraw contract balance
    function withdraw() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    /// @notice Ovveride function to update the points accrual start timestamp on ownership update
    function _update(
        address _to,
        uint256 _tokenId,
        address _auth
    ) internal override returns (address) {
        address from = super._update(_to, _tokenId, _auth);
        pointAccrualStartTime[_tokenId] = block.timestamp;
        return from;
    }

    /// @notice Internal function to return a specific character from a string
    /// @param _str The string to get the character from
    /// @param _index The index of the character to get
    function _getCharacter(
        string memory _str,
        uint _index
    ) internal pure returns (string memory) {
        bytes memory strBytes = bytes(_str);
        bytes memory result = new bytes(1);
        result[0] = strBytes[_index];
        return string(result);
    }
}

/// [MIT License]
/// @title Base64
/// @notice Provides a function for encoding some bytes in base64
/// @author Brecht Devos <brecht@loopring.org>
library Base64 {
    bytes internal constant TABLE =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    /// @notice Encodes some bytes to the base64 representation
    function encode(bytes memory data) internal pure returns (string memory) {
        uint256 len = data.length;
        if (len == 0) return "";
        uint256 encodedLen = 4 * ((len + 2) / 3);
        bytes memory result = new bytes(encodedLen + 32);
        bytes memory table = TABLE;

        assembly {
            let tablePtr := add(table, 1)
            let resultPtr := add(result, 32)
            for {
                let i := 0
            } lt(i, len) {

            } {
                i := add(i, 3)
                let input := and(mload(add(data, i)), 0xffffff)
                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))
                out := shl(8, out)
                out := add(
                    out,
                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)
                )
                out := shl(8, out)
                out := add(
                    out,
                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)
                )
                out := shl(8, out)
                out := add(
                    out,
                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)
                )
                out := shl(224, out)
                mstore(resultPtr, out)
                resultPtr := add(resultPtr, 4)
            }
            switch mod(len, 3)
            case 1 {
                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
            }
            case 2 {
                mstore(sub(resultPtr, 1), shl(248, 0x3d))
            }
            mstore(result, encodedLen)
        }
        return string(result);
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)

pragma solidity ^0.8.20;

import {Math} from "./math/Math.sol";
import {SignedMath} from "./math/SignedMath.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant HEX_DIGITS = "0123456789abcdef";
    uint8 private constant ADDRESS_LENGTH = 20;

    /**
     * @dev The `value` string doesn't fit in the specified `length`.
     */
    error StringsInsufficientHexLength(uint256 value, uint256 length);

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `int256` to its ASCII `string` decimal representation.
     */
    function toStringSigned(int256 value) internal pure returns (string memory) {
        return string.concat(value < 0 ? "-" : "", toString(SignedMath.abs(value)));
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        uint256 localValue = value;
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = HEX_DIGITS[localValue & 0xf];
            localValue >>= 4;
        }
        if (localValue != 0) {
            revert StringsInsufficientHexLength(value, length);
        }
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal
     * representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);
    }

    /**
     * @dev Returns true if the two strings are equal.
     */
    function equal(string memory a, string memory b) internal pure returns (bool) {
        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));
    }
}


// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Royalty.sol)

pragma solidity ^0.8.20;

import {ERC721} from "../ERC721.sol";
import {ERC2981} from "../../common/ERC2981.sol";

/**
 * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment
 * information.
 *
 * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually
 * for specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.
 *
 * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See
 * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to
 * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.
 */
abstract contract ERC721Royalty is ERC2981, ERC721 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {
        return super.supportsInterface(interfaceId);
    }
}


// File: @openzeppelin/contracts/utils/math/SignedMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard signed math utilities missing in the Solidity language.
 */
library SignedMath {
    /**
     * @dev Returns the largest of two signed numbers.
     */
    function max(int256 a, int256 b) internal pure returns (int256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two signed numbers.
     */
    function min(int256 a, int256 b) internal pure returns (int256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two signed numbers without overflow.
     * The result is rounded towards zero.
     */
    function average(int256 a, int256 b) internal pure returns (int256) {
        // Formula from the book "Hacker's Delight"
        int256 x = (a & b) + ((a ^ b) >> 1);
        return x + (int256(uint256(x) >> 255) & (a ^ b));
    }

    /**
     * @dev Returns the absolute unsigned value of a signed value.
     */
    function abs(int256 n) internal pure returns (uint256) {
        unchecked {
            // must be unchecked in order to support `n = type(int256).min`
            return uint256(n >= 0 ? n : -n);
        }
    }
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Muldiv operation overflow.
     */
    error MathOverflowedMulDiv();

    enum Rounding {
        Floor, // Toward negative infinity
        Ceil, // Toward positive infinity
        Trunc, // Toward zero
        Expand // Away from zero
    }

    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds towards infinity instead
     * of rounding towards zero.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        if (b == 0) {
            // Guarantee the same behavior as in a regular Solidity division.
            return a / b;
        }

        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
     * denominator == 0.
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
     * Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0 = x * y; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            if (denominator <= prod1) {
                revert MathOverflowedMulDiv();
            }

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.

            uint256 twos = denominator & (0 - denominator);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
            // works in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
     * towards zero.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);
        }
    }

    /**
     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
     */
    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
        return uint8(rounding) % 2 == 1;
    }
}


// File: @openzeppelin/contracts/token/common/ERC2981.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/common/ERC2981.sol)

pragma solidity ^0.8.20;

import {IERC2981} from "../../interfaces/IERC2981.sol";
import {IERC165, ERC165} from "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.
 *
 * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for
 * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.
 *
 * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the
 * fee is specified in basis points by default.
 *
 * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See
 * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to
 * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.
 */
abstract contract ERC2981 is IERC2981, ERC165 {
    struct RoyaltyInfo {
        address receiver;
        uint96 royaltyFraction;
    }

    RoyaltyInfo private _defaultRoyaltyInfo;
    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;

    /**
     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).
     */
    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);

    /**
     * @dev The default royalty receiver is invalid.
     */
    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);

    /**
     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).
     */
    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);

    /**
     * @dev The royalty receiver for `tokenId` is invalid.
     */
    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {
        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @inheritdoc IERC2981
     */
    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {
        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];

        if (royalty.receiver == address(0)) {
            royalty = _defaultRoyaltyInfo;
        }

        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();

        return (royalty.receiver, royaltyAmount);
    }

    /**
     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a
     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an
     * override.
     */
    function _feeDenominator() internal pure virtual returns (uint96) {
        return 10000;
    }

    /**
     * @dev Sets the royalty information that all ids in this contract will default to.
     *
     * Requirements:
     *
     * - `receiver` cannot be the zero address.
     * - `feeNumerator` cannot be greater than the fee denominator.
     */
    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {
        uint256 denominator = _feeDenominator();
        if (feeNumerator > denominator) {
            // Royalty fee will exceed the sale price
            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);
        }
        if (receiver == address(0)) {
            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));
        }

        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);
    }

    /**
     * @dev Removes default royalty information.
     */
    function _deleteDefaultRoyalty() internal virtual {
        delete _defaultRoyaltyInfo;
    }

    /**
     * @dev Sets the royalty information for a specific token id, overriding the global default.
     *
     * Requirements:
     *
     * - `receiver` cannot be the zero address.
     * - `feeNumerator` cannot be greater than the fee denominator.
     */
    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {
        uint256 denominator = _feeDenominator();
        if (feeNumerator > denominator) {
            // Royalty fee will exceed the sale price
            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);
        }
        if (receiver == address(0)) {
            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));
        }

        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);
    }

    /**
     * @dev Resets royalty information for the token id back to the global default.
     */
    function _resetTokenRoyalty(uint256 tokenId) internal virtual {
        delete _tokenRoyaltyInfo[tokenId];
    }
}


// File: @openzeppelin/contracts/token/ERC721/ERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.20;

import {IERC721} from "./IERC721.sol";
import {IERC721Receiver} from "./IERC721Receiver.sol";
import {IERC721Metadata} from "./extensions/IERC721Metadata.sol";
import {Context} from "../../utils/Context.sol";
import {Strings} from "../../utils/Strings.sol";
import {IERC165, ERC165} from "../../utils/introspection/ERC165.sol";
import {IERC721Errors} from "../../interfaces/draft-IERC6093.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
abstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    mapping(uint256 tokenId => address) private _owners;

    mapping(address owner => uint256) private _balances;

    mapping(uint256 tokenId => address) private _tokenApprovals;

    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual returns (uint256) {
        if (owner == address(0)) {
            revert ERC721InvalidOwner(address(0));
        }
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual returns (address) {
        return _requireOwned(tokenId);
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {
        _requireOwned(tokenId);

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual {
        _approve(to, tokenId, _msgSender());
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual returns (address) {
        _requireOwned(tokenId);

        return _getApproved(tokenId);
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(address from, address to, uint256 tokenId) public virtual {
        if (to == address(0)) {
            revert ERC721InvalidReceiver(address(0));
        }
        // Setting an "auth" arguments enables the `_isAuthorized` check which verifies that the token exists
        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.
        address previousOwner = _update(to, tokenId, _msgSender());
        if (previousOwner != from) {
            revert ERC721IncorrectOwner(from, tokenId, previousOwner);
        }
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) public {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {
        transferFrom(from, to, tokenId);
        _checkOnERC721Received(from, to, tokenId, data);
    }

    /**
     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist
     *
     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the
     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances
     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by
     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.
     */
    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {
        return _owners[tokenId];
    }

    /**
     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.
     */
    function _getApproved(uint256 tokenId) internal view virtual returns (address) {
        return _tokenApprovals[tokenId];
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in
     * particular (ignoring whether it is owned by `owner`).
     *
     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this
     * assumption.
     */
    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {
        return
            spender != address(0) &&
            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);
    }

    /**
     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.
     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets
     * the `spender` for the specific `tokenId`.
     *
     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this
     * assumption.
     */
    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {
        if (!_isAuthorized(owner, spender, tokenId)) {
            if (owner == address(0)) {
                revert ERC721NonexistentToken(tokenId);
            } else {
                revert ERC721InsufficientApproval(spender, tokenId);
            }
        }
    }

    /**
     * @dev Unsafe write access to the balances, used by extensions that "mint" tokens using an {ownerOf} override.
     *
     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that
     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.
     *
     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the
     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership
     * remain consistent with one another.
     */
    function _increaseBalance(address account, uint128 value) internal virtual {
        unchecked {
            _balances[account] += value;
        }
    }

    /**
     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner
     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.
     *
     * The `auth` argument is optional. If the value passed is non 0, then this function will check that
     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).
     *
     * Emits a {Transfer} event.
     *
     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.
     */
    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {
        address from = _ownerOf(tokenId);

        // Perform (optional) operator check
        if (auth != address(0)) {
            _checkAuthorized(from, auth, tokenId);
        }

        // Execute the update
        if (from != address(0)) {
            // Clear approval. No need to re-authorize or emit the Approval event
            _approve(address(0), tokenId, address(0), false);

            unchecked {
                _balances[from] -= 1;
            }
        }

        if (to != address(0)) {
            unchecked {
                _balances[to] += 1;
            }
        }

        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        return from;
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal {
        if (to == address(0)) {
            revert ERC721InvalidReceiver(address(0));
        }
        address previousOwner = _update(to, tokenId, address(0));
        if (previousOwner != address(0)) {
            revert ERC721InvalidSender(address(0));
        }
    }

    /**
     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {
        _mint(to, tokenId);
        _checkOnERC721Received(address(0), to, tokenId, data);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     * This is an internal function that does not check if the sender is authorized to operate on the token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal {
        address previousOwner = _update(address(0), tokenId, address(0));
        if (previousOwner == address(0)) {
            revert ERC721NonexistentToken(tokenId);
        }
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(address from, address to, uint256 tokenId) internal {
        if (to == address(0)) {
            revert ERC721InvalidReceiver(address(0));
        }
        address previousOwner = _update(to, tokenId, address(0));
        if (previousOwner == address(0)) {
            revert ERC721NonexistentToken(tokenId);
        } else if (previousOwner != from) {
            revert ERC721IncorrectOwner(from, tokenId, previousOwner);
        }
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients
     * are aware of the ERC721 standard to prevent tokens from being forever locked.
     *
     * `data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is like {safeTransferFrom} in the sense that it invokes
     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `tokenId` token must exist and be owned by `from`.
     * - `to` cannot be the zero address.
     * - `from` cannot be the zero address.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(address from, address to, uint256 tokenId) internal {
        _safeTransfer(from, to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {
        _transfer(from, to, tokenId);
        _checkOnERC721Received(from, to, tokenId, data);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is
     * either the owner of the token, or approved to operate on all tokens held by this owner.
     *
     * Emits an {Approval} event.
     *
     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
     */
    function _approve(address to, uint256 tokenId, address auth) internal {
        _approve(to, tokenId, auth, true);
    }

    /**
     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not
     * emitted in the context of transfers.
     */
    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {
        // Avoid reading the owner unless necessary
        if (emitEvent || auth != address(0)) {
            address owner = _requireOwned(tokenId);

            // We do not use _isAuthorized because single-token approvals should not be able to call approve
            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {
                revert ERC721InvalidApprover(auth);
            }

            if (emitEvent) {
                emit Approval(owner, to, tokenId);
            }
        }

        _tokenApprovals[tokenId] = to;
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Requirements:
     * - operator can't be the address zero.
     *
     * Emits an {ApprovalForAll} event.
     */
    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {
        if (operator == address(0)) {
            revert ERC721InvalidOperator(operator);
        }
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).
     * Returns the owner.
     *
     * Overrides to ownership logic should be done to {_ownerOf}.
     */
    function _requireOwned(uint256 tokenId) internal view returns (address) {
        address owner = _ownerOf(tokenId);
        if (owner == address(0)) {
            revert ERC721NonexistentToken(tokenId);
        }
        return owner;
    }

    /**
     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the
     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param data bytes optional data to send along with the call
     */
    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {
        if (to.code.length > 0) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
                if (retval != IERC721Receiver.onERC721Received.selector) {
                    revert ERC721InvalidReceiver(to);
                }
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert ERC721InvalidReceiver(to);
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)

pragma solidity ^0.8.20;

import {IERC165} from "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/interfaces/IERC2981.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)

pragma solidity ^0.8.20;

import {IERC165} from "../utils/introspection/IERC165.sol";

/**
 * @dev Interface for the NFT Royalty Standard.
 *
 * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal
 * support for royalty payments across all NFT marketplaces and ecosystem participants.
 */
interface IERC2981 is IERC165 {
    /**
     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of
     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.
     */
    function royaltyInfo(
        uint256 tokenId,
        uint256 salePrice
    ) external view returns (address receiver, uint256 royaltyAmount);
}


// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)
pragma solidity ^0.8.20;

/**
 * @dev Standard ERC20 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.
 */
interface IERC20Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC20InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC20InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     * @param allowance Amount of tokens a `spender` is allowed to operate with.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC20InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC20InvalidSpender(address spender);
}

/**
 * @dev Standard ERC721 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.
 */
interface IERC721Errors {
    /**
     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.
     * Used in balance queries.
     * @param owner Address of the current owner of a token.
     */
    error ERC721InvalidOwner(address owner);

    /**
     * @dev Indicates a `tokenId` whose `owner` is the zero address.
     * @param tokenId Identifier number of a token.
     */
    error ERC721NonexistentToken(uint256 tokenId);

    /**
     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param tokenId Identifier number of a token.
     * @param owner Address of the current owner of a token.
     */
    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC721InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC721InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param tokenId Identifier number of a token.
     */
    error ERC721InsufficientApproval(address operator, uint256 tokenId);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC721InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC721InvalidOperator(address operator);
}

/**
 * @dev Standard ERC1155 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.
 */
interface IERC1155Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     * @param tokenId Identifier number of a token.
     */
    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC1155InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC1155InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param owner Address of the current owner of a token.
     */
    error ERC1155MissingApprovalForAll(address operator, address owner);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC1155InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC1155InvalidOperator(address operator);

    /**
     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
     * Used in batch transfers.
     * @param idsLength Length of the array of token identifiers
     * @param valuesLength Length of the array of token amounts
     */
    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.20;

import {IERC721} from "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.20;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be
     * reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.20;

import {IERC165} from "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
     *   a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or
     *   {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
     *   a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the address zero.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

