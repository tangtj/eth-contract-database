
// File: src/Presale/Presale.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

/// @author Presale Contract for NFTFN tokens not a general purpose contract
import { IERC20Metadata } from
  "../../lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol";
import { SafeERC20 } from
  "../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol";
import { Ownable } from "../../lib/openzeppelin-contracts/contracts/access/Ownable.sol";
import { PresaleData } from "./PresaleLib.sol";
import { AggregatorV3Interface } from "../Interfaces/AggregatorV3.sol";

/// @notice Simple Presale Contract Implementation
/// @author NFTFN (https://github.com/BLIV-CLUB/NFTFN-token/blob/feat/incorporate_changes/src/Presale/Presale.sol)
/// @dev Note:
/// Presale Invariants:
///  - Stages have fixed token allocation and USD Rates
///  - Refund Begins if a stage stagnates for 30 days
///  - Token Vesting is for 270 days with 10% unlock on the day the presale is concluded.
contract Presale is PresaleData, Ownable {
  using SafeERC20 for IERC20Metadata;

  //////////////////// ERRORS ///////////////////////////

  /// 0x399a417a
  error PresaleAlreadyActivated();

  error InvalidBalance();

  error PresaleNotActive();

  error InvalidParams();

  error MaxDepositLimitReached();

  error PresaleStillActive();

  error InsufficientTokenBalance();

  error NoTokenToClaim();

  error InvalidAccess();

  error SoftLimitHit();

  error RefundNotActive();

  error PresaleSoftLimitNotReached();

  error PresaleTimeLimitNotReached();

  error InvalidToken();

  error PresaleStageNotActive();

  error PresaleStageStillActive();

  error LowLevelCallFailed();

  error InvalidPriceFeedValue();
  ////////////////// PUBLIC VARIABLES //////////////////

  /// Treasury wallet where funds will be transferred
  address payable public treasuryWallet;

  /// NFTFN token address
  IERC20Metadata public nftfnToken;

  /// Aggregator V3 Interface
  AggregatorV3Interface public ethDataFeed;

  /// Current Stage of the presale
  uint256 public currentStage = 1;

  /// The timestamp since which vesting is calcualted and started
  uint256 public vestingStartTimestamp;

  /// The total sum of usd raised in USD
  uint256 public totalUsdRaised = 0;

  /// Flag indicating whether the sale has finished or not
  bool public presaleEnded = false;

  /// The total vesting period
  uint256 public constant vestingTimePeriod = 270 days; // 9 Months Vesting Period

  /// the total tokens allocated for the presale
  uint256 public totalTokensAllocated;

  /// $1M USDT
  uint256 public immutable maxDepositLimit = 1_000_000 * usdtMultiplier;

  /// Per Transaction Limits for USDT
  uint256 public immutable minTransactionLimit = 50 * usdtMultiplier;
  /// $50 USDT

  /// The soft limit in usd on the presale
  uint256 public immutable usdSoftLimit = 1_000_000 * usdtMultiplier;
  /// $ 2M Soft Limit

  uint256 public constant stalePriceDelay = 60 * 60; // 3600 seconds 

  /// A mapping for user and their deposit data
  mapping(address => UserData) public userDeposits;

  /// Presale Params Data
  mapping(uint256 => PresaleParams) public presaleParamsData;

  /// Accepted Tokens
  mapping(address => bool) public acceptedTokens;

  /// @notice Constructor to init the contract.
  /// @param _treasuryWallet the wallet where all funds are routed to
  /// @param _nftfnToken NFTFN token address
  /// @param usdRates USD Rate for the Presale 1 stage
  /// @param tokenAllocation 1st Stage Token Allocation
  /// @param ethPriceFeed  ETH Price Feed Address
  /// @param tokens List of USD Pegged tokens that can be used to buy in tokens
  constructor(
    address payable _treasuryWallet,
    address _nftfnToken,
    uint256 usdRates,
    uint256 tokenAllocation,
    address ethPriceFeed,
    address[] memory tokens
  ) Ownable(msg.sender) {
    treasuryWallet = _treasuryWallet;
    nftfnToken = IERC20Metadata(_nftfnToken);
    ethDataFeed = AggregatorV3Interface(ethPriceFeed);
    presaleParamsData[currentStage] = PresaleParams({
      startTime: uint256(0),
      endTime: uint256(0),
      usdRaised: uint256(0),
      tokensAllocated: tokenAllocation,
      tokensBought: uint256(0),
      usdRate: usdRates,
      isActive: false
    });
    totalTokensAllocated += tokenAllocation;
    uint256 i = 0;
    for (i; i < tokens.length; ++i) {
      acceptedTokens[tokens[i]] = true;
    }
  }

  /// @notice Function to initiate Presale can only be called once only for the first stage
  function initPresale() public onlyOwner {
    if (presaleParamsData[currentStage].isActive) {
      revert PresaleAlreadyActivated();
    }

    if (nftfnToken.balanceOf(address(this)) != totalTokensAllocated) {
      revert InsufficientTokenBalance();
    }

    presaleParamsData[currentStage].startTime = block.timestamp;
    presaleParamsData[currentStage].isActive = true;

    emit PresaleActivated(block.timestamp, currentStage);
  }

  /// @notice Function to Add Params for the Next Token Sale Stage
  /// @param tokenAllocation The amount of tokens to be sold in the next stage
  /// @param usdRate The usd rate for the tokens being sold in the next stage
  function initNextPresaleStage(uint256 tokenAllocation, uint256 usdRate) public onlyOwner {
    if (presaleEnded) revert PresaleNotActive();

    if (tokenAllocation == uint256(0) || usdRate == uint256(0)) {
      revert InvalidParams();
    }

    if (presaleParamsData[currentStage].isActive) {
      revert PresaleStageStillActive();
    }

    totalTokensAllocated += tokenAllocation;

    if ((nftfnToken.balanceOf(address(this)) < totalTokensAllocated)) {
      revert InvalidBalance();
    }

    ++currentStage;
    presaleParamsData[currentStage] = PresaleParams({
      startTime: block.timestamp,
      endTime: uint256(0),
      usdRaised: uint256(0),
      tokensAllocated: tokenAllocation,
      tokensBought: uint256(0),
      usdRate: usdRate,
      isActive: true
    });

    emit PresaleStageActivated(currentStage, tokenAllocation, usdRate, block.timestamp);
  }

  /// @notice Function to Buy tokens using Eth
  /// Use msg.value and a chainlink
  function buyTokensEth() public payable returns (uint256) {
    if (presaleEnded) revert PresaleNotActive();

    uint256 ethUsdRate = getLatestPrice();
    /// 18 decimals * 18 decimals * 6 decimals / 36 decimals
    uint256 usdAmount = (msg.value * ethUsdRate) / 10 ** 30;

    if (usdAmount < minTransactionLimit || usdAmount > maxDepositLimit) {
      revert InvalidBalance();
    }

    PresaleParams memory currentSaleParams = presaleParamsData[currentStage];

    if (!currentSaleParams.isActive) revert PresaleStageNotActive();

    UserData storage userData = userDeposits[msg.sender];

    uint256 tokensBought = calculateTokensAllocated(usdAmount);

    if (currentSaleParams.tokensBought + tokensBought > currentSaleParams.tokensAllocated) {
      currentSaleParams.isActive = false;
      currentSaleParams.endTime = block.timestamp;
      uint256 usdAmountUsed = 0;
      unchecked {
        tokensBought = currentSaleParams.tokensAllocated - currentSaleParams.tokensBought;

        usdAmountUsed = (currentSaleParams.usdRate * tokensBought) / 1 ether;

        totalUsdRaised += usdAmountUsed;
        currentSaleParams.tokensBought += tokensBought;
        currentSaleParams.usdRaised += usdAmountUsed;
        /// Add Tokens Bought to the users data structure
        userData.usdInvested += usdAmountUsed;
        userData.tokensAllocated += tokensBought;
      }

      if (userData.usdInvested > maxDepositLimit) {
        revert MaxDepositLimitReached();
      }

      presaleParamsData[currentStage] = currentSaleParams;

      (bool isSuccess,) =
        payable(msg.sender).call{ value: ((usdAmount - usdAmountUsed) * 10 ** 30) / ethUsdRate }("");

      if (!isSuccess) revert LowLevelCallFailed();

      emit TokensBought(msg.sender, usdAmountUsed, currentStage, tokensBought);

      emit PresaleStageFinished(currentStage, block.timestamp);
      return tokensBought;
    }
    userData.usdInvested += usdAmount;
    if (userData.usdInvested > maxDepositLimit) {
      revert MaxDepositLimitReached();
    }

    totalUsdRaised += usdAmount;
    currentSaleParams.tokensBought += tokensBought;
    currentSaleParams.usdRaised += usdAmount;
    userData.tokensAllocated += tokensBought;

    presaleParamsData[currentStage] = currentSaleParams;

    emit TokensBought(msg.sender, usdAmount, currentStage, tokensBought);

    return tokensBought;
  }

  /// @notice Function to buy tokens using USDT
  /// @param usdtAmount The Amount of usdtTokens used to buy tokens
  /// @param token The token to use while buying
  /// @return The amount of tokens bought/allocated
  function buyTokens(uint256 usdtAmount, address token) external returns (uint256) {
    if (presaleEnded) revert PresaleNotActive();

    if (usdtAmount < minTransactionLimit || usdtAmount > maxDepositLimit) {
      revert InvalidBalance();
    }

    if (!acceptedTokens[token]) revert InvalidToken();

    PresaleParams memory currentSaleParams = presaleParamsData[currentStage];

    if (!currentSaleParams.isActive) revert PresaleStageNotActive();

    UserData storage userData = userDeposits[msg.sender];

    uint256 tokensBought = calculateTokensAllocated(usdtAmount);

    /// Calculate total tokens to be allocated and currently Allocated tokens + tokens < totalTokens in this level
    /// Sale is exhausted buy the remaining ones at current price and shift to new sale
    if (currentSaleParams.tokensBought + tokensBought >= currentSaleParams.tokensAllocated) {
      currentSaleParams.isActive = false;
      currentSaleParams.endTime = block.timestamp;

      unchecked {
        tokensBought = currentSaleParams.tokensAllocated - currentSaleParams.tokensBought;

        usdtAmount = (currentSaleParams.usdRate * tokensBought) / 1 ether;

        totalUsdRaised += usdtAmount;
        currentSaleParams.tokensBought += tokensBought;
        currentSaleParams.usdRaised += usdtAmount;
        /// Add Tokens Bought to the users data structure
        userData.usdInvested += usdtAmount;
        userData.tokensAllocated += tokensBought;
      }

      if (userData.usdInvested > maxDepositLimit) {
        revert MaxDepositLimitReached();
      }
      presaleParamsData[currentStage] = currentSaleParams;

      IERC20Metadata(token).safeTransferFrom(msg.sender, address(this), usdtAmount);

      emit TokensBought(msg.sender, usdtAmount, currentStage, tokensBought);

      emit PresaleStageFinished(currentStage, block.timestamp);
      return tokensBought;
    }

    userData.usdInvested += usdtAmount;
    if (userData.usdInvested > maxDepositLimit) {
      revert MaxDepositLimitReached();
    }

    totalUsdRaised += usdtAmount;
    currentSaleParams.tokensBought += tokensBought;
    currentSaleParams.usdRaised += usdtAmount;
    userData.tokensAllocated += tokensBought;

    presaleParamsData[currentStage] = currentSaleParams;

    IERC20Metadata(token).safeTransferFrom(msg.sender, address(this), usdtAmount);

    emit TokensBought(msg.sender, usdtAmount, currentStage, tokensBought);

    return tokensBought;
  }

  /// @notice Manual function to call and end the Presale starting the vesting period
  function endPreSale() public onlyOwner {
    if (!presaleParamsData[currentStage].isActive) {
      revert PresaleNotActive();
    }

    presaleEnded = true;

    vestingStartTimestamp = block.timestamp;
    emit PresaleFinishied(block.timestamp);
  }

  //// @notice Claim Tokens according to the vesting timeperiod
  //// @param user The user to claim the tokens for
  function claimTokens(address user) public {
    if (user != msg.sender) revert InvalidAccess();

    if (totalUsdRaised < usdSoftLimit) revert PresaleSoftLimitNotReached();

    uint256 tokens = getClaimableTokens(user);

    if (tokens == 0) revert NoTokenToClaim();

    userDeposits[user].tokensClaimed += tokens;

    nftfnToken.safeTransfer(user, tokens);

    emit TokensClaimed(user, tokens, block.timestamp);
  }

  /// @notice Get Claimiable Tokens After presale has ended
  /// @param user The user to get the claimable tokens for
  /// @return tokens The amount of tokens that can be claimed
  function getClaimableTokens(address user) public view returns (uint256 tokens) {
    if (!presaleEnded || vestingStartTimestamp == uint256(0)) return 0;

    UserData memory userData = userDeposits[user];

    /// Formulae 10% at TGE then linear unlock over 270 days
    uint256 timeSinceUnlock = block.timestamp - vestingStartTimestamp;

    tokens = ((userData.tokensAllocated - (userData.tokensAllocated / 10)) * timeSinceUnlock)
      / vestingTimePeriod;

    tokens += userData.tokensAllocated / 10;
    tokens -= userData.tokensClaimed;
    return tokens;
  }

  /// @notice function to RefundTokens Allocation is case a soft limit is failed to be touched
  /// @param user The user who is trying to claim his refund
  /// @param token The token in which to refund the user
  function refundTokenAllocation(address user, address token) public {
    /// Check user Refunding Token 
    if (user != msg.sender) revert InvalidAccess();

    /// Check that Soft Limit has not been reached
    if (totalUsdRaised >= usdSoftLimit) revert SoftLimitHit();

    /// Revert If Token is Invalid
    if (!acceptedTokens[token]) revert InvalidToken();


    /// Revert if the stage has not been active for 30 days or the stage has no start time i.e. it was never started
    if (
      presaleParamsData[currentStage].startTime == 0
        || presaleParamsData[currentStage].startTime + (30 * 86400) > block.timestamp
    ) revert RefundNotActive();

    UserData storage userData = userDeposits[user];

    

    uint256 usdInvested = userData.usdInvested;

    /// Check that the user has an allocation that he is asking a refund for
    if (usdInvested == uint256(0)) revert InvalidBalance();

    /// If the amount need to refund is greated than the amount currently held in the stage

    /// Remove his invested and tokens allocated
    totalUsdRaised -= usdInvested;
    presaleParamsData[currentStage].usdRaised -= usdInvested;
    presaleParamsData[currentStage].tokensAllocated += userData.tokensAllocated;
    userData.tokensAllocated = 0;
    userData.usdInvested = 0;

    IERC20Metadata(token).safeTransfer(user, usdInvested);

    emit RefundClaimed(user, block.timestamp);
  }

  /// @notice Function to cash out tokesn to team wallet
  /// @param token The token to be forwarded
  /// @param value The amount of tokens to be forwarded
  function forwardFunds(address token, uint256 value) public onlyOwner {
    if(token == address(nftfnToken)) revert InvalidToken();
    IERC20Metadata(token).safeTransfer(treasuryWallet, value);
    emit FundsTransferred(token, value);
  }

  /// @notice Function to transfer ETH out of the contract
  /// @param amount of ETH to be transferred
  function forwardFundsEth(uint256 amount) public onlyOwner {
    if (address(this).balance < amount) revert InvalidBalance();
    (bool isSuccess,) = treasuryWallet.call{ value: amount }("");
    if (!isSuccess) revert LowLevelCallFailed();

    emit FundsTransferredEth(amount);
  }

  /// @notice Function to refund unallocated NFTFN tokens in case the sale does not hit required
  /// bounds
  /// @param tokens The amount of tokens to be refunded
  function getUnallocatedTokens(uint256 tokens) public onlyOwner {
    if (!presaleEnded) revert PresaleStillActive();

    nftfnToken.safeTransfer(treasuryWallet, tokens);
  }

  /// @notice view function to get presale params for a specific stage
  /// @param stage The stage for which the params are needed
  /// @return PresaleParams Structure with all the data required
  function getPresaleParamsData(uint256 stage) public view returns (PresaleParams memory) {
    return presaleParamsData[stage];
  }

  /// @notice View Functio to get current sale Params data
  /// @return PresaleParams for the current ongoing stage of the sale
  function getCurrentPresaleParamsData() public view returns (PresaleParams memory) {
    return presaleParamsData[currentStage];
  }

  /// @notice view function to calculate token allocation at current stage investing in eth
  /// @param ethAmount of ETH deposited
  function calculateTokenAllocationEth(uint256 ethAmount) public view returns (uint256) {
    uint256 usdAmount = (ethAmount * getLatestPrice()) / 10 ** 30;
    return calculateTokensAllocated(usdAmount);
  }

  /// @notice view function to calculate token allocation at current stage after investing a particular amount of usd
  /// @param usdAmount Amount of usd being deposited
  /// @return Amount of nftfn tokens that will be allocated
  /// @dev Does not take into account whether the number of tokens to be allocated are available in the given stage or not
  function calculateTokensAllocated(uint256 usdAmount) public view returns (uint256) {
    uint256 usdRate = presaleParamsData[currentStage].usdRate;
    unchecked {
      return (usdAmount / usdRate) * 1 ether;
    }
  }

  /// @notice Helper function to calculate Tokens allocation at different stages
  /// @param usdAmount Amount of usd being Deposited (in 10 ** 6 multiples)
  /// @param stage The stage to calculate the values on
  /// @return Amount of nftfn tokens that will be allocated on that stage
  function calculateTokensAllocated(uint256 usdAmount, uint256 stage) public view returns (uint256) {
    uint256 usdRate = presaleParamsData[stage].usdRate;
    if (usdRate == 0) return 0;
    unchecked {
      return (usdAmount / usdRate) * 1 ether;
    }
  }

  /// @notice Chainlink Helper function to get latest price for ETH/USD Pair
  /// @return ETH/USD price in 10 ** 18 decimals.
  function getLatestPrice() public view returns (uint256) {
    /// This gives answer in 8 decimals
    ( uint80 roundId, int256 answer,,uint256 updatedAt,uint80 answeredInRound) = ethDataFeed.latestRoundData();
    if (answer < 0) revert InvalidPriceFeedValue();
    if( answeredInRound > roundId) revert InvalidPriceFeedValue();
    if(block.timestamp > updatedAt + stalePriceDelay) revert InvalidPriceFeedValue();
    return uint256(answer * (10 ** 10)); // Conversion to 18 decimals
  }
}


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)

pragma solidity ^0.8.20;

import {IERC20Metadata} from "../token/ERC20/extensions/IERC20Metadata.sol";


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: src/Presale/PresaleLib.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

abstract contract PresaleData {
  struct PresaleParams {
    uint256 startTime; // Presale Start Time
    uint256 endTime; // Presale End Time
    /// Total Tokens Allocated for Presale
    uint256 tokensAllocated;
    /// Total Usd Raised
    uint256 usdRaised;
    /// Total Tokens Sold in Presale
    uint256 tokensBought;
    /// Usd rate for the Presale the rate should be in USDT decimals on ETH
    uint256 usdRate;
    bool isActive;
  }
  /// Is Presale active

  struct UserData {
    uint256 usdInvested;
    /// Usd Invested by user
    uint256 tokensAllocated;
    /// Total tokens allocated to user
    uint256 tokensClaimed;
  }
  /// Total tokens Claimed by the user

  //// USDT DECIMALS ON ETHEREUM
  /// USING ADDRESS 0xdAC17F958D2ee523a2206206994597C13D831ec7
  uint256 usdtMultiplier = 10 ** 6;

  ////////////////////// EVENTS ///////////////////////////

  /// @notice Funds Transferred Event
  /// @param token the Token being transferred
  /// @param value the Amount of token being transferred
  event FundsTransferred(address token, uint256 value);

  /// @notice Eth Transferred Event
  /// @param value The Amount of Eth transferred
  event FundsTransferredEth(uint256 value);

  /// @notice Tokens Bought event
  /// @param user User Buying the tokens
  /// @param usdValue Amount of Usd Used
  /// @param stage Current Stage
  /// @param tokens Amount of tokens allocated
  event TokensBought(address user, uint256 usdValue, uint256 stage, uint256 tokens);

  /// @notice Tokens Refunded Event
  /// @param user User Buying tokens
  /// @param value Amount of tokens bought
  event TokensRefunded(address user, uint256 value);

  /// @notice Presale Activated Event
  /// @param timestamp Timestamp on which Presale was activated
  /// @param stage The stage which has been activated
  event PresaleActivated(uint256 timestamp, uint256 stage);

  /// @notice Presale Finished Event
  /// @param timestamp the timestamp at which the presale was ended
  event PresaleFinishied(uint256 timestamp);

  /// @notice Tokens Claimed Event
  //// @param user The user which is claiming the token
  //// @param amount The amount of tokens being claimed
  //// @param timestamp The timestamp on which the claim was made
  event TokensClaimed(address user, uint256 amount, uint256 timestamp);

  /// @notice Refund Claimed Event
  /// @param user The user claiming the refund
  /// @param timestamp The timestamp at which the refund was claimed
  event RefundClaimed(address user, uint256 timestamp);

  /// @notice Presale Stage Finished Event
  /// @param stage The stage which was finished
  /// @param timestamp The timestamp on which the stage was finished
  event PresaleStageFinished(uint256 stage, uint256 timestamp);

  /// @notice New Presale Stage Activated
  /// @param stage The stage which has been started
  /// @param tokenAllocation Number of tokens allocated in the new stage
  /// @param usdRate Usd Rate for the current stage of tokens
  /// @param timestamp Timestamp for the activation
  event PresaleStageActivated(
    uint256 stage, uint256 tokenAllocation, uint256 usdRate, uint256 timestamp
  );
}


// File: src/Interfaces/AggregatorV3.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(uint80 _roundId)
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

