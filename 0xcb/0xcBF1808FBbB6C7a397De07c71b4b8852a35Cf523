
// File: swap_contract/swap.sol
// SPDX-License-Identifier: MIT

// ░██████╗███╗░░██╗░█████╗░██╗██████╗░██████╗░░█████╗░████████╗
// ██╔════╝████╗░██║██╔══██╗██║██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝
// ╚█████╗░██╔██╗██║███████║██║██████╔╝██████╦╝██║░░██║░░░██║░░░
// ░╚═══██╗██║╚████║██╔══██║██║██╔═══╝░██╔══██╗██║░░██║░░░██║░░░
// ██████╔╝██║░╚███║██║░░██║██║██║░░░░░██████╦╝╚█████╔╝░░░██║░░░
// ╚═════╝░╚═╝░░╚══╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═════╝░░╚════╝░░░░╚═╝░░░

// Powered by: https://nalikes.com/

pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "./Interfaces/ISwapRouter.sol";
import "./Interfaces/IFactory.sol";
import "./Interfaces/IPair.sol";

contract SwapBot is Ownable, ReentrancyGuard {
    uint256 public deadline = type(uint256).max;
    uint256 public fee = 1;
    address admin;

    event AddLiquidityETH(
        address token,
        uint256 amountToken,
        uint256 amountETH,
        uint256 liquidity
    );

    event OnlyAdmin(address _caller, address _admin);

    constructor() Ownable(msg.sender) {
        admin = address(this);
    }

    function internalBuy(
        address wtoken,
        address swap,
        address user,
        address[] memory path,
        uint256 amount,
        uint256 slippage,
        bool supportFeeOnTransfer

    ) internal nonReentrant {
        address factoryAddr = ISwapRouter(swap).factory();
        address pairAddr = IFactory(factoryAddr).getPair(path[0], path[1]);
        require(pairAddr != 0x0000000000000000000000000000000000000000, "Pair not found");
        
        (uint112 reserve0, uint112 reserve1, ) = IPair(pairAddr).getReserves();

        (uint256 ethAmt, uint256 tokenAmt) = (reserve0, reserve1);
        if (IPair(pairAddr).token0() != wtoken) {
            (ethAmt, tokenAmt) = (reserve1, reserve0);
        }

        uint256 output = ISwapRouter(swap).getAmountOut(
            amount,
            ethAmt,
            tokenAmt
        );
        uint256 expect = (amount * tokenAmt) / (ethAmt);

        require(
            expect > 0,
            "Expected output amount should be greater than zero"
        );
        uint256 differ = ((expect - output) * (100)) / (expect);

        require(
            differ < slippage,
            "Trade output is less than minimum expected"
        );

        uint256 ethAmount = amount * 1 wei;

        if (supportFeeOnTransfer) {
            // Use the method that supports fee on transfer tokens
            ISwapRouter(swap).swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(
                0,
                path,
                user,
                deadline
            );
        } else {
            // Use the original method
            ISwapRouter(swap).swapExactETHForTokens{value: ethAmount}(
                0,
                path,
                user,
                deadline
            );
        }
    }

    function buyToken(
        address wtoken,
        address swap,
        address token,
        uint256 amount,
        uint256 slippage,
        bool supportFeeOnTransfer
    ) external payable {
        require(msg.value >= amount * (1 wei), "Insufficient ether amount");

        address[] memory path = new address[](2);
        path[0] = wtoken;
        path[1] = token;

        internalBuy(
            wtoken,
            swap,
            payable(msg.sender),
            path,
            (amount * (100 - fee)) / (100),
            slippage,
            supportFeeOnTransfer
        );
    }

    // function estimateBuyResult(
    //     address wtoken,
    //     address swap,
    //     address token,
    //     uint256 amount,
    //     address factoryAddr
    // ) external view returns (uint256 output) {
    //     address pairAddr = IFactory(factoryAddr).getPair(wtoken, token);
    //     (uint112 reserve0, uint112 reserve1, ) = IPair(pairAddr).getReserves();

    //     (uint256 ethAmt, uint256 tokenAmt) = (reserve0, reserve1);
    //     if (IPair(pairAddr).token0() != wtoken) {
    //         (ethAmt, tokenAmt) = (reserve1, reserve0);
    //     }

    //     output = ISwapRouter(swap).getAmountOut(
    //         (amount * (100 - fee)) / (100),
    //         ethAmt,
    //         tokenAmt
    //     );
    // }

    function internalSell(
        address wtoken,
        address swap,
        address payable user,
        address[] memory path,
        uint256 amount,
        uint256 slippage,
        bool supportFeeOnTransfer
    ) internal nonReentrant {
        address factoryAddr = ISwapRouter(swap).factory();
        address pairAddr = IFactory(factoryAddr).getPair(path[0], path[1]);
        (uint112 reserve0, uint112 reserve1, ) = IPair(pairAddr).getReserves();

        IERC20(path[0]).approve(swap, amount);

        (uint256 ethAmt, uint256 tokenAmt) = (reserve0, reserve1);
        if (IPair(pairAddr).token0() != wtoken) {
            (ethAmt, tokenAmt) = (reserve1, reserve0);
        }


        uint256 output = ISwapRouter(swap).getAmountOut(
            amount,
            tokenAmt,
            ethAmt
        );
        uint256 expect = (amount * (ethAmt)) / (tokenAmt);

        require(
            expect > 0,
            "Expected output amount should be greater than zero"
        );
        uint256 differ = ((expect - output) * (100)) / (expect);

        require(
            differ < slippage,
            "Trade output is less than minimum expected"
        );

        uint256 initialBalance = address(this).balance;

        if (supportFeeOnTransfer) {
            // Use the method that supports fee on transfer tokens
            ISwapRouter(swap).swapExactTokensForETHSupportingFeeOnTransferTokens(
                amount,
                0,
                path,
                address(this),
                deadline
            );
        } else {
            // Use the original method
            ISwapRouter(swap).swapExactTokensForETH(
                amount,
                0,
                path,
                address(this),
                deadline
            );
        }

        uint256 actualOutput = address(this).balance - initialBalance;
        uint256 userAmount = (actualOutput * (100 - fee)) / 100; 
        user.transfer(userAmount);
    }

    function sellToken(
        address wtoken,
        address swap,
        address token,
        uint256 amount,
        uint256 slippage,
        bool supportFeeOnTransfer
    ) external payable {
        require(
            IERC20(token).balanceOf(msg.sender) >= amount,
            "Insufficient token balance"
        );

        IERC20(token).transferFrom(msg.sender, address(this), amount);

        address[] memory path = new address[](2);
        path[0] = token;
        path[1] = wtoken;

        internalSell(wtoken, swap, payable(msg.sender), path, amount, slippage, supportFeeOnTransfer);
    }

    // function estimateSellResult(
    //     address wtoken,
    //     address swap,
    //     address token,
    //     uint256 amount,
    //     address factoryAddr
    // ) external view returns (uint256 output) {
    //     address pairAddr = IFactory(factoryAddr).getPair(token, wtoken);
    //     (uint112 reserve0, uint112 reserve1, ) = IPair(pairAddr).getReserves();

    //     (uint256 ethAmt, uint256 tokenAmt) = (reserve0, reserve1);
    //     if (IPair(pairAddr).token0() != wtoken) {
    //         (ethAmt, tokenAmt) = (reserve1, reserve0);
    //     }

    //     output =
    //         (ISwapRouter(swap).getAmountOut(amount, tokenAmt, ethAmt) / 100) *
    //         (100 - fee);
    // }

    function addLiquidity(
        address swapProtocol,
        address token,
        uint256 amountEthDesired,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to
    )
        external
        payable
        onlyOwner
        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)
    {
        require(
            msg.value >= amountEthDesired * (1 wei),
            "Insufficient ETH amount"
        );

        uint256 etherAmount = amountEthDesired * (1 wei);
        (amountToken, amountETH, liquidity) = ISwapRouter(swapProtocol)
            .addLiquidityETH{value: etherAmount}(
            token,
            amountTokenDesired,
            amountTokenMin,
            amountETHMin,
            to,
            deadline
        );

        emit AddLiquidityETH(token, amountToken, amountETH, liquidity);
    }

    function setFee(uint256 _fee) external onlyOwner {
        fee = _fee;
    }

    function withdraw(
        uint256 _amount,
        address payable _receiver
    ) external onlyOwner {
        _receiver.transfer(_amount);
    }

    receive() external payable {}
    fallback() external payable {}
}

// File: swap_contract/Interfaces/IPair.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface IPair {
    function getReserves()
        external
        view
        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function token0() external view returns (address);
    function token1() external view returns (address);
}


// File: swap_contract/Interfaces/IFactory.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface IFactory {
  event PairCreated(address indexed token0, address indexed token1, address pair, uint);

  function getPair(address tokenA, address tokenB) external view returns (address pair);
  function allPairs(uint) external view returns (address pair);
  function allPairsLength() external view returns (uint);

  function feeTo() external view returns (address);
  function feeToSetter() external view returns (address);

  function createPair(address tokenA, address tokenB) external returns (address pair);
}


// File: swap_contract/Interfaces/ISwapRouter.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface ISwapRouter {
    
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint[] memory amounts);

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;


    
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);

    function getAmountOut(
        uint amountIn,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountOut);

    

    function factory() external returns (address factory);
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

