
// File: contracts/BatchTokensTransfer.sol
pragma solidity ^0.8.23;

interface IERC20Token {
  function transfer(address _to, uint256 _value) external returns (bool success);

  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
}

interface USDTToken {
  function transfer(address _to, uint256 _value) external;

  function transferFrom(address _from, address _to, uint256 _value) external;
}

contract BatchTokensTransfer {
  address public owner;

  constructor() {
    owner = msg.sender;
  }

  function transferETH(address[] calldata addresses, uint256[] calldata amounts) external payable {
    require(msg.sender == owner, 'Only owner');
    for (uint i = 0; i < addresses.length; i++) {
      (bool success,) = addresses[i].call{value : amounts[i]}("");
      require(success, "Unable to send funds");
    }
  }

  function transferETHFromSender(address[] calldata addresses, uint256[] calldata amounts) external payable {
    uint256 cachedValue = msg.value;
    uint256 totalAmount = 0;

    for (uint256 i; i < addresses.length; i++) {
      totalAmount += amounts[i];
      require(cachedValue >= totalAmount, "Value less then amount");
      (bool success,) = addresses[i].call{value : amounts[i]}("");
      require(success, "Unable to send funds");
    }

    if (cachedValue > totalAmount) {
      (bool success,) = msg.sender.call{value : cachedValue - totalAmount}("");
      require(success, "Unable to send change");
    }
  }

  function transferUSDT(USDTToken token, address[] calldata addresses, uint256[] calldata amounts) external {
    require(msg.sender == owner, 'Only owner');
    for (uint i = 0; i < addresses.length; i++) {
      token.transfer(addresses[i], amounts[i]);
    }
  }

  function transfer(IERC20Token token, address[] calldata addresses, uint256[] calldata amounts) external {
    require(msg.sender == owner, 'Only owner');
    for (uint i = 0; i < addresses.length; i++) {
      token.transfer(addresses[i], amounts[i]);
    }
  }

  function transferFromSender(IERC20Token token, address[] calldata addresses, uint256[] calldata amounts) external {
    address cachedSender = msg.sender;
    for (uint i = 0; i < addresses.length; i++) {
      token.transferFrom(cachedSender, addresses[i], amounts[i]);
    }
  }

  function transferUSDTFromSender(USDTToken token, address[] calldata addresses, uint256[] calldata amounts) external {
    address cachedSender = msg.sender;
    for (uint i = 0; i < addresses.length; i++) {
      token.transferFrom(cachedSender, addresses[i], amounts[i]);
    }
  }
}

