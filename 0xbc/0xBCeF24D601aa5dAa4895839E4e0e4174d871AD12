
// File: contracts/Lock.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.6.6;

pragma experimental ABIEncoderV2;

import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";

contract tokenLocker is ReentrancyGuard, Ownable, Pausable {
    struct LockTokenEntity {
        uint256 amount;
        uint256 startTime;
        uint256 endTime;
        uint256 lockTime;
        bool released;
    }

    address public token;
    mapping(address => LockTokenEntity[]) public lockTokenMap;
    mapping(address => uint256) public userBalances;
    uint256 private _totalSupply;
    uint256 public maxSupply;

    uint256 public constant denominator = 10000;
    uint256 public constant rewardRatio = 100;
    uint256 public constant kickRewardDelay = 7 days;

    mapping(address => bool) public kickReleaseWhitelist;

    event LockedToken(
        address indexed token,
        address indexed reciver,
        uint256 amount,
        uint256 lockTime,
        uint256 endTime
    );
    event Released(
        address indexed token,
        address indexed reciver,
        uint256 amount
    );

    constructor(address _token) public Ownable() {
        token = _token;
    }

    function lockToken(
        address _reciver,
        uint256 _amount,
        uint256 _lockTime
    ) external nonReentrant whenNotPaused {
        require(_amount > 0, "TokenLocker: amount should greater than 0");
        require(_lockTime > 0, "TokenLocker: lockTime should greater than 0");
        require(maxSupply >= _totalSupply + _amount, "can not over max supply");

        IERC20(token).transferFrom(msg.sender, address(this), _amount);

        lockTokenMap[_reciver].push(
            LockTokenEntity({
                amount: _amount,
                lockTime: _lockTime,
                startTime: block.timestamp,
                endTime: block.timestamp + _lockTime,
                released: false
            })
        );

        userBalances[_reciver] += _amount;
        _totalSupply += _amount;

        emit LockedToken(
            token,
            _reciver,
            _amount,
            _lockTime,
            block.timestamp + _lockTime
        );
    }

    function releaseToken() external nonReentrant {
        _processReleaseToken(msg.sender, address(0));
    }

    function kickReleaseToken(address _account) external nonReentrant {
        require(kickReleaseWhitelist[msg.sender], "TokenLocker: can't kick");
        _processReleaseToken(_account, msg.sender);
    }

    function _processReleaseToken(
        address _account,
        address _rewardAccount
    ) internal whenNotPaused {
        require(
            userBalances[_account] > 0,
            "TokenLocker: no tokens to release"
        );

        uint256 releaseAmount;
        uint256 lastEndTime;
        for (uint i; i < lockTokenMap[_account].length; i++) {
            LockTokenEntity memory entity = lockTokenMap[_account][i];
            if (entity.released || entity.endTime > block.timestamp) {
                continue;
            }
            if (entity.endTime > lastEndTime) {
                lastEndTime = entity.endTime;
            }
            releaseAmount += entity.amount;
            lockTokenMap[_account][i].released = true;
        }
        require(releaseAmount > 0, "TokenLocker: no tokens to release");

        userBalances[_account] -= releaseAmount;
        _totalSupply -= releaseAmount;

        uint256 actualAmount = releaseAmount;
        if (
            _rewardAccount != address(0) &&
            (lastEndTime + kickRewardDelay) < block.timestamp
        ) {
            uint256 reward = (releaseAmount * rewardRatio) / denominator;
            actualAmount -= reward;
            IERC20(token).transfer(_rewardAccount, reward);
        }
        IERC20(token).transfer(_account, actualAmount);

        emit Released(token, _account, releaseAmount);
    }

    function balanceOf(address account) external view returns (uint256) {
        return userBalances[account];
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function releasableBalanceOf(
        address account
    ) external view returns (uint256) {
        uint256 releaseableAmount;
        for (uint i; i < lockTokenMap[account].length; i++) {
            LockTokenEntity memory entity = lockTokenMap[account][i];
            if (entity.released || entity.endTime > block.timestamp) {
                continue;
            }
            releaseableAmount += entity.amount;
        }
        return releaseableAmount;
    }

    function lockedBalances(
        address account
    )
        external
        view
        returns (
            uint256 total,
            uint256 releasable,
            uint256 locked,
            LockTokenEntity[] memory lockData
        )
    {
        uint256 length = 0;
        for (uint i = 0; i < lockTokenMap[account].length; i++) {
            if (lockTokenMap[account][i].endTime > block.timestamp) {
                length++;
            }
        }
        lockData = new LockTokenEntity[](length);
        uint256 idx;
        for (uint i; i < lockTokenMap[account].length; i++) {
            LockTokenEntity memory entity = lockTokenMap[account][i];
            if (entity.endTime > block.timestamp) {
                lockData[idx] = entity;
                idx++;
                locked += entity.amount;
            } else {
                if (!entity.released) {
                    releasable += entity.amount;
                }
            }
        }
        return (userBalances[account], releasable, locked, lockData);
    }

    function addKickReleaseWhitelist(address _kicker) external onlyOwner {
        require(
            !kickReleaseWhitelist[_kicker],
            "TokenLocker: kicker has already been added"
        );
        kickReleaseWhitelist[_kicker] = true;
    }

    function removeKickReleaseWhitelist(address _kicker) external onlyOwner {
        require(
            kickReleaseWhitelist[_kicker],
            "TokenLocker: kicker has already been removed"
        );
        delete kickReleaseWhitelist[_kicker];
    }

    function updateMaxSupply(uint256 _maxSupply) external onlyOwner {
        require(_maxSupply != maxSupply, "maxSupply not changed");
        maxSupply = _maxSupply;
    }

    function setPaused(bool _paused) external onlyOwner {
        require(_paused != paused(), "Paused not changed");
        if (_paused) {
            _pause();
        } else {
            _unpause();
        }
    }
}


// File: @openzeppelin/contracts/utils/Pausable.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "./Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor () internal {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "../utils/Context.sol";
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

