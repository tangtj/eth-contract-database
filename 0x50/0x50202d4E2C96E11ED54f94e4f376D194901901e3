{"Address.sol":{"content":"pragma solidity 0.8.17;\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"Context.sol":{"content":"pragma solidity 0.8.17;\n// SPDX-License-Identifier: MIT\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"ERC1155Holder.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./ERC1155Receiver.sol\";\r\n\r\n\r\n/**\r\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\r\n *\r\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\r\n * stuck.\r\n *\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}"},"ERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IERC1155Receiver.sol\";\r\nimport \"./ERC165.sol\";\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}"},"ERC165.sol":{"content":"pragma solidity 0.8.17;\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}"},"IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity 0.8.17;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller\u0027s tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``\u0027s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``\u0027s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}"},"IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity 0.8.17;\n\nimport \"./IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}"},"IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity 0.8.17;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}"},"IUniswapV2Router.sol":{"content":"pragma solidity 0.8.17;\n// SPDX-License-Identifier: Unlicense\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"},"Ownable.sol":{"content":"pragma solidity 0.8.17;\n// SPDX-License-Identifier: Unlicense\n\nimport \"./Context.sol\";\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}"},"SafeMath.sol":{"content":"pragma solidity 0.8.17;\n// SPDX-License-Identifier: Unlicense\n\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}"},"StakePBLCNFT.sol":{"content":"pragma solidity 0.8.17;\n// SPDX-License-Identifier: Unlicense\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC1155.sol\";\nimport \"./IERC20.sol\";\nimport \"./IUniswapV2Router.sol\";\nimport \"./ERC1155Holder.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract StakePBLCNFT is Ownable, ERC1155Holder, ReentrancyGuard{\n    \n      using SafeMath for uint256;\n\n      /**\n      * NFT contract address\n      */\n      IERC1155 public stakingNft;\n\n      /**\n      *State (ERC20) token address\n      */\n      IERC20 public rewardingToken;\n\n\n      /**\n      * state token divisible upto rewardingTokenDecimals\n      */\n      uint256 public rewardingTokenDecimals;\n\n      /**\n      * usdc token divisible upto usdcDecimal\n      */\n      uint256 public usdcMultiplier = 1_000_000;\n\n      /**\n      * stable coin to calculate price in USD\n      */\n      IERC20 public usdc;\n\n      /**  uniswap v2 router to calculate the token\u0027s reward on run-time\n      *   usd balance equalent token\n      */\n      IUniswapV2Router02 public uniswapRouter;\n\n      /**\n      * wallet from where contract will transfer State reward\n      */\n      address private rewardingTokenWallet;\n\n      /* per day reward and multiple of 100\n      *  16.18 x 100\n      */\n      uint256 public rewardAPY = 1618;\n\n\n      /**\n      * struct to hold the info of staked NFTs\n      */\n      struct nftInfo {\n        uint256 tokenId;\n        address staker;\n        uint256 stakeTime;\n        uint256 category;\n        uint256 amount;\n        uint256 reward;\n      }\n\n      /**\n      * if staking is allowed, state to flip staking\n      */\n      bool public stakeAllowed = true;\n\n      /**\n      * if UnStake is allowed state to flip staking\n      */\n      bool public unstakeAllowed = true;\n\n      mapping (address =\u003e  mapping (uint256 =\u003e nftInfo)) public staked;\n\n      /**\n      * category like broze, silver, gold, platinum asigned a number\n      */\n      mapping (uint256 =\u003e uint256) public category;\n\n\n      /**\n      * events fire after every stake and unstake\n      */\n      event Stake(address staker, uint256 indexed tokenId, uint256 category, uint256 amount, uint256 stakeTime);\n      event Unstake(address unstaker , uint256 tokenId, uint256 reward);\n      event Withdraw(address indexed withdrawer);\n      event WithdrawToken(address indexed withdrawer, uint256 amount);\n\n\n      /**\n      * modifier to check if the NFTs are approved to stake\n      */\n      modifier isApproved() {\n      require(stakingNft.isApprovedForAll(_msgSender(),address(this)), \"NFTs Not Approved\");\n        _;\n      }\n\n\n      constructor() {\n      // mainnet\n      stakingNft = IERC1155(0xfBaE39320AA6E4Aee6829489aeD6eb2CC32a6459);\n      rewardingToken = IERC20(0x00C2999c8B2AdF4ABC835cc63209533973718eB1);\n      rewardingTokenDecimals = rewardingToken.decimals();\n      rewardingTokenWallet = 0x61d966e1a54Ff9C6B4cd083B5Ec968B366850f65;\n      uniswapRouter =  IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n      usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n\n\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796239]=1;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796229]=10;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796230]=50;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796231]=100;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796232]=500;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796233]=1_000;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796234]=10_000;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796235]=50_000;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796236]=100_000;\n      category[35765170590814674817329738340066840990845959557561780372227731964376303796225]=1_000_000;\n\n    }\n    \n    /**\n      * Function to show the rewarding token\u0027s wallet\n      */\n    function rewardingWalletGet() public view returns (address){\n      return rewardingTokenWallet;\n    }\n\n    /**\n      * Function to change the APY, must be multiplied by 100\n      * it takes one integer value\n      * only owner can call this function\n      */\n    function rewardPerDaySet(uint256 value) public onlyOwner{\n    /**\n      * mutiply value with 100.\n      */\n     rewardAPY = value;\n    }\n\n\n    /**\n      * setter function for rewarding token address, it takes one token address\n      * only owner can call this function\n      */\n    function changeRewardingToken(address newToken) public onlyOwner {\n      rewardingToken = IERC20(newToken);\n    }\n\n    /**\n      * setter for rewarding token\u0027s wallet address, it takes one wallet address\n      * only owner can call this function\n      */\n    function changeRewardingTokenWallet(address newWallet) public onlyOwner {\n      rewardingTokenWallet = newWallet;\n    }\n  \n    /**\n      * internal Stake NFT function, it takes one NFT Id and its amount\n      */\n    function _stake(uint256 tokenId , uint256 amount) internal isApproved() {\n      require(stakeAllowed , \"staking is stopped\");\n      require(stakingNft.balanceOf(_msgSender(), tokenId) \u003e= amount, \"Must Own Nft\");\n\n      uint256 time = block.timestamp;\n      \n      nftInfo storage info = staked[_msgSender()][tokenId];\n      uint reward = getPreviousReward(_msgSender(), tokenId);\n\n      stakingNft.safeTransferFrom(_msgSender() , address(this) , tokenId, amount, \u0027\u0027);\n\n      info.tokenId = tokenId;\n      info.amount = info.amount.add(amount);\n      info.staker = _msgSender();\n      info.stakeTime = time;\n      info.category = category[tokenId];\n      info.reward = info.reward.add(reward);\n\n      emit Stake(_msgSender() , tokenId, category[tokenId], info.amount, time);\n    }\n\n\n    /**\n      * internal unstake NFTs , it takes NFT Id and amount\n      */\n    function _unstakeByAmount(uint256 tokenId, uint256 amount) public nonReentrant{\n      require(unstakeAllowed , \"unstaking not allowed right now\");\n      require(stakingNft.balanceOf(address(this), tokenId) \u003e 0, \"Contract Must Own Nft\");\n      nftInfo storage info = staked[_msgSender()][tokenId];\n      \n      require(info.tokenId == tokenId, \"Not Staked\");\n      require(info.staker == _msgSender(), \"Not Your staked Token\");\n\n      uint256 stakedtime = block.timestamp.sub(info.stakeTime);\n      stakedtime = stakedtime / 1 days;\n\n      // uint256 reward = rewardAPY.mul(category[tokenId]).mul(stakedtime).mul(usdcMultiplier).div(10000).div(365);\n      uint256 reward = getPreviousReward(_msgSender(),tokenId);\n      reward = reward.add(info.reward);\n\n      address[] memory path;\n        path = new address[](2);\n        path[0] = address(usdc);\n        path[1] = address(rewardingToken);\n\n      uint256[] memory price = priceOfToken(reward, path);\n\n      if(price[1] \u003e 0 \u0026\u0026 price[1] \u003c= pendingRewards() ){\n        rewardingToken.transferFrom(rewardingTokenWallet , _msgSender() , price[1]);\n      }\n      else{\n        require(false, \"Pending Rewards Not Allocated\");\n      }\n\n      stakingNft.safeTransferFrom(address(this), _msgSender(), tokenId, info.amount, \u0027\u0027);\n      info.reward = 0;\n      info.amount = info.amount.sub(amount);\n      info.stakeTime = block.timestamp;\n\n      emit Unstake(_msgSender() , tokenId,  price[1]);\n    }\n\n    /**\n      * internal unstake NFTs , it takes NFT Id\n      */\n    function _unstake(uint256 tokenId) internal {\n      require(unstakeAllowed , \"unstaking not allowed right now\");\n      require(stakingNft.balanceOf(address(this), tokenId) \u003e 0, \"Contract Must Own Nft\");\n      nftInfo storage info = staked[_msgSender()][tokenId];\n      \n      require(info.tokenId == tokenId, \"Not Staked\");\n      require(info.staker == _msgSender(), \"Not Your staked Token\");\n\n      uint256 stakedtime = block.timestamp.sub(info.stakeTime);\n      stakedtime = stakedtime / 1 days;\n\n      // uint256 reward = rewardAPY.mul(category[tokenId]).mul(stakedtime).mul(usdcMultiplier).div(10000).div(365);\n      uint256 reward = getPreviousReward(_msgSender(),tokenId);\n      reward = reward.add(info.reward);\n      address[] memory path;\n        path = new address[](2);\n        path[0] = address(usdc);\n        path[1] = address(rewardingToken);\n\n      uint256[] memory price = priceOfToken(reward, path);\n\n      if(price[1] \u003e 0 \u0026\u0026 price[1] \u003c= pendingRewards() ){\n        rewardingToken.transferFrom(rewardingTokenWallet , _msgSender() , price[1]);\n      }\n      else{\n        require(false, \"Pending Rewards Not Allocated\");\n      }\n\n      stakingNft.safeTransferFrom(address(this), _msgSender(), tokenId, info.amount, \u0027\u0027);\n\n      info.tokenId = 0;\n      info.staker = address(0);\n      info.stakeTime = 0;\n      info.category = 0;\n      info.reward = 0;\n      info.amount = 0;\n      emit Unstake(_msgSender() , tokenId,  price[1]);\n    }\n\n\n    /**\n      * get the price of token, input amount of USDC and addresses of udsc and state token, it will return\n      * usdc amount equal state tokens\n      */\n    function priceOfToken(uint256 amount, address[] memory path) public view returns (uint[] memory amounts){\n        amounts =  uniswapRouter.getAmountsOut(amount, path);\n        return amounts;\n    }\n\n    /**\n      * function to check the current reward of a NFT. it takes one nft id and the account address of staker\n      * and return number of state token reward for that staked NFT\n      */ \n    function getPreviousReward(address staker, uint256 tokenId) public view returns (uint256){\n      nftInfo memory info = staked[staker][tokenId];\n\n      uint256 stakedtime = block.timestamp.sub(info.stakeTime);\n      stakedtime = stakedtime / 1 days;\n\n      // reward calculation with amount of NFTs\n      uint256 reward = rewardAPY.mul(category[info.tokenId]).mul(stakedtime).mul(info.amount).mul(usdcMultiplier).div(10000).div(365);\n\n      return reward;\n    }\n \n    /**\n      * function to check the current reward of a NFT. it takes one nft id and the account address of staker\n      * and return number of state token reward for that staked NFT\n      */ \n    function checkReward(address staker, uint256 tokenId) public view returns (uint256){\n      nftInfo memory info = staked[staker][tokenId];\n\n      uint256 stakedtime = block.timestamp.sub(info.stakeTime);\n      stakedtime = stakedtime / 1 days;\n\n      // reward calculation with amount of NFTs\n      uint256 reward = rewardAPY.mul(category[info.tokenId]).mul(stakedtime).mul(info.amount).mul(usdcMultiplier).div(10000).div(365);\n      reward = reward.add(reward);\n\n      address[] memory path;\n        path = new address[](2);\n        path[0] = address(usdc);\n        path[1] = address(rewardingToken);\n\n      uint256[] memory price = priceOfToken(reward, path);\n      return price[1];\n    }\n\n    /**\n      * public method to stake single NFTs, it takes one nft id and amount of that nft as input\n      */\n    function stake(uint256 tokenId, uint256 amount) public nonReentrant{\n      _stake(tokenId, amount);\n    }\n\n    /**\n      * public method to Unstake single NFTs, it takes nft id as input\n      */\n    function unstake(uint256 tokenId) public nonReentrant{\n      _unstake(tokenId); \n    }\n\n\n    /**\n      * public method to stake more than one NFTs, it takes one array of NFT ids and one array for their amounts.\n      * it will call internal stake fucntion\n      */\n    function stakeMany(uint256[] memory tokenIds , uint256[] memory amount) public nonReentrant{\n      for(uint256 i = 0; i\u003c tokenIds.length;i++){\n        _stake(tokenIds[i] , amount[i]);\n      }\n    }\n\n\n    /**\n      * public method to Unstake all NFTs, it takes one array nft ids\n      */\n    function unstakeMany(uint256[] memory tokenIds) public {\n      for(uint256 i = 0; i\u003c tokenIds.length;i++){\n        _unstake(tokenIds[i]);\n      }\n    }\n\n     /**\n      * public method to Unstake all NFTs, it takes one array nft ids and array with amounts\n      */\n    function unstakeManyByAmount(uint256[] memory tokenIds, uint256[] memory amount) public {\n      for(uint256 i = 0; i\u003c tokenIds.length;i++){\n        _unstakeByAmount(tokenIds[i], amount[i]);\n      }\n    }\n\n\n\n    /**\n      * public function to check how many tokens are set as a reward, tokens allocated for reward.\n      */\n    function pendingRewards() public view returns (uint256){\n      return rewardingToken.allowance(rewardingTokenWallet , address(this));\n    }\n\n    /**\n      * public method flip stake state, it takes one true/false boolean value.\n      * only owner can call this function\n      */\n    function setStakeAllowed(bool state) public onlyOwner {\n        stakeAllowed = state;\n    }\n\n    /**\n      * public method flip Unstake state, it takes one true/false boolean value.\n      * only owner can call this function\n      */\n    function setUnStakeAllowed(bool state) public onlyOwner {\n        unstakeAllowed = state;\n    }\n\n\n    /**\n      * NFT contract address setter,  it takes one NFT contract address\n      * only owner can call this function\n      */\n    function setNFTadress(IERC1155 nft) public onlyOwner {\n        stakingNft = nft;\n    }\n    /**\n      * NFT price setter,  it takes one NFT contract address and one price\n      * only owner can call this function\n      */\n    function setCategory(uint256 tokenId, uint256 price) public onlyOwner {\n        category[tokenId] = price;\n    }\n    \n\n    /**\n      * withdraw tokens stuck in the smart contract, pass address of receiver and token address\n      * only owner can call this function\n      */\n    function withdrawAnyToken(address _recipient, address _IERC20address, uint256 _amount) public onlyOwner returns(bool) {\n        IERC20(_IERC20address).transfer(_recipient, _amount); //use of the BEP20 traditional transfer\n        return true;\n    }\n\n\n    /**\n      * transfer coin stuck in the smart contract,  it takes one account address.\n      * only owner can call this function\n      */\n    function transferXS(address payable rec) public onlyOwner {\n        rec.transfer(address(this).balance);\n    }\n\n\n    /**\n      * withdraw NFTs stuck in the smart contract, it takes one address and one nft id \n      * only owner can call this function\n      */\n    function withdrawUselessNft(address _recipient, uint256 tokenId, uint256 amount) public onlyOwner returns(bool) {\n      stakingNft.safeTransferFrom(address(this), _recipient, tokenId, amount, \u0027\u0027);\n      return true;\n    }\n\n    receive() external payable{\n    }\n}"}}