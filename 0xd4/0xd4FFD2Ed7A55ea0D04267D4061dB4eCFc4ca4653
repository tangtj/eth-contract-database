// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

interface IERC20 {

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);
}

interface IL1NativeMessenger {

    struct L2MessageProof {
        uint256 batchIndex;
        bytes merkleProof;
    }

    function sendMessage(
        address target,
        uint256 value,
        bytes calldata message,
        uint256 gasLimit
    ) external payable;

    function relayMessageWithProof(
        address _from,
        address _to,
        uint256 _value,
        uint256 _nonce,
        bytes memory _message,
        L2MessageProof memory _proof
    ) external;

}

interface IL1ERC20Messenger {
    function depositERC20(
        address _token,
        address _to,
        uint256 _amount,
        uint256 _gasLimit
    ) external payable;
}

interface IL2NativeMessenger {
    function sendMessage(
        address target,
        uint256 value,
        bytes calldata message,
        uint256 gasLimit
    ) external payable;
}

interface IL2ERC20Messenger {
    function withdrawERC20(
        address token,
        address to,
        uint256 amount,
        uint256 gasLimit
    ) external payable;
}

interface IWETH {
    function deposit() external payable;
    function transfer(address to, uint value) external returns (bool);
    function withdraw(uint) external;
}

contract FoundationScroll {

    address public owner;
    address public caller;
    mapping(address=>bool) public whitelist;

    event OnSetOwner(address owner);
    event OnSetCaller(address caller);
    event OnSetWhitelist(address[] callers, bool status);
    event OnSetAllowance(address[] tokens, address spender, uint256 amount);
    event OnRefund(address token, address receiver, uint256 amount);
    event OnWithdraw(address token, address receiver, uint256 amount);
    
    address internal constant WETH_ADDRESS = 0x5300000000000000000000000000000000000004;
    address internal constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;

    address internal constant L1_ERC20_MESSAGER = 0xF8B1378579659D8F7EE5f3C929c2f3E332E41Fd6;
    address internal constant L1_NATIVE_MESSAGER = 0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367;

    address internal constant L2_ERC20_MESSAGER = 0x4C0926FF5252A435FD19e10ED15e5a249Ba19d79;
    address internal constant L2_NATIVE_MESSAGER = 0x781e90f1c8Fc4611c9b7497C3B47F99Ef6969CbC;

    constructor() {
        owner = msg.sender;
        caller = msg.sender;
    }

    receive() external payable {}

    // check owner
    modifier onlyOwner() {
        require(msg.sender==owner,"NOT_OWNER");
        _;
    }

    // check caller
    modifier onlyCaller() {
        require(msg.sender==caller,"NOT_CALLER");
        _;
    }

    // wrap eth to weth
    function wrap() external onlyCaller() {
        IWETH(WETH_ADDRESS).deposit{value: address(this).balance }();
    }

    // unwrap weth to eth
    function unwrap(uint256 amount) external onlyCaller() {
        IWETH(WETH_ADDRESS).withdraw(amount);
    }

    // relay from bridge
    function relay(address from, address to, uint256 value, uint256 nonce, bytes memory message, IL1NativeMessenger.L2MessageProof memory proof) external onlyCaller() {
        require(whitelist[to],"NOT_IN_WHITELIST");
        if (block.chainid==1) {
            IL1NativeMessenger(L1_NATIVE_MESSAGER).relayMessageWithProof(from, to, value, nonce, message, proof);
        }else{
            revert();
        }
    }

    // transfer to bridge
    function bridge(address token, address receiver, uint256 amount) external onlyCaller() {
        require(whitelist[receiver],"NOT_IN_WHITELIST");
        if (block.chainid==1) {
            // mainnet
            if (token==ZERO_ADDRESS) {
                IL1NativeMessenger(L1_NATIVE_MESSAGER).sendMessage{value: amount}(receiver, amount, new bytes(0), 168000);
            }else{
                IL1ERC20Messenger(L1_ERC20_MESSAGER).depositERC20(token, receiver, amount, 180000);
            }
        }else if (block.chainid==534352) {
            // l2
            if (token==ZERO_ADDRESS) {
                IL2NativeMessenger(L2_NATIVE_MESSAGER).sendMessage{value: amount}(receiver, amount, new bytes(0), 0);
            }else{
                IL2ERC20Messenger(L2_ERC20_MESSAGER).withdrawERC20(token, receiver, amount, 0);
            }
        }else{
            revert();
        }
    }

    // transfer to cex
    function withdraw(address token, address receiver, uint256 amount) external onlyCaller() {
        require(whitelist[receiver],"NOT_IN_WHITELIST");
        if (token == address(0)) {
            require(payable(receiver).send(amount), "FAILED");
        }else{
            if(token==WETH_ADDRESS){
                IWETH(WETH_ADDRESS).withdraw(amount);
                require(payable(receiver).send(amount), "FAILED");
            }else{
                require(IERC20(token).transfer(receiver, amount),"FAILED");
            }
        }
        emit OnWithdraw(token, receiver, amount);
    }

    // transfer to owner
    function refund(address token, address receiver, uint256 amount) external onlyOwner {
        if (token == address(0)) {
            require(payable(receiver).send(amount), "FAILED");
        }else{
            if(token==WETH_ADDRESS){
                IWETH(WETH_ADDRESS).withdraw(amount);
                require(payable(receiver).send(amount), "FAILED");
            }else{
                require(IERC20(token).transfer(receiver, amount),"FAILED");
            }
        }
        emit OnRefund(token, receiver, amount);
    }

    // set owner
    function setOwner(address user) external onlyOwner {
        owner = user;
        emit OnSetOwner(user);
    }

    // set caller
    function setCaller(address user) external onlyOwner {
        caller = user;
        emit OnSetCaller(user);
    }

    // set witelist
    function setWhitelist(address[] memory callers, bool status) external onlyOwner {
        for (uint8 i=0;i<callers.length;i++) {
            whitelist[callers[i]] = status;
        }
        emit OnSetWhitelist(callers, status);
    }

    // set allowance
    function setAllowance(address[] memory tokens, address spender) external onlyOwner() {
        for (uint8 i=0;i<tokens.length;i++) {
            IERC20(tokens[i]).approve(spender, ~uint(0));
        }
        emit OnSetAllowance(tokens, spender, ~uint(0));
    }

}