// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Factory {
    event Deployed(address addr, uint256 salt);

    function deploy(bytes memory bytecode, uint256 salt, address owner) public returns (address) {
        address addr;
        bytes memory deploymentData = abi.encodePacked(bytecode, abi.encode(owner));
        assembly {
            addr := create2(0, add(deploymentData, 0x20), mload(deploymentData), salt)
        }
        require(addr != address(0), "Deploy failed");
        emit Deployed(addr, salt);
        return addr;
    }

    function getAddress(bytes memory bytecode, uint256 salt, address owner) public view returns (address) {
        bytes memory deploymentData = abi.encodePacked(bytecode, abi.encode(owner));
        bytes32 hash = keccak256(
            abi.encodePacked(
                bytes1(0xff),
                address(this),
                salt,
                keccak256(deploymentData)
            )
        );
        return address(uint160(uint256(hash)));
    }
}