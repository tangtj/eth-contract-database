
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/access/Ownable2Step.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)

pragma solidity ^0.8.20;

import {Ownable} from "./Ownable.sol";

/**
 * @dev Contract module which provides access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is specified at deployment time in the constructor for `Ownable`. This
 * can later be changed with {transferOwnership} and {acceptOwnership}.
 *
 * This module is used through inheritance. It will make available all functions
 * from parent (Ownable).
 */
abstract contract Ownable2Step is Ownable {
    address private _pendingOwner;

    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Returns the address of the pending owner.
     */
    function pendingOwner() public view virtual returns (address) {
        return _pendingOwner;
    }

    /**
     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual override onlyOwner {
        _pendingOwner = newOwner;
        emit OwnershipTransferStarted(owner(), newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual override {
        delete _pendingOwner;
        super._transferOwnership(newOwner);
    }

    /**
     * @dev The new owner accepts the ownership transfer.
     */
    function acceptOwnership() public virtual {
        address sender = _msgSender();
        if (pendingOwner() != sender) {
            revert OwnableUnauthorizedAccount(sender);
        }
        _transferOwnership(sender);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/DiamondHand.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable2Step.sol";
import {IDiamondNFTWrapper} from "./interfaces/IDiamondNFTWrapper.sol";
import {IBlazeStaking} from "./interfaces/IBlazeStaking.sol";


contract DiamondHand is ReentrancyGuard, Ownable2Step {
    IDiamondNFTWrapper dNFT;

    IBlazeStaking blazeStaking;

    uint32 public immutable i_initialTimestamp;

    uint256 public immutable i_periodDuration = 1 days;

    /// @notice Records the total batches purchased by an account in each cycle
    mapping(address => mapping(uint256 => uint256)) public accCycleAllTickets;

    /// @notice Total number of batches purchased in each cycle
    mapping(uint256 => uint256) public cycleTotalTickets;

    /// @notice Last active cycle for each account
    mapping(address => uint256) public lastClaimedCycle;

    /// @notice Total accrued fees per cycle
    mapping(uint256 => uint256) public cycleAccruedPayout;

    /// @notice Event emitted when a new participation is made.
    event Participated(address indexed userAddress, uint256 indexed cycle, uint256 tickets);

    event RewardsClaimed(address indexed userAddress, uint256 cycle, uint256 rewards);

    constructor(address _diamondNFTWrapperAddress, address _blazeStaking, uint32 _startTimestamp) Ownable(_msgSender()) {
        i_initialTimestamp = _startTimestamp;
        dNFT = IDiamondNFTWrapper(_diamondNFTWrapperAddress);
        blazeStaking = IBlazeStaking(_blazeStaking);
    }

    receive() external payable {
        (, uint256 currentCycle, ) = getCurrentDayAndCycleDetails();
        cycleAccruedPayout[currentCycle] += msg.value;
    }

    function participate() external nonReentrant {
        (, uint256 currentCycle, ) = getCurrentDayAndCycleDetails();
        uint256 tickets = 0;

        uint userTicket = accCycleAllTickets[_msgSender()][currentCycle];
        if (userTicket > 0) {
            cycleTotalTickets[currentCycle] -= userTicket; //bakaNingen
        }

        tickets = getMintedNFT(_msgSender()) + getBlazeStake(_msgSender());

        cycleTotalTickets[currentCycle] += tickets;
        accCycleAllTickets[_msgSender()][currentCycle] = tickets;

        emit Participated(_msgSender(), currentCycle, tickets);
    }

    /// @notice Claims accrued rewards for the caller.
    function claimRewards() external nonReentrant {
        (, uint256 currentCycle, ) = getCurrentDayAndCycleDetails();
        uint256 totalPayoutShare;
        for (uint256 x = lastClaimedCycle[_msgSender()] + 1; x < currentCycle; ++x) {
            uint256 rewardsForCurrentCycle = 0;
            if (cycleTotalTickets[x] > 0) {
                rewardsForCurrentCycle =
                    (accCycleAllTickets[_msgSender()][x] * cycleAccruedPayout[x]) /
                    cycleTotalTickets[x];
            }
            emit RewardsClaimed(_msgSender(), x, rewardsForCurrentCycle);
            totalPayoutShare += rewardsForCurrentCycle;
        }
        require(totalPayoutShare > 0, "Nothing to claim");
        lastClaimedCycle[_msgSender()] = currentCycle - 1;
        _sendETH(_msgSender(), totalPayoutShare);
    }

    function getClaimableRewards(address user) external view returns (uint256 totalClaimableRewards) {
        (, uint256 currentCycle, ) = getCurrentDayAndCycleDetails();
        for (uint256 x = lastClaimedCycle[user] + 1; x < currentCycle; ++x) {
            uint256 rewardsForCurrentCycle = 0;
            if (cycleTotalTickets[x] > 0) {
                rewardsForCurrentCycle = (accCycleAllTickets[user][x] * cycleAccruedPayout[x]) / cycleTotalTickets[x];
            }
            totalClaimableRewards += rewardsForCurrentCycle;
        }
    }

    function getMintedNFT(address user) public view returns (uint256) {
        return dNFT.getMintedNFT(user) / 28;
    }

    function getBlazeStake(address user) public view returns (uint256) {
        (, uint256 currentCycle, ) = getCurrentDayAndCycleDetails();
        return blazeStaking.getUser2888BlazeToken(user, currentCycle) / (4000 * 1e18);
    }

    /// @dev Internal function to calculate current day and cycle.
    /// @dev Internal function to calculate current day, current cycle, and current day in the cycle.
    function getCurrentDayAndCycleDetails()
        public
        view
        returns (uint256 currentDay, uint256 currentCycle, uint256 currentDayInCycle)
    {
        currentDay = ((block.timestamp - i_initialTimestamp) / 1 days) + 1;
        currentCycle = (currentDay / 888) + 1;
        currentDayInCycle = currentDay % 888;
    }

    /// @dev Internal function to send ETH to a specified address.
    function _sendETH(address to, uint256 amount) private {
        (bool sent, ) = payable(to).call{value: amount}("");
        require(sent, "Blaze: Failed to send ETH");
    }
}

// File: contracts/interfaces/IBlazeStaking.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.24;

interface IBlazeStaking {
    function setFeeRewardsForAllCycle() external;

    function distributeFeeRewardsForAll() external;

    function _deploymentTimeStamp() external view returns (uint32);

    function getNextCycleDistributionDay(uint16) external view returns (uint256);

    function getUser2888BlazeToken(address user, uint256 cycle) external view returns (uint256 blazeTokenStaked);
}


// File: contracts/interfaces/IDiamondNFTWrapper.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.24;

interface IDiamondNFTWrapper {
    function getMintedNFT(address) external view returns (uint256);  // returns the number of NFTs minted & holding by the user   
}
