
// File: BlockBarMarketplace.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;

import {Marketplace} from "Marketplace.sol";


/**
 * @title BlockBarMarketplace
 * @author aarora
 */
contract BlockBarMarketplace is Marketplace {

    // Forward BlockBarBTL ERC721 and Chainlink price feed address to Marketplace
    constructor(
        address blockbarBtlContractAddress,
        address priceFeedAddress
    ) Marketplace(blockbarBtlContractAddress, priceFeedAddress) {}

    /**
    * @notice Get name of the contract
    *
    * @return nameOfContract string representation of BlockBarMarketplace
    */
    function name() external pure returns (string memory nameOfContract) {
        return "BlockBarMarketplace";
    }
}


// File: Marketplace.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;


import {Listings} from "Listings.sol";
import {Listing} from "IListings.sol";
import {IMarketplace} from "IMarketplace.sol";

import {Counters} from "Counters.sol";
import {EnumerableSet} from "EnumerableSet.sol";


/**
 * @title Marketplace
 * @author aarora
 * @notice Marketplace handles sales of listings. Sales include transferring royalties, funds to seller,
 *         and tokens to buyers. Additionally, a sale of a listing will require the listing owner to
 *         provide approval to this contract address on BlockBarBTL ERC721 contract.
 */
contract Marketplace is Listings, IMarketplace {
    // Use counters for tracking sales
	using Counters for Counters.Counter;

    // Use EnumerableSet for royalties mapping.
    using EnumerableSet for EnumerableSet.AddressSet;

    Counters.Counter private _sales;

    // Define Marketplace royalty share
    uint96 private _marketplaceFee = 1000;
    uint96 public constant FEE_DENOMINATOR = 10000;

    // Forward constructor params to Listings contract to initial ERC721 and PriceFeed contracts.
    constructor(
        address blockbarBtlContractAddress,
        address priceFeedAddress
    ) Listings(blockbarBtlContractAddress, priceFeedAddress) {}

    /**
     * @notice Validate a listing by performing the following checks:
     *         - The owner of the tokens in the listing should match the listing owner
     *         - The listing should have isListed set to true
     *         - The listing should have validUntil greater than the block timestamp. Otherwise the listing has expired.
     *         - The owner of listing should have provided approval to contract address on BlockBarBTL contract
     *
     * @param  listingId ID of the listing to validate.
     *
     * @return isValid Returns whether the listing can be purchase or not.
     */
    function validate(uint256 listingId) external view returns (bool isValid) {
        Listing memory listing = _getListing(listingId);
        // Initial checks for a quick revert.
        require(listing.isListed, "Cannot buy unlisted NFT");
        require(listing.validUntil > block.timestamp, "Listing has expired");

        // If the tokens have been sold external to this contract, the listing is no longer valid.
        for(uint256 i; i < listing.tokenIds.length; i++) {
            require(_blockBarBtlContract.ownerOf(listing.tokenIds[i]) == listing.owner, "Owner mismatch");
        }

        // If the token holder has revoked permissions for this contract address, the listing is no longer valid.
        require(_blockBarBtlContract.isApprovedForAll(listing.owner, address(this)), "Seller has revoked permissions");
        return true;
    }

    /**
     * @notice Swap function is used to purchase a valid listing. A valid listing equates to the following being true:
     *                 - The owner of the tokens in the listing should match the listing owner
     *                 - The listing should have isListed set to true
     *                 - The listing should have validUntil greater than the block timestamp.
     *                   Otherwise the listing has expired.
     *                 - The owner of listing should have provided approval to contract address on BlockBarBTL contract
     *                 - The buyer should send exact amount of funds (as the listing amount) if the listing currency
     *                   is in ETH.
     *                 - The buyer should send within the threshold of slippage if the listing is in USD
     *          If all of the above are true, the swap function will send out royalties and
     *          transfer remainder to the previous owner before transferring the tokens from the seller to the buyer.
     *          Once all of the above is done, the function will increment the total sales counter.
     *
     * @param  listingId ID of the listing for sale.
     */
    function swap(uint256 listingId) external payable nonReentrant whenNotPaused {
        require(msg.value != 0, "Amount sent cannot be 0");
        Listing memory listing = _getListing(listingId);
        // Initial checks for quick revert.
        require(listing.isListed, "Cannot buy unlisted NFT");
        require(listing.validUntil > block.timestamp, "Listing has expired");
        require(_blockBarBtlContract.isApprovedForAll(listing.owner, address(this)), "Seller revoked permissions");
        if (listing.forSpecificBuyer) {
            // If the listing is for a specific buyer, only that address can purchase it.
            require(listing.buyerAddress == msg.sender, "Listing is not for public sale");
        }
        uint256 amount = listing.amount;
        uint256 fullAmount = msg.value;
        if (listing.currency == USD_CURRENCY) {
            // If listing is in USD, validate funds received to be within acceptable threshold to allow the sale.
            amount = _convertUSDWeiToETHWei(amount);
            require(_isClose(amount, fullAmount, 5), "Amount does not match payment for USD listing");
        }
        else {
            // If listing is in ETH, the funds send should match exactly to the listing amount.
            require(amount == fullAmount, "Amount does not match payment for ETH listing");
        }

        // increment sales counter.
        _sales.increment();
        // Disable the listing to avoid attempts to purchase it.
        _disableListing(listingId);
        // Evenly split the full amount into amount per token for royalty calculation
        uint256 listPriceOfTokenId = fullAmount / listing.tokenIds.length;

        for(uint256 i; i < listing.tokenIds.length; i++) {
            uint256 tokenId = listing.tokenIds[i];
            // For each token in the listing, validate the owner matches. Otherwise the listing is no longer valid.
            require(_blockBarBtlContract.ownerOf(tokenId) == listing.owner, "Owner mismatch");
            uint256 amountToSendToRoyaltyCollector = (listPriceOfTokenId * _marketplaceFee) / FEE_DENOMINATOR;
            // _send funds will revert the transaction if insufficient balance or if collector cannot receive funds.
            _sendFunds(_owner, amountToSendToRoyaltyCollector);
            // Emit event for royalties sent.
            emit TransferToRoyaltiesCollector(tokenId, _owner, _marketplaceFee, amountToSendToRoyaltyCollector);
            // Subtract royalty amount from full amount to calculate sellers' payout.
            fullAmount -= amountToSendToRoyaltyCollector;
            // for each token in the listing, call ERC721 safeTransferFrom to move tokens to the buyers' wallet.
            _blockBarBtlContract.safeTransferFrom(listing.owner, msg.sender, listing.tokenIds[i]);
        }

        // Send funds to seller with the remainder of the funds from buyer.
        _sendFunds(listing.payoutAddress, fullAmount);
        // Emit event confirming funds have been sent to previous owner.
        emit TransferToPreviousOwner(listingId, listing.payoutAddress, fullAmount);
        // Emit event confirming the listing has been sold
        emit Swap(listingId, msg.sender);
    }

    /**
    * @notice Private helper function used sending funds to EOAs or contracts.
    *         Will revert if the receiver cannot accept funds.
    *
    * @param receiver Address to send the funds to.
    * @param amount   Amount in Wei to send to the receiver.
    */
    function _sendFunds(address receiver, uint256 amount) private {
        // Ensure contract has enough funds to send.
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = receiver.call{value: amount}("");
        // Revert if funds cannot be send to the receiver.
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
    * @notice Drain function used for dust collection. Any remainder funds in the wallet can be drained by the admin.
    */
    function drain() external nonReentrant onlyRole(DEFAULT_ADMIN_ROLE) {
        // revert if there's nothing to drain
        uint256 amount = address(this).balance;
        require(amount > 0, "Nothing to drain");
        _sendFunds(msg.sender, amount);
    }

    /**
    * @notice Get number of sales on this contract
    *
    * @return numberOfSales Number of sales generated
    */
    function getSales() external view returns (uint256 numberOfSales) {
        return _sales.current();
    }

    /**
    * @notice Update marketplace royalties
    *
    * @param newMarketplaceFee New Marketplace Royalty. Most be greater than fee denominator
    */
    function setMarketplaceFee(uint96 newMarketplaceFee) external onlyRole(DEFAULT_ADMIN_ROLE) {
        // revert if there's nothing to drain
        require(newMarketplaceFee >= 100, "Must be at least 1%");
        require(newMarketplaceFee < FEE_DENOMINATOR, "Cannot be more than FEE_DENOMINATOR");
        _marketplaceFee = newMarketplaceFee;
    }

    /**
    * @notice Get marketplace fees
    */
    function getMarketplaceFee() external view returns (uint96 marketplaceFees){
        return _marketplaceFee;
    }
}


// File: Listings.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;

import {Utils} from "Utils.sol";
import {IListings, Listing} from "IListings.sol";
import {ExtendedAccessControl} from "ExtendedAccessControl.sol";
import {Counters} from "Counters.sol";
import {ERC721} from "ERC721.sol";


/**
 * @title Listings
 * @author aarora
 * @custom:coauthor hgaron
 * @notice Listings holds information related to all potential sales of BlockBar BTL tokens as listing.
 *         Each listing contains information about the seller, token IDs being sold, amount, currency,
 *         expiration date, and whether it is a public listing or for a specific buyer.
 *         Listings allows users to create, read, update and disable their own listings.
 */
contract Listings is IListings, Utils, ExtendedAccessControl {
    // Use Counters to track Listing IDs
	using Counters for Counters.Counter;
    Counters.Counter private _listingIds;

    // BlockBarBTL contract instantiated in the constructor
    ERC721 internal _blockBarBtlContract;

    // Store all listings
    mapping(uint256 => Listing) private _listings;

    /**
    * @notice Instantiation BlockBarBTL contract via generic ERC721 and forward the price feed address to parent
    *         parent contract. Additionally, set the owner of the contract as the caller.
    *
    * @param  blockBarBtl Address of the BlockBarBTL ERC721 contract
    * @param  priceFeed   Chainlink Price Feed for ETH/USD pair
    */
    constructor(address blockBarBtl, address priceFeed) Utils(priceFeed){
        require(blockBarBtl != address(0), "BlockBarBTL address cannot be 0");
        _blockBarBtlContract = ERC721(blockBarBtl);
    }

    /**
     * @notice Get information about a specific listing
     *
     * @param  listingId ID of the listing to retrieve information
     *
     * @return listing A struct of Listing containing information of the listing
     */
    function getListing(uint256 listingId) external view returns (Listing memory listing) {
        return _getListing(listingId);
    }

    /**
     * @notice Create a listing for anyone to purchase. Listing will expire after `validUntil`.
     *         Support currencies for listing: USD, ETH.
     *         If the listing is in USD, it must be greater that 0.01 USD or 1 cent.
     *         Caller can pass a different wallet to payoutAddress to receive funds from the sale.
     *         The caller/owner of the token IDs must provide this contract access to manage the token IDs on
     *         BlockBar BTL contract by calling setApprovalForAll with operator as the address of this contract.
     *
     * @param tokenIds      A list of BlockBar BTL token IDs to be included in the listing. Must be owned by the caller.
     * @param amount        Amount in USD or ETH for the sale of all BTL tokens passed into tokenIds.
     * @param currency      Currency of the listing. Supported options include USD and ETH.
     * @param payoutAddress An Ethereum wallet address where funds will be sent from this listings' sale.
     * @param validUntil    An expiration date in UNIX Timestamp (seconds).
     *
     * @return listingId    ID of the newly created listing
     */
    function createPublicListing(
        uint256[] calldata tokenIds,
        uint256 amount,
        bytes32 currency,
        address payoutAddress,
        uint256 validUntil
    ) external nonReentrant whenNotPaused returns(uint256 listingId) {
        // Call internal _createListing function. Inject false for isSpecificBuyer and 0 address for payoutAddress
        return _createListing(tokenIds, amount, currency, payoutAddress, validUntil, false, address (0));
    }

    /**
     * @notice Create a listing for a specific buyer. Listing will expire after `validUntil`.
     *         Support currencies for listing: USD, ETH.
     *         If the listing is in USD, it must be greater that 0.01 USD or 1 cent.
     *         Caller can pass a different wallet to payoutAddress to receive funds from the sale.
     *         The caller/owner of the token IDs must provide this contract access to manage the token IDs on
     *         BlockBar BTL contract by calling setApprovalForAll with operator as the address of this contract.
     *
     * @param tokenIds      A list of BlockBar BTL token IDs to be included in the listing. Must be owned by the caller.
     * @param amount        Amount in USD or ETH for the sale of all BTL tokens passed into tokenIds.
     * @param currency      Currency of the listing. Supported options include USD and ETH.
     * @param payoutAddress An Ethereum wallet address where funds will be sent from this listings' sale.
     * @param validUntil    An expiration date in UNIX Timestamp (seconds).
     * @param buyerAddress  An Ethereum wallet address for whom this listing is valid. No other address will be able
     *                      to purchase this listing.
     *
     * @return listingId    ID of the newly created listing
     */
    function createPrivateListing(
        uint256[] calldata tokenIds,
        uint256 amount,
        bytes32 currency,
        address payoutAddress,
        uint256 validUntil,
        address buyerAddress
    ) external nonReentrant whenNotPaused returns(uint256 listingId) {
        // Call internal _createListing function. Inject true for isSpecificBuyer
        return _createListing(tokenIds, amount, currency, payoutAddress, validUntil, true, buyerAddress);
    }

    /**
     * @notice Return the count of total listings ever created. Returns 0 if there are no listings.
     *         Does not exclude inactive/sold listings
     *
     * @return count    Count of listings
     */
    function listingsCount() external view returns(uint256 count) {
        // Returns 0 if there are no listings
        return _listingIds.current();
    }

    /**
     * @notice Disable a listing that is currently active. Only the owner of the listing can trigger it.
     *         Once disabled, no one will be able to purchase this listing.
     *x
     * @param listingId ID of the listing to be disabled.
     *
     */
    function disableListing(uint256 listingId) external nonReentrant whenNotPaused {
        // Retrieve the listing and validate owner before calling internal disable listing function
        require(_listings[listingId].owner == msg.sender, "Only owner can disable listing");
        _disableListing(listingId);
    }


    /**
    * @notice Update listing expiration date. Only owner of the listing can extend the listing.
    *         Listing must be valid - cannot be un-listed. The new expiration date must be in the future.
    *
    * @param listingId ID of the listing to update
    * @param validUntil New expiration date in UNIX timestamp (seconds)
    *
    * @return listing Update Listing struct
    */
    function updateListingExpiration(
        uint256 listingId,
        uint256 validUntil
    ) external nonReentrant returns(Listing memory listing) {
        return _updateListingExpiration(listingId, validUntil);
    }

    /**
     * @notice Internal function to create a listing.
     *         Listing may be created for a specific buyer by settings isSpecificBuyer to true and a non 0 address
     *         for buyerAddress.
     *         Listing will expire after `validUntil`.
     *         Support currencies for listing: USD, ETH.
     *         If the listing is in USD, it must be greater that 0.01 USD or 1 cent.
     *         Caller can pass a different wallet to payoutAddress to receive funds from the sale.
     *         The caller/owner of the token IDs must provide this contract access to manage the token IDs on
     *         BlockBar BTL contract by calling setApprovalForAll with operator as the address of this contract.
     *
     * @param tokenIds         A list of BlockBar BTL token IDs to be included in the listing.
     &                         Must be owned by the caller.
     * @param amount           Amount in USD or ETH for the sale of all BTL tokens passed into tokenIds.
     *                         USD amount must be padded with 1e18
     * @param currency         Currency of the listing. Supported options include USD and ETH.
     * @param payoutAddress    An Ethereum wallet address where funds will be sent from this listings' sale.
     * @param validUntil       An expiration date in UNIX Timestamp (seconds).
     * @param forSpecificBuyer Set to true if it is a private listing. BuyerAddress is required.
     * @param buyerAddress     Optional Ethereum wallet address for whom this listing is valid.
     *                         No other address will be able to purchase this listing.
     *                         Will be ignored if forSpecificBuyer is false.
     *
     * @return listingId    ID of the newly created listing
     */
    function _createListing(
        uint256[] calldata tokenIds,
        uint256 amount,
        bytes32 currency,
        address payoutAddress,
        uint256 validUntil,
        bool forSpecificBuyer,
        address buyerAddress
    ) internal returns(uint256) {
        // Initial checks for quick revert
        require(validUntil > block.timestamp + 1 days, "Listing cannot expire before tomorrow");
        require(amount > 0, "Amount must be greater than 0");
        require(currency == USD_CURRENCY || currency == ETH_CURRENCY, "invalid currency");
        require(payoutAddress != address(0), "Invalid payout address");
        require(tokenIds.length > 0, "Cannot create a listing without tokenIds");
        require(tokenIds.length <= 100, "Cannot create a listing more than 100 NFTs");

        // Listings in USD must be greater than 1 cent. USD amount must be padded with 1e18
        if(currency == USD_CURRENCY) {
            require(amount >= 1 * 1e16, "USD listing cannot be less than 1 cent or 1*1e16 Wei");
        }

        // Initial checks for private listings. Cannot be 0 address or self.
        if (forSpecificBuyer) {
            require(buyerAddress != address(0), "Invalid buyer address");
            require(buyerAddress != msg.sender, "Invalid buyer address");
        }

        // Validate the caller is owner of the BlockBarBTL tokens,
        // and has provided approval to manage tokens to this contract
        unchecked {
            for (uint256 i = 0; i< tokenIds.length; i++) {
                address _tokenOwner = _blockBarBtlContract.ownerOf(tokenIds[i]);
                require(_tokenOwner == msg.sender, "Only owner can list for sale");
                require(_blockBarBtlContract.isApprovedForAll(msg.sender, address(this)), "Seller revoked permissions");
            }
        }

        // Increment counter
        _listingIds.increment();

        // Counters are 0 indexed. Use current value to create a new listing
        uint256 listingId = _listingIds.current();

        // Add listing to storage for retrieval later
        _listings[listingId] = Listing({
            listingId: listingId,
            tokenIds:tokenIds,
            owner: msg.sender,
            payoutAddress: payoutAddress,
            validUntil: validUntil,
            forSpecificBuyer: forSpecificBuyer,
            buyerAddress: buyerAddress,
            isListed: true,
            amount: amount,
            currency: currency
        });

        emit ListingCreated(listingId, msg.sender);
        return listingId;
    }

    /**
     * @notice Internal function to disable a listing that is currently active.
     *         Only the owner of the listing can trigger deletion.
     *         Once disabled, no one will be able to purchase this listing.
     *         Will revert if the listing is already disabled.
     *
     * @param listingId ID of the listing to be disabled.
     */

    function _disableListing(uint256 listingId) internal {
        // Check if listing has already been disabled to save gas fees for the caller
        require(_listings[listingId].isListed, "Cannot disable unlisted listing");
        _listings[listingId].isListed = false;
        emit ListingDisabled(listingId);
    }

    /**
     * @notice Internal function to retrieve a listing
     *
     * @param listingId ID of the listing.
     *
     * @return listing a Listing struct containing information of the listing
     */
    function _getListing(uint256 listingId) view internal returns (Listing memory listing) {
        return _listings[listingId];
    }

    /**
    * @notice Internal function to update listing expiration date. Only owner of the listing can extend the listing.
    *         Listing must be valid - cannot be un-listed. The new expiration date must be in the future.
    *
    * @param listingId ID of the listing to update
    * @param validUntil New expiration date in UNIX timestamp (seconds)
    *
    * @return updatedListing Update Listing struct
    */
    function _updateListingExpiration(
        uint256 listingId,
        uint256 validUntil
    ) internal returns (Listing memory updatedListing) {
        require(_listings[listingId].isListed, "Cannot update unlisted listing");
        require(_listings[listingId].owner == msg.sender, "Only owner can change listing");
        require(validUntil > block.timestamp + 1 days, "Listing cannot expire before tomorrow");

        _listings[listingId].validUntil = validUntil;

        emit ListingUpdated(listingId, msg.sender, validUntil);

        return _listings[listingId];
    }
}


// File: Utils.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;

import {IUtils} from "IUtils.sol";
import {AggregatorV3Interface} from "AggregatorV3Interface.sol";
import "Multicall.sol";
/**
* @title Utils
* @author aarora
* @notice Utils provides utilities functions for performing conversions between ETH and USD,
*         determining whether two values are close to each other by a certain threshold or not.
*         This utilities are used to facilitate marketplace transactions.
*/
contract Utils is IUtils, Multicall {

    AggregatorV3Interface internal priceFeed;
    bytes32 public constant USD_CURRENCY = keccak256("USD");
    bytes32 public constant ETH_CURRENCY = keccak256("ETH");

    constructor (address priceFeedAddress) {
        require(priceFeedAddress != address(0), "Price feed aggregator address cannot be 0");

        priceFeed = AggregatorV3Interface(priceFeedAddress);
    }

    /**
     * @notice Utility for getting the bytes value of USD. Used for creating a listing.
     *
     * @return USDCurrency bytes32
     */
    function getUSDCurrencyBytes() external pure returns (bytes32 USDCurrency) {
        return USD_CURRENCY;
    }

    /**
     * @notice Utility for getting the bytes value of ETH. Used for creating a listing.
     *
     * @return ETHCurrency bytes32
     */
    function getETHCurrencyBytes() external pure returns (bytes32 ETHCurrency) {
        return ETH_CURRENCY;
    }

    /**
     * @notice Utility for retrieving ETH Price in USD from Chainlink oracle.
     *
     * @return ETHPriceInUSD Price of 1 ETH in USD
     */
    function getETHPriceInUSD() external view returns (uint256 ETHPriceInUSD) {
        return _getETHPriceInUSD();
    }

    /**
     * @notice Utility for converting USD cents padded by 1e18 (Wei representation) to ETH Wei.
     *
     * @param amountInUSD USD value in cents padded by 1e18 (Wei representation).
     *
     * @return ETHWei ETH Value in Wei of USD cents value padded by 1e18
     */
    function convertUSDWeiToETHWei(uint256 amountInUSD) external view returns(uint256 ETHWei) {
        return _convertUSDWeiToETHWei(amountInUSD);
    }

    /**
     * @notice Utility for converting ETH Wei to USD cents padded by 1e18 (Wei representation).
     *
     * @param amountInETH ETH value in Wei.
     *
     * @return USDWei USD cents padded by 1e18 value of ETH Wei
     */
    function convertETHWeiToUSDWei(uint256 amountInETH) external view returns(uint256 USDWei) {
        return _convertETHWeiToUSDWei(amountInETH);
    }

    /**
     * @notice Utility for comparing two values and determining whether they are close (based on the threshold %).
     *
     * @param originalAmount  Value to be considered the truth value.
     * @param compareToAmount Value to be tested. If this value is not within the threshold of the original value,
                              the function will return false.
     * @param threshold       Threshold for how close the above values need to be.
     *
     * @return valueIsClose boolean indicating whether two numbers are close or not.
     */
    function isClose(
        uint256 originalAmount,
        uint256 compareToAmount,
        uint256 threshold
    ) external pure returns (bool valueIsClose) {
        return _isClose(originalAmount, compareToAmount, threshold);
    }

    /**
     * @notice Internal function for retrieving ETH Price in USD from Chainlink oracle.
     *
     * @return ETHPriceInUSD Price of 1 ETH in USD
     */
    function _getETHPriceInUSD() internal view virtual returns(uint256 ETHPriceInUSD) {
        // Retrieve ETH Price in USD from Chainlink price feed.
        (
            uint80 roundId,
            int256 answer,
            uint256 startedAt,
            uint256 updatedAt,
            uint80 answeredInRound
        ) = priceFeed.latestRoundData();

        //check for stale data being returned from Chainlink data feed
        require(answeredInRound <= roundId, "Stale data being returned. Please try again");
        require(updatedAt > block.timestamp - 1 hours, "Freshness check failed for ETH/USD Price Feed");

        uint256 ethPrice = uint256(answer);

        // Revert if price is 0.
        require(ethPrice > 0, "Utils: ETH/USD Price Unavailable");
        return ethPrice;
    }

    /**
     * @notice Internal function for converting ETH Wei to USD cents padded by 1e18 (Wei representation).
     *
     * @param amountInETH ETH value in Wei.
     *
     * @return USDWei USD cents padded by 1e18 value of ETH Wei
     */
    function _convertETHWeiToUSDWei(uint256 amountInETH) internal view returns(uint256 USDWei) {
        uint256 ETHPriceInUSD = _getETHPriceInUSD();
        uint256 USDAmount = (amountInETH * ETHPriceInUSD) / 1e8;
        return USDAmount;
    }

    /**
     * @notice Internal function for converting USD cents padded by 1e18 (Wei representation) to ETH Wei.
     *
     * @param amountInUSD USD value in cents padded by 1e18 (Wei representation).
     *
     * @return ETHWei ETH Value in Wei of USD cents value padded by 1e18
     */
    function _convertUSDWeiToETHWei(uint256 amountInUSD) internal view returns(uint256 ETHWei) {
        uint256 ETHPriceInUSD = _getETHPriceInUSD();
        uint256 ETHAmount = (amountInUSD * 1e8) / ETHPriceInUSD;
        return ETHAmount;
    }

    /**
     * @notice Internal function for comparing two values and determining whether
     *         they are close (based on the threshold %).
     *
     * @param originalAmount  Value to be considered the truth value.
     * @param compareToAmount Value to be tested. If this value is not within the threshold of the original value,
                              the function will return false.
     * @param threshold       Threshold for how close the above values need to be.
     *
     * @return valueIsClose boolean indicating whether two numbers are close or not.
     */
    function _isClose(
        uint256 originalAmount,
        uint256 compareToAmount,
        uint256 threshold
    ) internal pure returns (bool valueIsClose) {
        require(originalAmount != 0, "Original amount cannot be 0");
        require(compareToAmount != 0, "Compare to amount cannot be 0");
        int256 difference = (int(compareToAmount) - int(originalAmount)) * 10 ** 18;
        uint256 absDifference = uint256(difference >= 0 ? difference : -difference);
        uint256 percentageError = (absDifference / (originalAmount)) * 100;
        return percentageError <= (threshold * 10 ** 18);
    }
}


// File: IUtils.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;


/**
 * @title IUtils
 * @author aarora
 * @notice IUtils contains all external function interfaces and events
 */
interface IUtils {

    /**
     * @notice Utility for getting the bytes value of USD. Used for creating a listing.
     *
     * @return USDCurrency bytes32
     */
    function getUSDCurrencyBytes() external pure returns (bytes32 USDCurrency);

    /**
     * @notice Utility for getting the bytes value of ETH. Used for creating a listing.
     *
     * @return ETHCurrency bytes32
     */
    function getETHCurrencyBytes() external pure returns (bytes32 ETHCurrency);

    /**
     * @notice Utility for retrieving ETH Price in USD from Chainlink oracle.
     *
     * @return ETHPriceInUSD Price of 1 ETH in USD
     */
    function getETHPriceInUSD() external view returns (uint256 ETHPriceInUSD);

    /**
     * @notice Utility for converting USD cents padded by 1e18 (Wei representation) to ETH Wei.
     *
     * @param amountInUSD USD value in cents padded by 1e18 (Wei representation).
     *
     * @return ETHWei ETH Value in Wei of USD cents value padded by 1e18
     */
    function convertUSDWeiToETHWei(uint256 amountInUSD) external view returns(uint256 ETHWei);

    /**
     * @notice Utility for converting ETH Wei to USD cents padded by 1e18 (Wei representation).
     *
     * @param amountInETH ETH value in Wei.
     *
     * @return USDWei USD cents padded by 1e18 value of ETH Wei
     */
    function convertETHWeiToUSDWei(uint256 amountInETH) external view returns(uint256 USDWei);

    /**
     * @notice Utility for comparing two values and determining whether they are close (based on the threshold %).
     *
     * @param originalAmount  Value to be considered the truth value.
     * @param compareToAmount Value to be tested. If this value is not within the threshold of the original value,
                              the function will return false.
     * @param threshold       Threshold for how close the above values need to be.
     *
     * @return valueIsClose boolean indicating whether two numbers are close or not.
     */
    function isClose(
        uint256 originalAmount,
        uint256 compareToAmount,
        uint256 threshold
    ) external pure returns (bool valueIsClose);
}


// File: AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(uint80 _roundId)
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );
}


// File: Multicall.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)

pragma solidity ^0.8.0;

import "Address.sol";

/**
 * @dev Provides a function to batch together multiple calls in a single external call.
 *
 * _Available since v4.1._
 */
abstract contract Multicall {
    /**
     * @dev Receives and executes a batch of function calls on this contract.
     */
    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {
        results = new bytes[](data.length);
        for (uint256 i = 0; i < data.length; i++) {
            results[i] = Address.functionDelegateCall(address(this), data[i]);
        }
        return results;
    }
}


// File: Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: IListings.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;

struct Listing {
    uint256 listingId;
    uint256[] tokenIds;
    uint256 amount;
    bytes32 currency;
    uint256 validUntil;
    address owner;
    address payoutAddress;
    address buyerAddress;
    bool forSpecificBuyer;
    bool isListed;
}

/**
 * @title IListings
 * @author aarora
 * @notice IListings contains all external function interfaces and events
 */
interface IListings {
    /**
    * @dev Emit an event whenever a listing is created
    *
    * @param listingId The ID of the listing
    * @param owner     The owner of the listing
    **/
    event ListingCreated(uint256 indexed listingId, address indexed owner);

    /**
    * @dev Emit an event whenever a listing is updated
    *
    * @param listingId The ID of the listing
    * @param owner     The owner of the listing
    **/
    event ListingUpdated(uint256 indexed listingId, address indexed owner, uint256 indexed validUntil);

    /**
    * @dev Emit an event whenever a listing is disabled
    *
    * @param listingId The ID of the listing
    **/
    event ListingDisabled(uint256 indexed listingId);

    /**
     * @notice Get information about a specific listing
     *
     * @param  listingId ID of the listing to retrieve information
     *
     * @return listing A struct of Listing containing information of the listing
     */
    function getListing(uint256 listingId) external view returns (Listing memory listing);

    /**
     * @notice Create a listing for anyone to purchase. Listing will expire after `validUntil`.
     *         Support currencies for listing: USD, ETH.
     *         If the listing is in USD, it must be greater that 0.01 USD or 1 cent.
     *         Caller can pass a different wallet to payoutAddress to receive funds from the sale.
     *         The caller/owner of the token IDs must provide this contract access to manage the token IDs on
     *         BlockBar BTL contract by calling setApprovalForAll with operator as the address of this contract.
     *
     * @param tokenIds      A list of BlockBar BTL token IDs to be included in the listing. Must be owned by the caller.
     * @param amount        Amount in USD or ETH for the sale of all BTL tokens passed into tokenIds.
     * @param currency      Currency in bytes32 of the listing. Supported options include USD and ETH.
     * @param payoutAddress An Ethereum wallet address where funds will be sent from this listings' sale.
     * @param validUntil    An expiration date in UNIX Timestamp (seconds).
     *
     * @return listingId    ID of the newly created listing
     */
    function createPublicListing(
        uint256[] calldata tokenIds,
        uint256 amount,
        bytes32 currency,
        address payoutAddress,
        uint256 validUntil
    ) external returns(uint256 listingId);

    /**
     * @notice Create a listing for a specific buyer. Listing will expire after `validUntil`.
     *         Support currencies for listing: USD, ETH.
     *         If the listing is in USD, it must be greater that 0.01 USD or 1 cent.
     *         Caller can pass a different wallet to payoutAddress to receive funds from the sale.
     *         The caller/owner of the token IDs must provide this contract access to manage the token IDs on
     *         BlockBar BTL contract by calling setApprovalForAll with operator as the address of this contract.
     *
     * @param tokenIds      A list of BlockBar BTL token IDs to be included in the listing. Must be owned by the caller.
     * @param amount        Amount in USD or ETH for the sale of all BTL tokens passed into tokenIds.
     * @param currency      Currency of the listing. Supported options include USD and ETH.
     * @param payoutAddress An Ethereum wallet address where funds will be sent from this listings' sale.
     * @param validUntil    An expiration date in UNIX Timestamp (seconds).
     * @param buyerAddress  An Ethereum wallet address for whom this listing is valid. No other address will be able
     *                      to purchase this listing.
     *
     * @return listingId    ID of the newly created listing
     */
    function createPrivateListing(
        uint256[] calldata tokenIds,
        uint256 amount,
        bytes32 currency,
        address payoutAddress,
        uint256 validUntil,
        address buyerAddress
    ) external returns(uint256 listingId);

    /**
     * @notice Return the count of total listings ever created. Returns 0 if there are no listings.
     *         Does not exclude inactive/sold listings
     *
     * @return count    Count of listings
     */
    function listingsCount() external view returns(uint256 count);

    /**
     * @notice Disable a listing that is currently active. Only the owner of the listing can trigger it.
     *         Once disable, no one will be able to purchase this listing.
     *
     * @param listingId ID of the listing to be disabled.
     */
    function disableListing(uint256 listingId) external;

    /**
    * @notice Update listing expiration date. Only owner of the listing can extend the listing.
    *         Listing must be valid - cannot be un-listed. The new expiration date must be in the future.
    *
    * @param listingId ID of the listing to update
    * @param validUntil New expiration date in UNIX timestamp (seconds)
    *
    * @return updatedListing Update Listing struct
    */
    function updateListingExpiration(
        uint256 listingId,
        uint256 validUntil
    ) external returns(Listing memory updatedListing);
}


// File: ExtendedAccessControl.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;

import {Pausable} from "Pausable.sol";
import {AccessControl} from "AccessControl.sol";
import {ReentrancyGuard} from "ReentrancyGuard.sol";
import {IExtendedAccessControl} from "IExtendedAccessControl.sol";

/**
* @title ExtendedAccessControl
* @author aarora
* @notice ExtendedAccessControl inherits AccessControl, Pausable, ReentrancyGuard to add control and security layers.
          Additionally, the contract defines roles for fine grain access control.
          Inheriting this contract enables ability to pause, unpause the contract.
          The DEFAULT_ADMIN_ROLE has the ability to drain the marketplace for dust collection.
*/
contract ExtendedAccessControl is IExtendedAccessControl, AccessControl, Pausable, ReentrancyGuard {

    // Declare custom role.
    // PAUSER ROLE has ability to pause/unpause the contract
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    address internal _owner;

    constructor(){
        _owner = msg.sender;
        // DEFAULT ADMIN ROLE has the ability to assign PAUSER ROLE
        // set contract caller to have the following roles.
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
    }

    /**
    * @notice get the owner of this contract
    *
    **/
    function getOwner() external view returns(address owner) {
        return _owner;
    }

    /**
     * @notice Pause contract modification activity. Only Pauser role can call this function.
     */
    function pause() external onlyRole(PAUSER_ROLE) {
        _pause();
    }

    /**
     * @notice Unpause contract modification activity. Only Pauser role can call this function.
     */
    function unpause() external onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    function _revokeRole(bytes32 role, address account) internal virtual override {
        require(role != DEFAULT_ADMIN_ROLE, "Cannot revoke default admin role");
        super._revokeRole(role, account);
    }
}


// File: Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "IAccessControl.sol";
import "Context.sol";
import "Strings.sol";
import "ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `_msgSender()` is missing `role`.
     * Overriding this function changes the behavior of the {onlyRole} modifier.
     *
     * Format of the revert message is described in {_checkRole}.
     *
     * _Available since v4.6._
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleGranted} event.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleRevoked} event.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     *
     * May emit a {RoleRevoked} event.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * May emit a {RoleGranted} event.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleGranted} event.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleRevoked} event.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}


// File: IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: IExtendedAccessControl.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;

import {IAccessControl} from "IAccessControl.sol";


/**
 * @title IExtendedAccessControl
 * @author aarora
 * @notice IExtendedAccessControl contains all external function interfaces and events
 */
interface IExtendedAccessControl is IAccessControl {
    /**
    * @notice get the owner of this contract
    *
    **/
    function getOwner() external returns(address owner);

    /**
     * @notice Pause contract modification activity
     */
    function pause() external;

    /**
     * @notice Unpause contract modification activity
     */
    function unpause() external;

}


// File: Counters.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


// File: ERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "IERC721.sol";
import "IERC721Receiver.sol";
import "IERC721Metadata.sol";
import "Address.sol";
import "Context.sol";
import "Strings.sol";
import "ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: address zero is not a valid owner");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: invalid token ID");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        _requireMinted(tokenId);

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not token owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        _requireMinted(tokenId);

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
        _safeTransfer(from, to, tokenId, data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits an {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits an {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Reverts if the `tokenId` has not been minted yet.
     */
    function _requireMinted(uint256 tokenId) internal view virtual {
        require(_exists(tokenId), "ERC721: invalid token ID");
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}


// File: IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: IERC721Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


// File: IMarketplace.sol
// SPDX-License-Identifier:  AGPL-3.0-or-later
pragma solidity 0.8.18;


/**
 * @title IMarketplace
 * @author aarora
 * @notice IMarketplace contains all external function interfaces and events
 */
interface IMarketplace {
    /**
    * @dev Emit an event whenever a listing is sold and royalties are transferred out.
    *
    * @param tokenId   The ID of the token for which the royalties were sent.
    * @param collector Address of the royalty collector
    * @param share     Share of the royalties sent out.
    * @param amount    Amount in Wei sent out.
    **/
    event TransferToRoyaltiesCollector(uint256 indexed tokenId, address indexed collector, uint256 share, uint256 amount);

    /**
    * @dev Emit an event whenever a listing is sold and funds are transferred to the seller.
    *
    * @param listingId The ID of the listing for which the funds were transferred to the seller.
    * @param collector Address of the seller
    * @param amount    Amount in Wei sent out.
    **/
    event TransferToPreviousOwner(uint256 indexed listingId, address indexed collector, uint256 indexed amount);

    /**
    * @dev Emit an event whenever a listing is sold.
    *
    * @param listingId The ID of the listing for which the funds were transferred to the seller.
    * @param buyer     Address of the buyer
    **/
    event Swap(uint256 indexed listingId, address indexed buyer);

    /**
     * @notice Validate a listing by performing the following checks:
     *         - The owner of the tokens in the listing should match the listing owner
     *         - The listing should have isListed set to true
     *         - The listing should have validUntil greater than the block timestamp. Otherwise the listing has expired.
     *         - The owner of listing should have provided approval to contract address on BlockBarBTL contract
     *
     * @param  listingId ID of the listing to validate.
     *
     * @return isValid Returns whether the listing can be purchase or not.
     */
    function validate(uint256 listingId) external view returns (bool isValid);

    /**
     * @notice Swap function is used to purchase a valid listing. A valid listing equates to the following being true:
     *                 - The owner of the tokens in the listing should match the listing owner
     *                 - The listing should have isListed set to true
     *                 - The listing should have validUntil greater than the block timestamp.
     *                   Otherwise the listing has expired.
     *                 - The owner of listing should have provided approval to contract address on BlockBarBTL contract
     *                 - The buyer should send exact amount of funds (as the listing amount) if the listing currency
     *                   is in ETH.
     *                 - The buyer should send within the threshold of slippage if the listing is in USD
     *          If all of the above are true, the swap function will send out royalties and
     *          transfer remainder to the previous owner before transferring the tokens from the seller to the buyer.
     *          Once all of the above is done, the function will increment the total sales counter.
     *
     * @param  listingId ID of the listing for sale.
     */
    function swap(uint256 listingId) external payable;

    /**
    * @notice Drain function used for dust collection. Any remainder funds in the wallet can be drained by the admin.
    */
    function drain() external;

    /**
    * @notice Get number of sales on this contract
    *
    * @return numberOfSales Number of sales generated
    */
    function getSales() external view returns (uint256 numberOfSales);
}


// File: EnumerableSet.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 *
 * [WARNING]
 * ====
 *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.
 *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.
 *
 *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.
 * ====
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastValue;
                // Update the index for the moved value
                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }
}

