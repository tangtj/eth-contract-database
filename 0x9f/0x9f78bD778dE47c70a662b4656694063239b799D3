
// File: contracts/ZeroXGakuen.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "@openzeppelin/contracts/interfaces/IERC2981.sol";
import "./ERC721ASGakuen.sol";

//
//
//                                              [Note from Dev]
//                                         PRAISE THE KAORI-CHAN!!!!!
//
//                                                .::-----:::.
//                                         :=+#%%%@@@@@%%%#####*+=-.
//                                .-===-=#@@@@@@@@@@@%%###########***=-.
//                             -+*#******#######%@@@%#####%##########***+-
//                          -*##%###*********#***##%%@###**#%%%########***#=
//                       .+%%%@@###########%@@######*##%*##***#@%########**%#-
//                     :*@@@@@%%@@@@@@@@@@@@@@@#%@@%##########**#@%#########%#*:
//                    *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%############%@%########%##=
//                  -@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%@@%%####%@%#%#####%##=
//                 +@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@#*%@@@%%%%%@@%%%%##@###+
//              .+@@@@@@@@@@@@@@@@@@@@@#*@@@@@@@@@@@@@@@@@@@#*@@@@@%%%%@@@%%%%%@%%#+
//             =%*@@@@@@@@@@@@@@@@@@@@+:#@@@@@@@@@@@@@@@@@@@@#*@@@@@@@%%@@@@@%%@%%%%-
//           .++*%@@@@@@@@@@@@@@@@@@@=:.%@@@@@@@@@@@@@%@@@@@@@%%@@@#%@@%@@@@@@@@@%%%#
//          .-.**@@@@@@@@@@@@@@@@@@@=.  %@@@@@@@@@@@@@@%%@@@@@@@@%:=%@@@%@@@@@@@@@@@%+
//          - +*#%@@@@@@@@@@@@@@@@@+    %@@@@@@@@@@@@@@@@%=-=+*%#:*@@@@@@%@@@@@@@@@@@%.
//         .:.-*#%@@@@@@*@@@@@@@@@*     #@*+@@@@@%@@@@@@@@@@@%#-=%%#%@@@@@@@@@@@@@@@@@+
//         . :.#*%@@@@@##@@@@@@@@%      +@%+%%@@@@#%@@@@@@@@@#:#@@@@@**@@@@@@@@@%@@@@@%
//         .=  %+%@@@@@*@@@@@@#@@:      -@@#@@@@@@@%@@@@@@@@=+#@@@%%@@%#@@@@@@@@%%@@@@@:
//         := :@*@@@@@@@@@+@@*-@*       .#@@@@@@@@@@@@@@@@@#%@@@@@%=#+.*@@@%@@@@**@@@@@-
//         .: +@%%@@@@@@@=-@@:-@:        -@%@@@@@@*@@@@@@@@@@#===+*#:=%@@@@#@@@%::@@@@@+
//         .  +@@@@@@@@@=. =+  *         .=**@@%@@#*@@@@@@@@@@@@@%*:#%#%%@@+#@@+-.#@@@@*
//         ...-#@@@@@@@%.:. .             .--:*#+%@-:*@@@@@@@@@@@+-@@@@@%+#=+@%=++*@@@@#
//          .. :*@@@@@@#@@##%+:              .    :=. .=*%@@@@@*=#%@@@@@#@@-#@%####@@@@%
//          .. ..=#@@@@+%: #@@@#.                 .....  .:%@@@#@@@@@#@#@@#-@@@@@@%@@@@%
//           -  .:.*@@@+.. #@@*@@:             -#@@@@@@#@@=**#@@@@%#+*@@@@-*@@@@@@@@@@@@
//                :*@%@+.  -@@@@#             :%:+@@@:@@**#@*+@@@@#*#@@@@+-@%@@@@@@@@@@%
//                 .*%%-   .-++-                 +@@@*@@= +-:@@@@@@@@@@@*=:*%@@@@@@@@@@*
//                 .*-%+.                        .#@@@#:   .+*@@@@@@@@@%**.+@@@@@@@@@@@-
//                 %#%@:                          ...      .+@@@@@@%*@@* --%@@@@@@@@@@*.
//                #@%@@-                                  =%#@@@@@..**::.=+@@@@@@@@@@%=
//               :@-#@@+                                 :. :@@@@%.-=+:=*#@@@@@@@@@@%*=
//               *= +@%+-                                  .+@@@@*+.=#+=+@@@@@@@@@@@%%-
//               #  :%* .=.                               -#%@@@%##%+=+%@@@@@@@@@@@@@#
//               +   =- +@%-     .=---:.                -*%#%@@#*==*+@@@@@@@@@@@@@@@@.
//               =   *=*+-. =: .+-  -+              .---.#%%@@%#+=*#%@@@@@@@@@@@@@@@-
//                * :=  .  . =%#:   =-          :---:....@@@@%%##%@@@@@@@@@@@@@@@@@=
//                 -..    ::.=@++:. #      :-=++-. ......@@@@@%%@@@@@@@@@@@@@@@@@%:
//                       -:::-*#+=+*=.::+%%*=-.     . .:----+%%@@@#*@@@@@#+=#@%*=.
//                                      =#-.        .:. :   . ==-. . ::.   .:.
//                                      -:               .
//                                      :                :
//                                      :                =.           ... .
//                                      -                 =..:::::...:..  .=+.
//                                     :.                 ::.::..:==:       -%+
//                                    :-               .--:::-:-+%*.         -%#
//                                 .:--              .=%%%##*-:#@*            +%=
//                              .::.              ..+%%%@@@*..+@@+##:         :%%
//                -=++*##%@%-               .....:+%%*##%#- .*@@@@+-.         :*@=
//               :#######+==-.           ...   -*@%+*++::   +@@@@+===.    ..:.:-#%
//               -=+++=*+--::-=:     ..     :+@@@@+=:::    =%@@@@#+++-.:::::::::-
//               :::::::...  .:-         .=%@@@@@#-.   .  .#@@@@+===-:::........:
//               .... .      :+#%+:   .:=*%@@@#=:.-.      =@@@#=:..             :
//             .     ..    .-+*##**=+#%@@@@@*--+%@-     .=+@%-                 -
//             :    ::...::-=*#%%%%%%@@@@@@##@@@%.      =#+@=                 .-
//        .    :. :-::::::-===+++*%%###%@@@@@%*-        #%@@.                 :.
//         ... -:==-::.. .:--=--=+**#%%%%%#*-.         .#@@%                 .-
//           .-+==-.    .:-----=*+===++*=-.             @@@-                .::
//           +=-:          .:-=-:.:---..               :@@#                 .=
//         :-:.            ..   .:..                   -@@.                ..-
//
//
//  @@@@@%+@@@@@-@@@@%#: =%@@@#-           -#@@@%+  -@@@@#  %@@--@@#.@@%.%@@:+@@@@@.*%%- %%#
// .=*@@@:%@@*==+@@+:@@#*@@#-@@@-@@#-+#@@#:@@@.@@@: %@@@@# .@@%-@@# +@@.:@@@ %@*==+ @@@#-@@+
//  .@@@-.%@#=- %@#*=#@=@@@-+@@* *@@--@@* *@@* === =@@.@@# =@@*%@#  %@@:=@@*.%@#=- -@@@@#@@:
// .@@@- +@@@@#.@@@@@@*-@@@ %@@-  =@@@@+  @@@ @@@#.@@@:@@# #@@@@@+ .@@@.=@@-+@@@@#.*@@%@@@@
//.@@@=  #@#=  =@@%:@@%*@@*:@@@  .%@--@%::@@@  %@=*@@@@@@#.@@%-%@% =@@%:%@@ #@#=   @@#+@@@+
//%@@@@@-@@@@@+%@@==@@++@@%%@@- :@@#-+#@@+@@@@@@@-@@@:*@@*=@@=.*%@.=@@@@@@--@@@@@+-@@=:@@@:
//
//
/// @title 0xGakuen NFT smart contact
/// @author Comet, JayB
contract ZeroXGakuen is ERC721ASGakuen, Ownable, ReentrancyGuard {
    // 0b'00000111
    // We can know amount user purchased by
    // (purchasedInfo >> Identifier) & AMOUNT_MASK
    uint256 internal constant AMOUNT_MASK = uint256(7);
    //0b'1111...1000
    uint256 internal constant PUBLIC_CLEAR_MASK = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8;

    string private baseURI;
    bool private hasExtention;

    // Compiler will pack it into uint256
    struct PrivateSaleConfig {
        // [uint32 for time]
        // Maximum value of uint32 == 4294967295 > Feb 07th, 2106
        // Therefore, Impossible to overflow

        // [Private Sale Config Structure]
        // startTime      : time when sale starts
        // endTime        : time when sale ends
        // identifier : parameter to identify personal purchase info
        //                  see purchaseInfo
        // merkleRoot     : merkleRoot to manage whitelist
        // perosonalLimit : amount user can purchase, lte 3
        //
        // data above will be 120 bits
        // and there will be pair of data
        // so it is 240 bits
        // 
        // totalPurchase is 16bits, 240+16 = 256 bits it will be packed as
        //
        uint32    firstStartTime;
        uint32    firstEndTime;
        // identifier also used as sale mask.
        // it should be >>3
        uint8     firstIdentifier;
        bytes32   firstMerkleRoot;
        uint8     firstPersonalLimit;

        uint32    secondStartTime;
        uint32    secondEndTime;
        // identifier also used as sale mask.
        // it should be >>6
        uint8     secondIdentifier;
        bytes32   secondMerkleRoot;
        uint8     secondPersonalLimit;

        // Keep track of total purchased amount to calculate public sale total limit
        // Max value of uint16 is 65535, so there will be never overflow
        uint16    totalPurchased;
    }
    PrivateSaleConfig private privateSaleConfig;

    // Compiler will pack it into uint256
    struct GeneralSaleConfig {
        // [uint32 for time]
        // Maximum value of uint32 == 4294967295 > Feb 07th, 2106
        // Therefore, Impossible to overflow
        uint32    startTime;
        uint32    endTime;
        // identifier also used as sale mask.
        // it should be >> 0 for public sale
        uint8     identifier;
        bytes32   merkleRoot;
        uint8     personalLimit;
        uint16    totalLimit;
        uint16    totalPurchased;
    }
    GeneralSaleConfig private publicSaleConfig;

    struct PurchaseLimitation {
      uint128 totalLimit;
      uint128 reserved;
    }
    PurchaseLimitation public limitation = PurchaseLimitation({
      totalLimit: 4649, reserved: 150
    });

    // purchasedInfo : keep track of amount user minted
    // right 3bit keeps track of pulbic mint.
    mapping(address => uint256) public purchasedInfo;

    // IERC-2981 royalty info in percent, decimal
    uint256 public royaltyRatio = 5;

    // To minimize gas cost, set real mint price as default value
    // there is only small chance to change price between deploy and minting
    uint256 public privatePrice = 0.03 ether;
    uint256 public publicPrice = 0.05 ether;
    event ChangedPrivateSaleConfig(
        uint32    firstStartTime,
        uint32    firstEndTime,
        uint8     firstIdentifier,
        bytes32   firstMerkleRoot,
        uint8     firstPersonalLimit,

        uint32    secondStartTime,
        uint32    secondEndTime,
        uint8     secondIdentifier,
        bytes32   secondMerkleRoot,
        uint8     secondPersonalLimit
    );

    event ChangedPublicSaleConfig(
        uint32    startTime,
        uint32    endTime,
        uint8     identifier,
        uint8     personalLimit
    );

    constructor() ERC721ASGakuen("0xGakuen", "ZXG") {}

    modifier callerIsUser() {
        require(
            tx.origin == msg.sender,
            "Contract call from another contract is not allowed"
        );
        _;
    }

    /// @notice Mint additional NFT for owner
    /// @dev use it for marketing, etc.
    /// @param receiver address who will receive nft
    /// @param numOfTokens NFTs will be minted to owner
    function ownerMintTo(address receiver, uint256 numOfTokens) external payable onlyOwner {
        _mint(receiver, numOfTokens);
    }

    /// @notice private sale Mint
    /// @dev merkleProof should be calculated on frontend to prevent gas.
    /// @dev frontend would submit the merkleProof based on user addr
    /// @param merkleProof is proof calculated on frontend
    /// @param identifier is bit need to shift
    /// @param numOfTokens is amount user will mint
    function privateMint(bytes32[] memory merkleProof, uint256 identifier, uint256 numOfTokens)
        external
        payable
        nonReentrant
        callerIsUser
    {
        PrivateSaleConfig memory psc = privateSaleConfig;
        uint256 currentTime = block.timestamp;
        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
        GeneralSaleConfig memory saleConfig;
        uint256 amount;
        uint256 price = privatePrice;

        if(psc.firstIdentifier == identifier) {
          saleConfig.startTime = psc.firstStartTime;
          saleConfig.endTime = psc.firstEndTime;
          saleConfig.identifier = psc.firstIdentifier;
          saleConfig.merkleRoot = psc.firstMerkleRoot;
          saleConfig.personalLimit = psc.firstPersonalLimit;
          amount = numOfTokens;
        } else if (psc.secondIdentifier == identifier) {
          saleConfig.startTime = psc.secondStartTime;
          saleConfig.endTime = psc.secondEndTime;
          saleConfig.identifier = psc.secondIdentifier;
          saleConfig.merkleRoot = psc.secondMerkleRoot;
          saleConfig.personalLimit = psc.secondPersonalLimit;
          amount = psc.secondPersonalLimit;
        } else {
          revert('No Identifier Matched');
        }

        require(
            MerkleProof.verify(merkleProof, saleConfig.merkleRoot, leaf),
            "Not listed"
        );

        require(
            saleConfig.startTime != 0 &&
                currentTime >= saleConfig.startTime &&
                currentTime < saleConfig.endTime,
            "Out of sale period"
        );

        require(
            saleConfig.totalPurchased + amount <= limitation.totalLimit-limitation.reserved,
            "Mint will exceed total limit"
        );


        uint256 _purchasedInfo = purchasedInfo[msg.sender];
        uint256 purchased = ((_purchasedInfo>>saleConfig.identifier) & AMOUNT_MASK);
        require((purchased+amount) <= saleConfig.personalLimit, "Personal Limit Overflow");
        
        uint256 cost = price * amount;
        require(msg.value >= cost, "ETH is not sufficient");

        // it will be not bug since personalLimit is lte 3
        purchasedInfo[msg.sender] = _purchasedInfo | ((purchased+amount) << saleConfig.identifier);
        privateSaleConfig.totalPurchased += uint16(amount);
        _mint(msg.sender, amount);
    }

    /// @notice Public Sale Mint
    /// @dev To finish sale earlier, call finishSale()
    /// @param numOfTokens NFTs will be minted to msg.sender
    function publicMint(uint256 numOfTokens)
        external
        payable
        nonReentrant
        callerIsUser
    {
        GeneralSaleConfig memory saleConfig = publicSaleConfig;
        uint256 currentTime = block.timestamp;
        uint256 startTime = saleConfig.startTime;
        uint256 endTime = saleConfig.endTime;

        require(
            startTime != 0 &&
                currentTime >= startTime &&
                currentTime < endTime,
            "Out of sale period"
        );

        require(
            saleConfig.totalPurchased + privateSaleConfig.totalPurchased + numOfTokens <= limitation.totalLimit - limitation.reserved,
            "Mint will exceed total limit"
        );

        uint256 _purchasedInfo = purchasedInfo[msg.sender];
        uint256 purchased = _purchasedInfo & AMOUNT_MASK;

        require(
            (purchased + numOfTokens) <=
                saleConfig.personalLimit,
            "Mint will exceed personal limit"
        );

        uint256 cost = publicPrice * numOfTokens;
        require(msg.value >= cost, "ETH is not sufficient");
        purchasedInfo[msg.sender] += numOfTokens;
        publicSaleConfig.totalPurchased += uint16(numOfTokens);

        _mint(msg.sender, numOfTokens);
    }

    /// @notice change the price
    /// @param _privatePrice privatePrice will be set to it
    /// @param _publicPrice publicPrice will be set to it 
    function setPrice(uint256 _privatePrice, uint256 _publicPrice)
        external
        onlyOwner
    {
        privatePrice = _privatePrice;
        publicPrice = _publicPrice;
    }

    /// @notice change the totalLimit
    /// @param _totalLimit is totalLimit will be set to it 
    function setPurchaseLimitation(uint256 _totalLimit, uint256 _reserved) external onlyOwner
    {
      limitation.totalLimit = uint128(_totalLimit);
      limitation.reserved = uint128(_reserved);
    }

    function setPrivateSaleConfig(
        uint32    firstStartTime,
        uint32    firstEndTime,
        uint8     firstIdentifier,
        bytes32   firstMerkleRoot,
        uint8     firstPersonalLimit,
        uint32    secondStartTime,
        uint32    secondEndTime,
        uint8     secondIdentifier,
        bytes32   secondMerkleRoot,
        uint8     secondPersonalLimit
    ) external onlyOwner {
        PrivateSaleConfig memory saleConfig = privateSaleConfig;

        saleConfig.firstStartTime        = firstStartTime;
        saleConfig.firstEndTime          = firstEndTime;
        saleConfig.firstIdentifier       = firstIdentifier;
        saleConfig.firstMerkleRoot       = firstMerkleRoot;
        saleConfig.firstPersonalLimit    = firstPersonalLimit;

        saleConfig.secondStartTime         = secondStartTime;
        saleConfig.secondEndTime           = secondEndTime;
        saleConfig.secondIdentifier        = secondIdentifier;
        saleConfig.secondMerkleRoot        = secondMerkleRoot;
        saleConfig.secondPersonalLimit     = secondPersonalLimit;

        privateSaleConfig = saleConfig;
        emit ChangedPrivateSaleConfig(
            firstStartTime,
            firstEndTime,
            firstIdentifier,
            firstMerkleRoot,
            firstPersonalLimit,

            secondStartTime,
            secondEndTime,
            secondIdentifier,
            secondMerkleRoot,
            secondPersonalLimit
        );
    }

    function setPublicSaleConfig(
        uint32    startTime,
        uint32    endTime,
        uint8     identifier,
        uint8     personalLimit
    ) external onlyOwner {
        GeneralSaleConfig memory saleConfig   = publicSaleConfig;
        saleConfig.startTime                  = startTime;
        saleConfig.endTime                    = endTime;
        saleConfig.identifier                 = identifier;
        saleConfig.personalLimit              = personalLimit;

        publicSaleConfig = saleConfig;

        emit ChangedPublicSaleConfig(
            startTime,
            endTime,
            identifier,
            personalLimit
        );
    }

    function getPrivateSaleConfig() external view returns(
        uint32    firstStartTime,
        uint32    firstEndTime,
        uint8     firstIdentifier,
        uint8     firstPersonalLimit,
        uint32    secondStartTime,
        uint32    secondEndTime,
        uint8     secondIdentifier,
        uint8     secondPersonalLimit,
        uint16    totalPurchased
    ) {
        PrivateSaleConfig memory saleConfig = privateSaleConfig;

        firstStartTime        = saleConfig.firstStartTime;
        firstEndTime          = saleConfig.firstEndTime;
        firstIdentifier       = saleConfig.firstIdentifier;
        firstPersonalLimit    = saleConfig.firstPersonalLimit;

        secondStartTime         = saleConfig.secondStartTime;
        secondEndTime           = saleConfig.secondEndTime;
        secondIdentifier        = saleConfig.secondIdentifier;
        secondPersonalLimit     = saleConfig.secondPersonalLimit;
        totalPurchased           = saleConfig.totalPurchased;
    }

    function getPublicSaleConfig() external view returns(
        uint32    startTime,
        uint32    endTime,
        uint8     identifier,
        uint8     personalLimit,
        uint16    totalPurchased
    ) {
        GeneralSaleConfig memory saleConfig   = publicSaleConfig;
        startTime                             = saleConfig.startTime;
        endTime                               = saleConfig.endTime;
        identifier                            = saleConfig.identifier;
        personalLimit                         = saleConfig.personalLimit;
        totalPurchased                        = saleConfig.totalPurchased;
    }

    function getTotalPurchased() external view returns(uint256 totalPurchased) {
      totalPurchased = privateSaleConfig.totalPurchased
                      + limitation.reserved
                      + publicSaleConfig.totalPurchased;
    }

    /// @notice Change baseURI
    /// @param _newURI is URI to set
    function setBaseURI(string memory _newURI) external onlyOwner {
        baseURI = _newURI;
    }

    /// @notice Change hasExtention
    /// @param _newState is new state to set
    function setHasExtention(bool _newState) external onlyOwner {
        hasExtention= _newState;
    }

    /// @dev override baseURI() in ERC721ASGakuen
    function _baseURI()
        internal
        view
        override(ERC721ASGakuen)
        returns (string memory)
    {
        return baseURI;
    }

    /// @dev override _hasExtention() in ERC721ASGakuen
    function _hasExtention()
        internal
        view
        override(ERC721ASGakuen)
        returns (bool)
    {
        return hasExtention;
    }

    
    /// @dev override _startTokenId() in ERC721ASGakuen
    function _startTokenId() internal view virtual override returns (uint256) {
        return 1;
    }


    /// General@dev this function will increase the schoolingId, and will reset the whole checkpoint
    /// @dev use this function to start next schooling period
    /// @param _begin _schoolingPolicy.schoolingBegin will be set to it
    /// @param _end _schoolingPolicy.schoolingEnd will be set to it
    /// @param _breaktime _schoolingPolicy.breaktime will be set to it
    function _applyNewSchoolingPolicy(
        uint256 _begin,
        uint256 _end,
        uint256 _breaktime
    ) external onlyOwner {
        _applyNewSchoolingPolicy(
            uint40(_begin),
            uint40(_end),
            uint40(_breaktime)
        );
    }
 
    /// @dev this function change schoolingBegin without increasing the schoolingId
    /// @dev use this function to fix the value set wrong
    /// @param begin _schoolingPolicy.schoolingBegin will be set to it
    function setSchoolingBegin(uint256 begin) external onlyOwner {
        _setSchoolingBegin(uint40(begin));
    }

    /// @dev this function change schoolingEnd without increasing the schoolingId
    /// @dev use this function to fix the value set wrong
    /// @param end _schoolingPolicy.schoolingEnd will be set to it
    function setSchoolingEnd(uint256 end) external onlyOwner {
        _setSchoolingEnd(uint40(end));
    }

    /// @dev this function change breaktime without increasing the schoolingId
    /// @dev use this function to fix the value set wrong
    /// @param breaktime _schoolingPolicy.breaktime will be set to it
    function setSchoolingBreaktime(uint256 breaktime) external onlyOwner {
        _setSchoolingBreaktime(uint40(breaktime));
    }

    /// @dev add new checkpoint & uri to schoolingURI
    /// @param checkpoint schoolingTotal required to reach this checkpoint
    /// @param uri to be returned when schoolingTotal is gte to checkpoint
    function addCheckpoint(uint256 checkpoint, string memory uri)
        external
        onlyOwner
    {
        _addCheckpoint(checkpoint, uri);
    }

    /// @dev replace existing checkpoint & uri in schoolingURI
    /// @param checkpoint schoolingTotal required to reach this checkpoint
    /// @param uri to be returned when schoolingTotal is gte to checkpoint
    /// @param index means nth element, start from 0
    function replaceCheckpoint(
        uint256 checkpoint,
        string memory uri,
        uint256 index
    ) external onlyOwner {
        _replaceCheckpoint(checkpoint, uri, index);
    }

    /// @dev replace existing checkpoint & uri in schoolingURI
    /// @param index means nth element, start from 0
    function removeCheckpoint(uint256 index) external onlyOwner {
        _removeCheckpoint(index);
    }

    function exists(uint256 tokenId) public view returns (bool) {
        return _exists(tokenId);
    }

    /// @dev withdraw balance of smart contract patially
    /// @param amount is the amout to withdraw
    function patialWithdraw(uint256 amount) external onlyOwner nonReentrant {
        uint256 balance = address(this).balance;
        require(balance >= amount, "Not enough balance");
        payable(msg.sender).transfer(balance);
    }

    /// @dev withdraw all balance of smart contract
    function withdraw() external onlyOwner nonReentrant {
        uint256 balance = address(this).balance;
        payable(msg.sender).transfer(balance);
    }

    function setRoylatyInfo(uint256 _royaltyRatio) external onlyOwner nonReentrant {
      royaltyRatio = _royaltyRatio;
    }

    /// @dev see IERC-2981
    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {
      _tokenId; // silence solc warning
      receiver = owner();
      royaltyAmount = (_salePrice / 100) * royaltyRatio;
      return (receiver, royaltyAmount);
    } 
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)

pragma solidity ^0.8.0;

/**
 * @dev These functions deal with verification of Merkle Tree proofs.
 *
 * The proofs can be generated using the JavaScript library
 * https://github.com/miguelmota/merkletreejs[merkletreejs].
 * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.
 *
 * See `test/utils/cryptography/MerkleProof.test.js` for some examples.
 *
 * WARNING: You should avoid using leaf values that are 64 bytes long prior to
 * hashing, or use a hash function other than keccak256 for hashing leaves.
 * This is because the concatenation of a sorted pair of internal nodes in
 * the merkle tree could be reinterpreted as a leaf value.
 */
library MerkleProof {
    /**
     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
     * defined by `root`. For this, a `proof` must be provided, containing
     * sibling hashes on the branch from the leaf to the root of the tree. Each
     * pair of leaves and each pair of pre-images are assumed to be sorted.
     */
    function verify(
        bytes32[] memory proof,
        bytes32 root,
        bytes32 leaf
    ) internal pure returns (bool) {
        return processProof(proof, leaf) == root;
    }

    /**
     * @dev Calldata version of {verify}
     *
     * _Available since v4.7._
     */
    function verifyCalldata(
        bytes32[] calldata proof,
        bytes32 root,
        bytes32 leaf
    ) internal pure returns (bool) {
        return processProofCalldata(proof, leaf) == root;
    }

    /**
     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up
     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt
     * hash matches the root of the tree. When processing the proof, the pairs
     * of leafs & pre-images are assumed to be sorted.
     *
     * _Available since v4.4._
     */
    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            computedHash = _hashPair(computedHash, proof[i]);
        }
        return computedHash;
    }

    /**
     * @dev Calldata version of {processProof}
     *
     * _Available since v4.7._
     */
    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            computedHash = _hashPair(computedHash, proof[i]);
        }
        return computedHash;
    }

    /**
     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by
     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.
     *
     * _Available since v4.7._
     */
    function multiProofVerify(
        bytes32[] memory proof,
        bool[] memory proofFlags,
        bytes32 root,
        bytes32[] memory leaves
    ) internal pure returns (bool) {
        return processMultiProof(proof, proofFlags, leaves) == root;
    }

    /**
     * @dev Calldata version of {multiProofVerify}
     *
     * _Available since v4.7._
     */
    function multiProofVerifyCalldata(
        bytes32[] calldata proof,
        bool[] calldata proofFlags,
        bytes32 root,
        bytes32[] memory leaves
    ) internal pure returns (bool) {
        return processMultiProofCalldata(proof, proofFlags, leaves) == root;
    }

    /**
     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,
     * consuming from one or the other at each step according to the instructions given by
     * `proofFlags`.
     *
     * _Available since v4.7._
     */
    function processMultiProof(
        bytes32[] memory proof,
        bool[] memory proofFlags,
        bytes32[] memory leaves
    ) internal pure returns (bytes32 merkleRoot) {
        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by
        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the
        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of
        // the merkle tree.
        uint256 leavesLen = leaves.length;
        uint256 totalHashes = proofFlags.length;

        // Check proof validity.
        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");

        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using
        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's "pop".
        bytes32[] memory hashes = new bytes32[](totalHashes);
        uint256 leafPos = 0;
        uint256 hashPos = 0;
        uint256 proofPos = 0;
        // At each step, we compute the next hash using two values:
        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we
        //   get the next hash.
        // - depending on the flag, either another value for the "main queue" (merging branches) or an element from the
        //   `proof` array.
        for (uint256 i = 0; i < totalHashes; i++) {
            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
            hashes[i] = _hashPair(a, b);
        }

        if (totalHashes > 0) {
            return hashes[totalHashes - 1];
        } else if (leavesLen > 0) {
            return leaves[0];
        } else {
            return proof[0];
        }
    }

    /**
     * @dev Calldata version of {processMultiProof}
     *
     * _Available since v4.7._
     */
    function processMultiProofCalldata(
        bytes32[] calldata proof,
        bool[] calldata proofFlags,
        bytes32[] memory leaves
    ) internal pure returns (bytes32 merkleRoot) {
        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by
        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the
        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of
        // the merkle tree.
        uint256 leavesLen = leaves.length;
        uint256 totalHashes = proofFlags.length;

        // Check proof validity.
        require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");

        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using
        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's "pop".
        bytes32[] memory hashes = new bytes32[](totalHashes);
        uint256 leafPos = 0;
        uint256 hashPos = 0;
        uint256 proofPos = 0;
        // At each step, we compute the next hash using two values:
        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we
        //   get the next hash.
        // - depending on the flag, either another value for the "main queue" (merging branches) or an element from the
        //   `proof` array.
        for (uint256 i = 0; i < totalHashes; i++) {
            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
            hashes[i] = _hashPair(a, b);
        }

        if (totalHashes > 0) {
            return hashes[totalHashes - 1];
        } else if (leavesLen > 0) {
            return leaves[0];
        } else {
            return proof[0];
        }
    }

    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {
        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);
    }

    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, a)
            mstore(0x20, b)
            value := keccak256(0x00, 0x40)
        }
    }
}


// File: @openzeppelin/contracts/interfaces/IERC2981.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)

pragma solidity ^0.8.0;

import "../utils/introspection/IERC165.sol";

/**
 * @dev Interface for the NFT Royalty Standard.
 *
 * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal
 * support for royalty payments across all NFT marketplaces and ecosystem participants.
 *
 * _Available since v4.5._
 */
interface IERC2981 is IERC165 {
    /**
     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of
     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.
     */
    function royaltyInfo(uint256 tokenId, uint256 salePrice)
        external
        view
        returns (address receiver, uint256 royaltyAmount);
}


// File: contracts/ERC721ASGakuen.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165.sol";
import "./IERC721ASGakuen.sol";

//
//  @@@@@%+@@@@@-@@@@%#: =%@@@#-           -#@@@%+  -@@@@#  %@@--@@#.@@%.%@@:+@@@@@.*%%- %%#
// .=*@@@:%@@*==+@@+:@@#*@@#-@@@-@@#-+#@@#:@@@.@@@: %@@@@# .@@%-@@# +@@.:@@@ %@*==+ @@@#-@@+
//  .@@@-.%@#=- %@#*=#@=@@@-+@@* *@@--@@* *@@* === =@@.@@# =@@*%@#  %@@:=@@*.%@#=- -@@@@#@@:
// .@@@- +@@@@#.@@@@@@*-@@@ %@@-  =@@@@+  @@@ @@@#.@@@:@@# #@@@@@+ .@@@.=@@-+@@@@#.*@@%@@@@
//.@@@=  #@#=  =@@%:@@%*@@*:@@@  .%@--@%::@@@  %@=*@@@@@@#.@@%-%@% =@@%:%@@ #@#=   @@#+@@@+
//%@@@@@-@@@@@+%@@==@@++@@%%@@- :@@#-+#@@+@@@@@@@-@@@:*@@*=@@=.*%@.=@@@@@@--@@@@@+-@@=:@@@:
//
//
// ERC721AS is implemented based on ERC721A (Copyright (c) 2022 Chiru Labs)
// ERC721AS follow same license policy to ERC721A
//
// MIT License
//
// Copyright (c) 2022 OG Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//
/// @title ERC721ASGakuen
/// ERC721ASGakuen for 'A'uto 'S'chooling & Zero x 'G'akuen NFT smart contract
/// @author MoeKun
/// @author JayB
contract ERC721ASGakuen is Context, ERC165, IERC721ASGakuen {
    using Address for address;
    using Strings for uint256;
   /*
     * @dev this contract use _schoolingPolicy.alpha & beta
     * - alpha : current index
     * - beta : number of checkpoint
     */
    // Presenting whether checkpoint is deleted or not.
    // "1" represent deleted.
    uint256 internal constant CHECKPOINT_DELETEDMASK = uint256(1);

    //0b1111111111111111111111111111111111111111111111111111111111111110
    uint256 internal constant CHECKPOINT_GENERATEDMASK =
        uint256(18446744073709551614);

    // The tokenId of the next token to be minted.
    uint256 internal _currentIndex;

    // The number of tokens burned.
    uint256 internal _burnCounter;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to ownership details
    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.
    mapping(uint256 => TokenStatus) internal _tokenStatus;

    // Mapping from address to total balance
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    SchoolingPolicy internal _schoolingPolicy;

    // Array to hold schooling checkpoint
    mapping(uint256 => uint256) internal _schoolingCheckpoint;

    // Array to hold URI based on schooling checkpoint
    mapping(uint256 => string) internal _schoolingURI;


    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
        _currentIndex = _startTokenId();
    }

    /**
     * If want to change the Start TokenId, override this function.
     */
    function _startTokenId() internal view virtual returns (uint256) {
        return 0;
    }

    /**
     * Returns whether token is schooling or not.
     */
    function isTakingBreak(uint256 tokenId)
        external
        view
        override
        returns (bool)
    {
        if (!_exists(tokenId)) revert SchoolingQueryForNonexistentToken();
        return _isTakingBreak(tokenId);
    }

    /**
     * Returns latest change time of schooling status.
     */
    function schoolingTimestamp(uint256 tokenId)
        external
        view
        override
        returns (uint256)
    {
        if (!_exists(tokenId)) revert SchoolingQueryForNonexistentToken();
        return uint256(_tokenStatus[tokenId].schoolingTimestamp);
    }

    /**
     * Returns token's total time of shcooling.
     * Used for optimizing and readablilty.
     */
    function _schoolingTotal(
        uint40 currentTime,
        TokenStatus memory _status,
        SchoolingPolicy memory _policy
    ) internal pure returns (uint256) {
        // If schooling is on different phase, existing total = 0
        if (_status.schoolingId != _policy.schoolingId) {
            _status.schoolingTotal = 0;
        }

        // If schooling is not begun yet, total = 0
        if (_policy.schoolingBegin == 0 || currentTime < _policy.schoolingBegin) {
            return 0;
        }

        // If schooling is End, 
        if (_policy.schoolingEnd < currentTime) {
            if (_status.schoolingTimestamp < _policy.schoolingBegin) {
                return uint256(_policy.schoolingEnd - _policy.schoolingBegin);
            }
            if (_status.schoolingTimestamp + _policy.breaktime > _policy.schoolingEnd) {
                return uint256(_status.schoolingTotal);
            }
            return uint256(
                _status.schoolingTotal +
                _policy.schoolingEnd -
                _policy.breaktime -
                _status.schoolingTimestamp
            );
        }

        if (
            _status.schoolingTimestamp == 0 ||
            _status.schoolingTimestamp < _policy.schoolingBegin
        ) {
            return uint256(currentTime - _policy.schoolingBegin);
        }

        if (_status.schoolingTimestamp + _policy.breaktime > currentTime) {
            return uint256(_status.schoolingTotal);
        }

        return uint256(
            _status.schoolingTotal +
            currentTime -
            _status.schoolingTimestamp -
            _policy.breaktime
        );
    }

    /**
     * Returns token's total time of schooling.
     */
    function schoolingTotal(uint256 tokenId)
        external
        view
        override
        returns (uint256)
    {
        if (!_exists(tokenId)) revert SchoolingQueryForNonexistentToken();
        return
            _schoolingTotal(
                uint40(block.timestamp),
                _tokenStatus[tokenId],
                _schoolingPolicy
            );
    }

    /**
     * Returns whether token is taking break
     */
    function _isTakingBreak(uint256 tokenId) internal view returns (bool) {
        unchecked {
            return
                _schoolingPolicy.schoolingBegin != 0 &&
                block.timestamp >= _schoolingPolicy.schoolingBegin &&
                _tokenStatus[tokenId].schoolingTimestamp >=
                _schoolingPolicy.schoolingBegin &&
                ((_tokenStatus[tokenId].schoolingTimestamp +
                    _schoolingPolicy.breaktime) > block.timestamp);
        }
    }

    /**
     * @dev use this to get first custom data in schooling policy.
     */
    function _getSchoolingAlpha() internal view returns (uint256) {
        unchecked {
            return uint256(_schoolingPolicy.alpha);
        }
    }

    /**
     * @dev use this to set first custom data in schooling policy.
     */
    function _setSchoolingAlpha(uint64 _alpha) internal {
        unchecked {
            _schoolingPolicy.alpha = _alpha;
        }
    }

    /**
     * @dev use this to get second custom data in schooling policy.
     */
    function _getSchoolingBeta() internal view returns (uint256) {
        unchecked {
            return uint256(_schoolingPolicy.beta);
        }
    }

    /**
     * @dev use this to set second custom data in schooling policy.
     */
    function _setSchoolingBeta(uint64 _beta) internal {
        unchecked {
            _schoolingPolicy.beta = _beta;
        }
    }

    function _setSchoolingBreaktime(uint40 _breaktime) internal {
        unchecked {
            _schoolingPolicy.breaktime = _breaktime;
        }
    }

    /**
     * @dev set schooling begin manually
     * changing it manually could be resulted in unexpected result
     * please do not use it witout reasonable reason
     */
    function _setSchoolingBegin(uint40 _begin) internal {
        unchecked {
            _schoolingPolicy.schoolingBegin = _begin;
        }
    }

    /**
     * @dev set schooling end manually
     * changing it manually could be resulted in unexpected result
     * please do not use it witout reasonable reason
     */
    function _setSchoolingEnd(uint40 _end) internal {
        unchecked {
            _schoolingPolicy.schoolingEnd = _end;
        }
    }

    /**
     * @dev set schooling identifier manually
     * changing it manually could be resulted in unexpected result
     * please do not use it witout reasonable reason
     */
    function _setSchoolingId(uint8 _schoolingId) internal {
        unchecked {
            _schoolingPolicy.schoolingId = _schoolingId;
        }
    }

    /**
     * Returns period of timelock.
     */
    function schoolingBreaktime() external view override returns (uint256) {
        unchecked {
            return uint256(_schoolingPolicy.breaktime);
        }
    }

    /**
     * Returns when schooling begin in timestamp
     */
    function schoolingBegin() external view override returns (uint256) {
        unchecked {
            return uint256(_schoolingPolicy.schoolingBegin);
        }
    }

    /**
     * Returns when schooling end in timestamp
     */
    function schoolingEnd() external view override returns (uint256) {
        unchecked {
            return uint256(_schoolingPolicy.schoolingEnd);
        }
    }

    /**
     * Returns when schooling identifier
     */
    function schoolingId() external view override returns (uint256) {
        unchecked {
            return uint256(_schoolingPolicy.schoolingId);
        }
    }

    /**
     * Apply new schooling policy.
     * Please use this function to start new season.
     *
     * schoolingId will increase automatically.
     * If new schooling duration is duplicated to existing duration,
     * IT COULD BE ERROR
     */
    function _applyNewSchoolingPolicy(
        uint40 _begin,
        uint40 _end,
        uint40 _breaktime
    ) internal {
        _beforeApplyNewPolicy(_begin, _end, _breaktime);

        SchoolingPolicy memory _policy = _schoolingPolicy;
        if(_policy.schoolingEnd != 0) {
            _policy.schoolingId++;
        }
        _policy.schoolingBegin = _begin;
        _policy.schoolingEnd = _end;
        _policy.breaktime = _breaktime;

        _schoolingPolicy = _policy;

        _afterApplyNewPolicy(_begin, _end, _breaktime);
    }

    /**
     * @dev Adding new schooling checkpoint, schoolingURI and schoolingURI.
     */
    function _addCheckpoint(uint256 checkpoint, string memory schoolingURI)
        internal
        virtual
    {
        SchoolingPolicy memory _policy = _schoolingPolicy;
        _schoolingCheckpoint[_policy.alpha] = (checkpoint &
            CHECKPOINT_GENERATEDMASK);
        _schoolingURI[_policy.alpha] = schoolingURI;

        _policy.alpha++;
        _policy.beta++;
        // Update schoolingPolicy.
        _schoolingPolicy = _policy;
    }

    function _removeCheckpoint(uint256 index) internal virtual {
        uint256 i = 0;
        uint256 counter = 0;
        if (_schoolingPolicy.beta <= index) revert CheckpointOutOfArray();
        while (true) {
            if (_isExistingCheckpoint(_schoolingCheckpoint[i])) {
                counter++;
            }
            // Checkpoint deleting sequence.
            if (counter > index) {
                _schoolingCheckpoint[i] |= CHECKPOINT_DELETEDMASK;
                _schoolingPolicy.beta--;
                return;
            }
            i++;
        }
    }

    /**
     * Replacing certain checkpoint and uri.
     * index using for checking existence and designting certain checkpoint.
     */
    function _replaceCheckpoint(
        uint256 checkpoint,
        string memory schoolingURI,
        uint256 index
    ) internal virtual {
        uint256 i = 0;
        uint256 counter = 0;
        if (_schoolingPolicy.beta <= index) revert CheckpointOutOfArray();
        // counter always syncs with index+1.
        // After satisfying second "if" condition, it will return.
        // Therefore, while condition will never loops infinitely.
        while (true) {
            if (_isExistingCheckpoint(_schoolingCheckpoint[i])) {
                counter++;
            }
            // Checkpoint and uri replacing sequence.
            if (counter > index) {
                _schoolingCheckpoint[i] = checkpoint;
                _schoolingURI[i] = schoolingURI;
                return;
            }
            i++;
        }
    }

    /**
     * Retruns whether checkpoint is existing or not.
     * Used for optimizing and readability.
     */
    function _isExistingCheckpoint(uint256 _checkpoint)
        internal
        pure
        returns (bool)
    {
        return (_checkpoint & CHECKPOINT_DELETEDMASK) == 0;
    }

    /**
     * @dev Returns tokenURI of existing token.
     */
    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
        // Returns baseURI depending on schooling status.
        string memory baseURI = _getSchoolingURI(tokenId);
        if(_hasExtention()) {
          return
              bytes(baseURI).length != 0
                  ? string(abi.encodePacked(baseURI, tokenId.toString(), ".json"))
                  : "";
        }
        else {
          return
              bytes(baseURI).length != 0
                  ? string(abi.encodePacked(baseURI, tokenId.toString()))
                  : "";
        }
    }

    /**
     * @dev Returns on schooling URI of 'tokenId'.
     * @dev Depending on total schooling time.
     */
    function _getSchoolingURI(uint256 tokenId)
        internal
        view
        virtual
        returns (string memory)
    {
        TokenStatus memory sData = _tokenStatus[tokenId];
        SchoolingPolicy memory _policy = _schoolingPolicy;
        uint256 total = uint256(
            _schoolingTotal(uint40(block.timestamp), sData, _policy)
        );
        uint256 index;
        uint256 counter = 0;
        for (uint256 i = 0; i < _policy.alpha; i++) {
            if (
                _isExistingCheckpoint(_schoolingCheckpoint[i]) &&
                _schoolingCheckpoint[i] <= total
            ) {
                index = i;
                counter++;
            }
        }

        //if satisfying 'no checkpoint' condition.
        if (index == 0 && counter == 0) {
            return _baseURI();
        }

        return _schoolingURI[index];
    }

    /**
     * Get URI at certain index.
     * index can be identified as schooling.
     */
    function uriAtIndex(uint256 index)
        external
        view
        override
        returns (string memory)
    {
        if (index >= _schoolingPolicy.beta) revert CheckpointOutOfArray();
        uint256 i = 0;
        uint256 counter = 0;
        while (true) {
            if (_isExistingCheckpoint(_schoolingCheckpoint[i])) {
                counter++;
            }
            if (counter > index) {
                return _schoolingURI[i];
            }
            i++;
        }
    }

    /**
     * Get Checkpoint at certain index.
     * index can be identified as schooling.
     */
    function checkpointAtIndex(uint256 index)
        external
        view
        override
        returns (uint256)
    {
        if (index >= _schoolingPolicy.beta) revert CheckpointOutOfArray();
        uint256 i = 0;
        uint256 counter = 0;
        while (true) {
            if (_isExistingCheckpoint(_schoolingCheckpoint[i])) {
                counter++;
            }
            if (counter > index) {
                return _schoolingCheckpoint[i];
            }
            i++;
        }
    }

    // returns number of checkpoints not deleted
    function numOfCheckpoints() external view override returns (uint256) {
        return _schoolingPolicy.beta;
    }
    /**
     * @dev Hook that is called before call applyNewSchoolingPolicy.
     *
     * _begin     - timestamp schooling begin
     * _end       - timestamp schooling end
     * _breaktime - breaktime in second
     */
    function _beforeApplyNewPolicy(
        uint40 _begin,
        uint40 _end,
        uint40 _breaktime
    ) internal virtual {
        SchoolingPolicy memory _policy = _schoolingPolicy;
        _policy.alpha = 0;
        _policy.beta = 0;

        _schoolingPolicy = _policy;
    }

 /**
     * @dev Hook that is called before call applyNewSchoolingPolicy.
     *
     * _begin     - timestamp schooling begin
     * _end       - timestamp schooling end
     * _breaktime - breaktime in second
     */
    function _afterApplyNewPolicy(
        uint40 _begin,
        uint40 _end,
        uint40 _breaktime
    ) internal virtual {
    }

    /**
     * Switching token's schooling status to off in forced way
     */

    function _recordSchoolingStatusChange(uint256 tokenId) internal {
        TokenStatus memory _status = _tokenStatus[tokenId];
        SchoolingPolicy memory _policy = _schoolingPolicy;
        uint40 currentTime = uint40(block.timestamp);
        _status.schoolingTotal = uint40(
            _schoolingTotal(currentTime, _status, _policy)
        );
        _status.schoolingId = _schoolingPolicy.schoolingId;
        _status.schoolingTimestamp = currentTime;
        _tokenStatus[tokenId] = _status;
    }

/*
*  ______ _____   _____ ______ ___  __          
* |  ____|  __ \ / ____|____  |__ \/_ |   /\    
* | |__  | |__) | |        / /   ) || |  /  \   
* |  __| |  _  /| |       / /   / / | | / /\ \  
* | |____| | \ \| |____  / /   / /_ | |/ ____ \ 
* |______|_|  \_\\_____|/_/   |____||_/_/    \_\
*
* ERC721A implementation below.
* - overrided _beforeTokenTransfers to support Auto Schooling
* - remove tracking & keeping it into TokenStatus features
*
*
*/                                               
                                            
    /**
     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.
     */
    function totalSupply() public view override returns (uint256) {
        // Counter underflow is impossible as _burnCounter cannot be incremented
        unchecked {
            return _currentIndex - _burnCounter - _startTokenId();
        }
    }

    /**
     * Returns the total amount of tokens minted in the contract.
     */
    function _totalMinted() internal view returns (uint256) {
        // Counter underflow is impossible as _currentIndex does not decrement,
        unchecked {
            return _currentIndex - _startTokenId();
        }
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(ERC165, IERC165)
        returns (bool)
    {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view override returns (uint256) {
        if (owner == address(0)) revert BalanceQueryForZeroAddress();
        return _balances[owner];
    }

    /**
     * Gas spent here starts off proportional to the maximum mint batch size.
     * It gradually moves to O(1) as tokens get transferred around in the collection over time.
     */
    function _ownershipOf(uint256 tokenId)
        internal
        view
        returns (TokenStatus memory)
    {
        uint256 curr = tokenId;

        unchecked {
            if (_startTokenId() <= curr && curr < _currentIndex) {
                TokenStatus memory ownership = _tokenStatus[curr];
                if (!ownership.burned) {
                    if (ownership.owner != address(0)) {
                        return ownership;
                    }
                    // Invariant:
                    // There will always be an ownership that has an address and is not burned
                    // before an ownership that does not have an address and is not burned.
                    // Hence, curr will not underflow.
                    while (true) {
                        curr--;
                        ownership = _tokenStatus[curr];
                        if (ownership.owner != address(0)) {
                            return ownership;
                        }
                    }
                }
            }
        }
        revert OwnerQueryForNonexistentToken();
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view override returns (address) {
        return _ownershipOf(tokenId).owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    // Boolean to toggle tokenURI's extension, ".json"
    function _hasExtention() internal view virtual returns (bool) {
        return false;
    }

    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public override {
        address owner = ERC721ASGakuen.ownerOf(tokenId);
        if (to == owner) revert ApprovalToCurrentOwner();

        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
            revert ApprovalCallerNotOwnerNorApproved();
        }

        _approve(to, tokenId, owner);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId)
        public
        view
        override
        returns (address)
    {
        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved)
        public
        virtual
        override
    {
        if (operator == _msgSender()) revert ApproveToCaller();

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator)
        public
        view
        virtual
        override
        returns (bool)
    {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        _transfer(from, to, tokenId);
        if (
            to.isContract() &&
            !_checkContractOnERC721Received(from, to, tokenId, _data)
        ) {
            revert TransferToNonERC721ReceiverImplementer();
        }
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     */
    function _exists(uint256 tokenId) internal view returns (bool) {
        return
            _startTokenId() <= tokenId &&
            tokenId < _currentIndex &&
            !_tokenStatus[tokenId].burned;
    }

    /**
     * @dev Equivalent to `_safeMint(to, quantity, '')`.
     */
    function _safeMint(address to, uint256 quantity) internal {
        _safeMint(to, quantity, "");
    }

    /**
     * @dev Safely mints `quantity` tokens and transfers them to `to`.
     *
     * Requirements:
     *
     * - If `to` refers to a smart contract, it must implement
     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.
     * - `quantity` must be greater than 0.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(
        address to,
        uint256 quantity,
        bytes memory _data
    ) internal {
        uint256 startTokenId = _currentIndex;
        if (to == address(0)) revert MintToZeroAddress();
        if (quantity == 0) revert MintZeroQuantity();

        _beforeTokenTransfers(address(0), to, startTokenId, quantity);

        // Overflows are incredibly unrealistic.
        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1
        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1
        unchecked {
            _balances[to] += quantity;

            _tokenStatus[startTokenId].owner = to;

            uint256 updatedIndex = startTokenId;
            uint256 end = updatedIndex + quantity;

            if (to.isContract()) {
                do {
                    emit Transfer(address(0), to, updatedIndex);
                    if (
                        !_checkContractOnERC721Received(
                            address(0),
                            to,
                            updatedIndex++,
                            _data
                        )
                    ) {
                        revert TransferToNonERC721ReceiverImplementer();
                    }
                } while (updatedIndex != end);
                // Reentrancy protection
                if (_currentIndex != startTokenId) revert();
            } else {
                do {
                    emit Transfer(address(0), to, updatedIndex++);
                } while (updatedIndex != end);
            }
            _currentIndex = updatedIndex;
        }
        _afterTokenTransfers(address(0), to, startTokenId, quantity);
    }

    /**
     * @dev Mints `quantity` tokens and transfers them to `to`.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `quantity` must be greater than 0.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 quantity) internal {
        uint256 startTokenId = _currentIndex;
        if (to == address(0)) revert MintToZeroAddress();
        if (quantity == 0) revert MintZeroQuantity();

        _beforeTokenTransfers(address(0), to, startTokenId, quantity);

        // Overflows are incredibly unrealistic.
        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1
        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1
        unchecked {
            _balances[to] += quantity;

            _tokenStatus[startTokenId].owner = to;

            uint256 updatedIndex = startTokenId;
            uint256 end = updatedIndex + quantity;

            do {
                emit Transfer(address(0), to, updatedIndex++);
            } while (updatedIndex < end);

            _currentIndex = updatedIndex;
        }
        _afterTokenTransfers(address(0), to, startTokenId, quantity);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) private {
        TokenStatus memory prevOwnership = _ownershipOf(tokenId);

        if (prevOwnership.owner != from) revert TransferFromIncorrectOwner();

        bool isApprovedOrOwner = (_msgSender() == from ||
            isApprovedForAll(from, _msgSender()) ||
            getApproved(tokenId) == _msgSender());

        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
        if (to == address(0)) revert TransferToZeroAddress();

        _beforeTokenTransfers(from, to, tokenId, 1);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId, from);

        // Underflow of the sender's balance is impossible because we check for
        // ownership above and the recipient's balance can't realistically overflow.
        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.
        unchecked {
            _balances[from] -= 1;
            _balances[to] += 1;

            TokenStatus storage currSlot = _tokenStatus[tokenId];
            currSlot.owner = to;

            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.
            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.
            uint256 nextTokenId = tokenId + 1;
            TokenStatus storage nextSlot = _tokenStatus[nextTokenId];
            if (nextSlot.owner == address(0)) {
                // This will suffice for checking _exists(nextTokenId),
                // as a burned slot cannot contain the zero address.
                if (nextTokenId != _currentIndex) {
                    nextSlot.owner = from;
                }
            }
        }

        emit Transfer(from, to, tokenId);
        _afterTokenTransfers(from, to, tokenId, 1);
    }

    /**
     * @dev Equivalent to `_burn(tokenId, false)`.
     */
    function _burn(uint256 tokenId) internal virtual {
        _burn(tokenId, false);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
        TokenStatus memory prevOwnership = _ownershipOf(tokenId);

        address from = prevOwnership.owner;

        if (approvalCheck) {
            bool isApprovedOrOwner = (_msgSender() == from ||
                isApprovedForAll(from, _msgSender()) ||
                getApproved(tokenId) == _msgSender());

            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
        }

        _beforeTokenTransfers(from, address(0), tokenId, 1);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId, from);

        // Underflow of the sender's balance is impossible because we check for
        // ownership above and the recipient's balance can't realistically overflow.
        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.
        unchecked {
            _balances[from] -= 1;

            // Keep track of who burned the token, and the timestamp of burning.
            TokenStatus storage currSlot = _tokenStatus[tokenId];
            currSlot.owner = from;
            currSlot.burned = true;

            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.
            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.
            uint256 nextTokenId = tokenId + 1;
            TokenStatus storage nextSlot = _tokenStatus[nextTokenId];
            if (nextSlot.owner == address(0)) {
                // This will suffice for checking _exists(nextTokenId),
                // as a burned slot cannot contain the zero address.
                if (nextTokenId != _currentIndex) {
                    nextSlot.owner = from;
                }
            }
        }

        emit Transfer(from, address(0), tokenId);
        _afterTokenTransfers(from, address(0), tokenId, 1);

        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.
        unchecked {
            _burnCounter++;
        }
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(
        address to,
        uint256 tokenId,
        address owner
    ) private {
        _tokenApprovals[tokenId] = to;
        emit Approval(owner, to, tokenId);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkContractOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        try
            IERC721Receiver(to).onERC721Received(
                _msgSender(),
                from,
                tokenId,
                _data
            )
        returns (bytes4 retval) {
            return retval == IERC721Receiver(to).onERC721Received.selector;
        } catch (bytes memory reason) {
            if (reason.length == 0) {
                revert TransferToNonERC721ReceiverImplementer();
            } else {
                assembly {
                    revert(add(32, reason), mload(reason))
                }
            }
        }
    }

    /**
     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.
     * And also called before burning one token.
     *
     * startTokenId - the first token id to be transferred
     * quantity - the amount to be transferred
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, `tokenId` will be burned by `from`.
     * - `from` and `to` are never both zero.
     *
     * *** IT RECORDS SCHOOLING DATA ***
     *
     * IF YOU DON'T WANT IT, please override this funcion
     *
     */
    function _beforeTokenTransfers(
        address from,
        address to,
        uint256 startTokenId,
        uint256 quantity
    ) internal virtual {
        if (startTokenId == _currentIndex) return;
        uint256 updatedIndex = startTokenId;
        uint256 end = updatedIndex + quantity;
        do {
            _recordSchoolingStatusChange(updatedIndex++);
        } while (updatedIndex != end);
    }

    /**
     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes
     * minting.
     * And also called after one token has been burned.
     *
     * startTokenId - the first token id to be transferred
     * quantity - the amount to be transferred
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been
     * transferred to `to`.
     * - When `from` is zero, `tokenId` has been minted for `to`.
     * - When `to` is zero, `tokenId` has been burned by `from`.
     * - `from` and `to` are never both zero.
     */
    function _afterTokenTransfers(
        address from,
        address to,
        uint256 startTokenId,
        uint256 quantity
    ) internal virtual {}
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: contracts/IERC721ASGakuen.sol
// SPDX-License-Identifier: MIT
// Creator: MoeKun, JayB
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";

interface IERC721ASGakuen is IERC721, IERC721Metadata {
    /**
     * The caller must own the token or be an approved operator.
     */
    error ApprovalCallerNotOwnerNorApproved();

    /**
     * The token does not exist.
     */
    error ApprovalQueryForNonexistentToken();

    /**
     * The token does not exist.
     */
    error URIQueryForNonexistentToken();

    /**
     * The token does not exist.
     */
    error OwnerQueryForNonexistentToken();

    /**
     * The caller cannot approve to their own address.
     */
    error ApproveToCaller();

    /**
     * The caller cannot approve to the current owner.
     */
    error ApprovalToCurrentOwner();

    /**
     * Cannot query the balance for the zero address.
     */
    error BalanceQueryForZeroAddress();

    /**
     * Cannot mint to the zero address.
     */
    error MintToZeroAddress();

    /**
     * The quantity of tokens minted must be more than zero.
     */
    error MintZeroQuantity();

    /**
     * The caller must own the token or be an approved operator.
     */
    error TransferCallerNotOwnerNorApproved();

    /**
     * The token must be owned by `from`.
     */
    error TransferFromIncorrectOwner();

    /**
     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.
     */
    error TransferToNonERC721ReceiverImplementer();

    /**
     * Cannot transfer to the zero address.
     */
    error TransferToZeroAddress();

    /**
     * The token does not exist.
     */
    error SchoolingQueryForNonexistentToken();

    /**
     * Index is out of array's range.
     */
    error CheckpointOutOfArray();

    // Compiler will pack this into a single 256bit word.
    struct TokenStatus {
        // The address of the owner.
        address owner;
        // Keeps track of the latest time User toggled schooling.
        uint40 schoolingTimestamp;
        // Keeps track of the total time of schooling.
        // Left 4Most bit
        uint40 schoolingTotal;
        // State to support multiple seasons
        uint8 schoolingId;
        // Whether the token has been burned.
        bool burned;
    }

    // Compiler will pack this into a single 256bit word.
    struct SchoolingPolicy {
        uint64 alpha;
        uint64 beta;
        uint40 schoolingBegin;
        uint40 schoolingEnd;
        uint8 schoolingId;
        uint40 breaktime;
    }

    /**
     * @dev Returns total schooling time.
     */
    function schoolingTotal(uint256 tokenId) external view returns (uint256);

    /**
     * @dev Returns latest change time of schooling status.
     */
    function schoolingTimestamp(uint256 tokenId)
        external
        view
        returns (uint256);

    /**
     * @dev Returns whether token is schooling or not.
     */
    function isTakingBreak(uint256 tokenId) external view returns (bool);

    /**
     * @dev Returns number of existing checkpoint + deleted checkpoint.
     */
    /**
     * returns number of checkpoints not deleted
     */
    function numOfCheckpoints() external view returns (uint256);

    /**
     * Get URI at certain index.
     * index can be identified as grade.
     */
    function uriAtIndex(uint256 index) external view returns (string memory);

    /**
     * Get Checkpoint at certain index.
     * index can be identified as grade.
     */
    function checkpointAtIndex(uint256 index) external view returns (uint256);

    /**
     * @dev Returns time when schooling begin
     */
    function schoolingBegin() external view returns (uint256);

    /**
     * @dev Returns time when schooling end
     */
    function schoolingEnd() external view returns (uint256);

    /**
     * @dev Returns breaktime for schooling
     */
    function schoolingBreaktime() external view returns (uint256);

    /**
     * @dev Returns breaktime for schooling
     */
    function schoolingId() external view returns (uint256);

    /**
     * @dev Returns the total amount of tokens stored by the contract.
     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.
     */
    function totalSupply() external view returns (uint256);
}

