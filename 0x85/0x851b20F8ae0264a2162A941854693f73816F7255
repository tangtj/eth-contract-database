
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/DoughDsa.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity =0.8.24;
import { IDoughIndex, CustomError } from "./Interfaces.sol";

/**
* $$$$$$$\                                $$\             $$$$$$$$\ $$\                                                   
* $$  __$$\                               $$ |            $$  _____|\__|                                                  
* $$ |  $$ | $$$$$$\  $$\   $$\  $$$$$$\  $$$$$$$\        $$ |      $$\ $$$$$$$\   $$$$$$\  $$$$$$$\   $$$$$$$\  $$$$$$\  
* $$ |  $$ |$$  __$$\ $$ |  $$ |$$  __$$\ $$  __$$\       $$$$$\    $$ |$$  __$$\  \____$$\ $$  __$$\ $$  _____|$$  __$$\ 
* $$ |  $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |      $$  __|   $$ |$$ |  $$ | $$$$$$$ |$$ |  $$ |$$ /      $$$$$$$$ |
* $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |      $$ |      $$ |$$ |  $$ |$$  __$$ |$$ |  $$ |$$ |      $$   ____|
* $$$$$$$  |\$$$$$$  |\$$$$$$  |\$$$$$$$ |$$ |  $$ |      $$ |      $$ |$$ |  $$ |\$$$$$$$ |$$ |  $$ |\$$$$$$$\ \$$$$$$$\ 
* \_______/  \______/  \______/  \____$$ |\__|  \__|      \__|      \__|\__|  \__| \_______|\__|  \__| \_______| \_______|
*                               $$\   $$ |                                                                                
*                               \$$$$$$  |                                                                                
*                                \______/                                                                                 
* 
* @title DoughDsa
* @notice This contract is used to delegate the call to the respective connectors
* @custom:version 1.0 - Initial release
* @author Liberalite https://github.com/liberalite
* @custom:coauthor 0xboga https://github.com/0xboga
*/
contract DoughDsa {
    /* ========== LAYOUT ========== */
    address public dsaOwner;
    address public doughIndex;

    /**
    * @notice Initializes the DoughDsa contract
    * @param _dsaOwner: The DSA owner address of the DSA contract
    * @param _doughIndex: The DoughIndex contract address
    */
    function initialize(address _dsaOwner, address _doughIndex) external {
        if (dsaOwner != address(0) || _dsaOwner == address(0)) revert CustomError("invalid dsaOwner");
        if (doughIndex != address(0) || _doughIndex == address(0)) revert CustomError("invalid doughIndex");
        doughIndex = _doughIndex;
        dsaOwner = _dsaOwner;
    }

    /**
    * @notice Delegates the call to the respective connector
    * @param _connectorId: The connector ID to call
    * @param _actionId: The action ID to call
    * @param _token: The token address to call
    * @param _amount: The amount to call
    * @param _opt: The optional boolean value
    * @param _swapData: The swap data to call
    */
    function doughCall(uint256 _connectorId, uint256 _actionId, address _token, uint256 _amount, bool _opt, bytes[] calldata _swapData) external payable {
        // _connectorId:  0-dsa  1-aave  2-paraswap  3-uniV3  4-deleveraging-uniV3  4-deleveraging-paraswap  5-shield  6-vault
        address _contract = IDoughIndex(doughIndex).getDoughConnector(_connectorId);
        if (_contract == address(0)) revert CustomError("Unregistered Connector");

        if (_connectorId < 21) {
            // only the DSA Owner can run supply, withdraw, repay, swap, loop, deloop, etc
            if (msg.sender != dsaOwner) revert CustomError("Caller not dsaOwner");
        } else if (_connectorId == 21 || _connectorId == 22) {
            if (msg.sender != IDoughIndex(doughIndex).deleverageAutomation()) revert CustomError("Only Deleveraging Automation");
        } else if (_connectorId == 23) {
            if (msg.sender != IDoughIndex(doughIndex).shieldAutomation()) revert CustomError("Only Shield Automation");
        } else if (_connectorId == 24) {
            if (msg.sender != IDoughIndex(doughIndex).vaultAutomation()) revert CustomError("Only Vault Automation");
        } else {
            // future connectors will only be available to the DSA Owner
            if (msg.sender != dsaOwner) revert CustomError("Caller not dsaOwner");
        }

        (bool success, bytes memory data) = _contract.delegatecall(abi.encodeWithSignature("delegateDoughCall(uint256,address,uint256,bool,bytes[])", _actionId, _token, _amount, _opt, _swapData));
        if (!success) {
            if (data.length == 0) revert CustomError("Invalid doughcall error length");
            if (data.length > 0) {
                assembly {
                    revert(add(32, data), mload(data))
                }
            }
        }

    }

    /**
    * @notice Executes an action from and to the Flashloan Connector
    * @param _connectorId: The connector ID
    * @param _tokenIn: The token address to get in
    * @param _inAmount: The amount to get in
    * @param _tokenOut: The token address to get out
    * @param _outAmount: The amount to get out
    * @param _actionId: The action ID to call
    */
    function executeAction(uint256 _connectorId, address _tokenIn, uint256 _inAmount, address _tokenOut, uint256 _outAmount, uint256 _actionId) external payable {
        address _connector = IDoughIndex(doughIndex).getDoughConnector(_connectorId);
        if(msg.sender != address(this) && msg.sender != _connector) revert CustomError("Caller not owner or DSA");

        address aaveActions = IDoughIndex(doughIndex).aaveActionsAddress();

        (bool success, bytes memory data) = aaveActions.delegatecall(abi.encodeWithSignature("executeAaveAction(uint256,address,uint256,address,uint256,uint256)", _connectorId, _tokenIn, _inAmount, _tokenOut, _outAmount, _actionId));
        if (!success) {
            if (data.length == 0) revert CustomError("Invalid Aave error length");
            if (data.length > 0) {
                assembly {
                    revert(add(32, data), mload(data))
                }
            }
        }
    }

    /**
    * @notice allows DSA Owner to deposit and withdraw ETH
    */
    receive() external payable {}
    fallback() external payable {}
}

// File: contracts/extensions/DeleverageAutomation.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity =0.8.24;

import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";
import { DoughDsa, CustomError } from "../DoughDsa.sol";
import { ILiquidationManager } from "../Interfaces.sol";

/**
* $$$$$$$\                                $$\             $$$$$$$$\ $$\                                                   
* $$  __$$\                               $$ |            $$  _____|\__|                                                  
* $$ |  $$ | $$$$$$\  $$\   $$\  $$$$$$\  $$$$$$$\        $$ |      $$\ $$$$$$$\   $$$$$$\  $$$$$$$\   $$$$$$$\  $$$$$$\  
* $$ |  $$ |$$  __$$\ $$ |  $$ |$$  __$$\ $$  __$$\       $$$$$\    $$ |$$  __$$\  \____$$\ $$  __$$\ $$  _____|$$  __$$\ 
* $$ |  $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |      $$  __|   $$ |$$ |  $$ | $$$$$$$ |$$ |  $$ |$$ /      $$$$$$$$ |
* $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |      $$ |      $$ |$$ |  $$ |$$  __$$ |$$ |  $$ |$$ |      $$   ____|
* $$$$$$$  |\$$$$$$  |\$$$$$$  |\$$$$$$$ |$$ |  $$ |      $$ |      $$ |$$ |  $$ |\$$$$$$$ |$$ |  $$ |\$$$$$$$\ \$$$$$$$\ 
* \_______/  \______/  \______/  \____$$ |\__|  \__|      \__|      \__|\__|  \__| \_______|\__|  \__| \_______| \_______|
*                               $$\   $$ |                                                                                
*                               \$$$$$$  |                                                                                
*                                \______/                                                                                 
* 
* @title Deleverage Automation
* @notice This utility contract automates the deleveraging process for DSAs
* @custom:version 1.0 - Initial release
* @author Liberalite https://github.com/liberalite
* @custom:coauthor 0xboga https://github.com/0xboga
*/
contract DeleverageAutomation is Ownable {
    /* ========== LAYOUT ========== */
    address public dsaOwner;
    address public doughIndex;

    /* ========== LAYOUT ========== */
    address public liquidationManager;

    // Array to keep track of whitelisted addresses
    address[] public whitelistedAddressesList;

    // Mapping to keep track of whitelisted addresses
    mapping(address => bool) public whitelistedAddresses;

    // Event emitted when a transaction is executed by a whitelisted address
    event NewLiquidationManagerContract(address liquidationManagerContractAddress);
    event AddedOrRemovedDeleverageBot(address deleverageBot, bool status);

    // Modifier to restrict function access to whitelisted addresses
    modifier onlyWhitelisted() {
        if(whitelistedAddresses[msg.sender] == false) revert CustomError("Not Whitelisted");
        _;
    }

    /**
     * @notice Constructor to set the owner of the deleverage automation contract
     */
    constructor() Ownable(msg.sender) {}

    /**
     * @notice Function to set the LiquidationManager contract address
     * @param _liquidationManager The address of the LiquidationManager contract
     * @dev The function can only be called by the owner of the contract
     */
    function setLiquidationManagerContract(address _liquidationManager) external onlyOwner {
        if(_liquidationManager == address(0)) revert CustomError("Invalid Address Zero");
        liquidationManager = _liquidationManager;
        emit NewLiquidationManagerContract(_liquidationManager);
    }

    /**
     * @notice Function to remove a single address from the whitelist
     * @param _address The address to remove from the whitelist
     * @dev The function can only be called by the owner of the contract
     */
    function removeAddressFromWhitelist(address _address) public onlyOwner {
        if (_address == address(0)) revert CustomError("Invalid Address Zero");
        
        // Locate the address in the array and remove it
        uint256 length = whitelistedAddressesList.length;
        for (uint256 i = 0; i < length;) {
            if (whitelistedAddressesList[i] == _address) {
                // Move the last address into the place to delete and then pop the last element
                whitelistedAddressesList[i] = whitelistedAddressesList[length - 1];
                whitelistedAddressesList.pop();
                break;
            }
            unchecked { i++; }
        }

        // Remove the address from the mapping
        whitelistedAddresses[_address] = false;

        emit AddedOrRemovedDeleverageBot(_address, false);
    }

    /**
     * @notice Function to remove multiple addresses from the whitelist
     * @param _addresses The addresses to remove from the whitelist
     * @dev The function can only be called by the owner of the contract
     */
    function removeMultipleAddressesFromWhitelist(address[] calldata _addresses) external onlyOwner {
        for (uint i = 0; i < _addresses.length;) {
            removeAddressFromWhitelist(_addresses[i]);
            unchecked { i++; }
        }
    }

    /**
     * @notice Function to add or remove multiple addresses to the whitelist
     * @param _addresses The addresses to add or remove from the whitelist
     * @dev The length of the _addresses and _status arrays should be the same
     * @dev The status should be set to true to add the address to the whitelist and false to remove the address from the whitelist
     * @dev The function can only be called by the owner of the contract
     */
    function addMultipleAddressesToWhitelist(address[] calldata _addresses) external onlyOwner {
        for (uint i = 0; i < _addresses.length;) {
            whitelistedAddresses[_addresses[i]] = true;
            whitelistedAddressesList.push(_addresses[i]);
            emit AddedOrRemovedDeleverageBot(_addresses[i], true);
            unchecked { i++; }
        }
    }

    /**
     * @notice Function to start the liquidation status for multiple DSAs
     * @param _dsaAddresses The addresses of the DSAs to start the liquidation status for
     * @param _blockNumbers The block numbers to start the liquidation status for
     */
    function setMultipleDsaLiquidationStatus(address[] calldata _dsaAddresses, uint256[] calldata _blockNumbers) external onlyWhitelisted {
        if(_dsaAddresses.length != _blockNumbers.length) revert CustomError("Array Length Mismatch");
        ILiquidationManager(liquidationManager).startDsaLiquidationStatusMulti(_dsaAddresses, _blockNumbers);
    }

    /**
     * @notice Function to start the liquidation status for a single DSA
     * @param _dsaAddress The address of the DSA to start the liquidation status for
     * @param _connectorId The connector ID to execute the transaction on
     * @param _blockNumber The amount of the token to execute the transaction on
     * @param _swapData The swap data to execute the transaction on
     */
    function executeDeleverageTransactionInOneTX(address _dsaAddress, uint256 _connectorId, uint256 _blockNumber, bytes[] calldata _swapData) external onlyWhitelisted {
        ILiquidationManager(liquidationManager).startDsaLiquidationInOneTx(_dsaAddress, _blockNumber);
        DoughDsa(payable(_dsaAddress)).doughCall(_connectorId, 0, address(0), _blockNumber, true, _swapData);
    }

    /**
     * @notice Function to start the liquidation status for a single DSA
     * @param _dsaAddress The address of the DSA to start the liquidation status for
     * @param _connectorId The connector ID to execute the transaction on
     * @param _blockNumber The block number when the DSA was liquidated
     * @param _swapData The swap data to execute the transaction on
     */
    function flagAndStartDeleverageMultipleTX(address _dsaAddress, uint256 _connectorId, uint256 _blockNumber, bytes[] calldata _swapData) external onlyWhitelisted {
        ILiquidationManager(liquidationManager).startDsaLiquidationInMultipleTX(_dsaAddress, _blockNumber);
        DoughDsa(payable(_dsaAddress)).doughCall(_connectorId, 0, address(0), _blockNumber, false, _swapData);
    }

    /**
     * @notice Function to start the liquidation status for a single DSA
     * @param _dsaAddress The address of the DSA to start the liquidation status for
     * @param _connectorId The connector ID to execute the transaction on
     * @param _swapData The swap data to execute the transaction on
     */
    function continueToDeleverageMultipleTX(address _dsaAddress, uint256 _connectorId, bytes[] calldata _swapData) external onlyWhitelisted {
        DoughDsa(payable(_dsaAddress)).doughCall(_connectorId, 0, address(0), 0, false, _swapData);
    }

    /**
     * @notice Function to start the liquidation status for a single DSA
     * @param _dsaAddress The address of the DSA to start the liquidation status for
     * @param _connectorId The connector ID to execute the transaction on
     * @param _swapData The swap data to execute the transaction on
     */
    function resetDeleverageMultipleTX(address _dsaAddress, uint256 _connectorId, bytes[] calldata _swapData) external onlyWhitelisted {
        DoughDsa(payable(_dsaAddress)).doughCall(_connectorId, 0, address(0), 0, true, _swapData);
        ILiquidationManager(liquidationManager).resetDsaLiquidationStatus(_dsaAddress);
    }

}

// File: contracts/Interfaces.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.10;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

error CustomError(string errorMsg);

interface IWETH is IERC20 {
    function deposit() external payable;
    function withdraw(uint amount) external;
}

interface AaveActionsConnector {
    function executeAaveAction(address _dsaAddress, uint256 _connectorId, address _tokenIn, uint256 _inAmount, address _tokenOut, uint256 _outAmount, uint256 _actionId) external payable;
}

interface IDoughDsa {
    function doughCall(uint256 _connectorId, uint256 _actionId, address _token, uint256 _amount, bool _opt, bytes[] calldata _swapData) external payable;
    function executeAction(uint256 _connectorId, address tokenIn, uint256 inAmount, address tokenOut, uint256 outAmount, uint256 actionId) external payable;
    function dsaOwner() external view returns (address);
    function doughIndex() external view returns (address);
}

interface IDoughIndex {
    function aaveActionsAddress() external view returns (address);
    function setDsaMasterClone(address _dsaMasterCopy) external;
    function setNewBorrowFormula(address _newBorrowFormula) external;
    function setNewAaveActions(address _newAaveActions) external;
    function apyFee() external view returns (uint256);
    function getFlashBorrowers(address _flashBorrower) external view returns (bool);
    function deleverageAutomation() external view returns (address);
    function shieldAutomation() external view returns (address);
    function vaultAutomation() external view returns (address);
    function getWhitelistedTokenList() external view returns (address[] memory);
    function multisig() external view returns (address);
    function treasury() external view returns (address);
    function deleverageAsset() external view returns (address);
    function getDoughConnector (uint256 _connectorId) external view returns (address);
    function getOwnerOfDoughDsa(address dsaAddress) external view returns (address);
    function getDoughDsa(address dsaAddress) external view returns (address);
    function getTokenDecimals(address _token) external view returns (uint8);
    function getTokenMinInterest(address _token) external view returns (uint256);
    function getTokenIndex(address _token) external view returns (uint256);
    function borrowFormula (address _token, address _dsaAddress) external returns (uint256, uint256, uint256, uint256);
    function borrowFormulaInterest (address _token, address _dsaAddress) external returns (uint256);
    function getDsaBorrowStartDate (address _dsaAddress, address _token) external view returns (uint256);
    function updateBorrowDate(uint256 _connectorID, uint256 _time, address _dsaAddress, address _token) external;
    function minDeleveragingRatio() external view returns (uint256);
    function minHealthFactor() external view returns (uint256);
}

interface IDoughRealHF {
    function getDoughHFData(address _dsaAddress) external view returns (uint256 healthFactor);
    function getUserData(address _dsaAddress) external view returns (uint256 totalCollateralBase, uint256 totalDebtBase, uint256 availableBorrowBase, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor,uint256 scaledInterest);
    function calculateMaxBorrow(address _token, address _dsaAddress) external view returns (uint256 maxBorrowInTokens);
}

interface ILiquidationManager {
    function startDsaLiquidationInOneTx(address _dsaAddress, uint256 _blockNumber) external;
    function startDsaLiquidationInMultipleTX(address _dsaAddress, uint256 _blockNumber) external;
    function startDsaLiquidationStatusMulti(address[] calldata _dsaAddresses, uint256[] calldata _blockNumber) external;
    function resetDsaLiquidationStatus(address _dsaAddress) external;
    function dsaLiquidationBlockNumbers(address _dsaAddress) external view returns (uint256[] memory);
    function dsaLiquidationStatus(address _dsaAddress) external view returns (bool);
}

interface IDeleverageAutomation {
    function whitelistedAddresses(address) external view returns (bool);
    function whitelistedAddressesList() external view returns (address[] memory);
}

interface IBorrowManagementConnector {
    function borrowFormula(address _token, address _dsaAddress) external view returns (uint256, uint256, uint256, uint256);
    function borrowFormulaInterest(address _token, address _dsaAddress) external view returns (uint256);
}

// interface IConnectorMultiStepParaswapFlashloan {
//     function flashloanReq(bool opt, address[] calldata flashloanTokens, uint256[] calldata flashloanAmounts, uint256[] calldata flashLoanInterestRateModes, bytes[] calldata swapData) external;
// }

interface IConnectorParaswapFlashloan {
    function flashloanReq(bool opt, address[] memory flashloanTokens, uint256[] memory flashloanAmounts, uint256[] memory flashLoanInterestRateModes, address[] memory totalTokensCollateral, uint256[] memory totalAmountsCollateral, bytes[] memory swapData) external;
}

interface IConnectorMultiFlashloanOnchain {
    function flashloanReq(address[] memory flashloanTokens, uint256[] memory flashloanAmount, uint256[] memory flashLoanInterestRateModes, address[] memory flashLoanTokensCollateral, uint256[] memory flashLoanAmountsCollateral) external;
}

interface IConnectorFlashloan {
    function flashloanReq(address dsaOwnerAddress, address flashloanToken, uint256 flashloanAmount, uint256 flashActionId, bytes calldata _swapData) external;
}
