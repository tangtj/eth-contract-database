
// File: src/EdoDistributor.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.19;

import "./interfaces/IEdoDistributor.sol";

contract EdoDistributor is IEdoDistributor {
    ICCLP public immutable cclp;
    IERC20 public immutable ele;
    uint256 public immutable totalBalance;

    uint256 public totalAlloc;
    mapping(address => bool) public claimed;

    bool public notified;

    constructor(address _cclp, IERC20 _ele) {
        cclp = ICCLP(_cclp);
        ele = _ele;
        totalBalance = cclp.buyInAmt();
    }

    function notify() external {
        if (notified) revert Notified();
        notified = true;
        totalAlloc = ele.balanceOf(address(this));
    }

    function claim() external {
        address sender = msg.sender;
        if (claimed[sender]) revert Claimed();

        uint256 allocated = (totalAlloc * cclp.balanceOf(sender)) /
            totalBalance;
        claimed[sender] = true;

        ele.transfer(sender, allocated);

        emit Claim(sender, allocated);
    }
}


// File: src/interfaces/IEdoDistributor.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.19;

import "./ICCLP.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IEdoDistributor {
    event Claim(address indexed sender, uint256 amount);
    event Notify(uint256 amount);
    error Claimed();
    error Notified();

    function cclp() external view returns (ICCLP);
    function ele() external view returns (IERC20);
    function totalBalance() external view returns (uint256);
    function totalAlloc() external view returns (uint256);
    function claimed(address account) external view returns (bool);
    function notified() external view returns (bool);

    function claim() external;
    function notify() external;
}


// File: src/interfaces/ICCLP.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.19;

interface ICCLP {
    function roleCaps(uint256) external view returns (uint256);
    function roleSigners(uint256) external view returns (address);
    function uids(bytes calldata) external view returns (address);
    function accounts(address) external view returns (bytes memory);
    function balanceOf(address) external view returns (uint256);

    function totalCap() external view returns (uint256);
    function buyInAmt() external view returns (uint256);
    function treasury() external view returns (address);

    error ExceedsTotalCap();
    error NotSameLength();
    error MisMatchUID();
    error ExceedCap();
    error InvalidSignature();
    error CCLPEnded();
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

