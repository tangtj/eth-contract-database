{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value \u003e 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./Address.sol\";\nimport \"./Context.sol\";\nimport \"./Strings.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 =\u003e address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address =\u003e uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length \u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"IERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// from: https://eips.ethereum.org/EIPS/eip-2981#simple-summary\n\nimport \"./IERC165.sol\";\n\n///\n/// @dev Interface for the NFT Royalty Standard\n///\ninterface IERC2981 is IERC165 {\n    /// ERC165 bytes to add to interface array - set in parent contract\n    /// implementing this standard\n    ///\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\n\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n    /// @return receiver - address of who should be sent the royalty payment\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _salePrice\n    ) external view returns (\n        address receiver,\n        uint256 royaltyAmount\n    );\n}\n"},"IERC4906.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// from: https://eips.ethereum.org/EIPS/eip-4906\n\nimport \"./IERC165.sol\";\nimport \"./IERC721.sol\";\n\n// interface id for IERC4906: \u00270x49064906\u0027\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"},"IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"quick.response.mainnet.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\nimport \"./ERC721.sol\";\nimport \"./Counters.sol\";\nimport \"./Ownable.sol\";\nimport \"./IERC2981.sol\";\nimport \"./IERC4906.sol\";\n\n// full working. time for minor tweaks and clean up\n// think it\u0027s ready\n\ninterface IstorageTools{\n  function read(address) external view returns (bytes memory);\n  function bytesToUint16Array(bytes memory) external pure returns(uint16[] memory);\n  function b64encode(bytes memory) external pure returns(string memory);\n}\n\ninterface IgifBuilder{\n  function getImageBlock(uint8[] memory) external view returns(bytes memory);\n}\n\ninterface IcensoredText{\n  function getCensoredText(bytes10) external view returns(string memory);\n}\n\ncontract QuickResponse is ERC721, IERC2981, IERC4906, Ownable {\n  using Counters for Counters.Counter;\n\n  struct Token {\n    bytes10 salt;\n    bool locked;\n    address writer;\n    uint8 writeCount;\n    bytes message;\n  }\n\n  address internal constant censoredTextAddress = 0x2aDF11840B50e4019b81F8AbC5F7de7E86A4337E;\n  address internal constant toolsAddress = 0x744F25b06DEbc03a909c8CED93Fa121C6c47B773;\n  address internal constant positionsAddress = 0x88462a7c26b8F9f88C7f8472E2bB1B76775964E0;\n  address internal constant stencilAddress = 0xB3956Fa40418c5282f0D15881Ac374f6a7c371Fa;\n  address internal constant gifLzwAddress = 0x4563C42456CA63f68e0dE8bc84dc7988F9D6950D;\n\n  mapping(uint256 =\u003e Token) internal tokens;\n  mapping(address =\u003e uint256) public mintsBy;\n\n  Counters.Counter private supply;\n  /// @notice the value to be sent for each mint\n  uint256 public mintFee = 0.01 ether;\n  /// @notice the number of mints allowed per address\n  uint256 public constant maxMints = 10;\n  /// @notice the max supply for this collection. may changed to a lower value by calling lockMint.\n  uint256 public maxSupply = 1000;\n  /// @notice minting state. toggled by toggleMint.\n  bool public mintEnabled = false;\n  uint256 royaltyPercent = 4;\n  string public externalURL = \"https://nometa.online/quickresponse\";\n  string public constant description = \"writable qrcodes on-chained.\";\n  string internal constant nameStart = \"Quick Response #\";\n\n  constructor() payable ERC721(\u0027Quick Response\u0027,\u0027QR\u0027) {}\n\n  /* interface id for IERC2981: \u00270x2a55205a\u0027 */\n  /* interface id for IERC4906: \u00270x49064906\u0027 */\n  function supportsInterface(bytes4 interfaceId)\n        public view override(IERC165, ERC721) returns (bool) {\n    return\n        interfaceId == type(IERC721).interfaceId ||\n        interfaceId == type(IERC721Metadata).interfaceId ||\n        interfaceId == type(IERC2981).interfaceId ||\n        interfaceId == bytes4(0x49064906) ||\n        super.supportsInterface(interfaceId);\n  }\n\n  receive() external payable {}\n\n  // token logic ===================================================\n\n  modifier tokenExists(uint256 _tokenId) {\n    require(_exists(_tokenId), \"token does not exist\");\n    _;\n  }\n\n  /// @notice returns the number of tokens in the collection\n  function totalSupply() external view returns (uint256) {\n      return supply.current();\n  }\n\n  /// @notice Mint given number of tokens\n  /// @param _mints The number of tokens to mint. Max 10. Limited by sender address\u0027s mintsBy\n  function mint(uint256 _mints) external payable {\n    address msgSender = msg.sender;\n    uint256 mints = _mints;\n    unchecked {\n      require((supply.current() + mints) \u003c= maxSupply, \"exceeds max supply\");\n      if (msgSender != owner()) {\n        require(msg.value == mints * mintFee, \"invald value for tranasction\");\n        require(mintEnabled, \"minting has been disabled\");\n      }\n      require((mintsBy[msgSender] + mints) \u003c= maxMints, \"mint limit of 10\");\n      mintsBy[msgSender] += mints;\n      for (uint256 count = 1; count \u003c= mints; count++) {\n        supply.increment();\n        uint256 tokenId = supply.current();\n        tokens[tokenId].salt = bytes10(keccak256(abi.encodePacked(\n                                                      tokenId,\n                                                      block.prevrandao\n                                                      )));\n        _safeMint(msgSender, tokenId);\n      }\n    }\n  }\n\n  /// @notice encode a message into a qrcode. a holder can write to any unlocked token\n  /// @param _tokenId the token id to write to\n  /// @param _message the message to encode. max 78 characters.\n  function writeMessage(uint256 _tokenId, string memory _message) external tokenExists(_tokenId) {\n    uint256 tokenId = _tokenId;\n    bytes memory messageBytes = bytes(_message);\n    Token storage thisToken = tokens[tokenId];\n    address writer = msg.sender;\n    address tokenOwner = ownerOf(tokenId);\n    require(messageBytes.length \u003c= 78, \"message too long\");\n    if (thisToken.locked) {\n      require(writer == tokenOwner, \"only owner can write\");\n    } else {\n      require(balanceOf(writer) \u003e 0, \"only holders can write\");\n    }\n    thisToken.writer = (writer == tokenOwner) ? address(0) : writer;\n    unchecked { thisToken.writeCount += 1; }\n    thisToken.message = messageBytes;\n\n    emit MetadataUpdate(tokenId);\n  }\n\n  /// @notice lock a token from being written by other token holders. this can not be undone.\n  function lockPublicWrite(uint256 _tokenId) external tokenExists(_tokenId) {\n    uint256 tokenId = _tokenId;\n    Token storage thisToken = tokens[tokenId];\n    require(msg.sender == ownerOf(tokenId), \"not the owner\");\n    require(! thisToken.locked, \"token is locked\");\n    thisToken.locked = true;\n\n    emit MetadataUpdate(tokenId);\n  }\n\n  /// @notice builds attributes to include in meatdata\n  function getAttributes(uint256 _tokenId) internal view returns (string memory) {\n    Token memory thisToken = tokens[_tokenId];\n    string memory attributes = \u0027\",\"attributes\":[{\"trait_type\":\"locked\",\"value\":\u0027;\n    string memory lockedStr = thisToken.locked ? \u0027true}\u0027 : \u0027false}\u0027;\n    attributes = string.concat(\n                            attributes,\n                            lockedStr\n                            );\n    if (thisToken.writeCount \u003e 0) {\n      attributes = string.concat(\n                            attributes,\n                            \u0027,{\"trait_type\":\"writeCount\",\"value\":\u0027,\n                            Strings.toString(thisToken.writeCount),\n                            \u0027}\u0027\n                            );\n    }\n    if (thisToken.writer != address(0)) {\n      attributes = string.concat(\n                            attributes,\n                            \u0027,{\"trait_type\":\"messageFrom\",\"value\":\"\u0027,\n                            string(getbyteStringAddress(thisToken.writer)),\n                            \u0027\"}\u0027\n                            );\n    }\n    return string.concat(attributes, \"]\" );\n  }\n\n  /// @notice returns metadata for the token\n  function tokenURI(uint256 _tokenId)\n        public view virtual override tokenExists(_tokenId) returns (string memory) {\n    uint256 tokenId = _tokenId;\n    IstorageTools tools = IstorageTools(toolsAddress);\n\n    return string.concat(\n                    \u0027data:application/json;base64,\u0027,\n                    tools.b64encode(bytes(string.concat(\n                      \u0027{\"name\":\"\u0027,\n                      getName(tokenId),\n                      /* nameStart, */\n                      /* \u0027 #\u0027, */\n                      /* Strings.toString(tokenId), */\n                      \u0027\",\"description\":\"\u0027,\n                      description,\n                      \u0027\",\"external_url\":\"\u0027,\n                      externalURL,\n                      getAttributes(tokenId),\n                      \u0027,\"image\":\"\u0027,\n                      packSvg(tokenId),\n                      \u0027\"}\u0027\n                      )))\n                    );\n  }\n\n  function packSvg(uint256 _tokenId) internal view returns(string memory) {\n    IstorageTools tools = IstorageTools(toolsAddress);\n    Token memory thisToken = tokens[_tokenId];\n    string memory colour;\n    if (thisToken.locked) {\n      colour = \u0027c32\u0027;\n    } else if (thisToken.writeCount == 0) {\n      colour = \u0027fff\u0027;\n    } else if (thisToken.writer == address(0)) {\n      colour = \u0027000\u0027;\n    } else {\n      string[5] memory colours = [\u0027e82\u0027, \u0027ed2\u0027, \u00270a1\u0027, \u002708d\u0027, \u002785b\u0027];\n      colour = colours[(tokens[_tokenId].writeCount - 1) % 5];\n    }\n    return string.concat(\n                  \"data:image/svg+xml;base64,\",\n                  tools.b64encode(bytes(string.concat(\n                      \u0027\u003csvg id=\"q\" width=\"740\" height=\"740\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u0027,\n                      \u0027\u003crect rx=\"40\" width=\"740\" height=\"740\" fill=\"#000\" \u003e\u003c/rect\u003e\u0027,\n                      \u0027\u003crect rx=\"28\" x=\"15\" y=\"15\" width=\"710\" height=\"710\" stroke=\"#\u0027,\n                      colour,\n                      \u0027\" stroke-width=\"10\"\u003e\u003c/rect\u003e\u0027,\n                      \u0027\u003cimage width=\"656\" height=\"656\" x=\"42\" y=\"42\" clip-path=\"inset(0 round 20)\" \u0027,\n                      \u0027 image-rendering=\"pixelated\" href=\"\u0027,\n                      \u0027data:image/gif;base64,\u0027,\n                      tools.b64encode(packGif(_tokenId)),\n                      \u0027\"\u003e\u003canimate attributeName=\"opacity\" \u0027,\n                      \u0027dur=\"2.2s\" from=\"1\" to=\"0.999\" repeatCount=\"indefinite\"/\u003e\u0027,\n                      \u0027\u003c/image\u003e\u0027,\n                      \u0027\u003cscript type=\"text/javascript\"\u003e\u003c![CDATA[\u0027,\n                      \u0027let q=document.getElementById(\"q\");\u0027,\n                      \u0027q.style=`margin:${(q.parent == undefined)?\"\u0027,\n                      \u0027calc((100vh - 740px)/2)\":\"0\"} auto;background-color:#2e2e2e;`;]]\u003e\u0027,\n                       \u0027\u003c/script\u003e\u003c/svg\u003e\u0027\n                      )))\n                    );\n  }\n\n  function genImageBlock(uint256 _tokenId) internal view returns(bytes memory) {\n    uint256 tokenId = _tokenId;\n    bytes memory message = tokens[tokenId].message;\n    /* if no message written */\n    if (message.length == 0) {\n      message = bytes(IcensoredText(censoredTextAddress).getCensoredText(tokens[tokenId].salt));\n    }\n    if (message.length == 0) {\n      message = bytes.concat(\n                        bytes(getName(tokenId)),\n                        \u0027 \u0027,\n                        bytes(getbyteStringAddress(ownerOf(tokenId)))\n                        );\n    }\n    uint8[] memory imageArray = getImageArray(addEcc(encodeMessage(message)));\n    return IgifBuilder(gifLzwAddress).getImageBlock(imageArray);\n  }\n\n  // public only for testing\n  function packGif(uint256 _tokenId) public view returns(bytes memory) {\n    (bytes memory light, bytes memory dark, uint8[] memory glitches) = parseSalt(_tokenId);\n    bytes memory imageBlock = genImageBlock(_tokenId);\n    bytes1 bigTime = bytes1((glitches[0] % 3) + 1);\n    return bytes.concat(\n                        hex\u002747494638396129002900f00000\u0027,\n                        light,\n                        dark,\n                        // aeb: repeat indefinitely\n                        hex\u002721FF0B4E45545343415045322E300301000000\u0027,\n                        // gce: 3 sec (2c01), disposal (packed 04)\n                        // 5 sec =\u003e f401\n                        /* hex\u002721F90404f4010000\u0027, */\n                        hex\u002721F90404\u0027,\n                        bytes1(glitches[0] \u003c\u003c 4),\n                        bigTime,\n                        hex\u00270000\u0027,\n                        /* hex\u0027010000\u0027, */\n                        // id + code size\n                        hex\u00272C00000000290029000002\u0027,\n                        imageBlock,\n                        hex\u002700\u0027,\n\n                        // long invert 1st\n\n                        // gce: 0.4 sec (2800), disposal (packed 04)\n                        /* hex\u002721F9040428000000\u0027, */\n                        hex\u002721F90404\u0027,\n                        bytes1((glitches[1] % 50) + 10),\n                        hex\u0027000000\u0027,\n                        // id: last byte flags local colour table (80)\n                        hex\u00272C000000002900290080\u0027,\n                        dark,\n                        light,\n                        hex\u002702\u0027, // mincode\n                        imageBlock,\n                        hex\u002700\u0027,\n\n                        // gce: 0.1 sec (0a00), disposal (packed 04)\n                        hex\u002721F904040a000000\u0027,\n                        // id\n                        hex\u00272C00000000290029000002\u0027,\n                        this.glitch(imageBlock, glitches[2]),\n                        hex\u002700\u0027,\n\n                        // gce: 0.1 sec (0a00), disposal (packed 04)\n                        hex\u002721F904040a000000\u0027,\n                        // id\n                        hex\u00272C00000000290029000002\u0027,\n                        this.glitch(imageBlock, glitches[3]),\n                        hex\u0027003b\u0027\n                        );\n  }\n\n  /// @notice this function is external only for the sake of slicing bytes\n  function glitch(bytes calldata _imageBlock, uint8 _glitch) external pure returns(bytes memory) {\n    uint8 position = (_glitch % 60) + 10;\n    return bytes.concat(\n                  _imageBlock[:position],\n                  // might try ^ 85\n                  bytes1(_glitch \u0026 85),\n                  /* bytes1(hex\u002755\u0027), */\n                  _imageBlock[position+1:]\n                  );\n  }\n\n  /// @notice parse stored salt as light, dark colours and values for glitches\n  function parseSalt(uint256 _tokenId) internal view\n        returns(bytes memory, bytes memory, uint8[] memory) {\n    bytes10 salt = tokens[_tokenId].salt;\n    uint8[] memory glitches = new uint8[](4);\n    bytes memory light = \u0027\u0027;\n    bytes memory dark = \u0027\u0027;\n    uint16 contrast;\n    //gen light\n    uint8 count = 0;\n    // saves 2514 gas\n    unchecked {\n      for (uint256 i=0; i\u003c3; i++) {\n        uint8 value =  255 - (uint8(salt[i]) % 90);\n        uint8 rgb;\n        if (value \u003e 240) {rgb = 255;}\n        else if (value \u003c 200 \u0026\u0026 count \u003c 2) {\n          rgb = count == 0 || i == 2 ? 80:160;\n          count++;\n        }\n        else rgb = value;\n        contrast += rgb;\n        light = bytes.concat(light, bytes1(rgb));\n      }\n      // gen dark\n      // determine black or colour from adding rgb\n      count = 0;\n      for (uint256 i=0; i\u003c3; i++) {\n        uint8 value =  0 + (uint8(salt[i+3]) % 70);\n        uint8 rgb;\n        if (contrast \u003c 620) {rgb = 0;}\n        else if (value \u003e 40 \u0026\u0026 count \u003c 2) {\n          rgb = count == 0 || i == 0 ? 140 : 70;\n          count++;\n        }\n        else rgb = value;\n        dark = bytes.concat(dark, bytes1(rgb));\n      }\n      for (uint256 i=0; i\u003c4; i++) {\n        glitches[i] = uint8(salt[i+6]);\n      }\n    }\n    return (light, dark, glitches);\n  }\n\n  /// @notice prepares the message with the qrcode mode and appropriate padding\n  function encodeMessage(bytes memory message) internal pure returns (uint8[] memory) {\n    uint8[] memory md = new uint8[](80);\n    uint8 length = uint8(message.length);\n    // saves 23574 gas\n    unchecked {\n      md[0] = uint8((0x04 \u003c\u003c 4) + (length \u003e\u003e 4));\n      md[1] = uint8((length \u003c\u003c 4) + uint8(message[0] \u003e\u003e 4));\n      for (uint8 i=0; i\u003clength-1; i++) {\n        md[i+2] = uint8(message[i] \u003c\u003c 4) + uint8(message[i+1] \u003e\u003e 4);\n      }\n      md[length+1] = uint8((message[length-1] \u003c\u003c 4));\n      uint8[2] memory pad = [236,17];\n      // need to start with pad[0]\n      uint8 padShift = (length+2) % 2;\n      for (uint8 i=length+2; i\u003c80; i++) {\n        md[i] = pad[(i + padShift) % 2];\n      }\n    }\n    return md;\n  }\n\n  /// @notice generates the error correction codes\n  function addEcc(uint8[] memory _message) internal pure returns(uint8[] memory) {\n    uint256 genLen = 21;\n    uint256 msgLen = 80;\n    uint8[] memory mc = new uint8[](msgLen + genLen);\n    uint8[21] memory ga = [0,17,60,79,50,61,163,26,187,202,180,221,225,83,239,156,164,212,212,188,190];\n    // create tables\n    uint8[] memory exp = new uint8[](256);\n    uint256[] memory log = new uint256[](256);\n    // saves 709906 gas\n    unchecked {\n      // moved next line from above\n      for (uint256 i ; i\u003cmsgLen; i++) { mc[i] = _message[i]; }\n      for (uint8 i=0; i\u003c8; i++) { exp[i] = uint8(1) \u003c\u003c i; }\n      for (uint256 i=8; i\u003c256; i++) { exp[i] = (((exp[i - 4] ^ exp[i - 5]) ^ exp[i - 6]) ^ exp[i - 8]); }\n      for (uint256 i=0; i\u003c255; i++) { log[exp[i]] = i; }\n      for (uint8 i=0; i\u003cmsgLen; i++) {\n        uint8[] memory q = new uint8[](21);\n        for (uint8 j; j\u003cgenLen; j++) {\n          if (mc[i] == 0) break;\n          q[j] = exp[(log[mc[i]] + ga[j]) % 255];\n        }\n        for (uint8 j=1; j\u003cgenLen; j++) {\n          mc[i+j] ^= q[j];\n        }\n        // rewrite the original _message code to first position\n        mc[i] = _message[i];\n      }\n    }\n    return mc;\n  }\n\n  //======================================================\n\n  function getImageArray(uint8[] memory _data) internal view returns(uint8[] memory) {\n    IstorageTools tools = IstorageTools(toolsAddress);\n    uint16[] memory positions = tools.bytesToUint16Array(tools.read(positionsAddress));\n    uint8[] memory imageArray = new uint8[](1681);\n    uint16[] memory stencil = tools.bytesToUint16Array(tools.read(stencilAddress));\n    uint256 stencilLength = stencil.length; //153\n    uint16 count = 807;\n    // unpack data bits and add to imageArray using positions\n    uint8 bit;\n    // saves 306566 gas\n    unchecked {\n      for (uint256 i=0; i\u003ccount; i++) {\n        bit = (_data[i/8] \u003e\u003e (7-(i % 8))) % 2;\n        // applying mask before placing\n        if (positions[i] % 2 == 0) { bit ^= 1; }\n        imageArray[positions[i]] = bit;\n      }\n      // apply stencil\n      for (uint256 i=0; i\u003cstencilLength; i++) {\n        imageArray[stencil[i]] = 1;\n      }\n    }\n    return imageArray;\n  }\n\n  // utilities\n\n  function getName(uint256 _tokenId) internal pure returns(string memory) {\n    return string.concat(\n                      nameStart,\n                      Strings.toString(_tokenId)\n                      );\n  }\n\n  /// @notice converts an address to a hexadecimal string with leading 0x\n  /// @param _address the address to convert\n  /// @return address as a string\n  function getbyteStringAddress(address _address) internal pure returns(bytes memory) {\n    bytes memory addressBytes = abi.encodePacked(_address);\n    bytes memory addressStringBytes = \u00270x\u0027;\n    bytes memory alphabet = \"0123456789abcdef\";\n    for (uint256 i=0; i\u003c20; i++) {\n      addressStringBytes = bytes.concat(\n                                    addressStringBytes,\n                                    alphabet[uint8(addressBytes[i] \u003e\u003e 4)],\n                                    alphabet[uint8(addressBytes[i] \u0026 0x0f)]\n                                    );\n    }\n    return addressStringBytes ;\n  }\n\n  /// @notice called with the sale price to determine how much royalty is owed and to whom.\n  /// @param _tokenId the NFT asset queried for royalty information\n  /// @param _salePrice the sale price of the NFT asset specified by _tokenId\n  /// @return receiver address of who should be sent the royalty payment\n  /// @return royaltyAmount the royalty payment amount for _salePrice\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n                external view tokenExists(_tokenId)\n                returns(address receiver, uint256 royaltyAmount) {\n    return (owner(), _salePrice * royaltyPercent / 100);\n  }\n\n  /* owner control */\n\n  /// @notice Set the external address for metadata. onlyOwner\n  /// @param _url The new external url.\n  function setExternalURL(string calldata _url) external onlyOwner {\n      externalURL = _url;\n  }\n\n  /// @notice Toggles bool mintEnabled\n  function toggleMint() external onlyOwner {\n    require(supply.current() \u003c maxSupply, \"minting has ended\");\n    mintEnabled = !mintEnabled;\n  }\n\n  /// @notice will permanently disable minting. This cannot be undone.\n  function lockMint() external onlyOwner {\n    maxSupply = supply.current();\n    mintEnabled = false;\n  }\n\n\n  function withdraw() external onlyOwner {\n    (bool success, ) = payable(owner()).call{value: address(this).balance}(\"\");\n    require(success, \"failed to withdraw\");\n  }\n\n}\n"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"}}