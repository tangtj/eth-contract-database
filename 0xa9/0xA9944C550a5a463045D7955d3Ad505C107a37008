{"Address.sol":{"content":"pragma solidity 0.8.4;\n// SPDX-License-Identifier: UNLICENSED\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}"},"claw.sol":{"content":"//claw.sol\n// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\ncontract Crab {\n    mapping(address =\u003e Staker) public staker;\n    struct Staker {\n        uint256 stakedBalance;\n        uint256 stakeStartTimestamp;\n        uint256 totalStakingInterest;\n        uint256 totalBurnt;\n        uint256 totalReferralBonus;\n        address referrer;\n        bool activeUser;\n    }\n}\n\n////////////////////////////////////////////////\n////////////////////EVENTS/////////////////////\n//////////////////////////////////////////////\n\ncontract TokenEvents {\n    //when a user stakes tokens\n    event TokenStake(address indexed user, uint256 value);\n\n    //when a user unstakes tokens\n    event TokenUnstake(address indexed user, uint256 value);\n\n    //when a user burns tokens\n    event TokenBurn(address indexed user, uint256 value);\n}\n\n//////////////////////////////////////\n//////////CRABCLAW TOKEN CONTRACT////////\n////////////////////////////////////\ncontract CRABCLAW is IERC20, Crab, TokenEvents {\n    using SafeMath for uint256;\n    using SafeMath for uint64;\n    using SafeMath for uint32;\n    using SafeMath for uint16;\n    using SafeMath for uint8;\n\n    using SafeERC20 for CRABCLAW;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    //stake setup\n    uint256 internal constant MINUTESECONDS = 60;\n    uint256 internal constant DAYSECONDS = 86400;\n    uint256 internal constant MINSTAKEDAYLENGTH = 7;\n    uint256 public totalStaked;\n\n    //tokenomics\n    uint256 internal _totalSupply;\n    string public constant name = \"Crab Claw\";\n    string public constant symbol = \"CLAW\";\n    uint8 public constant decimals = 18;\n    bool private sync;\n\n    mapping(address =\u003e ClawStaker) public clawStaker;\n\n    struct ClawStaker {\n        uint256 stakedBalance;\n        uint256 stakeStartTimestamp;\n        uint256 totalStakingInterest;\n        uint256 totalMinted;\n    }\n\n    //protects against potential reentrancy\n    modifier synchronized() {\n        require(!sync, \"Sync lock\");\n        sync = true;\n        _;\n        sync = false;\n    }\n\n    //create crab market contract instance\n    Crab crabInstance;\n\n    constructor() {\n        crabInstance = Crab(0x24BCeC1AFda63E622a97F17cFf9a61FFCfd9b735); \n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\n     * `amount`.\n     */\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        external\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        external\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply unless mintBLock is true\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        uint256 amt = amount;\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amt);\n        _balances[account] = _balances[account].add(amt);\n        emit Transfer(address(0), account, amt);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller\u0027s allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(\n            account,\n            msg.sender,\n            _allowances[account][msg.sender].sub(\n                amount,\n                \"ERC20: burn amount exceeds allowance\"\n            )\n        );\n    }\n\n    ////////////////////////////////////////////////////////\n    /////////////////PUBLIC FACING - CLAW CONTROL//////////\n    //////////////////////////////////////////////////////\n\n    ////////MINTING FUNCTION/////////\n\n    function getBurnt() public view returns (uint256) {\n        Staker memory _staker;\n        (\n            _staker.stakedBalance,\n            _staker.stakeStartTimestamp,\n            _staker.totalStakingInterest,\n            _staker.totalBurnt,\n            _staker.totalReferralBonus,\n            _staker.referrer,\n            _staker.activeUser\n        ) = crabInstance.staker(msg.sender);\n        return (_staker.totalBurnt);\n    }\n\n    //mint claw based on users CRAB burnt minus CLAW minted.\n    function MintTokens() external synchronized {\n        //Get CRAB burnt\n        uint256 _b = getBurnt();\n        //Get CLAW minted\n        uint256 _m = clawStaker[msg.sender].totalMinted;\n        require(_b \u003e _m, \"Not eligible, burn CRAB to mint CLAW\");\n        //Calculate difference\n        uint256 _v = _b.sub(_m);\n        //Increase mint value\n        clawStaker[msg.sender].totalMinted += _v;\n        //Mint 1:100 CLAW:CRAB\n        _mint(msg.sender, _v.div(100));\n    }\n\n    ////////STAKING FUNCTIONS/////////\n\n    //stake CLAW tokens to contract and claims any accrued interest\n    function StakeTokens(uint256 amt) external synchronized {\n        require(amt \u003e 0, \"zero input\");\n        require(clawBalance() \u003e= amt, \"Error: insufficient balance\"); //ensure user has enough funds\n        //claim any accrued interest\n        claimInterest();\n        //update balances\n        clawStaker[msg.sender].stakedBalance = clawStaker[msg.sender]\n            .stakedBalance\n            .add(amt);\n        totalStaked = totalStaked.add(amt);\n        _transfer(msg.sender, address(this), amt); //make transfer\n        emit TokenStake(msg.sender, amt);\n    }\n\n    //unstake CLAW tokens from contract and claims any accrued interest\n    function UnstakeTokens() external synchronized {\n        require(\n            clawStaker[msg.sender].stakedBalance \u003e 0,\n            \"Error: unsufficient staked balance\"\n        ); //ensure user has enough staked funds\n        require(\n            isStakeFinished(msg.sender),\n            \"tokens cannot be unstaked yet. min 7 day stake\"\n        );\n        uint256 amt = clawStaker[msg.sender].stakedBalance;\n        //claim any accrued interest\n        claimInterest();\n        //zero out staking timestamp\n        clawStaker[msg.sender].stakeStartTimestamp = 0;\n        clawStaker[msg.sender].stakedBalance = 0;\n        totalStaked = totalStaked.sub(amt);\n        _transfer(address(this), msg.sender, amt); //make transfer\n        emit TokenUnstake(msg.sender, amt);\n    }\n\n    //claim any accrued interest\n    function ClaimStakeInterest() external synchronized {\n        require(\n            clawStaker[msg.sender].stakedBalance \u003e 0,\n            \"you have no staked balance\"\n        );\n        claimInterest();\n    }\n\n    //roll any accrued interest\n    function RollStakeInterest() external synchronized {\n        require(\n            clawStaker[msg.sender].stakedBalance \u003e 0,\n            \"you have no staked balance\"\n        );\n        rollInterest();\n    }\n\n    function rollInterest() internal {\n        //calculate staking interest\n        uint256 interest = calcStakingRewards(msg.sender);\n        //mint interest to contract, ref and devs\n        if (interest \u003e 0) {\n            _mint(address(this), interest);\n            //roll interest\n            clawStaker[msg.sender].stakedBalance = clawStaker[msg.sender]\n                .stakedBalance\n                .add(interest);\n            totalStaked = totalStaked.add(interest);\n            clawStaker[msg.sender].totalStakingInterest += interest;\n            //reset staking timestamp\n            clawStaker[msg.sender].stakeStartTimestamp = block.timestamp;\n        }\n    }\n\n    function claimInterest() internal {\n        //calculate staking interest\n        uint256 interest = calcStakingRewards(msg.sender);\n        //reset staking timestamp\n        clawStaker[msg.sender].stakeStartTimestamp = block.timestamp;\n        //mint interest if any\n        if (interest \u003e 0) {\n            _mint(msg.sender, interest);\n            clawStaker[msg.sender].totalStakingInterest += interest;\n        }\n    }\n\n    ///////////////////////////////\n    ////////VIEW ONLY//////////////\n    ///////////////////////////////\n\n    //returns staking rewards in CLAW\n    function calcStakingRewards(address _user) public view returns (uint256) {\n        // totalstaked * minutesPast / 10000 / 1251 @ 4.20% APY\n        uint256 staked = clawStaker[_user].stakedBalance;\n        return (staked.mul(minsPastStakeTime(_user)).div(10000).div(1251));\n    }\n\n    //returns amount of minutes past since stake start\n    function minsPastStakeTime(address _user) public view returns (uint256) {\n        if (clawStaker[_user].stakeStartTimestamp == 0) {\n            return 0;\n        }\n        uint256 minsPast = block\n            .timestamp\n            .sub(clawStaker[_user].stakeStartTimestamp)\n            .div(MINUTESECONDS);\n        if (minsPast \u003e= 1) {\n            return minsPast; // returns 0 if under 1 min passed\n        } else {\n            return 0;\n        }\n    }\n\n    //check is stake is finished, min 7 days\n    function isStakeFinished(address _user) public view returns (bool) {\n        if (clawStaker[_user].stakeStartTimestamp == 0) {\n            return false;\n        } else {\n            return\n                clawStaker[_user].stakeStartTimestamp.add(\n                    (DAYSECONDS).mul(MINSTAKEDAYLENGTH)\n                ) \u003c= block.timestamp;\n        }\n    }\n\n    //CLAW balance of caller\n    function clawBalance() public view returns (uint256) {\n        return balanceOf(msg.sender);\n    }\n}\n"},"IERC20.sol":{"content":"pragma solidity 0.8.4;\n// SPDX-License-Identifier: UNLICENSED\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"SafeMath.sol":{"content":"pragma solidity 0.8.4;\n// SPDX-License-Identifier: UNLICENSED\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}