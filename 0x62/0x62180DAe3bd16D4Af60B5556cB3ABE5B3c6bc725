// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;
contract KCSToken {
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    mapping (address => uint256) private  balances;
    mapping (address => mapping (address => uint256)) private  allowances;

    constructor() payable {
        balances[tx.origin] = 2500000000000000000000000000;
        emit Transfer(address(0),tx.origin,2500000000000000000000000000);
    }
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) 
        public
        returns (bool)
    {
        if(from != msg.sender) require(amount <= allowances[from][msg.sender],"ERC20:allowance insufficient");
        require(amount <= balances[from],"ERC20:balance insufficient");
        unchecked{ balances[from] -= amount; }
        balances[to] += amount;
        emit Transfer(from, to, amount);
        if(from != msg.sender && allowances[from][msg.sender] != uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)){ unchecked{ allowances[from][msg.sender] -= amount; } }
        return true;
    }
    function approve(address sender, uint256 amount) external returns (bool) {
        allowances[msg.sender][sender] = amount;
        emit Approval(msg.sender, sender, amount);
        return true;
    }
    function transfer(address to, uint256 amount) external returns (bool) { return transferFrom(msg.sender,to,amount); }
    function owner() external pure returns (address) { return address(0); }
    function name() external pure returns (string memory) { return "KCS"; }
    function symbol() external pure returns (string memory) { return "KCS"; }
    function decimals() external pure returns (uint8) { return 18; }
    function totalSupply() external pure returns (uint256) { return 2500000000000000000000000000; }
    function balanceOf(address _owner) external view returns (uint256) { return balances[_owner]; }
    function allowance(address _owner, address _spender) external view returns (uint256) { return allowances[_owner][_spender]; }
}