
// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)

pragma solidity ^0.8.20;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev The `account` is missing a role.
     */
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);

    /**
     * @dev The caller of a function is not the expected one.
     *
     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.
     */
    error AccessControlBadConfirmation();

    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `callerConfirmation`.
     */
    function renounceRole(bytes32 role, address callerConfirmation) external;
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: contracts/interfaces/IBurnWallet.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.25;

interface IBurnWallet {
    function processTokens(
        address stable,
        address coldWallet,
        uint256 amount,
        uint256 fee
    ) external;

    function retrieveTokens(address stable, address to, uint256 amount) external;

    function initialize() external;

    function walletFactory() external view returns (address);
}


// File: contracts/interfaces/IDepositWallet.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.25;

interface IDepositWallet {
    function processTokens(
        address stable,
        address coldWallet,
        uint256 amount,
        uint256 fee
    ) external;

    function initialize(address userAddress) external;

    function userAddress() external view returns (address);

    function walletFactory() external view returns (address);
}


// File: contracts/interfaces/IMinter.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.25;

interface IMinter {
    struct MintOrder {
        address target;
        bool processed;
        address stable;
        bool withFee;
        address depositWallet;
        bool rejected;
        uint256 investedAmount;
    }

    struct BurnOrder {
        bool processed;
        address stable;
        uint256 amount;
    }

    function requestMint(address target, address stable, uint256 amount) external;

    function acceptMint(address user, address coldWallet, bytes32 orderHash) external;

    function rejectMint(address user, bytes32 orderHash, bool withFee) external;

    function claimRejected(bytes32 orderHash) external;

    function requestBurn(address stable, uint256 amount) external;

    function processBurned(address user, bytes32 orderHash) external;

    function setTokenPrice(uint256 tokenPrice) external;

    function setWalletFactory(address walletFactory) external;

    function tokenPrice() external view returns (uint256);

    function userNonce(address user) external view returns (uint256);

    function walletFactory() external view returns (address);

    function mintedAmount(address stable, uint256 amount) external view returns (uint256);

    function burnedAmount(
        address stable,
        uint256 amount
    ) external view returns (uint256, uint256, uint256);

    function getUserAmountsAvailable(
        address user,
        address stable
    ) external view returns (uint256 mintAvailable, uint256 burnAvailable);
}


// File: contracts/interfaces/ISTBL.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.25;

interface ISTBL {
    function mint(address to, uint256 amount) external;

    function burn(address from, uint256 amount) external;

    function setWalletFactory(address walletFactory) external;

    function disableMinting() external;

    function enableMinting() external;

    function disableBurn() external;

    function enableBurn() external;

    function mintable() external view returns (bool);

    function burnable() external view returns (bool);

    function walletFactory() external view returns (address);
}


// File: contracts/interfaces/IWalletFactory.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.25;

interface IWalletFactory {
    enum UserStatus {
        INACTIVE,
        PENDING,
        ACTIVE,
        REJECTED,
        BLOCKED
    }

    struct UserWallet {
        UserStatus status;
        bool partner;
        bool burner;
        bool minter;
        address depositAddress;
        bool business;
        uint256 minted;
        uint256 mintLimit;
        uint256 burned;
        uint256 burnLimit;
    }

    function processMintRequest(
        address user,
        address stable,
        uint256 amount
    ) external returns (UserWallet memory);

    function rejectMintRequest(address user, address stable, uint256 amount) external;

    function processBurnRequest(address user, uint256 amount) external returns (UserWallet memory);

    function register(bool partner, bool burner, bool minter, bool business) external;

    function acceptUser(address userAddress) external;

    function rejectUser(address userAddress) external;

    function createDepositWallet(address userAddress) external;

    function setUserCaps(address user, uint256 mintLimit, uint256 burnLimit) external;

    function setGlobalAccess(bool value) external;

    function setDepositWalletStatus(address[] calldata addresses, bool[] calldata values) external;

    function setUserStatus(address[] calldata addresses, UserStatus[] calldata values) external;

    function setColdWallets(address[] calldata addresses, bool[] calldata values) external;

    function setMultisigAddress(address multisigAddress) external;

    function setDepositWalletImplementation(address implementation) external;

    function setBurnWalletImplementation(address implementation) external;

    function setDepositAddress(address userAddress, address depositAddress) external;

    function setTokens(
        address[] calldata addresses,
        bool[] calldata values,
        uint256[] calldata cryptoHardcaps
    ) external;

    function setFeeAddress(address feeAddress) external;

    function setFee(uint256 mintFee, uint256 burnFee, uint256 transferFee) external;

    function setSoftCaps(
        uint256 minMintSoftcap,
        uint256 maxMintSoftcap,
        uint256 minBurnSoftcap,
        uint256 maxBurnSoftcap
    ) external;

    function setGlobalUserCaps(
        uint256 businessMinterCap,
        uint256 personalMinterCap,
        uint256 businessBurnerCap,
        uint256 personalBurnerCap
    ) external;

    function setCryptoHardcap(address stable, uint256 cryptoHardcap) external;

    function setFiatHardcap(uint256 fiatHardcap) external;

    function setThresholds(uint256 adminThreshold, uint256 multisigThreshold) external;

    function setDAO(address daoAddress) external;

    function setMinters(address[] calldata addresses, bool[] calldata values) external;

    function setSTBLAddress(address stblAddress) external;

    function setBurnWallet() external;

    function transferFee() external view returns (uint256);

    function mintFee() external view returns (uint256);

    function burnFee() external view returns (uint256);

    function globalAccess() external view returns (bool);

    function feeAddress() external view returns (address);

    function multisigAddress() external view returns (address);

    function daoAddress() external view returns (address);

    function userWallets(address user) external view returns (UserWallet memory);

    function depositWallets(address user) external view returns (bool);

    function stblAddress() external view returns (address);

    function minterAddresses(address) external view returns (bool);

    function allowedTokens(address token) external view returns (bool);

    function coldWallets(address wallet) external view returns (bool);

    function adminThreshold() external view returns (uint256);

    function multisigThreshold() external view returns (uint256);

    function getThresholds() external view returns (uint256, uint256);

    function fiatHardcap() external view returns (uint256);

    function fiatDeposited() external view returns (uint256);

    function cryptoDeposited(address stable) external view returns (uint256);

    function cryptoHardcap(address stable) external view returns (uint256);

    function minMintSoftcap() external view returns (uint256);

    function maxMintSoftcap() external view returns (uint256);

    function maxBurnSoftcap() external view returns (uint256);

    function minBurnSoftcap() external view returns (uint256);

    function personalMinterCap() external view returns (uint256);

    function businessMinterCap() external view returns (uint256);

    function personalBurnerCap() external view returns (uint256);

    function businessBurnerCap() external view returns (uint256);

    function depositWalletImplementation() external view returns (address);

    function burnWalletImplementation() external view returns (address);

    function burnWallet() external view returns (address);

    function getLimits()
        external
        view
        returns (uint256, uint256, uint256, uint256, uint256, uint256);

    // function getUserAmountsAvailable(
    //     address user,
    //     address stable,
    //     bool fiat
    // ) external view returns (uint256 mintAvailable, uint256 burningAvailable);
}


// File: contracts/Minter.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.25;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "./interfaces/ISTBL.sol";
import "./interfaces/IWalletFactory.sol";
import "./interfaces/IMinter.sol";
import "./interfaces/IDepositWallet.sol";
import "./interfaces/IBurnWallet.sol";
import "./utils/Errors.sol";
import "@openzeppelin/contracts/access/IAccessControl.sol";

// import "hardhat/console.sol";

///@dev this contract is used for minting and burning STBL tokens by minters and burners
contract Minter is IMinter {
    using SafeERC20 for IERC20Metadata;

    uint256 public constant HUNDRED_PERCENT = 10_000;
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant BACKEND_ROLE = keccak256("BACKEND_ROLE");

    // orders
    mapping(address => mapping(bytes32 => MintOrder)) public orders;
    mapping(address => mapping(bytes32 => BurnOrder)) public claimableBurned;

    // caps
    mapping(address => uint256) private _userNonce; // (user => nonce)

    // tokenPrice
    uint256 private _tokenPrice = 10_000;

    IWalletFactory private _walletFactory;

    ///@dev emitted when minting order is created
    event MintRequested(
        address user,
        address stable,
        uint256 amount,
        address wallet,
        bytes32 orderHash
    );
    ///@dev emitted when minting order is fulfilled
    event Minted(address user, address stable, uint256 amount, bytes32 orderHash);
    ///@dev emitted when minting order is rejected
    event MintRejected(address user, address stable, uint256 amount, bytes32 orderHash);
    ///@dev emitted when rejected minting order is claimed
    event MintClaimed(address user, address stable, uint256 amount, bytes32 orderHash);
    ///@dev emitted when burning order is created
    event BurnRequested(
        address user,
        uint256 amount,
        address stable,
        uint256 stblAmount,
        bytes32 orderHash
    );
    ///@dev emitted when burning order is fulfilled
    event Burned(address user, address stable, uint256 amount, bytes32 orderHash);
    ///@dev emitted when new token price is set
    event TokenPriceSet(uint256 tokenPrice);
    ///@dev emitted when wallet factory is set
    event WalletFactorySet(address walletFactory);

    ///@dev check whether user is in the whitelist or blocked
    modifier checkAccess(address from) {
        IWalletFactory.UserWallet memory fromWallet = _walletFactory.userWallets(from);
        if (fromWallet.status == IWalletFactory.UserStatus.BLOCKED) revert RoleControl();

        if (!_walletFactory.globalAccess()) {
            if (!(fromWallet.partner && fromWallet.status == IWalletFactory.UserStatus.ACTIVE))
                revert RoleControl();
        }
        _;
    }

    ///@param walletFactory address of walletFactory smart contract
    constructor(IWalletFactory walletFactory) {
        _walletFactory = walletFactory;
    }

    //=====================================================MINTING=====================================================

    ///@dev allows a user to request minting of a specific amount of a STBL token for a certain amount of stablecoins
    ///@param target the address where tokens will be minted to
    ///@param stable the address of the deposit stablecoin
    ///@param amount the amount of stablecoins to be deposited
    function requestMint(
        address target,
        address stable,
        uint256 amount
    ) external override checkAccess(msg.sender) {
        // STBL is allowed
        if (!_walletFactory.allowedTokens(stable)) revert InvalidToken();

        IWalletFactory.UserWallet memory userWallet = _walletFactory.processMintRequest(
            msg.sender,
            stable,
            amount
        );

        // deposit wallet exists and isn't blocked
        // IWalletFactory.UserWallet memory userWallet = _walletFactory.userWallets(msg.sender);
        address depositWallet = userWallet.depositAddress;
        if (userWallet.minter != true) revert RoleControl();
        if (_walletFactory.depositWallets(depositWallet) != true) revert DepositAddressBlocked();

        // transfer
        IERC20Metadata(stable).safeTransferFrom(msg.sender, depositWallet, amount);

        // createOrder
        bytes32 orderHash = keccak256(
            abi.encode(msg.sender, stable, amount, _userNonce[msg.sender])
        );

        orders[msg.sender][orderHash] = MintOrder({
            target: target,
            stable: stable,
            investedAmount: amount,
            rejected: false,
            withFee: false,
            processed: false,
            depositWallet: depositWallet
        });

        _userNonce[msg.sender] += 1;

        emit MintRequested(msg.sender, stable, amount, depositWallet, orderHash);
    }

    ///@dev used by backend/admin/multisig depending on the limits to accept minting order, process tokens and mint STBL
    ///@param user the user who requested minting
    ///@param coldWallet the address where deposited stablecoins will be sent
    ///@param orderHash the hash of the minting order
    function acceptMint(address user, address coldWallet, bytes32 orderHash) external override {
        IWalletFactory walletFactory_ = _walletFactory;
        if (orders[user][orderHash].processed) revert AlreadyProcessed();
        address depositWallet = orders[user][orderHash].depositWallet;
        uint256 amount = orders[user][orderHash].investedAmount;
        address stable = orders[user][orderHash].stable;

        (uint256 adminThreshold, uint256 multisigThreshold) = _walletFactory.getThresholds();

        uint256 fee = (amount * walletFactory_.mintFee()) / HUNDRED_PERCENT; // in USDT
        orders[user][orderHash].investedAmount = 0;
        uint256 mintedAmount = ((((amount - fee) * _tokenPrice) / HUNDRED_PERCENT) *
            10 ** IERC20Metadata(walletFactory_.stblAddress()).decimals()) /
            10 ** IERC20Metadata(stable).decimals();

        if (mintedAmount > multisigThreshold) {
            if (msg.sender != walletFactory_.multisigAddress()) revert RoleControl();
        }

        if (mintedAmount < multisigThreshold && mintedAmount > adminThreshold) {
            if (!IAccessControl(address(walletFactory_)).hasRole(ADMIN_ROLE, msg.sender))
                revert RoleControl();
        }

        if (mintedAmount < adminThreshold) {
            if (!IAccessControl(address(walletFactory_)).hasRole(BACKEND_ROLE, msg.sender))
                revert RoleControl();
        }

        orders[user][orderHash].processed = true;
        ISTBL(_walletFactory.stblAddress()).mint(orders[user][orderHash].target, mintedAmount);
        IDepositWallet(depositWallet).processTokens(stable, coldWallet, amount - fee, fee);
        emit Minted(user, stable, mintedAmount, orderHash);
    }

    ///@dev used by backend to reject minting order
    ///@param user the user who requested minting
    ///@param orderHash the hash of the minting order
    ///@param withFee if true, fee will be deducted from the returned stablecoins
    function rejectMint(address user, bytes32 orderHash, bool withFee) external override {
        if (
            !(IAccessControl(address(_walletFactory)).hasRole(ADMIN_ROLE, msg.sender) ||
                IAccessControl(address(_walletFactory)).hasRole(BACKEND_ROLE, msg.sender))
        ) {
            revert RoleControl();
        }

        if (orders[user][orderHash].processed) revert AlreadyProcessed();
        uint256 amount = orders[user][orderHash].investedAmount;
        address stable = orders[user][orderHash].stable;
        orders[user][orderHash].rejected = true;
        orders[user][orderHash].withFee = withFee;
        orders[user][orderHash].processed = true;
        _walletFactory.rejectMintRequest(user, stable, amount);
        emit MintRejected(user, stable, amount, orderHash);
    }

    ///@dev used by user to claim rejected funds
    ///@param orderHash the hash of the minting order
    function claimRejected(bytes32 orderHash) external override {
        if (!orders[msg.sender][orderHash].rejected) {
            revert NotRejected();
        }

        address depositWallet = orders[msg.sender][orderHash].depositWallet;
        address stable = orders[msg.sender][orderHash].stable;
        uint256 amount = orders[msg.sender][orderHash].investedAmount;
        orders[msg.sender][orderHash].investedAmount = 0;
        uint256 fee = (orders[msg.sender][orderHash].withFee &&
            _walletFactory.depositWallets(depositWallet))
            ? (amount * _walletFactory.burnFee()) / HUNDRED_PERCENT
            : 0;

        IDepositWallet(depositWallet).processTokens(stable, msg.sender, amount - fee, fee);

        emit MintClaimed(msg.sender, stable, amount - fee, orderHash);
    }

    //=====================================================BURNING=====================================================

    ///@dev allows a user to request burning of a specific amount of a STBL token
    ///@param stable the address of the returned stablecoin
    ///@param amount the amount of STBL to be burned
    function requestBurn(address stable, uint256 amount) external override checkAccess(msg.sender) {
        if (!_walletFactory.allowedTokens(stable)) {
            revert InvalidToken();
        }
        IWalletFactory.UserWallet memory userWallet = _walletFactory.processBurnRequest(
            msg.sender,
            amount
        );

        if (userWallet.burner != true) revert RoleControl();
        ISTBL(_walletFactory.stblAddress()).burn(msg.sender, amount);
        bytes32 orderHash = keccak256(
            abi.encode(msg.sender, stable, amount, _userNonce[msg.sender])
        );

        uint256 stableAmount = (((amount * HUNDRED_PERCENT) / _tokenPrice) *
            10 ** IERC20Metadata(stable).decimals()) /
            10 ** IERC20Metadata(_walletFactory.stblAddress()).decimals();

        claimableBurned[msg.sender][orderHash] = BurnOrder({
            stable: stable,
            amount: stableAmount,
            processed: false
        });
        _userNonce[msg.sender] += 1;

        emit BurnRequested(msg.sender, amount, stable, stableAmount, orderHash);
    }

    ///@dev used by backend to process burn requests
    ///@param user the user who requested burning
    function processBurned(address user, bytes32 orderHash) external override {
        if (!IAccessControl(address(_walletFactory)).hasRole(BACKEND_ROLE, msg.sender)) {
            revert RoleControl();
        }
        if (claimableBurned[user][orderHash].processed) revert AlreadyProcessed();
        uint256 amount = claimableBurned[user][orderHash].amount;
        address stable = claimableBurned[user][orderHash].stable;

        uint256 fee = (amount * _walletFactory.burnFee()) / HUNDRED_PERCENT;
        claimableBurned[user][orderHash].processed = true;

        IBurnWallet(IWalletFactory(_walletFactory).burnWallet()).processTokens(
            stable,
            user,
            amount - fee,
            fee
        );

        emit Burned(user, stable, amount - fee, orderHash);
    }

    //=====================================================ADMIN=====================================================
    ///@dev set token price
    ///@param tokenPrice the new token price
    function setTokenPrice(uint256 tokenPrice) external override {
        if (msg.sender != _walletFactory.multisigAddress()) revert RoleControl();
        _tokenPrice = tokenPrice;

        emit TokenPriceSet(tokenPrice);
    }

    ///@dev set wallet factory
    ///@param walletFactory the new wallet factory
    function setWalletFactory(address walletFactory) external override {
        if (msg.sender != _walletFactory.multisigAddress()) revert RoleControl();
        _walletFactory = IWalletFactory(walletFactory);

        emit WalletFactorySet(walletFactory);
    }

    ///@dev returns the token price
    function tokenPrice() external view override returns (uint256) {
        return _tokenPrice;
    }

    /// @return the nonce of the user
    function userNonce(address user) external view override returns (uint256) {
        return _userNonce[user];
    }

    /// @return wallet factory
    function walletFactory() external view override returns (address) {
        return address(_walletFactory);
    }

    /// @dev returns the amount of STBL that will be minted for a certain amount of stablecoins
    /// @param stable address of stable coin
    /// @param amount amount is stablecoins
    /// @return amount of STBL with fee
    function mintedAmount(address stable, uint256 amount) external view override returns (uint256) {
        IWalletFactory walletFactory_ = _walletFactory;
        uint256 fee = (amount * walletFactory_.mintFee()) / HUNDRED_PERCENT; // in USDT
        return
            ((((amount - fee) * _tokenPrice) / HUNDRED_PERCENT) *
                10 ** IERC20Metadata(walletFactory_.stblAddress()).decimals()) /
            10 ** IERC20Metadata(stable).decimals();
    }

    /// @dev returns the amount of stablecoins that will be burned for a certain amount of STBL
    /// @param stable address of stable coin
    /// @param amount amount is STBL
    /// @return amount of stablecoins
    /// @return fee
    /// @return amount of stablecoins-fee
    function burnedAmount(
        address stable,
        uint256 amount
    ) external view override returns (uint256, uint256, uint256) {
        uint256 stableAmount = (((amount * HUNDRED_PERCENT) / _tokenPrice) *
            10 ** IERC20Metadata(stable).decimals()) /
            10 ** IERC20Metadata(_walletFactory.stblAddress()).decimals();
        uint256 fee = (stableAmount * _walletFactory.burnFee()) / HUNDRED_PERCENT;
        return (stableAmount, fee, stableAmount - fee);
    }

    /// @dev returns current limits for a user
    /// @param user address of the user
    /// @param stable address of the stable token
    /// @return mintAvailable mint limit
    /// @return burnAvailable burning limit
    function getUserAmountsAvailable(
        address user,
        address stable
    ) external view override returns (uint256 mintAvailable, uint256 burnAvailable) {
        // get global limit in STBL
        uint256 globalAvailable;

        globalAvailable =
            _walletFactory.cryptoHardcap(stable) -
            _walletFactory.cryptoDeposited(stable);

        // get user personal limit in STBL
        IWalletFactory.UserWallet memory userWallet = _walletFactory.userWallets(user);
        uint256 userAvailable = userWallet.mintLimit;
        userAvailable -= userWallet.minted;
        mintAvailable = globalAvailable > userAvailable ? userAvailable : globalAvailable;
        mintAvailable =
            ((((mintAvailable) * _tokenPrice) / HUNDRED_PERCENT) *
                10 ** IERC20Metadata(stable).decimals()) /
            10 ** IERC20Metadata(_walletFactory.stblAddress()).decimals();
        mintAvailable =
            (mintAvailable / (HUNDRED_PERCENT - _walletFactory.mintFee())) *
            HUNDRED_PERCENT;
        uint256 burningLimit = userWallet.burnLimit;
        burnAvailable =
            ((burningLimit - userWallet.burned) / (HUNDRED_PERCENT - _walletFactory.mintFee())) *
            HUNDRED_PERCENT;
    }
}


// File: contracts/utils/Errors.sol
pragma solidity =0.8.25;

error UserInactive(); // 0x3310e691
error InvalidToken(); // 0xc1ab6dc1
error ZeroAddress(); // 0xd92e233d
error DepositAddressBlocked(); // 0x24c07dff
error RoleControl(); // 0x38a097a3
error NotRejected(); // 0x954443dc
error NotMintable(); // 0x12a59152
error NotBurnable(); // 0xda38f010
error InvalidInput(); // 0xb4fa3fb3
error InternalError(); // 0xfe835e35
error CapReached(); // 0xd7e991d2
error AlreadyProcessed(); // 0x57eee766

