{"Addresses.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n}\r\n"},"BaseERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\nimport \"./Addresses.sol\";\r\nimport \"./Strings.sol\";\r\nimport \"./ERC721Receiver.sol\";\r\nimport \"./IERC721.sol\";\r\n\r\nabstract contract ERC721BasicToken is IERC721 {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n    bytes4 private constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n    bytes4 private constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\r\n    string internal name_;\r\n    string internal symbol_;\r\n    string public baseTokenURI;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] internal allTokens;\r\n\r\n    // Mapping of interface id to whether or not it\u0027s supported\r\n    mapping(bytes4 =\u003e bool) internal supportedInterfaces;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address =\u003e mapping(uint256 =\u003e uint256)) internal ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 =\u003e uint256) internal ownedTokensIndex;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 =\u003e uint256) internal allTokensIndex;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping(uint256 =\u003e address) internal tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 =\u003e address) internal tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping(address =\u003e uint256) internal ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address =\u003e mapping(address =\u003e bool)) internal operatorApprovals;\r\n\r\n    /**\r\n     * @dev Guarantees msg.sender is owner of the given token\r\n     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n     */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender, \"Only asset owner is allowed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n     * @param _tokenId uint256 ID of the token to validate\r\n     */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId), \"Can not transfer\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseTokenUri\r\n    ) {\r\n        name_ = _name;\r\n        symbol_ = _symbol;\r\n        baseTokenURI = _baseTokenUri;\r\n\r\n        // register the supported interfaces to confirm to ERC721 via ERC165\r\n        _registerInterface(InterfaceId_ERC721Enumerable);\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n        _registerInterface(InterfaceId_ERC721);\r\n        _registerInterface(InterfaceId_ERC721Exists);\r\n        _registerInterface(InterfaceId_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token name\r\n     * @return string representing the token name\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return name_;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an URI for a given token ID\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param _tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (string memory)\r\n    {\r\n        require(exists(_tokenId), \"Asset does not exist\");\r\n        return string(abi.encodePacked(baseTokenURI, _tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param _owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0), \"Zero address not allowed\");\r\n        return ownedTokensCount[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID\r\n     * @param _tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0), \"Token does not exists\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists\r\n     * @param _tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param _to address to be approved for the given token ID\r\n     * @param _tokenId uint256 ID of the token to be approved\r\n     */\r\n    function _approve(address _to, uint256 _tokenId) internal {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner, \"Can not approve to self\");\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"Not allowed to update approvals\"\r\n        );\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n        emit Approval(owner, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * @param _tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf\r\n     * @param _to operator address to set the approval\r\n     * @param _approved representing the status of the approval to be set\r\n     */\r\n    function _setApprovalForAll(address _to, bool _approved) internal {\r\n        require(_to != msg.sender, \"Can not approve to self\");\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner\r\n     * @param _owner owner address which you want to query the approval of\r\n     * @param _operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) internal canTransfer(_tokenId) {\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    // This function assumes we have verified that _from is allowed to make transaction\r\n    function _transferOnBehalf(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        require(isApprovedOrOwner(_from, _tokenId), \"Can not transfer\");\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) private {\r\n        require(_to != address(0), \"Zero address not allowed\");\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     *\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        // solium-disable-next-line arg-overflow\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) internal {\r\n        _transferFrom(_from, _to, _tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(\r\n            checkAndCallSafeTransfer(_from, _to, _tokenId, _data),\r\n            \"Safe Transfer failed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n     * @param _spender address of the spender to query\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     *  is an operator of the owner, or is the owner of the token\r\n     */\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (_spender == owner ||\r\n            getApproved(_tokenId) == _spender ||\r\n            isApprovedForAll(owner, _spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token\r\n     * Reverts if the given token ID already exists\r\n     * @param _to The address that will own the minted token\r\n     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n     */\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0), \"Zero address not allowed\");\r\n        require(!exists(_tokenId), \"Asset already exists\");\r\n        addTokenTo(_to, _tokenId);\r\n        allTokensIndex[_tokenId] = allTokens.length;\r\n        allTokens.push(_tokenId);\r\n\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    function removeFromAllTokens(uint256 tokenId) private {\r\n        uint256 lastTokenIndex = allTokens.length - 1;\r\n        uint256 tokenIndex = allTokensIndex[tokenId];\r\n        uint256 lastTokenId = allTokens[lastTokenIndex];\r\n\r\n        allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\u0027s index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete allTokensIndex[tokenId];\r\n        allTokens.pop();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n     */\r\n    function _burn(address _owner, uint256 _tokenId)\r\n        internal\r\n        canTransfer(_tokenId)\r\n    {\r\n        clearApproval(_owner, _tokenId);\r\n        removeTokenFrom(_owner, _tokenId);\r\n        removeFromAllTokens(_tokenId);\r\n        tokenOwner[_tokenId] = address(0);\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to clear current approval of a given token ID\r\n     * Reverts if the given address is not indeed the owner of the token\r\n     * @param _owner owner of the token\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require(\r\n            ownerOf(_tokenId) == _owner,\r\n            \"Asset does not belong to given owmer\"\r\n        );\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n            emit Approval(_owner, address(0), _tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n     * @param _to address representing the new owner of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        uint256 length = balanceOf(_to);\r\n        ownedTokens[_to][length] = _tokenId;\r\n        ownedTokensIndex[_tokenId] = length;\r\n        ownedTokensCount[_to] = ownedTokensCount[_to] + 1;  // increment balance of `_to` by 1\r\n        tokenOwner[_tokenId] = _to; // assign `_to` as owner of token\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n     * @param _from address representing the previous owner of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        uint256 lastTokenIndex = ownedTokensCount[_from] - 1;\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n\r\n        // when we want to delete last token, the swap operation in unnecessary\r\n        if(lastTokenIndex != tokenIndex) {\r\n            uint256 lastTokenId = ownedTokens[_from][lastTokenIndex];\r\n            ownedTokens[_from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\u0027s index\r\n        }\r\n        // This also deletes the contents at the last position of the array\r\n        delete ownedTokensIndex[_tokenId];\r\n        delete ownedTokens[_from][lastTokenIndex];\r\n        ownedTokensCount[_from] = ownedTokensCount[_from]-1; // decrease balance of _from by 1\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n     * The call is not executed if the target address is not a contract\r\n     * @param _from address representing the previous owner of the given token ID\r\n     * @param _to target address that will receive the tokens\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function checkAndCallSafeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) internal returns (bool) {\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n            _from,\r\n            _tokenId,\r\n            _data\r\n        );\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n     * @param _owner address owning the tokens list to be accessed\r\n     * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_index \u003c balanceOf(_owner), \"Invalid index\");\r\n        return ownedTokens[_owner][_index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens stored by the contract\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * Reverts if the index is greater or equal to the total number of tokens\r\n     * @param _index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n        require(_index \u003c totalSupply(), \"Invalid index\");\r\n        return allTokens[_index];\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceId)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return supportedInterfaces[_interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 _interfaceId) internal {\r\n        require(_interfaceId != 0xffffffff);\r\n        supportedInterfaces[_interfaceId] = true;\r\n    }\r\n}\r\n"},"ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\nimport \"./BaseERC721.sol\";\r\n\r\ncontract ERC721 is ERC721BasicToken {\r\n    using Strings for uint256;\r\n\r\n    mapping(uint256 =\u003e string) internal _tokenUri;\r\n    string public extension;\r\n\r\n    event TokenURIUpdated(uint256 tokenId, string _url);\r\n    event BaseTokenURIUpdated(string _baseUrl);\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseTokenUri,\r\n        string memory _extension\r\n    ) ERC721BasicToken(_name, _symbol, _baseTokenUri) {\r\n        extension= _extension;\r\n        emit BaseTokenURIUpdated(_baseTokenUri);\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        super._approve(_to, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n        super._setApprovalForAll(_to, _approved);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public virtual {\r\n        super._transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public virtual {\r\n        super._safeTransferFrom(_from, _to, _tokenId, \"0x\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) public virtual {\r\n        super._safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function _updateTokenUri(uint256 _tokenId, string memory _url) internal {\r\n        _tokenUri[_tokenId] = _url;\r\n        emit TokenURIUpdated(_tokenId, _url);\r\n    }\r\n\r\n    function _updateBaseTokenUri(string memory _baseTokenUri) internal {\r\n        baseTokenURI = _baseTokenUri;\r\n        emit BaseTokenURIUpdated(_baseTokenUri);\r\n    }\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        super._mint(_to, _tokenId);\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public virtual {\r\n        super._burn(ownerOf(_tokenId), _tokenId);\r\n    }\r\n\r\n    function _tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (string memory)\r\n    {\r\n        if (bytes(_tokenUri[_tokenId]).length == 0) {\r\n            return string(abi.encodePacked(baseTokenURI, _tokenId.toString(), extension));\r\n        }\r\n        return string(abi.encodePacked(baseTokenURI, _tokenUri[_tokenId], extension));\r\n    }\r\n}\r\n"},"ERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @author Prashant Prabhakar Singh [prashantprabhakar123@gmail.com]\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\nabstract contract ERC721Receiver {\r\n    /**\r\n     * @dev Magic value to be returned upon successful reception of an NFT\r\n     *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n     *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n     */\r\n    bytes4 internal constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safetransfer`. This function MAY throw to revert and reject the\r\n     * transfer. This function MUST use 50,000 gas or less. Return of other\r\n     * than the magic value MUST result in the transaction being reverted.\r\n     * Note: the contract address is always the message sender.\r\n     * @param _from The sending address\r\n     * @param _tokenId The NFT identifier which is being transfered\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) public virtual returns (bytes4);\r\n}\r\n"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @author Prashant Prabhakar Singh [prashantprabhakar123@gmail.com]\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ninterface IERC721 {\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 indexed _tokenId\r\n    );\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _approved,\r\n        uint256 indexed _tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 _balance);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\r\n\r\n    function exists(uint256 _tokenId) external view returns (bool _exists);\r\n\r\n    function approve(address _to, uint256 _tokenId) external;\r\n\r\n    function getApproved(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address _operator);\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) external;\r\n\r\n    function name() external view returns (string memory _name);\r\n\r\n    function symbol() external view returns (string memory _symbol);\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256 _tokenId);\r\n\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n\r\n    function supportsInterface(bytes4 _interfaceId)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n"},"MintPassDummy.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\nimport \"./Ownership.sol\";\r\nimport \"./Addresses.sol\";\r\nimport \"./Strings.sol\";\r\nimport \"./ERC721Receiver.sol\";\r\nimport \"./IERC721.sol\";\r\n\r\nabstract contract ERC721BasicTokenDummy is IERC721 {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n    bytes4 private constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n    bytes4 private constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\r\n    string internal name_;\r\n    string internal symbol_;\r\n    string public baseTokenURI;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] internal allTokens;\r\n\r\n    // Mapping of interface id to whether or not it\u0027s supported\r\n    mapping(bytes4 =\u003e bool) internal supportedInterfaces;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address =\u003e uint256[]) internal ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 =\u003e uint256) internal ownedTokensIndex;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 =\u003e uint256) internal allTokensIndex;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping(uint256 =\u003e address) internal tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 =\u003e address) internal tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping(address =\u003e uint256) internal ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address =\u003e mapping(address =\u003e bool)) internal operatorApprovals;\r\n\r\n    /**\r\n     * @dev Guarantees msg.sender is owner of the given token\r\n     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n     */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender, \"Only asset owner is allowed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n     * @param _tokenId uint256 ID of the token to validate\r\n     */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId), \"Can not transfer\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseTokenUri\r\n    ) {\r\n        name_ = _name;\r\n        symbol_ = _symbol;\r\n        baseTokenURI = _baseTokenUri;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(InterfaceId_ERC721Enumerable);\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n        _registerInterface(InterfaceId_ERC721);\r\n        _registerInterface(InterfaceId_ERC721Exists);\r\n        _registerInterface(InterfaceId_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token name\r\n     * @return string representing the token name\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return name_;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an URI for a given token ID\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param _tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (string memory)\r\n    {\r\n        require(exists(_tokenId), \"Asset does not exist\");\r\n        return string(abi.encodePacked(baseTokenURI, _tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param _owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0), \"Zero address not allowed\");\r\n        return ownedTokensCount[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID\r\n     * @param _tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0), \"Zero address not allowed\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists\r\n     * @param _tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param _to address to be approved for the given token ID\r\n     * @param _tokenId uint256 ID of the token to be approved\r\n     */\r\n    function _approve(address _to, uint256 _tokenId) internal {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner, \"Can not approve to self\");\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"Not allowed to update approvals\"\r\n        );\r\n\r\n        tokenApprovals[_tokenId] = _to;\r\n        emit Approval(owner, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * @param _tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf\r\n     * @param _to operator address to set the approval\r\n     * @param _approved representing the status of the approval to be set\r\n     */\r\n    function _setApprovalForAll(address _to, bool _approved) internal {\r\n        require(_to != msg.sender, \"Can not approve to self\");\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner\r\n     * @param _owner owner address which you want to query the approval of\r\n     * @param _operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) internal canTransfer(_tokenId) {\r\n        require(_from != address(0), \"Zero address not allowed\");\r\n        require(_to != address(0), \"Zero address not allowed\");\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     *\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) internal canTransfer(_tokenId) {\r\n        // solium-disable-next-line arg-overflow\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param _from current owner of the token\r\n     * @param _to address to receive the ownership of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) internal canTransfer(_tokenId) {\r\n        _transferFrom(_from, _to, _tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(\r\n            checkAndCallSafeTransfer(_from, _to, _tokenId, _data),\r\n            \"Safe Transfer failed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n     * @param _spender address of the spender to query\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     *  is an operator of the owner, or is the owner of the token\r\n     */\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (_spender == owner ||\r\n            getApproved(_tokenId) == _spender ||\r\n            isApprovedForAll(owner, _spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token\r\n     * Reverts if the given token ID already exists\r\n     * @param _to The address that will own the minted token\r\n     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n     */\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0), \"Zero address not allowed\");\r\n        addTokenTo(_to, _tokenId);\r\n        allTokensIndex[_tokenId] = allTokens.length;\r\n        allTokens.push(_tokenId);\r\n\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n     */\r\n    function _burn(address _owner, uint256 _tokenId)\r\n        internal\r\n        canTransfer(_tokenId)\r\n    {\r\n        clearApproval(_owner, _tokenId);\r\n        removeTokenFrom(_owner, _tokenId);\r\n\r\n        // Reorg all tokens array\r\n        uint256 tokenIndex = allTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = allTokens.length - 1;\r\n        uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n        allTokens[tokenIndex] = lastToken;\r\n        delete allTokens[lastTokenIndex];\r\n\r\n        //allTokens[lastTokenIndex] = 0;\r\n        // allTokens.length--; // @TODO\r\n\r\n        allTokensIndex[_tokenId] = 0;\r\n        allTokensIndex[lastToken] = tokenIndex;\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to clear current approval of a given token ID\r\n     * Reverts if the given address is not indeed the owner of the token\r\n     * @param _owner owner of the token\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require(\r\n            ownerOf(_tokenId) == _owner,\r\n            \"Asset does not belong to given owmer\"\r\n        );\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n            emit Approval(_owner, address(0), _tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n     * @param _to address representing the new owner of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        require(tokenOwner[_tokenId] == address(0), \"Asset already exists\");\r\n        tokenOwner[_tokenId] = _to;\r\n        ownedTokensCount[_to] = ownedTokensCount[_to] + 1;\r\n        uint256 length = ownedTokens[_to].length;\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n     * @param _from address representing the previous owner of the given token ID\r\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        require(\r\n            ownerOf(_tokenId) == _from,\r\n            \"Asset does not belong to given owmer\"\r\n        );\r\n        ownedTokensCount[_from] = ownedTokensCount[_from] - 1;\r\n        tokenOwner[_tokenId] = address(0);\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownedTokens[_from].length - 1;\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n        //ownedTokens[_from].length--; @TODO\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n     * The call is not executed if the target address is not a contract\r\n     * @param _from address representing the previous owner of the given token ID\r\n     * @param _to target address that will receive the tokens\r\n     * @param _tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function checkAndCallSafeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) internal returns (bool) {\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n            _from,\r\n            _tokenId,\r\n            _data\r\n        );\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n     * @param _owner address owning the tokens list to be accessed\r\n     * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_index \u003c balanceOf(_owner), \"Invalid index\");\r\n        return ownedTokens[_owner][_index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens stored by the contract\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * Reverts if the index is greater or equal to the total number of tokens\r\n     * @param _index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n        require(_index \u003c totalSupply(), \"Invalid index\");\r\n        return allTokens[_index];\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceId)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return supportedInterfaces[_interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 _interfaceId) internal {\r\n        require(_interfaceId != 0xffffffff);\r\n        supportedInterfaces[_interfaceId] = true;\r\n    }\r\n}\r\n\r\ncontract ERC721Dummy is ERC721BasicTokenDummy {\r\n    mapping(uint256 =\u003e string) internal _tokenUri;\r\n\r\n    event TokenURIUpdated(uint256 tokenId, string _url);\r\n    event BaseTokenURIUpdated(string _baseUrl);\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseTokenUri\r\n    ) ERC721BasicTokenDummy(_name, _symbol, _baseTokenUri) {\r\n        emit BaseTokenURIUpdated(_baseTokenUri);\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        super._approve(_to, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n        super._setApprovalForAll(_to, _approved);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public virtual {\r\n        super._transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public virtual {\r\n        super._safeTransferFrom(_from, _to, _tokenId, \"0x\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) public virtual {\r\n        super._safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function _updateTokenUri(uint256 _tokenId, string memory _url) internal {\r\n        _tokenUri[_tokenId] = _url;\r\n        emit TokenURIUpdated(_tokenId, _url);\r\n    }\r\n\r\n    function _updateBaseTokenUri(string memory _baseTokenUri) internal {\r\n        baseTokenURI = _baseTokenUri;\r\n        emit BaseTokenURIUpdated(_baseTokenUri);\r\n    }\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _tokenId,\r\n        string memory _url\r\n    ) internal {\r\n        _updateTokenUri(_tokenId, _url);\r\n        super._mint(_to, _tokenId);\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public virtual {\r\n        super._burn(ownerOf(_tokenId), _tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(exists(_tokenId), \"Asset does not exist\");\r\n        return string(abi.encodePacked(baseTokenURI, _tokenUri[_tokenId]));\r\n    }\r\n}\r\n\r\ncontract MintPass is ERC721Dummy, Ownership {\r\n    // represents how many times a mint pass is redeemed.\r\n    mapping(uint256 =\u003e uint8) private redeemedTimes;\r\n    // contracts that can update mint pass uses, like when minting art, art nft will updated `redeemedTimes`\r\n    mapping(address =\u003e bool) public isWhitelisted;\r\n    // nonce to prevent replay attack on admin signature\r\n    mapping(uint256 =\u003e bool) public isSignerNonceUsed;\r\n\r\n    bool public mintStoppted; // when enabled no futher mint pass can be minted.\r\n    uint256 public maxSupply; // max supply of mint pass\r\n    bool public isPaused = false; // pause the contractn when something goes \"really\" wrong\r\n\r\n    uint8 constant UINT8_MAX = 255;\r\n\r\n    struct Signature {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n    }\r\n\r\n    event MintPassUpdated(\r\n        uint256 tokenId,\r\n        uint8 redeemedTimes,\r\n        address updatedBy\r\n    );\r\n\r\n    event Paused(bool _isPaused);\r\n\r\n    modifier canAcceptMintPass(address user) {\r\n        require(balanceOf(user) == 0, \"Only 1 mint pass allowed per user\");\r\n        _;\r\n    }\r\n\r\n    modifier mintAllowed() {\r\n        require(!mintStoppted, \"Minting stopped\");\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!isPaused, \"Contract paused\");\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _baseTokenUri)\r\n        ERC721Dummy(\"Thunderbirds: IRC Mint Pass\", \"TBMP\", _baseTokenUri)\r\n    {\r\n        maxSupply = 1000;\r\n    }\r\n\r\n    function mint(\r\n        address user,\r\n        Signature memory adminSignature,\r\n        uint256 signerNonce\r\n    ) public canAcceptMintPass(user) mintAllowed notPaused {\r\n        require(totalSupply() \u003c maxSupply, \"Max token minted\");\r\n        require(\r\n            !isSignerNonceUsed[signerNonce],\r\n            \"Duplicate nonce in signature\"\r\n        );\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                bytes4(keccak256(\"mint\")),\r\n                address(this),\r\n                signerNonce,\r\n                getChainID(),\r\n                user\r\n            )\r\n        );\r\n        address signer = getSigner(hash, adminSignature);\r\n        require(isDeputyOwner[signer], \"Invalid signature/message\");\r\n        isSignerNonceUsed[signerNonce] = true;\r\n        string memory url = \"QmXyV2HUP7hv8Xjx3X6ZLUUMHkxsdRuQhZ9DwpzZqH16jD\";\r\n        super.mint(user, totalSupply() + 1, url);\r\n    }\r\n\r\n    function batchMintByAdmin(address[] memory users) public mintAllowed onlyDeputyOrOwner {\r\n        require(totalSupply() + users.length \u003c maxSupply, \"Max token minted\");\r\n        string memory url = \"QmXyV2HUP7hv8Xjx3X6ZLUUMHkxsdRuQhZ9DwpzZqH16jD\";\r\n        for(uint8 i=0; i\u003cusers.length; i++) {\r\n            require(balanceOf(users[i]) == 0, \"Only 1 mint pass allowed per user\");\r\n            super.mint(users[i], totalSupply() + 1, url);\r\n        }\r\n    }\r\n\r\n    function updateRedeemedTimes(uint256 tokenId, uint8 _redeemedTimes)\r\n        public\r\n        notPaused\r\n    {\r\n        require(isWhitelisted[msg.sender], \"Caller not whitelisted\");\r\n        redeemedTimes[tokenId] = _redeemedTimes;\r\n        emit MintPassUpdated(tokenId, _redeemedTimes, msg.sender);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public override canAcceptMintPass(_to) notPaused {\r\n        super._transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public override canAcceptMintPass(_to) notPaused {\r\n        super._safeTransferFrom(_from, _to, _tokenId, \"0x\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) public override canAcceptMintPass(_to) notPaused {\r\n        super._safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public override notPaused {\r\n        super.burn(_tokenId);\r\n    }\r\n    \r\n\r\n    function updateTokenUri(uint256 _tokenId, string memory _url)\r\n        public\r\n        onlyDeputyOrOwner\r\n    {\r\n        super._updateTokenUri(_tokenId, _url);\r\n    }\r\n\r\n    function updateBaseTokenUri(string memory _baseTokenUri) public onlyOwner {\r\n        super._updateBaseTokenUri(_baseTokenUri);\r\n    }\r\n\r\n    function whitelistContract(address contractAddress) public onlyOwner {\r\n        isWhitelisted[contractAddress] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address contractAddress) public onlyOwner {\r\n        isWhitelisted[contractAddress] = false;\r\n    }\r\n\r\n    function disableMinting(bool shoudlStop) public onlyOwner {\r\n        mintStoppted = shoudlStop;\r\n    }\r\n\r\n    function pauseContract(bool _isPaused) public onlyOwner returns (bool) {\r\n        isPaused = _isPaused;\r\n        emit Paused(_isPaused);\r\n        return true;\r\n    }\r\n\r\n    function getSigner(bytes32 message, Signature memory sig)\r\n        public\r\n        pure\r\n        returns (address)\r\n    {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, message));\r\n        address signer = ecrecover(prefixedHash, sig.v, sig.r, sig.s);\r\n        return signer;\r\n    }\r\n\r\n    function getRedeemedTimes(uint256 tokenId) public view returns(uint8) {\r\n        if(!exists(tokenId)) return UINT8_MAX;\r\n        return redeemedTimes[tokenId];\r\n    }\r\n\r\n    function getChainID() internal view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n}\r\n"},"Ownership.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\ncontract Ownership {\r\n    address public owner;\r\n    address[] public deputyOwners;\r\n\r\n    mapping(address =\u003e bool) public isDeputyOwner;\r\n\r\n    event OwnershipUpdated(address oldOwner, address newOwner);\r\n    event DeputyOwnerUpdated(address _do, bool _isAdded);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        addDeputyOwner(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDeputyOrOwner() {\r\n        require(\r\n            msg.sender == owner || isDeputyOwner[msg.sender],\r\n            \"Caller is not owner or deputy\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the ownership to some other address.\r\n     * new owner can not be a zero address.\r\n     * Only owner can call this function\r\n     * @param _newOwner Address to which ownership is being transferred\r\n     */\r\n    function updateOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0x0), \"Invalid address\");\r\n        owner = _newOwner;\r\n        emit OwnershipUpdated(msg.sender, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Add new deputy owner.\r\n     * Only Owner can call this function\r\n     * New Deputy should not be zero address\r\n     * New Deputy should not be be already exisitng\r\n     * emit DeputyOwnerUdpatd event\r\n     * @param _newDO Address of new deputy owner\r\n     */\r\n    function addDeputyOwner(address _newDO) public onlyOwner {\r\n        require(!isDeputyOwner[_newDO], \"Deputy Owner already exists\");\r\n        deputyOwners.push(_newDO);\r\n        isDeputyOwner[_newDO] = true;\r\n        emit DeputyOwnerUpdated(_newDO, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an existing deputy owner.\r\n     * Only Owner can call this function\r\n     * Given address should be a deputy owner\r\n     * emit DeputyOwnerUdpatd event\r\n     * @param _existingDO Address of existing deputy owner\r\n     */\r\n    function removeDeputyOwner(address _existingDO) public onlyOwner {\r\n        require(isDeputyOwner[_existingDO], \"Deputy Owner does not exits\");\r\n        uint256 existingId;\r\n        for (uint256 i = 0; i \u003c deputyOwners.length; i++) {\r\n            if (deputyOwners[i] == _existingDO) existingId = i;\r\n        }\r\n\r\n        // swap this with last element\r\n        deputyOwners[existingId] = deputyOwners[deputyOwners.length - 1];\r\n        delete deputyOwners[deputyOwners.length - 1];\r\n        isDeputyOwner[_existingDO] = false;\r\n        emit DeputyOwnerUpdated(_existingDO, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Renounce the ownership.\r\n     * This will leave the contract without any owner.\r\n     * Only owner can call this function\r\n     * @param _validationCode A code to prevent accidental calling of this function\r\n     */\r\n    function renounceOwnership(uint256 _validationCode) public onlyOwner {\r\n        require(_validationCode == 123456789, \"Invalid code\");\r\n        owner = address(0);\r\n        emit OwnershipUpdated(msg.sender, owner);\r\n    }\r\n}\r\n"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n"},"Thunderbirds.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\nimport \"./ERC721.sol\";\r\nimport \"./Ownership.sol\";\r\n\r\ninterface IMintPass {\r\n    function getRedeemedTimes(uint256 tokenId) external view returns(uint8);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function exists(uint256 _tokenId) external view returns (bool);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256 _tokenId);\r\n    function updateRedeemedTimes(uint256 tokenId, uint8 _redeemedTimes) external;\r\n}\r\n\r\ncontract Thunderbirds is ERC721, Ownership {\r\n\r\n    uint256 public maxSupply; // max supply of nft\r\n    uint256 public preSaleStarts;\r\n    uint256 public preSaleEnds;\r\n    uint256 public saleEnds;\r\n    IMintPass private mintPass;\r\n    bool public isPaused = false; // pause the contractn when something goes \"really\" wrong\r\n    uint256 public price;\r\n    address payable public coldWallet;\r\n    uint256 public mintedForTeam;\r\n    bool public isRevealed;\r\n\r\n    uint256 private constant reservedForTeam = 30;\r\n    uint8 private constant MAX_REDEEME_COUNT = 3;\r\n\r\n    // nonce to prevent replay attack on admin signature\r\n    mapping(address =\u003e mapping(uint =\u003e bool)) public isSignerNonceUsed;\r\n\r\n    struct Signature {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n    }\r\n\r\n\r\n    event Paused(bool _isPaused);\r\n    event PriceUpdate(uint256 oldPrice, uint256 newPrice);\r\n\r\n\r\n    modifier notPaused() {\r\n        require(!isPaused, \"Contract paused\");\r\n        _;\r\n    }\r\n    \r\n\r\n    modifier canMint(uint8 quantity) {\r\n        require(block.timestamp \u003e= preSaleStarts , \"Sale not live yet\");\r\n        require(block.timestamp \u003c saleEnds, \"Sale closed\");\r\n        require(totalSupply() + quantity \u003c= maxSupply - reservedForTeam, \"Sold out\");\r\n        require(msg.value == price*quantity, \"Incorrect fee\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(\r\n        address _mintPassContract,\r\n        uint256 _preSaleStarts,\r\n        uint256 _preSaleEnds,\r\n        address payable _coldWallet,\r\n        uint256 _price,\r\n        string memory _baseurl\r\n    )\r\n        ERC721(\"Thunderbirds International Rescue Club\", \"FAB\", _baseurl, \".json\")\r\n    {\r\n        mintPass = IMintPass(_mintPassContract);\r\n        maxSupply = 5432;\r\n        price = _price;\r\n        coldWallet = _coldWallet;\r\n        preSaleStarts = _preSaleStarts;\r\n        preSaleEnds = _preSaleEnds;\r\n        saleEnds = preSaleEnds + 1 weeks;\r\n        isRevealed = false;\r\n    }\r\n\r\n    function mint(address user, uint8 quantity) public payable canMint(quantity) notPaused {\r\n        require(block.timestamp \u003e= preSaleEnds, \"Only mintpass holders allowed in presale\");\r\n        coldWallet.transfer(msg.value);\r\n        _batchMint(user, quantity);\r\n    }\r\n\r\n    function mintWithPass(address user, uint8 quantity, uint256 mintPassId) public payable canMint(quantity) {\r\n        require(block.timestamp \u003c preSaleEnds, \"Pre-sale ended\");\r\n        require(mintPass.exists(mintPassId), \"Invalid mint pass\");\r\n        require(mintPass.ownerOf(mintPassId) == msg.sender, \"Sender does not own given mint pass\");\r\n        coldWallet.transfer(msg.value);\r\n        uint8 redeemedTimes = mintPass.getRedeemedTimes(mintPassId);\r\n        require(redeemedTimes+quantity \u003c= MAX_REDEEME_COUNT, \"Mint pass redeemed\");\r\n        mintPass.updateRedeemedTimes(mintPassId, redeemedTimes+quantity);\r\n        _batchMint(user, quantity);\r\n    }\r\n\r\n    function mintReservedTokens(address[] memory users) public onlyDeputyOrOwner {\r\n        require(mintedForTeam + users.length \u003c= reservedForTeam, \"Max reserved tokens minted\");\r\n        unchecked {\r\n            mintedForTeam += users.length;\r\n        }\r\n        for(uint8 i=0; i\u003cusers.length; i++) {\r\n            super.mint(users[i], totalSupply()+1);\r\n        }\r\n    }\r\n\r\n\r\n    function updatePrice(uint256 _price) public onlyOwner {\r\n        emit PriceUpdate(price, _price);\r\n        price = _price;\r\n    }\r\n\r\n\r\n    function _batchMint(address user, uint8 quantity) internal  {\r\n        for(uint8 i=0; i\u003cquantity; i++) {\r\n            super.mint(user, totalSupply() + 1);\r\n        }\r\n    }\r\n\r\n    \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public override notPaused {\r\n        super._transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public override notPaused {\r\n        super._safeTransferFrom(_from, _to, _tokenId, \"0x\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) public override notPaused {\r\n        super._safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public override notPaused {\r\n        super.burn(_tokenId);\r\n    }\r\n    \r\n    function preAuthTransfer(\r\n        address _from, address _to, uint256 _tokenId, uint256 signerNonce, Signature memory signature\r\n    ) public notPaused {\r\n        require(\r\n            !isSignerNonceUsed[_from][signerNonce],\r\n            \"Duplicate nonce in signature\"\r\n        );\r\n\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                bytes4(keccak256(\"transfer\")),\r\n                address(this),\r\n                signerNonce,\r\n                getChainID(),\r\n                _from,\r\n                _to,\r\n                _tokenId\r\n            )\r\n        );\r\n        address signer = getSigner(hash, signature);\r\n        require(signer == _from, \"Owner and signer don\u0027t match\");\r\n        isSignerNonceUsed[signer][signerNonce] = true;\r\n        super._transferOnBehalf(signer, _to, _tokenId);\r\n    }\r\n\r\n    function updateBaseTokenUri(string memory _baseTokenUri) public onlyOwner {\r\n        super._updateBaseTokenUri(_baseTokenUri);\r\n    }\r\n\r\n    function pauseContract(bool _isPaused) public onlyOwner{\r\n        isPaused = _isPaused;\r\n        emit Paused(_isPaused);\r\n    }\r\n\r\n    function reveal() public onlyOwner {\r\n        isRevealed = true;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(exists(_tokenId), \"Asset does not exist\");\r\n        if(!isRevealed) return baseTokenURI;\r\n        return super._tokenURI(_tokenId);\r\n    }\r\n\r\n    function getSigner(bytes32 message, Signature memory sig)\r\n        public\r\n        pure\r\n        returns (address)\r\n    {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, message));\r\n        address signer = ecrecover(prefixedHash, sig.v, sig.r, sig.s);\r\n        return signer;\r\n    }\r\n\r\n    function getChainID() internal view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n}\r\n"}}