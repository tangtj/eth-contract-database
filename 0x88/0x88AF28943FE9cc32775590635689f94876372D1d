// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.20;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol


// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)
// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.

pragma solidity ^0.8.20;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```solidity
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 *
 * [WARNING]
 * ====
 * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure
 * unusable.
 * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.
 *
 * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an
 * array of EnumerableSet.
 * ====
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position is the index of the value in the `values` array plus 1.
        // Position 0 is used to mean a value is not in the set.
        mapping(bytes32 value => uint256) _positions;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._positions[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We cache the value's position to prevent multiple reads from the same storage slot
        uint256 position = set._positions[value];

        if (position != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 valueIndex = position - 1;
            uint256 lastIndex = set._values.length - 1;

            if (valueIndex != lastIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the lastValue to the index where the value to delete is
                set._values[valueIndex] = lastValue;
                // Update the tracked position of the lastValue (that was just moved)
                set._positions[lastValue] = position;
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the tracked position for the deleted slot
            delete set._positions[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._positions[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        bytes32[] memory store = _values(set._inner);
        bytes32[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

// File: @openzeppelin/contracts/security/Pausable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}

// File: Presale.sol


pragma solidity ^0.8.9;







contract Presale is Pausable, Ownable, ReentrancyGuard {
    using EnumerableSet for EnumerableSet.AddressSet;
    using SafeERC20 for IERC20Metadata;

    uint256 public constant PERCENTAGE_DENOMINATOR = 10000;
    uint256 public constant TOTAL_MAX_ALLOCATION = 1500000000 * 10 ** 18;
    uint256 public ethUSD;

    uint256 public ogRoundTokenLimited;
    uint256 public publicRoundTokenLimited;

    uint256 public pricePerToken;
    uint8 public tokenDecimals;
    uint8 public nativeDecimals;

    uint256 public ogRoundStartedAt;
    uint256 public publicRoundStartedAt;

    uint256 public ogRoundDuration;
    uint256 public publicRoundDuration;

    bool public isOGRound;
    bool public isPublicRound;
    mapping(address => bool) public ogWhitelist;
    mapping(address => uint256) public ogWhitelistTokenlimited;

    EnumerableSet.AddressSet allBuyerList; /// wallet history who purchased and requested tokens.

    mapping(address => uint256) public tokensRequested;
    mapping(address => bool) public isBonusRequested;
    mapping(address => uint256) public bonusRequested;

    IERC20Metadata public token;
    IERC20Metadata public usdc;
    IERC20Metadata public usdt;

    uint256 public totalTokensRequested;

    uint256 public presaleExpireTime;

    uint256 public bonusPercent;
    uint256 public fundsRaised;

    mapping(string => address) public referrersWithRefCodes; // refCode => referrer;
    mapping(address => mapping(address => bool)) public hasReferred; // referrer => referee => bool

    mapping(address => bool) public isReferrer; // referrer => bool;

    mapping(address => bool) public isUsedRefCode; // referee => bool;

    mapping(address => uint256) public refereeCount; // referrer => referee count
    mapping(string => uint256) public numOfReferee; // referrer ref code => referee count;
    mapping(string => uint256) public refereeAmount; // referrer => referred amount;
    
    address public fundingWallet;

    constructor(
        address _usdc,
        address _usdt,
        address _fundingWallet
    ) Ownable(msg.sender){
        pricePerToken = 800; // 0.0008 USD

        usdc = IERC20Metadata(_usdc);
        usdt = IERC20Metadata(_usdt);

        bonusPercent = 500;

        ogRoundDuration = 3600; // 1 hour
        publicRoundDuration = 169200; // 47 hours

        isOGRound = false;
        isPublicRound = false;

        tokenDecimals = 18;
        nativeDecimals = usdc.decimals();

        ethUSD = 3680 * 10 ** 6; // 3680 USD

        publicRoundTokenLimited = 12500000 * 10 ** tokenDecimals;

        fundingWallet = _fundingWallet;
    }


    /// @notice pause the presale
    function pause() public onlyOwner {
        _pause();
    }

    /// @notice unpause the presale
    function unpause() public onlyOwner {
        _unpause();
    }

    /// @notice get the presale data
    /// @return the price, hard limit, duration and hold limit
    function data() external view returns (uint256, uint256) {
        return (pricePerToken, publicRoundTokenLimited);
    }

    function setStartOGRound() external onlyOwner {
        isOGRound = true;
        ogRoundStartedAt = block.timestamp;
        isPublicRound = false;
    }

    function setStartPublicRound() external onlyOwner {
        isPublicRound = true;
        publicRoundStartedAt = block.timestamp;
        isOGRound = false;
    }

    function endOGRound() public onlyOwner {
        if (isOGRound) {
            isOGRound = false;
        }
    }

    function endPublicRound() public onlyOwner {
        if (isPublicRound) {
            isPublicRound = false;
        }
    }

    function setOGRoundDuration(uint256 _duration) external onlyOwner {
        ogRoundDuration = _duration;
    }

    function setPublicRoundDuration(uint256 _duration) external onlyOwner {
        publicRoundDuration = _duration;
    }

    function setOGRoundTokenLimited(
        address[] memory _whitelisted,
        uint256[] memory _ogRoundTokenLimited
    ) external onlyOwner {
        for (uint256 i = 0; i < _whitelisted.length; ++i) {
            if (ogWhitelist[_whitelisted[i]] == true) {
                ogWhitelistTokenlimited[_whitelisted[i]] = _ogRoundTokenLimited[i];
            }
        }
    }

    function setOGRoundSingleTokenLimited(
        address[] memory _whitelisted,
        uint256 _ogRoundTokenLimited
    ) external onlyOwner {
        for (uint256 i = 0; i < _whitelisted.length; ++i) {
            if (ogWhitelist[_whitelisted[i]] == true) {
                ogWhitelistTokenlimited[_whitelisted[i]] = _ogRoundTokenLimited;
            }
        }
    }

    function setPublicRoundTokenLimited(uint256 _publicRoundTokenLimited) external onlyOwner {
        publicRoundTokenLimited = _publicRoundTokenLimited;
    }

    function setPresaleToken(address _token) external onlyOwner {
        require(_token != address(0), "Token shouldn't be zero");
        token = IERC20Metadata(_token);
        tokenDecimals = token.decimals();
    }

    function setUSDCToken(address _usdc) external onlyOwner {
        require(_usdc != address(0), "USDC shouldn't be zero");
        usdc = IERC20Metadata(_usdc);
        nativeDecimals = usdc.decimals();
    }

    function setUSDTToken(address _usdt) external onlyOwner {
        require(_usdt != address(0), "USDT shouldn't be zero");
        usdt = IERC20Metadata(_usdt);
        nativeDecimals = usdt.decimals();
    }

    function setFundingWallet(address _fundingWallet) external onlyOwner {
        require(_fundingWallet != address(0), "Funding Wallet shouldn't be zero");
        fundingWallet = _fundingWallet;
    }

    function setBonusPercent(uint256 _rate) external onlyOwner {
        require(_rate >= 100 && _rate < PERCENTAGE_DENOMINATOR, "Rate should be less than 100%");
        bonusPercent = _rate;
    }

    /// @notice set the price of the token
    /// @param _pricePerToken the price per token
    function setPrice(uint256 _pricePerToken) external onlyOwner {
        pricePerToken = _pricePerToken;
    }

    function setETHUSDPrice(uint256 _ethUSD) external onlyOwner {
        ethUSD = _ethUSD * 10 * nativeDecimals;
    }

    /// @notice withdraw tokens stored in the contract
    function withdrawTokens(address _token, address _to, uint256 _amount) external onlyOwner {
        IERC20Metadata(_token).safeTransfer(_to, _amount);
    }

    /// @notice withdraw usdc stored in the contract
    function withdrawUSDC(address _to) external onlyOwner {
        usdc.safeTransfer(_to, usdc.balanceOf(address(this)));
    }

    function withdrawUSDT(address _to) external onlyOwner {
        usdt.safeTransfer(_to, usdt.balanceOf(address(this)));
    }

    function registerToOGWhitelist(address[] memory _accounts) external onlyOwner {
        for (uint256 i = 0; i < _accounts.length; ++i) {
            ogWhitelist[_accounts[i]] = true;
        }
    }

    function removeFromOGWhitelist(address[] memory _accounts) external onlyOwner {
        for (uint256 i = 0; i < _accounts.length; ++i) {
            ogWhitelist[_accounts[i]] = false;
        }
    }

    function _isEligibleTokens(address _account, uint256 _value, uint256 _tokenLimit) internal view returns (bool) {
        return tokensRequested[_account] + _value <= _tokenLimit;
    }

    function _isValidReferralCode(string memory _refCode) internal view returns (bool) {
        if (bytes(_refCode).length < 5) return false;
        if (referrersWithRefCodes[_refCode] == address(0)) return false;
        return true;
    }

    function _isOGRound() internal view returns (bool) {
        return isOGRound && ((ogRoundStartedAt + ogRoundDuration) >= block.timestamp) && (block.timestamp >= ogRoundStartedAt);
    }

    function _isPublicRound() internal view returns (bool) {
        return isPublicRound && ((publicRoundStartedAt + publicRoundDuration) >= block.timestamp) && (block.timestamp >= publicRoundStartedAt);
    }

    receive() external payable {}

    fallback() external {}

    function withdrawETH(address _to) external onlyOwner {
        (bool success, ) = payable(_to).call{value: address(this).balance}("");
        if (!success) {
            revert("Transfer Failed");
        }
    }

    function _createRefCode(address _referrer, string memory _refCode) internal returns (bool) {
        require(bytes(_refCode).length >= 5, "Invalid Referral Code");
        require(!isReferrer[_referrer] && referrersWithRefCodes[_refCode] == address(0), "You created referral code already");
        referrersWithRefCodes[_refCode] = _referrer;
        isReferrer[_referrer] = true;
        return true;
    }

    function deposit(
        uint256 _amount,
        address _referrer,
        string memory _refCode,
        uint256 _chain
    ) external payable nonReentrant whenNotPaused {
        require(_amount > 0, "Not acceptable to require 0 token!");

        uint256 tokens = (((_amount * 10 ** tokenDecimals) * 10 ** nativeDecimals) / pricePerToken) / (10 ** nativeDecimals);        

        require(totalTokensRequested + tokens <= TOTAL_MAX_ALLOCATION, "More than overall presale allocation!");

        if (_referrer != address(0) && !isReferrer[_referrer]) {
            _createRefCode(_referrer, _refCode);
        }

        require(referrersWithRefCodes[_refCode] != msg.sender, "You are using your own referral code!");

        if (_isOGRound()) {
            require(ogWhitelist[msg.sender], "You have no permission for OG Round!");
            _depositUSDC(msg.sender, _amount, _refCode, ogWhitelistTokenlimited[msg.sender], _chain);
        } else if (_isPublicRound()) {
            _depositUSDC(msg.sender, _amount, _refCode, publicRoundTokenLimited, _chain);
        } else {
            revert("Presale is not allowed!");
        }

        if(totalTokensRequested >= TOTAL_MAX_ALLOCATION) {
            endOGRound();
            endPublicRound();
        }
    }

    function _depositUSDC(
        address _account,
        uint256 _usdcAmount,
        string memory _refCode,
        uint256 _tokenLimit,
        uint256 _chain
    ) internal returns (bool) {

        uint256 tokens = (((_usdcAmount * 10 ** tokenDecimals) * 10 ** nativeDecimals) / pricePerToken) / (10 ** nativeDecimals);

        uint256 bonusAmount = (tokens * bonusPercent) / PERCENTAGE_DENOMINATOR;

        uint256 ethAmount = (_usdcAmount * 10 ** tokenDecimals) / ethUSD;
        
        if (!_isValidReferralCode(_refCode)) {
            bonusAmount = 0;
        }

        if (!_isEligibleTokens(_account, tokens, _tokenLimit)) {
            revert("Account limit exceeded!");
        }

        if (tokens == 0) {
            revert("Insufficient token out value");
        }

        // based on which chain, USDC = 1, USDT = 2, ETH = 3
        if (_chain == 1) {
            usdc.safeTransferFrom(_account, fundingWallet, _usdcAmount);
        } else if (_chain == 2) {
            usdt.safeTransferFrom(_account, fundingWallet, _usdcAmount);
        } else if (_chain == 3) {
            require(msg.value == ethAmount, "Incorrect ETH amount sent");
            (bool success, ) = payable(fundingWallet).call{value: msg.value}("");
            require(success, "ETH transfer failed");
        } else {
            revert("Invalid chain identifier");
        }
            
        tokensRequested[_account] += tokens;
        totalTokensRequested += tokens;

        if (_isValidReferralCode(_refCode)) {
            address referrer = referrersWithRefCodes[_refCode];
            if (referrer != address(0)) {
                isBonusRequested[_account] = true;
                bonusRequested[_account] += bonusAmount;

                isBonusRequested[referrer] = true;
                bonusRequested[referrer] += bonusAmount;

                isUsedRefCode[_account] = true;
                refereeAmount[_refCode] += _usdcAmount;
            
                if (!hasReferred[referrer][_account]) {
                    refereeCount[referrer] += 1;
                    numOfReferee[_refCode] += 1;
                    hasReferred[referrer][_account] = true;
                }
            }
        }

        if (!allBuyerList.contains(msg.sender)) {
            allBuyerList.add(msg.sender);
        }

        fundsRaised += _usdcAmount;

        return true;
    }

    /*
     * view functions
     */

    function getUSDCForTokens(uint256 _tokensAmount) external view returns (uint256) {
        return (pricePerToken * _tokensAmount) / (10 ** tokenDecimals);
    }

    function getBalanceOfUSDC(address _wallet) external view returns (uint256) {
        return usdc.balanceOf(_wallet);
    }

    function getTokensRequestedOfWallet(address _account) external view returns (uint256) {
        return tokensRequested[_account];
    }

    function getBonusRequested(address _account) external view returns (uint256) {
        return bonusRequested[_account];
    }

    function getPricePerToken() external view returns (uint256) {
        return pricePerToken;
    }

    function getOGRoundTokenLimited(address _account) external view returns (uint256) {
        return ogWhitelistTokenlimited[_account];
    }

    function getPublicRoundTokenLimited() external view returns (uint256) {
        return publicRoundTokenLimited;
    }

    function getOGRoundStartedAt() external view returns (uint256) {
        return ogRoundStartedAt;
    }

    function getPublicRoundStartedAt() external view returns (uint256) {
        return publicRoundStartedAt;
    }

    function getOGRoundDuration() external view returns (uint256) {
        return ogRoundDuration;
    }

    function getPublicRoundDuration() external view returns (uint256) {
        return publicRoundDuration;
    }

    function getReferreeCount(address _referrer) external view returns (uint256) {
        return refereeCount[_referrer];
    }

    function getReferralInfo(string memory _refCode) external view returns (uint256 numOfReferees, uint256 totalRefereeAmount) {
        return (numOfReferee[_refCode], refereeAmount[_refCode]/(10**nativeDecimals));
    }

    function getBuyers() external view returns (address[] memory) {
        return allBuyerList.values();
    }

    function getBuyerLength() external view returns (uint256) {
        return allBuyerList.length();
    }

    function isTokenBuyer(address _account) external view returns (bool) {
        return tokensRequested[_account] > 0;
    }

    function isOGWhitelisted(address _account) external view returns (bool) {
        return ogWhitelist[_account];
    }

    function checkOGRound() external view returns (bool) {
        return _isOGRound();
    }

    function checkPublicRound() external view returns (bool) {
        return _isPublicRound();
    }

    function addUsersWithReferralCodes(
        address[] memory _users,
        string[] memory _refCodes
    ) external onlyOwner {
        require(_users.length == _refCodes.length, "Arrays must have the same length");

        for (uint256 i = 0; i < _users.length; ++i) {
            require(bytes(_refCodes[i]).length >= 5, "Invalid Referral Code");
            require(!isReferrer[_users[i]], "Referrer already exists");
            require(referrersWithRefCodes[_refCodes[i]] == address(0), "Referral code already used");

            referrersWithRefCodes[_refCodes[i]] = _users[i];
            isReferrer[_users[i]] = true;
        }
    }

    function updateOldRecords(
        address[] memory users,
        uint256[] memory tokensRequestedList,
        uint256[] memory _bonusRequestedList,
        uint256[] memory refereeCountList,
        uint256 fundsAmount
    ) external onlyOwner {
        require(users.length == tokensRequestedList.length, "Arrays must have the same length");
        require(users.length == _bonusRequestedList.length, "Arrays must have the same length");
        require(users.length == refereeCountList.length, "Arrays must have the same length");

        for (uint256 i = 0; i < users.length; i++) {
            address user = users[i];
            uint256 tokenRequested = tokensRequestedList[i];
            uint256 _bonusRequested = _bonusRequestedList[i];
            uint256 _refereeCount = refereeCountList[i];

            totalTokensRequested += tokenRequested;
            tokensRequested[user] = tokenRequested;
            isBonusRequested[user] = true;
            bonusRequested[user] = _bonusRequested;
            refereeCount[user] = _refereeCount;
            if (!allBuyerList.contains(user)) {
                allBuyerList.add(user);
            }
        }

        fundsRaised = fundsAmount;
    }
}