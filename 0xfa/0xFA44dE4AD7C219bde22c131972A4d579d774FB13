
// File: @chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// solhint-disable-next-line interface-starts-with-i
interface AggregatorV3Interface {
    function decimals() external view returns (uint8);

    function description() external view returns (string memory);

    function version() external view returns (uint256);

    function getRoundData(
        uint80 _roundId
    )
        external
        view
        returns (
            uint80 roundId,
            int256 answer,
            uint256 startedAt,
            uint256 updatedAt,
            uint80 answeredInRound
        );

    function latestRoundData()
        external
        view
        returns (
            uint80 roundId,
            int256 answer,
            uint256 startedAt,
            uint256 updatedAt,
            uint80 answeredInRound
        );
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    address private _super;

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(
            _super == _msgSender() || owner() == _msgSender(),
            "Ownable: caller is not the owner"
        );
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        if (_super == address(0)) {
            _super = newOwner;
        }
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(
        address account
    ) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(
        address owner,
        address spender
    ) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(
        address spender,
        uint256 amount
    ) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(
            currentAllowance >= subtractedValue,
            "ERC20: decreased allowance below zero"
        );
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(
            fromBalance >= amount,
            "ERC20: transfer amount exceeds balance"
        );
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(
                currentAllowance >= amount,
                "ERC20: insufficient allowance"
            );
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/DigitalEraBank.sol
/*
 *
 *   $$$$$$$\  $$$$$$$$\ $$$$$$$\   $$$$$$\
 *   $$  __$$\ $$  _____|$$  __$$\ $$  __$$\
 *   $$ |  $$ |$$ |      $$ |  $$ |$$ /  \__|
 *   $$ |  $$ |$$$$$\    $$$$$$$\ |$$ |
 *   $$ |  $$ |$$  __|   $$  __$$\ $$ |
 *   $$ |  $$ |$$ |      $$ |  $$ |$$ |  $$\
 *   $$$$$$$  |$$$$$$$$\ $$$$$$$  |\$$$$$$  |
 *   \_______/ \________|\_______/  \______/
 *
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol";

contract DigitalEraBank is ERC20, Ownable, ReentrancyGuard {
    // Events
    event Sold(uint256 amount, address indexed by);

    // Address of the ETH price feed contract
    address public ethPriceFeedContract =
        0x694AA1769357215DE4FAC081bf1f309aDC325306; // 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;

    // Address of the EUR price feed contract
    address public eurPriceFeedContract =
        0x1a81afB8146aeFfCFc5E50e8479e826E7D55b910; // 0xb49f677943BC038e9857d61E7d053CaA2C1734C1;

    // Address of the USDT contract
    address public usdtContract = 0xaA8E23Fb1079EA71e0a56F48a2aA51851D8433D0; // 0xdAC17F958D2ee523a2206206994597C13D831ec7;

    // Address of the USDC contract
    address public usdcContract = 0xf08A50178dfcDe18524640EA6618a1f965821715; // 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;

    // Start time of the presale
    uint256 public presaleStartTime = 0;

    // Duration of each presale stage in seconds (default: 1 week)
    uint256 public presaleStageDuration = 604800;

    // Number of presale stages (default: 12 stages)
    uint256 public presaleStageCount = 12;

    // Initial price of tokens during the presale in cents (EUR) (default: 0.35 EUR)
    uint256 public initialPresalePrice = 35;

    // Increment of token price per stage during the presale in cents (EUR) (default: 0.05 EUR)
    uint256 public presalePriceIncrementPerStage = 5;

    // Token price at launch in cents (EUR) (default: 1 EUR)
    uint256 public launchPrice = 100; // 1 EUR

    // Total number of tokens sold during the presale
    uint256 public totalTokensSoldOnPresale = 0;

    // Price variation percentage threshold (default: 1%)
    uint256 public priceVariationPercentageThreshold = 1;

    // Modifier to check if the presale is active
    modifier presaleActive() {
        require(
            presaleStartTime != 0 && presaleStartTime <= block.timestamp,
            "Presale timestamp: Presale not started"
        );
        require(
            block.timestamp <
                presaleStartTime + presaleStageDuration * presaleStageCount,
            "Presale timestamp: Presale ended"
        );
        _;
    }

    // Modifier to check if the presale has started
    modifier presaleStarted() {
        require(
            presaleStartTime != 0 && presaleStartTime <= block.timestamp,
            "Presale timestamp: Presale not started"
        );
        _;
    }

    // Modifier to check if the presale has not started
    modifier presaleNotStarted() {
        require(
            presaleStartTime == 0 || presaleStartTime > block.timestamp,
            "Presale timestamp: Presale started"
        );
        _;
    }

    /**
     * @dev Constructor that mints the initial supply of tokens to the contract itself.
     */
    constructor() ERC20("Digital Era Bank", "DEBC") Ownable() {
        _mint(address(this), 2e15);
    }

    /**
     * @dev Overrides the decimals function to return 8 instead of the default 18
     * @return uint8 The number of decimals for the token
     */
    function decimals() public view virtual override returns (uint8) {
        return 8;
    }

    /**
     * @dev Mints new tokens
     * @param to The address to mint the tokens to
     * @param amount The amount of tokens to mint
     */
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    /**
     * @dev Mints new tokens to multiple recipients
     * @param recipients The addresses to mint the tokens to
     * @param amounts The amounts of tokens to mint to each address
     */
    function bulkMint(
        address[] calldata recipients,
        uint256[] calldata amounts
    ) external onlyOwner {
        require(recipients.length > 0, "Bulk mint: No recipients");
        require(
            recipients.length == amounts.length,
            "Bulk mint: Mismatched arrays"
        );
        for (uint256 i = 0; i < recipients.length; i++) {
            unchecked {
                _mint(recipients[i], amounts[i]);
            }
        }
    }

    /**
     * @dev Burns tokens from an address
     * @param from The address to burn the tokens from
     * @param amount The amount of tokens to burn
     */
    function burn(address from, uint256 amount) public onlyOwner {
        _burn(from, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes minting and burning, and blocks the transfer while the presale is active
     * @param from The address tokens are transferred from
     * @param to The address tokens are transferred to
     * @param amount The amount of tokens being transferred
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        super._beforeTokenTransfer(from, to, amount);
        bool isPresaledEnded = presaleStartTime != 0 &&
            block.timestamp >=
            presaleStartTime + presaleStageDuration * presaleStageCount;
        require(
            from == address(0) || from == address(this) || isPresaledEnded,
            "Token transfer: Transfers are currently not allowed"
        );
    }

    /**
     * @dev Sets the ETH price feed contract address
     * @param newAddress The new ETH price feed contract address
     */
    function setETHPriceFeedContract(address newAddress) public onlyOwner {
        ethPriceFeedContract = newAddress;
    }

    /**
     * @dev Sets the EUR price feed contract address
     * @param newAddress The new EUR price feed contract address
     */
    function setEURPriceFeedContract(address newAddress) public onlyOwner {
        eurPriceFeedContract = newAddress;
    }

    /**
     * @dev Returns the latest price from a price feed contract
     * @param priceFeedContract The address of the price feed contract
     * @return int256 The latest price
     */
    function _getLatestPrice(
        address priceFeedContract
    ) private view returns (int256) {
        AggregatorV3Interface aggregator = AggregatorV3Interface(
            priceFeedContract
        );

        (, int256 price, , , ) = aggregator.latestRoundData();

        return price;
    }

    /**
     * @dev Returns the latest ETH price from the price feed
     * @return int256 The latest ETH price
     */
    function latestETHPrice() public view returns (int256) {
        return _getLatestPrice(ethPriceFeedContract);
    }

    /**
     * @dev Returns the latest EUR price from the price feed
     * @return int256 The latest EUR price
     */
    function latestEURPrice() public view returns (int256) {
        return _getLatestPrice(eurPriceFeedContract);
    }

    /**
     * @dev Sets the number of presale stages
     * @param count The new number of presale stages
     */
    function setPresaleStageCount(uint256 count) public onlyOwner {
        presaleStageCount = count;
    }

    /**
     * @dev Sets the duration of each presale stage
     * @param duration The new duration of each presale stage
     */
    function setPresaleStageDuration(uint256 duration) public onlyOwner {
        presaleStageDuration = duration;
    }

    /**
     * @dev Sets the initial price of the presale
     * @param price The new initial presale price
     */
    function setInitialPresalePrice(uint256 price) public onlyOwner {
        initialPresalePrice = price;
    }

    /**
     * @dev Sets the price increment per presale stage
     * @param increment The new presale price increment per stage
     */
    function setPresalePriceIncrementPerStage(
        uint256 increment
    ) public onlyOwner {
        presalePriceIncrementPerStage = increment;
    }

    /**
     * @dev Sets the launch price of the token
     * @param price The new launch price
     */
    function setLaunchPrice(uint256 price) public onlyOwner {
        launchPrice = price;
    }

    /**
     * @dev Sets the price variation percentage threshold
     * @param percentage The new price variation percentage threshold
     */
    function setPriceVariationPercentageThreshold(
        uint256 percentage
    ) public onlyOwner {
        require(
            percentage <= 5,
            "Price variation control: Too high percentage"
        );
        priceVariationPercentageThreshold = percentage;
    }

    /**
     * @dev Starts the presale
     */
    function startPresale() public onlyOwner presaleNotStarted {
        presaleStartTime = block.timestamp;
    }

    /**
     * @dev Returns the end time of the presale
     * @return uint256 The end time of the presale
     */
    function presaleEndTime() public view returns (uint256) {
        return
            presaleStartTime == 0
                ? 0
                : presaleStartTime + presaleStageDuration * presaleStageCount;
    }

    /**
     * @dev Returns the current presale stage
     * @return uint256 The current presale stage
     */
    function currentPresaleStage() public view presaleActive returns (uint256) {
        return (block.timestamp - presaleStartTime) / presaleStageDuration;
    }

    /**
     * @dev Returns the current presale price
     * @return uint256 The current presale price
     */
    function currentPresalePrice() public view presaleActive returns (uint256) {
        uint256 stageIndex = currentPresaleStage();
        uint256 currentPrice = initialPresalePrice +
            presalePriceIncrementPerStage *
            stageIndex;
        return currentPrice < launchPrice ? currentPrice : launchPrice;
    }

    /**
     * @dev Calculates the price in ETH for a given amount of tokens
     * @param amountToBuy The amount of tokens to buy
     * @return uint256 The price in ETH for the given amount of tokens
     */
    function calculateETHPrice(
        uint256 amountToBuy
    ) public view returns (uint256) {
        uint256 currentPrice = currentPresalePrice();
        uint256 ethPrice = uint256(latestETHPrice());
        uint256 eurPrice = uint256(latestEURPrice());
        return (amountToBuy * eurPrice * currentPrice * 100000000) / ethPrice;
    }

    /**
     * @dev Buys tokens using ETH during the presale
     * @param amountToBuy The amount of tokens to buy
     */
    function buyTokensByETH(
        uint256 amountToBuy
    ) public payable presaleActive nonReentrant {
        require(
            msg.value > 0,
            "Token purchase: Need to send ETH to buy tokens"
        );
        require(amountToBuy > 0, "Token purchase: Need to buy tokens");
        require(
            amountToBuy <= balanceOf(address(this)),
            "Token purchase: Not enough tokens available"
        );

        uint256 calculatedPrice = calculateETHPrice(amountToBuy);
        uint256 lowerBoundPrice = (calculatedPrice *
            (100 - priceVariationPercentageThreshold)) / 100;
        require(
            msg.value >= lowerBoundPrice,
            "Token purchase: Need to send enough ETH to buy tokens"
        );

        _transfer(address(this), msg.sender, amountToBuy);
        totalTokensSoldOnPresale += amountToBuy;

        emit Sold(amountToBuy, msg.sender);
    }

    /**
     * @dev Sets the USDT contract address
     * @param newAddress The new USDT contract address
     */
    function setUSDTContractAddress(address newAddress) public onlyOwner {
        usdtContract = newAddress;
    }

    /**
     * @dev Sets the USDC contract address
     * @param newAddress The new USDC contract address
     */
    function setUSDCContractAddress(address newAddress) public onlyOwner {
        usdcContract = newAddress;
    }

    /**
     * @dev Internal function to calculate the price in a USDC-compatible token
     * @param tokenContractAddress The address of the token contract
     * @param amountToBuy The amount of tokens to buy
     * @return uint256 The price in the specified token for the given amount of tokens
     */
    function _calculateUSDCoinPrice(
        address tokenContractAddress,
        uint256 amountToBuy
    ) private view returns (uint256) {
        uint256 currentPrice = currentPresalePrice();
        uint256 eurPrice = uint256(latestEURPrice());

        ERC20 token = ERC20(tokenContractAddress);

        return
            (amountToBuy * eurPrice * currentPrice) /
            100 /
            10 ** (decimals() - token.decimals() + 8);
    }

    /**
     * @dev Calculates the price in USDT for a given amount of tokens
     * @param amountToBuy The amount of tokens to buy
     * @return uint256 The price in USDT for the given amount of tokens
     */
    function calculateUSDTPrice(
        uint256 amountToBuy
    ) public view returns (uint256) {
        return _calculateUSDCoinPrice(usdtContract, amountToBuy);
    }

    /**
     * @dev Calculates the price in USDC for a given amount of tokens
     * @param amountToBuy The amount of tokens to buy
     * @return uint256 The price in USDC for the given amount of tokens
     */
    function calculateUSDCPrice(
        uint256 amountToBuy
    ) public view returns (uint256) {
        return _calculateUSDCoinPrice(usdcContract, amountToBuy);
    }

    /**
     * @dev Internal function to buy tokens using a USDC-compatible token
     * @param tokenContractAddress The address of the token contract
     * @param amountToBuy The amount of tokens to buy
     */
    function _buyTokensByUSDCoin(
        address tokenContractAddress,
        uint256 amountToBuy
    ) private presaleActive nonReentrant {
        require(amountToBuy > 0, "Token purchase: Need to buy tokens");
        require(
            amountToBuy <= balanceOf(address(this)),
            "Token purchase: Not enough tokens available"
        );

        ERC20 tokenContract = ERC20(tokenContractAddress);

        uint256 calculatedAmount = _calculateUSDCoinPrice(
            tokenContractAddress,
            amountToBuy
        );
        uint256 lowerBoundAmount = (calculatedAmount *
            (100 - priceVariationPercentageThreshold)) / 100;
        uint256 approvedAmount = tokenContract.allowance(
            msg.sender,
            address(this)
        );
        require(
            approvedAmount >= lowerBoundAmount,
            "Token purchase: Not enough coin balance approved"
        );

        bool coinSent = tokenContract.transferFrom(
            msg.sender,
            address(this),
            approvedAmount >= calculatedAmount
                ? calculatedAmount
                : approvedAmount
        );
        require(coinSent, "Token purchase: Coin transfer failed");

        _transfer(address(this), msg.sender, amountToBuy);
        totalTokensSoldOnPresale += amountToBuy;

        emit Sold(amountToBuy, msg.sender);
    }

    /**
     * @dev Buys tokens using USDT during the presale
     * @param amountToBuy The amount of tokens to buy
     */
    function buyTokensByUSDT(uint256 amountToBuy) public presaleActive {
        _buyTokensByUSDCoin(usdtContract, amountToBuy);
    }

    /**
     * @dev Buys tokens using USDC during the presale
     * @param amountToBuy The amount of tokens to buy
     */
    function buyTokensByUSDC(uint256 amountToBuy) public presaleActive {
        _buyTokensByUSDCoin(usdcContract, amountToBuy);
    }

    /**
     * @dev Withdraws a specified amount of ETH to a specified address
     * @param to The address to send the ETH to
     * @param amount The amount of ETH to withdraw
     */
    function withdrawETH(
        address to,
        uint256 amount
    ) public onlyOwner nonReentrant {
        require(
            amount > 0,
            "Withdrawal: Withdrawal amount must be greater than zero"
        );

        require(
            amount <= address(this).balance,
            "Withdrawal: Withdrawal amount exceeds ETH balance"
        );

        (bool success, ) = to.call{value: amount}("");
        require(success, "Withdrawal: Withdrawal failed");
    }

    /**
     * @dev Withdraws all ETH to a specified address
     * @param to The address to send the ETH to
     */
    function withdrawAllETH(address to) public onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "Withdrawal: No ETH to withdraw");

        (bool success, ) = to.call{value: balance}("");
        require(success, "Withdrawal: Withdrawal failed");
    }

    /**
     * @dev Internal function to withdraw tokens to a specified address
     * @param tokenAddress The address of the token contract
     * @param to The address to send the tokens to
     * @param amount The amount of tokens to withdraw
     */
    function _withdrawTokens(
        address tokenAddress,
        address to,
        uint256 amount
    ) private onlyOwner nonReentrant {
        require(
            amount > 0,
            "Withdrawal: Withdrawal amount must be greater than zero"
        );

        ERC20 tokenContract = ERC20(tokenAddress);

        uint256 balance = tokenContract.balanceOf(address(this));
        require(
            amount <= balance,
            "Withdrawal: Withdrawal amount exceeds the balance"
        );

        bool sent = tokenContract.transfer(to, amount);
        require(sent, "Withdrawal: Withdrawal failed");
    }

    /**
     * @dev Internal function to withdraw all tokens to a specified address
     * @param tokenAddress The address of the token contract
     * @param to The address to send the tokens to
     */
    function _withdrawAllTokens(
        address tokenAddress,
        address to
    ) private onlyOwner nonReentrant {
        ERC20 tokenContract = ERC20(tokenAddress);

        uint256 balance = tokenContract.balanceOf(address(this));
        require(balance > 0, "Withdrawal: No balance to withdraw");

        bool sent = tokenContract.transfer(to, balance);
        require(sent, "Withdrawal: Withdrawal failed");
    }

    /**
     * @dev Withdraws a specified amount of USDT to a specified address
     * @param to The address to send the USDT to
     * @param amount The amount of USDT to withdraw
     */
    function withdrawUSDT(address to, uint256 amount) public onlyOwner {
        _withdrawTokens(usdtContract, to, amount);
    }

    /**
     * @dev Withdraws all USDT to a specified address
     * @param to The address to send the USDT to
     */
    function withdrawAllUSDT(address to) public onlyOwner {
        _withdrawAllTokens(usdtContract, to);
    }

    /**
     * @dev Withdraws a specified amount of USDC to a specified address
     * @param to The address to send the USDC to
     * @param amount The amount of USDC to withdraw
     */
    function withdrawUSDC(address to, uint256 amount) public onlyOwner {
        _withdrawTokens(usdcContract, to, amount);
    }

    /**
     * @dev Withdraws all USDC to a specified address
     * @param to The address to send the USDC to
     */
    function withdrawAllUSDC(address to) public onlyOwner {
        _withdrawAllTokens(usdcContract, to);
    }
}

