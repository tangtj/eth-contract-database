
// File: contracts/StoredID2FA.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

contract StoredID2FA {
    struct ID2FA {
        bytes32 id; // id, hash of secret
        uint8 pined; // is pined
        bytes secret; // secret, encrypted by public key
        string issuer;
        string label;
        uint64 created; // create time
        uint64 updated; // last update time
    }

    // id => 2fa data
    mapping(address => ID2FA[]) private _id2fa;

    // address => decrypt key
    mapping(address => bytes) private _decryptKey;

    // address => id => index
    mapping(address => mapping(bytes32 => uint)) private _idIndex;

    event DecryptKeySet(address indexed ownerAddress);
    event Registered(address indexed ownerAddress, bytes32 id);
    event Updated(address indexed ownerAddress, bytes32 id);
    event Removed(address indexed ownerAddress, bytes32 id);
    event Cleared(address indexed ownerAddress);

    // Set decrypt key
    function _setDecryptKey(bytes memory key) private {
        _decryptKey[msg.sender] = key;
        // Emit event
        emit DecryptKeySet(msg.sender);
    }

    // Get decrypt key
    function getDecryptKey(
        address ownerAddress
    ) public view returns (bytes memory) {
        return _decryptKey[ownerAddress];
    }

    // register function
    function register(
        uint8 pined,
        bytes memory secret,
        string memory issuer,
        string memory label,
        uint64 created
    ) public {
        require(secret.length > 0, "Secret cannot be empty.");
        bytes32 dataId = keccak256(abi.encodePacked(secret)); // Optimize by explicitly encoding the secret

        // First, check if the dataId has been registered before to save gas
        uint index = _idIndex[msg.sender][dataId];
        // Check if dataId exists, noting that default value is 0 which implies non-existence initially
        if (index > 0) {
            // Adjusting index back since we store index+1 in _idIndex mapping
            index -= 1;
            // Update the existing entry
            ID2FA storage dataToUpdate = _id2fa[msg.sender][index];
            dataToUpdate.pined = pined;
            dataToUpdate.secret = secret;
            dataToUpdate.issuer = issuer;
            dataToUpdate.label = label;
            dataToUpdate.updated = uint64(block.timestamp);
            emit Updated(msg.sender, dataId);
        } else {
            // New registration, proceed without the need for loop check due to above optimization
            ID2FA memory newData = ID2FA(
                dataId,
                pined,
                secret,
                issuer,
                label,
                created,
                created
            );
            _id2fa[msg.sender].push(newData);
            // Store the new index+1 to distinguish from default mapping value (0)
            _idIndex[msg.sender][dataId] = _id2fa[msg.sender].length; // This is now safe due to initial check
            emit Registered(msg.sender, dataId);
        }
    }

    // Batch registration parameter
    struct batchParam {
        uint8 pined;
        bytes secret;
        string issuer;
        string label;
        uint64 created;
    }

    // Batch registration
    function registers(
        bytes memory decryptKey,
        batchParam[] memory id2fas
    ) public {
        require(id2fas.length > 0, "ID2FA data cannot be empty.");

        // Set decrypt key only if not empty
        if (decryptKey.length > 0) {
            _setDecryptKey(decryptKey);
        }

        // batch registration
        for (uint i = 0; i < id2fas.length; i++) {
            // else register
            register(
                id2fas[i].pined,
                id2fas[i].secret,
                id2fas[i].issuer,
                id2fas[i].label,
                id2fas[i].created
            );
        }
    }

    // Remove 2FA with index adjustment
    function remove(bytes32 id) public {
        ID2FA[] storage datas = _id2fa[msg.sender];
        uint index = _idIndex[msg.sender][id];
        require(index > 0 && index <= datas.length, "ID2FA not found");

        // Ajdust index to be 0-based to match array index
        index -= 1;

        if (index < datas.length - 1) {
            // Move the last element to the position of the element to delete
            datas[index] = datas[datas.length - 1];
            // update the index of the moved element
            _idIndex[msg.sender][datas[index].id] = index + 1; // Ensure indexes reflect non-zero-based storage logic
        }

        // delete last element
        datas.pop();
        // delete original ID index
        delete _idIndex[msg.sender][id];

        // Emit event
        emit Removed(msg.sender, id);
    }

    // Clear 2FA data
    function clear() public {
        // Clear decrypt key
        delete _decryptKey[msg.sender];
        // Clear index
        ID2FA[] memory datas = _id2fa[msg.sender];
        for (uint i = 0; i < datas.length; i++) {
            delete _idIndex[msg.sender][datas[i].id];
        }
        // Clear array
        delete _id2fa[msg.sender];
        // Emit event
        emit Cleared(msg.sender);
    }

    // Get all 2fa by address
    function getAll(address ownerAddress) public view returns (ID2FA[] memory) {
        return _id2fa[ownerAddress];
    }

    // Get 2fa by id
    function get(
        address ownerAddress,
        bytes32 id
    ) public view returns (ID2FA memory) {
        ID2FA[] memory datas = _id2fa[ownerAddress];
        uint index = _idIndex[ownerAddress][id];
        require(index < datas.length, "ID2FA not found");
        return datas[index];
    }
}

