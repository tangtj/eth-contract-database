
// File: src/MainChainGaugeInjector.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

import "@chainlink/contracts/src/v0.8/ConfirmedOwner.sol";
import "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./interfaces/IMainChainGauge.sol";

/**
 * @title The MainChainGaugeInjector Contract
 * @author 0xtritium.eth + master coder Mike B
 * @notice This contract is a chainlink automation compatible interface to automate regular payment of non-BAL tokens to a child chain gauge.
 * @notice This contract is meant to run/manage a single token.  This is almost always the case for a DAO trying to use such a thing.
 * @notice The configuration is rewritten each time it is loaded.
 * @notice This contract will only function if it is configured as the distributor for a token/gauge it is operating on.
 * @notice The contract is meant to hold token balances, and works on a schedule set using setRecipientList.  The schedule defines an amount per round and number of rounds per gauge.
 * @notice This contract is Ownable and has lots of sweep functionality to allow the owner to work with the contract or get tokens out should there be a problem.
 * @dev This release only works on mainnet, due to differences in the interface of mainchain/childchain gauges!!!
 * see https://docs.chain.link/chainlink-automation/utility-contracts/
 */
contract MainChainGaugeInjector is
  ConfirmedOwner,
  Pausable,
  KeeperCompatibleInterface
{
  event GasTokenWithdrawn(uint256 amountWithdrawn, address recipient);
  event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);
  event MinWaitPeriodUpdated(
    uint256 oldMinWaitPeriod,
    uint256 newMinWaitPeriod
  );
  event ERC20Swept(address indexed token, address recipient, uint256 amount);
  event EmissionsInjection(address gauge, address token, uint256 amount);
  event SetHandlingToken(address token);
  event PerformedUpkeep(address[] needsFunding);

  error ListLengthMismatch();
  error OnlyKeeperRegistry(address sender);
  error DuplicateAddress(address duplicate);
  error PeriodNotFinished(uint256 periodNumber, uint256 maxPeriods);
  error ZeroAddress();
  error ZeroAmount();
  error BalancesMismatch();
  error RewardTokenError();

  struct Target {
    uint256 amountPerPeriod;
    bool isActive;
    uint8 maxPeriods;
    uint8 periodNumber;
    uint56 lastInjectionTimeStamp; // enough space for 2 trillion years
  }

  address private s_keeperRegistryAddress;
  uint256 private s_minWaitPeriodSeconds;
  address[] private s_gaugeList;
  mapping(address => Target) internal s_targets;
  address private s_injectTokenAddress;

  /**
   * @param keeperRegistryAddress The address of the keeper registry contract
   * @param minWaitPeriodSeconds The minimum wait period for address between funding (for security)
   * @param injectTokenAddress The ERC20 token this contract should mange
   */
  constructor(
    address keeperRegistryAddress,
    uint256 minWaitPeriodSeconds,
    address injectTokenAddress
  ) ConfirmedOwner(msg.sender) {
    setKeeperRegistryAddress(keeperRegistryAddress);
    setMinWaitPeriodSeconds(minWaitPeriodSeconds);
    setInjectTokenAddress(injectTokenAddress);
  }

  /**
   * @notice Sets the list of addresses to watch and their funding parameters
   * @param gaugeAddresses the list of addresses to watch
   * @param amountsPerPeriod the minimum balances for each address
   * @param maxPeriods the amount to top up each address
   */
  function setRecipientList(
    address[] calldata gaugeAddresses,
    uint256[] calldata amountsPerPeriod,
    uint8[] calldata maxPeriods
  ) public onlyOwner {
    if (
      gaugeAddresses.length != amountsPerPeriod.length ||
      gaugeAddresses.length != maxPeriods.length
    ) {
      revert ListLengthMismatch();
    }
    revertOnDuplicate(gaugeAddresses);
    address[] memory oldGaugeList = s_gaugeList;
    for (uint256 idx = 0; idx < oldGaugeList.length; idx++) {
      s_targets[oldGaugeList[idx]].isActive = false;
    }
    for (uint256 idx = 0; idx < gaugeAddresses.length; idx++) {
      if (gaugeAddresses[idx] == address(0)) {
        revert ZeroAddress();
      }
      if (amountsPerPeriod[idx] == 0) {
        revert ZeroAmount();
      }
      s_targets[gaugeAddresses[idx]] = Target({
        isActive: true,
        amountPerPeriod: amountsPerPeriod[idx],
        maxPeriods: maxPeriods[idx],
        lastInjectionTimeStamp: 0,
        periodNumber: 0
      });
    }
    s_gaugeList = gaugeAddresses;
  }

  /**
   * @notice Validate that all periods are finished, and that the supplied schedule has enough tokens to fully execute
   * @notice If everything checks out, update recipient list, otherwise, throw revert
   * @notice you can use setRecipientList to set a list without validation
   * @param gaugeAddresses : list of gauge addresses
   * @param amountsPerPeriod : list of amount of token in wei to be injected each week
   */
  function setValidatedRecipientList(
    address[] calldata gaugeAddresses,
    uint256[] calldata amountsPerPeriod,
    uint8[] calldata maxPeriods
  ) external onlyOwner {
    address[] memory gaugeList = s_gaugeList;
    // validate all periods are finished
    for (uint256 idx = 0; idx < gaugeList.length; idx++) {
      Target memory target = s_targets[gaugeList[idx]];
      if (target.periodNumber < target.maxPeriods) {
        revert PeriodNotFinished(target.periodNumber, target.maxPeriods);
      }
    }
    setRecipientList(gaugeAddresses, amountsPerPeriod, maxPeriods);

    if (!checkSufficientBalances()) {
      revert BalancesMismatch();
    }
  }

  /**
   * @notice Validate that the contract holds enough tokens to fulfill the current schedule
   * @return bool true if balance of contract matches scheduled periods
   */
  function checkSufficientBalances() public view returns (bool) {
    // iterates through all gauges to make sure there are enough tokens in the contract to fulfill all scheduled tasks
    // (maxperiods - periodnumber) * amountPerPeriod ==  token.balanceOf(address(this))

    address[] memory gaugeList = s_gaugeList;
    uint256 totalDue;
    for (uint256 idx = 0; idx < gaugeList.length; idx++) {
      Target memory target = s_targets[gaugeList[idx]];
      totalDue +=
        (target.maxPeriods - target.periodNumber) *
        target.amountPerPeriod;
    }
    return totalDue <= IERC20(s_injectTokenAddress).balanceOf(address(this));
  }

  /**
   * @notice Gets a list of addresses that are ready to inject
   * @notice This is done by checking if the current period has ended, and should inject new funds directly after the end of each period.
   * @return list of addresses that are ready to inject
   */
  function getReadyGauges() public view returns (address[] memory) {
    address[] memory gaugeList = s_gaugeList;
    address[] memory ready = new address[](gaugeList.length);
    address tokenAddress = s_injectTokenAddress;
    uint256 count = 0;
    uint256 minWaitPeriod = s_minWaitPeriodSeconds;
    uint256 balance = IERC20(tokenAddress).balanceOf(address(this));
    Target memory target;
    for (uint256 idx = 0; idx < gaugeList.length; idx++) {
      target = s_targets[gaugeList[idx]];
      IMainChainGauge gauge = IMainChainGauge(gaugeList[idx]);

      uint256 period_finish = gauge.reward_data(tokenAddress).period_finish;

      if (
        target.lastInjectionTimeStamp + minWaitPeriod <= block.timestamp &&
        (period_finish <= block.timestamp) &&
        balance >= target.amountPerPeriod &&
        target.periodNumber < target.maxPeriods &&
        gauge.reward_data(tokenAddress).distributor == address(this)
      ) {
        ready[count] = gaugeList[idx];
        count++;
        balance -= target.amountPerPeriod;
      }
    }
    if (count != gaugeList.length) {
      // ready is a list large enough to hold all possible gauges
      // count is the number of ready gauges that were inserted into ready
      // this assembly shrinks ready to length count such that it removes empty elements
      assembly {
        mstore(ready, count)
      }
    }
    return ready;
  }

  /**
   * @notice Injects funds into the gauges provided
   * @param ready the list of gauges to fund (addresses must be pre-approved)
   */
  function _injectFunds(address[] memory ready) internal whenNotPaused {
    address tokenAddress = s_injectTokenAddress;
    IERC20 token = IERC20(tokenAddress);
    uint256 balance = token.balanceOf(address(this));
    Target memory target;

    for (uint256 idx = 0; idx < ready.length; idx++) {
      target = s_targets[ready[idx]];
      IMainChainGauge gauge = IMainChainGauge(ready[idx]);
      uint256 period_finish = gauge.reward_data(tokenAddress).period_finish;

      if (
        target.lastInjectionTimeStamp + s_minWaitPeriodSeconds <=
        block.timestamp &&
        period_finish <= block.timestamp &&
        balance >= target.amountPerPeriod &&
        target.periodNumber < target.maxPeriods &&
        target.isActive == true
      ) {
        SafeERC20.safeApprove(token, ready[idx], target.amountPerPeriod);

        try
          gauge.deposit_reward_token(
            tokenAddress,
            uint256(target.amountPerPeriod)
          )
        {
          s_targets[ready[idx]].lastInjectionTimeStamp = uint56(
            block.timestamp
          );
          s_targets[ready[idx]].periodNumber++;
          emit EmissionsInjection(
            ready[idx],
            tokenAddress,
            target.amountPerPeriod
          );
        } catch {
          revert RewardTokenError();
        }
      }
    }
  }

  /**
   * * @notice This is to allow the owner to manually trigger an injection of funds in place of the keeper
   * @notice without abi encoding the gauge list
   * @param gauges array of gauges to inject tokens to
   */
  function injectFunds(address[] memory gauges) external onlyOwner {
    _injectFunds(gauges);
  }

  /**
   * @notice Get list of addresses that are ready for new token injections and return keeper-compatible payload
   * @notice calldata required by the chainlink interface but not used in this case, use 0x
   * @return upkeepNeeded signals if upkeep is needed
   * @return performData is an abi encoded list of addresses that need funds
   */
  function checkUpkeep(
    bytes calldata
  )
    external
    view
    override
    whenNotPaused
    returns (bool upkeepNeeded, bytes memory performData)
  {
    address[] memory ready = getReadyGauges();
    upkeepNeeded = ready.length > 0;
    performData = abi.encode(ready);
    return (upkeepNeeded, performData);
  }

  /**
   * @notice Called by keeper to send funds to underfunded addresses
   * @param performData The abi encoded list of addresses to fund
   */
  function performUpkeep(
    bytes calldata performData
  ) external override onlyKeeperRegistry whenNotPaused {
    address[] memory needsFunding = abi.decode(performData, (address[]));
    _injectFunds(needsFunding);
    emit PerformedUpkeep(needsFunding);
  }

  /**
   * @notice Withdraws the contract balance
   */
  function withdrawGasToken() external onlyOwner {
    address payable recipient = payable(owner());
    if (recipient == address(0)) {
      revert ZeroAddress();
    }
    uint256 amount = address(this).balance;
    recipient.transfer(amount);
    emit GasTokenWithdrawn(amount, recipient);
  }

  /**
   * @notice Sweep the full contract's balance for a given ERC-20 token
   * @param token The ERC-20 token which needs to be swept
   */
  function sweep(address token) external onlyOwner {
    uint256 balance = IERC20(token).balanceOf(address(this));
    SafeERC20.safeTransfer(IERC20(token), owner(), balance);
    emit ERC20Swept(token, owner(), balance);
  }

  /**
   * @notice Set distributor from the injector back to the owner.
   * @notice You will have to call set_reward_distributor back to the injector FROM the current distributor if you wish to continue using the injector
   * @notice be aware that the only addresses able to call set_reward_distributor are the current distributor and balancer governance authorized accounts (the LM multisig)
   * @param gauge The Gauge to set distributor for
   * @param reward_token Token you are setting the distributor for
   */
  function setDistributorToOwner(
    address gauge,
    address reward_token
  ) external onlyOwner {
    IMainChainGauge(gauge).set_reward_distributor(reward_token, msg.sender);
  }

  /**
   * @notice Manually deposit an amount of tokens to the gauge
   * @param gauge The Gauge to set distributor to injector owner
   * @param reward_token Reward token you are seeding
   * @param amount Amount to deposit
   */
  function manualDeposit(
    address gauge,
    address reward_token,
    uint256 amount
  ) external onlyOwner {
    IMainChainGauge gaugeContract = IMainChainGauge(gauge);
    IERC20 token = IERC20(reward_token);
    SafeERC20.safeApprove(token, gauge, amount);
    gaugeContract.deposit_reward_token(reward_token, amount);
    emit EmissionsInjection(gauge, reward_token, amount);
  }

  /**
   * @notice Sets the keeper registry address
   */
  function setKeeperRegistryAddress(
    address keeperRegistryAddress
  ) public onlyOwner {
    s_keeperRegistryAddress = keeperRegistryAddress;
    emit KeeperRegistryAddressUpdated(
      s_keeperRegistryAddress,
      keeperRegistryAddress
    );
  }

  /**
   * @notice Sets the minimum wait period (in seconds) for addresses between injections
   */
  function setMinWaitPeriodSeconds(uint256 period) public onlyOwner {
    s_minWaitPeriodSeconds = period;
    emit MinWaitPeriodUpdated(s_minWaitPeriodSeconds, period);
  }

  /**
   * @notice Gets the keeper registry address
   */
  function getKeeperRegistryAddress()
    external
    view
    returns (address keeperRegistryAddress)
  {
    return s_keeperRegistryAddress;
  }

  /**
   * @notice Gets the minimum wait period
   */
  function getMinWaitPeriodSeconds() external view returns (uint256) {
    return s_minWaitPeriodSeconds;
  }

  /**
   * @notice Gets the list of addresses on the in the current configuration.
   */
  function getWatchList() external view returns (address[] memory) {
    return s_gaugeList;
  }

  /**
   * @notice Sets the address of the ERC20 token this contract should handle
   */
  function setInjectTokenAddress(address ERC20token) public onlyOwner {
    s_injectTokenAddress = ERC20token;
    emit SetHandlingToken(ERC20token);
  }
  /**
   * @notice Gets the token this injector is operating on
   */

  function getInjectTokenAddress() external view returns (address) {
    return s_injectTokenAddress;
  }
  /**
   * @notice Gets configuration information for an address on the gaugelist
   * @param targetAddress return Target struct for a given gauge according to the current scheduled distributions
   */

  function getAccountInfo(
    address targetAddress
  )
    external
    view
    returns (
      uint256 amountPerPeriod,
      bool isActive,
      uint8 maxPeriods,
      uint8 periodNumber,
      uint56 lastInjectionTimeStamp
    )
  {
    Target memory target = s_targets[targetAddress];
    return (
      target.amountPerPeriod,
      target.isActive,
      target.maxPeriods,
      target.periodNumber,
      target.lastInjectionTimeStamp
    );
  }

  /**
   * @notice Pauses the contract, which prevents executing performUpkeep
   */
  function pause() external onlyOwner {
    _pause();
  }

  /**
   * @notice Unpauses the contract
   */
  function unpause() external onlyOwner {
    _unpause();
  }

  /**
   * @notice takes in a list of addresses and reverts if there is a duplicate
   */
  function revertOnDuplicate(address[] memory list) internal pure {
    uint256 length = list.length;
    if (length == 0) {
      return;
    }
    for (uint256 i = 0; i < length - 1; i++) {
      for (uint256 j = i + 1; j < length; j++) {
        if (list[i] == list[j]) {
          revert DuplicateAddress(list[i]);
        }
      }
    }
    // No duplicates found
  }

  modifier onlyKeeperRegistry() {
    if (msg.sender != s_keeperRegistryAddress) {
      revert OnlyKeeperRegistry(msg.sender);
    }
    _;
  }
}


// File: lib/chainlink/contracts/src/v0.8/ConfirmedOwner.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ConfirmedOwnerWithProposal.sol";

/**
 * @title The ConfirmedOwner contract
 * @notice A contract with helpers for basic contract ownership.
 */
contract ConfirmedOwner is ConfirmedOwnerWithProposal {
  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}
}


// File: lib/chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol
// SPDX-License-Identifier: MIT
/**
 * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.
 */
pragma solidity ^0.8.0;
import {AutomationCompatibleInterface as KeeperCompatibleInterface} from "./AutomationCompatibleInterface.sol";


// File: lib/openzeppelin-contracts/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: src/interfaces/IMainChainGauge.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

interface IMainChainGauge {
  event Approval(
    address indexed _owner,
    address indexed _spender,
    uint256 _value
  );
  event Deposit(address indexed provider, uint256 value);
  event RelativeWeightCapChanged(uint256 new_relative_weight_cap);
  event RewardDistributorUpdated(
    address indexed reward_token,
    address distributor
  );
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  event UpdateLiquidityLimit(
    address indexed user,
    uint256 original_balance,
    uint256 original_supply,
    uint256 working_balance,
    uint256 working_supply
  );
  event Withdraw(address indexed provider, uint256 value);

  function DOMAIN_SEPARATOR() external view returns (bytes32);
  function add_reward(address _reward_token, address _distributor) external;
  function allowance(
    address owner,
    address spender
  ) external view returns (uint256);
  function approve(address _spender, uint256 _value) external returns (bool);
  function balanceOf(address arg0) external view returns (uint256);
  function claim_rewards() external;
  function claim_rewards(address _addr) external;
  function claim_rewards(address _addr, address _receiver) external;
  function claimable_reward(
    address _user,
    address _reward_token
  ) external view returns (uint256);
  function claimable_tokens(address addr) external returns (uint256);
  function claimed_reward(
    address _addr,
    address _token
  ) external view returns (uint256);
  function decimals() external view returns (uint256);
  function decreaseAllowance(
    address _spender,
    uint256 _subtracted_value
  ) external returns (bool);
  function deposit(uint256 _value) external;
  function deposit(uint256 _value, address _addr) external;
  function deposit(uint256 _value, address _addr, bool _claim_rewards) external;
  function deposit_reward_token(
    address _reward_token,
    uint256 _amount
  ) external;
  function future_epoch_time() external view returns (uint256);
  function getCappedRelativeWeight(
    uint256 time
  ) external view returns (uint256);
  function getMaxRelativeWeightCap() external pure returns (uint256);
  function getRelativeWeightCap() external view returns (uint256);
  function increaseAllowance(
    address _spender,
    uint256 _added_value
  ) external returns (bool);
  function inflation_rate() external view returns (uint256);
  function initialize(address _lp_token, uint256 relative_weight_cap) external;
  function integrate_checkpoint() external view returns (uint256);
  function integrate_checkpoint_of(
    address arg0
  ) external view returns (uint256);
  function integrate_fraction(address arg0) external view returns (uint256);
  function integrate_inv_supply(uint256 arg0) external view returns (uint256);
  function integrate_inv_supply_of(
    address arg0
  ) external view returns (uint256);
  function is_killed() external view returns (bool);
  function kick(address addr) external;
  function killGauge() external;
  function lp_token() external view returns (address);
  function name() external view returns (string memory);
  function nonces(address arg0) external view returns (uint256);
  function period() external view returns (int128);
  function period_timestamp(uint256 arg0) external view returns (uint256);
  function permit(
    address _owner,
    address _spender,
    uint256 _value,
    uint256 _deadline,
    uint8 _v,
    bytes32 _r,
    bytes32 _s
  ) external returns (bool);
  function reward_count() external view returns (uint256);
  function reward_data(address arg0) external view returns (Reward memory);
  function reward_integral_for(
    address arg0,
    address arg1
  ) external view returns (uint256);
  function reward_tokens(uint256 arg0) external view returns (address);
  function rewards_receiver(address arg0) external view returns (address);
  function setRelativeWeightCap(uint256 relative_weight_cap) external;
  function set_reward_distributor(
    address _reward_token,
    address _distributor
  ) external;
  function set_rewards_receiver(address _receiver) external;
  function symbol() external view returns (string memory);
  function totalSupply() external view returns (uint256);
  function transfer(address _to, uint256 _value) external returns (bool);
  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  ) external returns (bool);
  function unkillGauge() external;
  function user_checkpoint(address addr) external returns (bool);
  function version() external view returns (string memory);
  function withdraw(uint256 _value) external;
  function withdraw(uint256 _value, bool _claim_rewards) external;
  function working_balances(address arg0) external view returns (uint256);
  function working_supply() external view returns (uint256);
}

struct Reward {
  address token;
  address distributor;
  uint256 period_finish;
  uint256 rate;
  uint256 last_update;
  uint256 integral;
}


// File: lib/chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./interfaces/OwnableInterface.sol";

/**
 * @title The ConfirmedOwner contract
 * @notice A contract with helpers for basic contract ownership.
 */
contract ConfirmedOwnerWithProposal is OwnableInterface {
  address private s_owner;
  address private s_pendingOwner;

  event OwnershipTransferRequested(address indexed from, address indexed to);
  event OwnershipTransferred(address indexed from, address indexed to);

  constructor(address newOwner, address pendingOwner) {
    require(newOwner != address(0), "Cannot set owner to zero");

    s_owner = newOwner;
    if (pendingOwner != address(0)) {
      _transferOwnership(pendingOwner);
    }
  }

  /**
   * @notice Allows an owner to begin transferring ownership to a new address,
   * pending.
   */
  function transferOwnership(address to) public override onlyOwner {
    _transferOwnership(to);
  }

  /**
   * @notice Allows an ownership transfer to be completed by the recipient.
   */
  function acceptOwnership() external override {
    require(msg.sender == s_pendingOwner, "Must be proposed owner");

    address oldOwner = s_owner;
    s_owner = msg.sender;
    s_pendingOwner = address(0);

    emit OwnershipTransferred(oldOwner, msg.sender);
  }

  /**
   * @notice Get the current owner
   */
  function owner() public view override returns (address) {
    return s_owner;
  }

  /**
   * @notice validate, transfer ownership, and emit relevant events
   */
  function _transferOwnership(address to) private {
    require(to != msg.sender, "Cannot transfer to self");

    s_pendingOwner = to;

    emit OwnershipTransferRequested(s_owner, to);
  }

  /**
   * @notice validate access
   */
  function _validateOwnership() internal view {
    require(msg.sender == s_owner, "Only callable by owner");
  }

  /**
   * @notice Reverts if called by anyone other than the contract owner.
   */
  modifier onlyOwner() {
    _validateOwnership();
    _;
  }
}


// File: lib/chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AutomationCompatibleInterface {
  /**
   * @notice method that is simulated by the keepers to see if any work actually
   * needs to be performed. This method does does not actually need to be
   * executable, and since it is only ever simulated it can consume lots of gas.
   * @dev To ensure that it is never called, you may want to add the
   * cannotExecute modifier from KeeperBase to your implementation of this
   * method.
   * @param checkData specified in the upkeep registration so it is always the
   * same for a registered upkeep. This can easily be broken down into specific
   * arguments using `abi.decode`, so multiple upkeeps can be registered on the
   * same contract and easily differentiated by the contract.
   * @return upkeepNeeded boolean to indicate whether the keeper should call
   * performUpkeep or not.
   * @return performData bytes that the keeper should call performUpkeep with, if
   * upkeep is needed. If you would like to encode data to decode later, try
   * `abi.encode`.
   */
  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);

  /**
   * @notice method that is actually executed by the keepers, via the registry.
   * The data returned by the checkUpkeep simulation will be passed into
   * this method to actually be executed.
   * @dev The input to this method should not be trusted, and the caller of the
   * method should not even be restricted to any single registry. Anyone should
   * be able call it, and the input should be validated, there is no guarantee
   * that the data passed in is the performData returned from checkUpkeep. This
   * could happen due to malicious keepers, racing keepers, or simply a state
   * change while the performUpkeep transaction is waiting for confirmation.
   * Always validate the data passed in.
   * @param performData is the data which was passed back from the checkData
   * simulation. If it is encoded, it can easily be decoded into other types by
   * calling `abi.decode`. This data should not be trusted, and should be
   * validated against the contract's current state.
   */
  function performUpkeep(bytes calldata performData) external;
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: lib/chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface OwnableInterface {
  function owner() external returns (address);

  function transferOwnership(address recipient) external;

  function acceptOwnership() external;
}

