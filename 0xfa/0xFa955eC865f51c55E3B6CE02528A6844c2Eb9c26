// SPDX-License-Identifier: MIT

/*

Unlock the Potential of Locked Liquidity in DeFi

Website: openliquidity.io

X: x.com/Open_Liquidity

Telegram: t.me/Open_Liquidity


backed by CryptoDo

*/

pragma solidity ^0.8.23;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );
}

contract OpenLiquidity is Context, IERC20, Ownable {
    using SafeMath for uint256;

    string private constant _name = "OpenLiquidity";
    string private constant _symbol = "OpenLi";
    uint8 private constant _decimals = 9;

    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) public _isExcludedFromFee;
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 200_000_000 * 10**_decimals;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;
    uint256 public _taxFeeOnBuy = 5;
    uint256 public _taxFeeOnSell = 5;
    uint256 public _maxFeeThreshold = 25;

    uint256 private _taxFee = _taxFeeOnSell;

    uint256 private _previoustaxFee = _taxFee;

    address payable public _devAddress;
    address payable public _daoAddress;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;

    bool private tradingActive;
    bool private inSwap = false;
    bool private swapEnabled = true;

    bool public daoFeeEnabled = false;
    bool public feeAddressesManagementRevoked;

    uint256 public _maxTxAmount = _tTotal.div(100);
    uint256 public _maxWalletSize = _tTotal.div(100);
    uint256 public _swapTokensAtAmount = 1000 * 10**_decimals;

    address public operatorAddress;
    address public saleStarterAddress;

    modifier lockTheSwap() {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor(
        address routerAddress,
        address devAddress,
        address daoAddress
    ) {
        _tOwned[_msgSender()] = _rTotal;

        _devAddress = payable(devAddress);
        _daoAddress = payable(daoAddress);

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);
        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_devAddress] = true;

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromRef(_tOwned[account]);
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "the transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function tokenFromRef(uint256 rAmount) private view returns (uint256) {
        require(
            rAmount <= _rTotal,
            "Amount has to be less than total reflections"
        );
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function remAllFee() private {
        if (_taxFee == 0) return;
        _previoustaxFee = _taxFee;
        _taxFee = 0;
    }

    function resAllFee() private {
        _taxFee = _previoustaxFee;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "Can't approve from zero address");
        require(spender != address(0), "Can't approve to zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(to != address(0), "Cant transfer to address zero");
        require(amount > 0, "Amount should be above zero");

        if (from != owner() && to != owner()) {
            if (!tradingActive) {
                require(
                    from == owner(),
                    "Only owner can trade before trading activation"
                );
            }

            require(amount <= _maxTxAmount, "Exceeded max transaction limit");

            if (to != uniswapV2Pair) {
                require(
                    balanceOf(to) + amount <= _maxWalletSize,
                    "Exceeds max wallet balance"
                );
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;

            if (contractTokenBalance >= _maxTxAmount) {
                contractTokenBalance = _maxTxAmount;
            }

            if (
                canSwap &&
                !inSwap &&
                from != uniswapV2Pair &&
                swapEnabled &&
                !_isExcludedFromFee[from] &&
                !_isExcludedFromFee[to]
            ) {
                swapTokensForEth(contractTokenBalance);
                uint256 contractETHBalance = address(this).balance;
                if (contractETHBalance > 0) {
                    sendETHToFee(address(this).balance);
                }
            }
        }

        bool takeFee = true;

        if (
            (_isExcludedFromFee[from] || _isExcludedFromFee[to]) ||
            (from != uniswapV2Pair && to != uniswapV2Pair)
        ) {
            takeFee = false;
        } else {
            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {
                _taxFee = _taxFeeOnBuy;
            }

            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {
                _taxFee = _taxFeeOnSell;
            }
        }

        _tokenTransfer(from, to, amount, takeFee);
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function sendETHToFee(uint256 amount) private {
        if (daoFeeEnabled) {
            uint256 primaryAmount = amount.mul(80).div(100);
            uint256 secondaryAmount = amount.mul(20).div(100);
            

            (bool sentdev, ) = payable(_devAddress).call{value: primaryAmount}("");
            require(sentdev, "Transfer to dev failed");

            (bool sentdao, ) = payable(_daoAddress).call{value: secondaryAmount}("");
            require(sentdao, "Transfer to dao failed");

          
        } else {
            (bool sentdev, ) = payable(_devAddress).call{value: amount}("");
            require(sentdev, "Transfer to dev failed");
        }
    }

    function enableTrading(bool _tradingActive) public {
        require(
            msg.sender == operatorAddress ||
                msg.sender == owner() ||
                msg.sender == saleStarterAddress,
            "Forbidden"
        );
        tradingActive = _tradingActive;
    }

    function setOperator(address operator) public onlyOwner {
        operatorAddress = operator;
    }

    function setSaleStarter(address saleStarter) public onlyOperator {
        saleStarterAddress = saleStarter;
    }

    function toggleDaoFeeEnabled() public onlyOperator {
        daoFeeEnabled = !daoFeeEnabled;
    }

    function manualSend() external {
        require(msg.sender == _devAddress, "Caller is not a dev address");
        uint256 contractETHBalance = address(this).balance;
        sendETHToFee(contractETHBalance);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 amount,
        bool takeFee
    ) private {
        if (!takeFee) remAllFee();
        _transferStandard(sender, recipient, amount);
        if (!takeFee) resAllFee();
    }

    function _transferStandard(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        (
            uint256 rAmount,
            uint256 rTransferAmount,
            uint256 tTransferAmount,
            uint256 tCom
        ) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(rTransferAmount);
        _takeCom(tCom, sender);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _takeCom(uint256 tCom, address from) private {
        uint256 currentRate = _getRate();
        uint256 rCom = tCom.mul(currentRate);
        _tOwned[address(this)] = _tOwned[address(this)].add(rCom);
        emit Transfer(from, address(this), rCom);
    }

    receive() external payable {}

    function _getValues(uint256 tAmount)
        private
        view
        returns (
            uint256,
            uint256,
            uint256,
            uint256
        )
    {
        (uint256 tTransferAmount, uint256 tTeam) = _getTValues(
            tAmount,
            _taxFee
        );
        uint256 currentRate = _getRate();
        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(
            tAmount,
            tTeam,
            currentRate
        );
        return (rAmount, rTransferAmount, tTransferAmount, tTeam);
    }

    function _getTValues(uint256 tAmount, uint256 taxFee)
        private
        pure
        returns (uint256, uint256)
    {
        uint256 tTeam = tAmount.mul(taxFee).div(100);
        uint256 tTransferAmount = tAmount.sub(tTeam);
        return (tTransferAmount, tTeam);
    }

    function _getRValues(
        uint256 tAmount,
        uint256 tTeam,
        uint256 currentRate
    ) private pure returns (uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rTeam = tTeam.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rTeam);
        return (rAmount, rTransferAmount);
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function setFee(uint256 taxFeeOnBuy, uint256 taxFeeOnSell)
        public
        onlyOperator
    {
        require(
            taxFeeOnBuy >= 0 && taxFeeOnBuy <= _maxFeeThreshold,
            "Buy tax must be between 0% and _maxFeeThreshold"
        );
        require(
            taxFeeOnSell >= 0 && taxFeeOnSell <= _maxFeeThreshold,
            "Sell tax must be between 0% and _maxFeeThreshold"
        );

        _taxFeeOnBuy = taxFeeOnBuy;
        _taxFeeOnSell = taxFeeOnSell;
    }

    function downgradeMaxFee() public onlyOperator {
        require(_maxFeeThreshold != 5, "fee already downgraded");
        _maxFeeThreshold = 5;
        _taxFeeOnBuy = 5;
        _taxFeeOnSell = 5;
    }

    function setMinSwapTokens(uint256 swapTokensAtAmount) public onlyOwner {
        _swapTokensAtAmount = swapTokensAtAmount;
    }

    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {
        _maxTxAmount = maxTxAmount;
    }

    function setMaxWalletAmount(uint256 maxWalletSize) public onlyOwner {
        _maxWalletSize = maxWalletSize;
    }

    function excludeAccountsFromFees(address[] calldata accounts, bool excluded)
        public
        onlyOperator
    {
        for (uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFee[accounts[i]] = excluded;
        }
    }

    function changeDevelopmentAddress(address newDevAddress)
        public
        onlyOperator
    {
        require(
            !feeAddressesManagementRevoked,
            "Rights to change the fee addresses has beed revoked"
        );
        require(
            newDevAddress != address(0),
            "New development address cannot be zero address"
        );
        _isExcludedFromFee[_devAddress] = false;
        _devAddress = payable(newDevAddress);
        _isExcludedFromFee[_devAddress] = true;
    }

    function changeDaoAddress(address newDaoAddress) public onlyOperator {
        require(
            !feeAddressesManagementRevoked,
            "Rights to change the fee addresses has beed revoked"
        );
        require(
            newDaoAddress != address(0),
            "New dao address cannot be zero address"
        );
        _isExcludedFromFee[_daoAddress] = false;
        _daoAddress = payable(newDaoAddress);
        _isExcludedFromFee[_daoAddress] = true;
    }

    function revokeRightsToChangeFeeAddresses() public onlyOperator {
        require(!feeAddressesManagementRevoked, "Rights already revoked");
        feeAddressesManagementRevoked = true;
    }

    modifier onlyOperator() {
        require(
            msg.sender == operatorAddress || msg.sender == owner(),
            "Caller is not an operator"
        );
        _;
    }
}