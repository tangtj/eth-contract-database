
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/KERNVest.sol
pragma solidity 0.8.19;

import "@openzeppelin/contracts/access/Ownable.sol";

interface IERC20 {
    function transfer(address to, uint256 value) external returns (bool);
}

contract KERNVest is Ownable {
    /// STRUCTS ///

    struct Term {
        uint256 totalToVest;
        uint256 amountClaimed;
    }

    /// STATE VARIABLES ///

    /// @notice Claim Token
    address public immutable KERN;
    /// @notice Address of deployer
    address public immutable deployer;
    /// @notice Tracks address term info
    mapping(address => Term) public terms;
    /// @notice Tracks address change
    mapping(address => address) public walletChange;
    uint256 public totalAllocated;
    /// @notice Total KERN allocated == 1,000,000
    uint256 public constant MAX_ALLOCATED = 1_000_000 * 1e18;
    /// @notice Timestamp becomes fully vested
    uint256 public immutable fullVest;
    /// @notice Timestamp vesting started
    uint256 public immutable startVest;

    constructor() Ownable() {
        KERN = 0xD7fC610F6595b3aA6E24466b5cA166D10a0fbdcb;
        deployer = msg.sender;

        startVest = 1706200400;
        fullVest = 1706200400 + 365 days;
    }

    /// MUTABLE FUNCTIONS ///

    /// @notice         Allows wallet to claim KERN
    /// @param _to      Address to transfer minted KERN to
    /// @param _amount  Amount of KERN to claim
    function claim(address _to, uint256 _amount) external {
        require(redeemableFor(msg.sender) >= _amount, "Claim more than vested");
        IERC20(KERN).transfer(_to, _amount);
        terms[msg.sender].amountClaimed += _amount;
    }

    /// WALLET CHANGES ///

    /// @notice             Allows address to push terms to new address
    /// @param _newAddress  New wallets address
    function pushWalletChange(address _newAddress) external {
        require(terms[msg.sender].totalToVest != 0, "No wallet to change");
        walletChange[msg.sender] = _newAddress;
    }

    /// @notice             Allows new address to pull terms
    /// @param _oldAddress  Old address to pull terms for
    function pullWalletChange(address _oldAddress) external {
        require(walletChange[_oldAddress] == msg.sender, "Old wallet did not push");
        require(terms[msg.sender].totalToVest == 0, "Wallet already exists");

        walletChange[_oldAddress] = address(0);
        terms[msg.sender] = terms[_oldAddress];
        delete terms[_oldAddress];
    }

    /// VIEW FUNCTIONS ///

    /// @notice       Returns % of overall vesting completed
    /// @return uint  Percent of overall vesting 1e8 == 10%
    function percentVested() public view returns (uint256) {
        if (block.timestamp > fullVest) return 1e9;

        uint256 timeSinceVestStart = block.timestamp - startVest;

        return ((1e9 * timeSinceVestStart) / 365 days);
    }

    /// @notice          View KERN redeemable for `_address`
    /// @param _address  Redeemable for address
    /// @return uint256  KERN redeemable for `_address`
    function redeemableFor(address _address) public view returns (uint256) {
        Term memory info = terms[_address];
        uint256 totalReedemable = (info.totalToVest * percentVested()) / 1e9;

        if (totalReedemable < info.amountClaimed) return 0;
        return totalReedemable - info.amountClaimed;
    }

    /// OWNER FUNCTIONS ///

    /// @notice         Set terms for new address
    /// @notice         Cannot lower for address or exceed maximum total allocation
    /// @param _address Address of who to set terms for
    /// @param _amount  Amount of KERN to vest  
    function setTerms(address _address, uint256 _amount) external {
        require(msg.sender == owner() || msg.sender == deployer, "msg.sender not approved");
        require(terms[_address].totalToVest == 0, "Address already exists");
        terms[_address] = Term({totalToVest: _amount, amountClaimed: 0});
        require(totalAllocated + _amount <= MAX_ALLOCATED, "Cannot allocate more than 1,000,000 KERN");
        totalAllocated += _amount;
    }
}
