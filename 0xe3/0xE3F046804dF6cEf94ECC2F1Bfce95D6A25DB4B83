
// File: src/RFRMBonding.sol
// SPDX-License-Identifier: MIT

/**
 * @title RFRM Bonding
 * @notice A contract for purchasing RFRM tokens with various locking mechanisms.
 * @dev This contract allows users to buy RFRM tokens, with options for different locking periods and discounts.
 * @author Reform DAO
 */

pragma solidity 0.8.23;

// Import necessary OpenZeppelin contracts
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";
import { Address } from "@openzeppelin/contracts/utils/Address.sol";
import { ReentrancyGuard } from "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import { Pausable } from "@openzeppelin/contracts/security/Pausable.sol";

// Import external interfaces
import { IStaking } from "./interface/IStaking.sol";
import { IOracle } from "./interface/IOracle.sol";

// Define the ERC20 interface for use in the contract
interface IERC20 {
    function decimals() external view returns (uint8);

    function approve(address spender, uint256 amount) external returns (bool);

    function transfer(address to, uint256 amount) external returns (bool);

    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

interface USDTIERC20 {
    function decimals() external view returns (uint8);

    function transfer(address to, uint value) external;

    function transferFrom(address from, address to, uint value) external;

    function approve(address spender, uint value) external;
}

// The main RFRM Bonding contract
contract RFRMBonding is Ownable, ReentrancyGuard, Pausable {
    using Address for address;

    // RFRM Token
    IERC20 public immutable rfrm;

    // Initial price of RFRM token in cents (0.03$)
    uint256 public initialPrice = 0.03 * 10 ** 6;

    // Flag indicating whether dynamic pricing is used
    bool public isDynamicPriceUsed;

    // Start time for the sale
    uint32 public startTime;

    // Time until which the maximum cap is active
    uint32 public limitActiveTill;

    // Maximum amount that can be bought at initial stages
    uint256 public earlyBuyLimit;

    // Actual bought tokens from the bonding contract
    uint256 public totalActualBought;

    // Staking contract interface
    IStaking public immutable staking;

    // Oracle contract interface
    IOracle public immutable oracle;

    // USDC token contract interface
    IERC20 internal immutable usdc;

    // USDT token contract interface
    USDTIERC20 internal immutable usdt;

    // Address where payments are received
    address public paymentReceiver;

    // Mapping of discounts per lock period (in percentage, 2 decimals)
    mapping(uint8 => uint256) public discountPerLock;

    // Mapping of whether a lock period is disabled or not
    mapping(uint8 => bool) public isNotDisabled;

    // Mapping of total bought tokens by a user
    mapping(address => uint256) public totalBought;

    // Mapping of whether a contract is whitelisted or not
    mapping(address => bool) public isWhitelisted;

    // Custom error messages
    error ContractNotAllowed();
    error ZeroAddress();
    error InvalidLimit();
    error InvalidInput();
    error BondNotActive();
    error BondDisabled();
    error MaxLimitExceeded();
    error InsufficientFunds();
    error InvalidPaymentToken();
    error InvalidBuyAmount();

    // Modifier to ensure transactions are not initiated by other contracts
    modifier notContract() {
        // solhint-disable-next-line avoid-tx-origin
        if ((msg.sender.isContract() || msg.sender != tx.origin) && !isWhitelisted[msg.sender]) {
            revert ContractNotAllowed();
        }
        _;
    }

    // Event emitted when tokens are purchased
    event TokensPurchased(
        address indexed user,
        uint256 indexed amount,
        uint256 indexed price,
        address purchaseToken,
        uint8 lockId
    );

    // Event emitted when sale limits are changed
    event LimitsChanged(uint32 startTime, uint32 limitActive, uint256 earlyLimit);

    // Event emitted when discounts are changed
    event DiscountsChanged(uint8[] lockIds, uint256[] discounts);

    // Event emitted when price information is changed
    event PriceInfoChanged(uint256 newPrice, bool isDynamicUsed);

    // Event emitted when contract state is changed (paused/unpaused)
    event ContractStateChanged(bool isPaused);

    // Event emitted when payment receiver address is changed
    event PaymentReceiverChanged(address newReceiver);

    /**
     * @dev Constructor to initialize the RFRM Bonding contract.
     * @param _rfrm Address of the RFRM token.
     * @param _staking Address of the staking contract.
     * @param _oracle Address of the oracle contract.
     * @param _usdc Address of the USDC token contract.
     * @param _usdt Address of the USDT token contract.
     * @param _receiver Address to receive payments.
     * @param _startTime Start time of the sale.
     * @param _limitActive Time until which the maximum cap is active.
     * @param _earlyLimit Maximum amount that can be bought at initial stages.
     */
    constructor(
        address _rfrm,
        address _staking,
        address _oracle,
        address _usdc,
        address _usdt,
        address _receiver,
        uint32 _startTime,
        uint32 _limitActive,
        uint256 _earlyLimit
    ) {
        if (_rfrm == address(0) || _staking == address(0) || _oracle == address(0)) {
            revert ZeroAddress();
        }
        rfrm = IERC20(_rfrm);
        staking = IStaking(_staking);
        oracle = IOracle(_oracle);
        usdc = IERC20(_usdc);
        usdt = USDTIERC20(_usdt);
        paymentReceiver = _receiver;
        startTime = _startTime;
        limitActiveTill = _limitActive;
        earlyBuyLimit = _earlyLimit;

        rfrm.approve(address(staking), type(uint256).max);
    }

    /**
     * @dev Set new sale limits.
     * @param _startTime New start time for the sale.
     * @param _limitActive New time until which the maximum cap is active.
     * @param _earlyLimit New maximum amount that can be bought at initial stages.
     */
    function setLimits(uint32 _startTime, uint32 _limitActive, uint256 _earlyLimit) external onlyOwner {
        if (_limitActive < _startTime) {
            revert InvalidLimit();
        }
        limitActiveTill = _limitActive;
        earlyBuyLimit = _earlyLimit;
        startTime = _startTime;
        emit LimitsChanged(_startTime, _limitActive, _earlyLimit);
    }

    /**
     * @dev Set discounts for specific lock periods.
     * @param _lockIds Array of lock period IDs.
     * @param _discounts Array of corresponding discounts (in percentage, 2 decimals).
     */
    function setDiscounts(uint8[] calldata _lockIds, uint256[] calldata _discounts) external onlyOwner {
        if (_lockIds.length != _discounts.length) {
            revert InvalidInput();
        }
        for (uint256 i = 0; i < _lockIds.length; i++) {
            discountPerLock[_lockIds[i]] = _discounts[i];
        }
        emit DiscountsChanged(_lockIds, _discounts);
    }

    /**
     * @dev Set whitelisting status for contracts.
     * @param _contracts Array of contract addresses.
     * @param _isWhitelisted Boolean indicating whether contracts should be whitelisted.
     */
    function setWhitelist(address[] calldata _contracts, bool _isWhitelisted) external onlyOwner {
        for (uint256 i = 0; i < _contracts.length; i++) {
            isWhitelisted[_contracts[i]] = _isWhitelisted;
        }
    }

    /**
     * @dev Set the status of lock periods.
     * @param _lockIds Array of lock period IDs.
     * @param _isNotDisabled Array of corresponding statuses (whether lock periods are disabled).
     */
    function setBondStatus(uint8[] calldata _lockIds, bool[] calldata _isNotDisabled) external onlyOwner {
        if (_lockIds.length != _isNotDisabled.length) {
            revert InvalidInput();
        }
        for (uint256 i = 0; i < _lockIds.length; i++) {
            isNotDisabled[_lockIds[i]] = _isNotDisabled[i];
        }
    }

    /**
     * @dev Set new price information for token purchases.
     * @param _newPrice New initial price of the RFRM token in cents (0.03$).
     * @param _isDynamicUsed Boolean indicating whether dynamic pricing is used.
     */
    function setPriceInfo(uint256 _newPrice, bool _isDynamicUsed) external onlyOwner {
        initialPrice = _newPrice;
        isDynamicPriceUsed = _isDynamicUsed;
        emit PriceInfoChanged(_newPrice, _isDynamicUsed);
    }

    /**
     * @dev Set the contract state (paused or unpaused).
     * @param _isPaused Boolean indicating whether the contract should be paused.
     */
    function setContractState(bool _isPaused) external onlyOwner {
        if (_isPaused) {
            _pause();
        } else {
            _unpause();
        }
        emit ContractStateChanged(_isPaused);
    }

    /**
     * @dev Set a new payment receiver address.
     * @param _newReceiver Address where payments should be received.
     */
    function setReceiver(address _newReceiver) external onlyOwner {
        if (_newReceiver == address(0)) {
            revert ZeroAddress();
        }
        paymentReceiver = _newReceiver;
        emit PaymentReceiverChanged(_newReceiver);
    }

    /**
     * @dev Transfer tokens from the contract to an address.
     * @param _token Address of the token to be transferred.
     * @param _to Address to which tokens should be transferred.
     * @param _amount Amount of tokens to transfer.
     */
    function transferToken(address _token, address _to, uint256 _amount) external onlyOwner {
        if (_to == address(0)) {
            revert ZeroAddress();
        }
        if (_token == address(0)) {
            Address.sendValue(payable(_to), _amount);
        } else {
            IERC20(_token).transfer(_to, _amount);
        }
    }

    /**
     * @dev Buy RFRM tokens with specified parameters.
     * @param _amount Amount of tokens to buy.
     * @param _token Payment token (address(0) for ETH, or USDC/USDT token addresses).
     * @param _lockId Lock period ID.
     */
    function buyRFRM(
        uint256 _amount,
        address _token,
        uint8 _lockId
    ) external payable notContract nonReentrant whenNotPaused {
        if (block.timestamp < startTime) {
            revert BondNotActive();
        }
        if (!isNotDisabled[_lockId]) {
            revert BondDisabled();
        }
        if (block.timestamp <= limitActiveTill) {
            if (totalBought[msg.sender] + _amount > earlyBuyLimit) {
                revert MaxLimitExceeded();
            }
        }

        uint256 price;
        uint256 discountedPrice;
        if (_token == address(0)) {
            discountedPrice = getDiscountedPriceInETH(_lockId, _amount);
            if (msg.value < discountedPrice) {
                revert InsufficientFunds();
            }

            Address.sendValue(payable(paymentReceiver), discountedPrice);
            // Refund if necessary
            if (msg.value > discountedPrice) {
                Address.sendValue(payable(msg.sender), msg.value - discountedPrice);
            }
        } else {
            if (_token == address(usdc)) {
                discountedPrice = getDiscountedPriceInUSDC(_lockId, _amount);
                usdc.transferFrom(msg.sender, paymentReceiver, discountedPrice);
            } else if (_token == address(usdt)) {
                discountedPrice = getDiscountedPriceInUSDT(_lockId, _amount);
                usdt.transferFrom(msg.sender, paymentReceiver, discountedPrice);
            } else {
                revert InvalidPaymentToken();
            }
        }

        if (discountedPrice <= 0) {
            revert InvalidBuyAmount();
        }

        totalBought[msg.sender] += _amount;
        uint256[] memory amt = new uint256[](1);
        amt[0] = _amount;
        staking.deposit(0, _lockId, msg.sender, amt);
        totalActualBought += _amount;

        emit TokensPurchased(msg.sender, _amount, price, _token, _lockId);
    }

    /**
     * @dev Get the discounted price for a purchase in ETH.
     * @param _lockId Lock period ID.
     * @param _amount Amount of tokens to buy.
     * @return discountedPrice Discounted price in ETH.
     */
    function getDiscountedPriceInETH(uint8 _lockId, uint256 _amount) public view returns (uint256 discountedPrice) {
        uint256 price = isDynamicPriceUsed
            ? oracle.getPriceInETH(_amount)
            : oracle.convertUSDToETH((initialPrice * _amount) / 10 ** rfrm.decimals());
        discountedPrice = price - ((price * discountPerLock[_lockId]) / 10000);
    }

    /**
     * @dev Get the discounted price for a purchase in USDT.
     * @param _lockId Lock period ID.
     * @param _amount Amount of tokens to buy.
     * @return discountedPrice Discounted price in USDT.
     */
    function getDiscountedPriceInUSDT(uint8 _lockId, uint256 _amount) public view returns (uint256 discountedPrice) {
        uint256 price = isDynamicPriceUsed
            ? oracle.getPriceInUSDT(_amount)
            : (initialPrice * _amount) / 10 ** rfrm.decimals();
        discountedPrice = price - ((price * discountPerLock[_lockId]) / 10000);
    }

    /**
     * @dev Get the discounted price for a purchase in USDC.
     * @param _lockId Lock period ID.
     * @param _amount Amount of tokens to buy.
     * @return discountedPrice Discounted price in USDC.
     */
    function getDiscountedPriceInUSDC(uint8 _lockId, uint256 _amount) public view returns (uint256 discountedPrice) {
        uint256 price = isDynamicPriceUsed
            ? oracle.getPriceInUSDC(_amount)
            : (initialPrice * _amount) / 10 ** rfrm.decimals();
        discountedPrice = price - ((price * discountPerLock[_lockId]) / 10000);
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: lib/openzeppelin-contracts/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: src/interface/IStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.23;

interface IStaking {
    function add(
        uint8 _isInputNFT,
        uint8 _isVested,
        uint256 _allocPoint,
        address _input,
        uint256 _startIdx,
        uint256 _endIdx
    ) external;

    function canWithdraw(uint8 _lid, address _user) external view returns (bool);

    function claimReward(uint256 _pid) external;

    function deposit(uint256 _pid, uint8 _lid, address _benificiary, uint256[] memory _amounts) external;

    function feeWallet() external view returns (address);

    function getDepositedIdsOfUser(uint256 _pid, address _user) external view returns (uint256[] memory);

    function getRewardPerBlock() external view returns (uint256 rpb);

    function massUpdatePools() external;

    function onERC721Received(address, address, uint256, bytes memory) external returns (bytes4);

    function owner() external view returns (address);

    function pendingTkn(uint256 _pid, address _user) external view returns (uint256);

    function percPerDay() external view returns (uint16);

    function poolInfo(
        uint256
    )
        external
        view
        returns (
            uint8 isInputNFT,
            uint8 isVested,
            uint32 totalInvestors,
            address input,
            uint256 allocPoint,
            uint256 lastRewardBlock,
            uint256 accTknPerShare,
            uint256 startIdx,
            uint256 endIdx,
            uint256 totalDeposit
        );

    function poolLength() external view returns (uint256);

    function poolLockInfo(uint256) external view returns (uint32 multi, uint32 claimFee, uint32 lockPeriodInSeconds);

    function renounceOwnership() external;

    function reward() external view returns (address);

    function rewardWallet() external view returns (address);

    function set(uint256 _pid, uint256 _allocPoint, uint8 _isVested, uint256 _startIdx, uint256 _endIdx) external;

    function setPercentagePerDay(uint16 _perc) external;

    function setPoolLock(uint256 _lid, uint32 _multi, uint32 _claimFee, uint32 _lockPeriod) external;

    function setVesting(address _vesting) external;

    function setWallets(address _reward, address _feeWallet) external;

    function startBlock() external view returns (uint256);

    function totalActualDeposit() external view returns (uint256);

    function totalAllocPoint() external view returns (uint256);

    function transferOwnership(address newOwner) external;

    function updatePool(uint256 _pid) external;

    function userInfo(
        uint256,
        address
    ) external view returns (uint256 totalDeposit, uint256 rewardDebt, uint256 totalClaimed, uint256 depositTime);

    function userLockInfo(uint8, address) external view returns (uint256 totalActualDeposit, uint256 depositTime);

    function vestingCont() external view returns (address);

    function withdraw(uint256 _pid, uint8 _lid, uint256[] memory _amounts) external;
}


// File: src/interface/IOracle.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.23;

interface IOracle {
    function consult(address tokenIn, uint256 amountIn, address tokenOut) external view returns (uint256 amountOut);

    function convertETHToUSDC(uint256 ethAmount) external view returns (uint256 usdAmount);

    function convertETHToUSDT(uint256 ethAmount) external view returns (uint256 usdAmount);

    function convertUSDCToETH(uint256 usdAmount) external view returns (uint256 ethAmount);

    function convertUSDTToETH(uint256 usdAmount) external view returns (uint256 ethAmount);

    function convertUSDToETH(uint256 usdAmount) external view returns (uint256 ethAmount);

    function ethusd() external view returns (address);

    function getAllObservations() external view returns (SlidingWindowOracle.Observation[] memory);

    function getFirstObservationInWindow()
        external
        view
        returns (SlidingWindowOracle.Observation memory firstObservation);

    function getPriceInETH(uint256 tokenAmount) external view returns (uint256 ethAmount);

    function getPriceInUSDC(uint256 tokenAmount) external view returns (uint256 usdAmount);

    function getPriceInUSDT(uint256 tokenAmount) external view returns (uint256 usdAmount);

    function granularity() external view returns (uint8);

    function observationIndexOf(uint256 timestamp) external view returns (uint8 index);

    function owner() external view returns (address);

    function pair() external view returns (address);

    function pairObservations(
        uint256
    ) external view returns (uint256 timestamp, uint256 price0Cumulative, uint256 price1Cumulative);

    function periodSize() external view returns (uint256);

    function priceFeed() external view returns (address);

    function renounceOwnership() external;

    function setChainlink(address _feed, bool _isUsing) external;

    function token() external view returns (address);

    function transferOwnership(address newOwner) external;

    function update() external;

    function usdcusd() external view returns (address);

    function usdtusd() external view returns (address);

    function weth() external view returns (address);

    function windowSize() external view returns (uint256);
}

interface SlidingWindowOracle {
    struct Observation {
        uint256 timestamp;
        uint256 price0Cumulative;
        uint256 price1Cumulative;
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

