
// File: ArchitexMegaPool.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./Ownable.sol";
import "./ReentrancyGuard.sol";

contract ArchitexMegaPool is Ownable, ReentrancyGuard {
    struct RewardsAdjustment {
        uint256 timestamp;
        uint256 totalStaked;
        address[] rewards;
        uint256[] rates;
    }

    struct UserInfo {
        uint256 balanceStaked;
        uint256 unlockTime;
        uint256 lastClaimTimestamp;
        uint256 lastClaimAdjustmentIndex;
    }

    IERC20 public stakedERC20;
    address public stakedAddr;

    uint256 public totalStaked;

    address[] public rewards;
    uint256[] public rates;

    mapping(address => UserInfo) public usersInfo;

    RewardsAdjustment[] public adjustments;
    uint256 public adjustmentsLength;
    uint256 public adjustmentDuration = 3;

    uint256 public lockDuration = 14;

    bool public allowUnstaking;
    bool public pauseStake;
    bool public pauseClaim;
    bool public pauseUnstake;

    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);
    event RewardPaid(address indexed user, address[] rewards, uint256[] amounts);

    constructor(address _stakedAddr, address[] memory _rewards, uint256[] memory _rates) Ownable(msg.sender) {
        require(_rewards.length == _rates.length, "Rewards and Rates aren't the same length");

        stakedAddr = _stakedAddr;
        stakedERC20 = IERC20(stakedAddr);

        for (uint256 i = 0; i < _rewards.length; i++) {
            rewards.push(_rewards[i]);
            rates.push(_rates[i]);
        }

        adjustments.push(RewardsAdjustment(
            block.timestamp, totalStaked, rewards, rates
        ));
        adjustmentsLength += 1;
    }

    function pause(bool _stakeValue, bool _claimValue, bool _unstakeValue) external onlyOwner {
        pauseStake = _stakeValue;
        pauseClaim = _claimValue;
        pauseUnstake = _unstakeValue;
    }

    function getRewards() external view returns (address[] memory) {
        return rewards;
    }

    function getRates() external view returns (uint256[] memory) {
        return rates;
    }

    function setAllowUnstaking(bool _value) external onlyOwner {
        allowUnstaking = _value;
    }

    function setAdjustementDuration(uint256 _duration) external onlyOwner {
        adjustmentDuration = _duration;
    }

    function editAdjustementRate(uint256 _indexAdjustement, address _reward, uint256 _newRate) external onlyOwner {
        uint256 _indexReward = indexOf(adjustments[_indexAdjustement].rewards, _reward);

        adjustments[_indexAdjustement].rates[_indexReward] = _newRate;
    }

    function setLockDuration(uint256 _duration) external onlyOwner {
        lockDuration = _duration;
    }

    function emergencyWithdraw(bool _staked, bool _allReward, address _oneReward) external onlyOwner {
        if (_staked) stakedERC20.transfer(msg.sender, totalStaked);

        if (_allReward) {
            for (uint256 i = 0; i < rewards.length; i++) {
                if (rewards[i] == stakedAddr) IERC20(rewards[i]).transfer(msg.sender, IERC20(rewards[i]).balanceOf(address(this)) - totalStaked);
                else IERC20(rewards[i]).transfer(msg.sender, IERC20(rewards[i]).balanceOf(address(this)));
            }
        } else if (_oneReward != address(0)) {
            if (_oneReward == stakedAddr) IERC20(_oneReward).transfer(msg.sender, IERC20(_oneReward).balanceOf(address(this)) - totalStaked);
            else IERC20(_oneReward).transfer(msg.sender, IERC20(_oneReward).balanceOf(address(this)));
        }
    }

    function adjustRewards(address _reward, uint256 _newRate) external onlyOwner {
        uint256 index = indexOf(rewards, _reward);

        if (index == 99999) {
            rewards.push(_reward);
            rates.push(_newRate);
        } else {
            rates[index] = _newRate;
        }

        if (block.timestamp - (adjustmentDuration * 1 days) >= adjustments[adjustmentsLength - 1].timestamp) {
            adjustments.push(RewardsAdjustment(
                block.timestamp, totalStaked, rewards, rates
            ));
            adjustmentsLength += 1;
        } else {
            adjustments[adjustmentsLength - 1].rates = rates;
        }
    }

    function stake(uint256 _amount) external nonReentrant {
        require(!pauseStake, "Stake paused");
        require(stakedERC20.balanceOf(msg.sender) >= _amount, "Insufficient balance");

        UserInfo memory userInfo = usersInfo[msg.sender];

        if (userInfo.balanceStaked > 0) {
            _claim(msg.sender);
        }

        stakedERC20.transferFrom(msg.sender, address(this), _amount);

        _manageAdjustment();

        userInfo.lastClaimTimestamp = block.timestamp;
        userInfo.lastClaimAdjustmentIndex = adjustmentsLength > 0 ? adjustmentsLength - 1 : 0;

        userInfo.balanceStaked += _amount;
        userInfo.unlockTime = block.timestamp + (lockDuration * 1 days);
        usersInfo[msg.sender] = userInfo;

        totalStaked += _amount;
        adjustments[adjustmentsLength - 1].totalStaked = totalStaked;

        emit Staked(msg.sender, _amount);
    }

    function unstake(uint256 _amount) external nonReentrant {
        require(!pauseUnstake, "Unstake paused");

        UserInfo memory userInfo = usersInfo[msg.sender];

        require(userInfo.balanceStaked >= _amount, "Insufficient stake");
        require(allowUnstaking || block.timestamp >= userInfo.unlockTime, "Lock has not expired");

        _claim(msg.sender);

        _manageAdjustment();

        userInfo.lastClaimTimestamp = block.timestamp;
        userInfo.lastClaimAdjustmentIndex = adjustmentsLength > 0 ? adjustmentsLength - 1 : 0;
        userInfo.balanceStaked -= _amount;
        usersInfo[msg.sender] = userInfo;

        stakedERC20.transfer(msg.sender, _amount);

        totalStaked -= _amount;
        adjustments[adjustmentsLength - 1].totalStaked = totalStaked;

        emit Unstaked(msg.sender, _amount);
    }

    function claim() public nonReentrant {
        require(!pauseClaim, "Claim paused");

        UserInfo memory userInfo = usersInfo[msg.sender];

        require(userInfo.balanceStaked > 0, "No stake");

        _claim(msg.sender);

        userInfo.lastClaimTimestamp = block.timestamp;
        userInfo.lastClaimAdjustmentIndex = adjustmentsLength > 0 ? adjustmentsLength - 1 : 0;

        usersInfo[msg.sender] = userInfo;
    }

    function earned(address _user) public view returns (uint256[] memory) {
        UserInfo memory userInfo = usersInfo[_user];

        uint256[] memory _amountRewards;

        if (userInfo.balanceStaked == 0) {
            return _amountRewards;
        }

        _amountRewards = new uint256[](rewards.length);

        RewardsAdjustment memory adjustment;
        
        uint256 time = userInfo.lastClaimTimestamp;
        uint256 elapsed;

        for (uint256 i = userInfo.lastClaimAdjustmentIndex; i < adjustmentsLength; i++) {
            adjustment = adjustments[i];

            if (i + 1 < adjustmentsLength) {
                elapsed = adjustments[i + 1].timestamp - time;
                time = adjustments[i + 1].timestamp;
            } else {
                elapsed = block.timestamp - time;
            }

            for (uint256 j = 0; j < rewards.length; j++) {
                if (adjustment.rates.length > j) _amountRewards[j] += userInfo.balanceStaked * adjustment.rates[j] * elapsed / adjustment.totalStaked;
                else _amountRewards[j] += 0;
            }
        }

        return _amountRewards;
    }

    function _claim(address _user) internal {
        if (pauseClaim) return;

        uint256[] memory _amounts = earned(_user);

        for (uint256 i = 0; i < rewards.length; i++) {
            if (_amounts[i] > 0) IERC20(rewards[i]).transfer(_user, _amounts[i]);
        }

        emit RewardPaid(_user, rewards, _amounts);
    }

    function _manageAdjustment() internal {
        if (block.timestamp - (adjustmentDuration * 1 days) >= adjustments[adjustmentsLength - 1].timestamp) {
            adjustments.push(RewardsAdjustment(
                block.timestamp, totalStaked, rewards, rates
            ));
            adjustmentsLength += 1;
        }
    }

    function indexOf(address[] memory _array, address _element) internal pure returns (uint256) {
        for (uint256 i = 0; i < _array.length; i++) {
            if (_array[i] == _element) return i;
        }

        return 99999;
    }
}


// File: Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

// File: IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC-20 standard as defined in the ERC.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

// File: Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import {Context} from "./Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}
