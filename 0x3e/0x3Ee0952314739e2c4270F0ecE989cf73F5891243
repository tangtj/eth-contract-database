
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/Factory.sol
// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity 0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";

/// @title Factory
/// @author DeFiGeek Community Japan
/// @notice Manage auction templates. Clone and deploy auction contracts from templates
contract Factory is Ownable {
    /// @param implementation implementation address
    /// @param initializeSignature function signature of initialize auction
    /// @param transferSignature function signature of transfer token
    struct TemplateInfo {
        address implementation;
        bytes4 initializeSignature;
        bytes4 transferSignature;
    }

    mapping(bytes32 => TemplateInfo) public templates;
    mapping(address => bool) public auctions;

    /// @notice Record deployed parameters
    /// @param templateName Template name of the deployed auction
    /// @param deployedAddress Deployed address of the auction
    event Deployed(bytes32 templateName, address deployedAddress);

    /// @notice Record information of the added template
    /// @param templateName The name of the template
    /// @param implementationAddr The mplementation address of the template (auction contract)
    event TemplateAdded(
        bytes32 indexed templateName,
        address indexed implementationAddr
    );

    /// @notice Record information of the removed template
    /// @param templateName The name of the template
    /// @param implementationAddr The implementation address of the template (auction contract)
    event TemplateRemoved(
        bytes32 indexed templateName,
        address indexed implementationAddr
    );

    /// @notice Deploy clone auction
    /// @param templateName_ The name of the template
    /// @param args_ Template-specific parameters concatenated with abi.encode to bytes
    function deployAuction(
        bytes32 templateName_,
        bytes calldata args_
    ) external payable returns (address deployedAddr) {
        /* 1. Args must be non-empty and allowance is enough. */
        TemplateInfo memory templateInfo = templates[templateName_];
        address templateAddr = templateInfo.implementation;
        require(templateAddr != address(0), "No such template in the list.");

        /* 2. Make a clone. */
        deployedAddr = _createClone(templateAddr);

        emit Deployed(templateName_, deployedAddr);

        /* 3. Initialize it. */
        (bool success, bytes memory result) = deployedAddr.call{
            value: msg.value
        }(bytes.concat(templateInfo.initializeSignature, args_));
        if (!success) {
            assembly {
                revert(add(result, 32), mload(result))
            }
        }

        /* 4. Fund it. */
        // Skip if transferSignature is empty
        if (templateInfo.transferSignature != bytes4(0)) {
            (success, result) = deployedAddr.delegatecall(
                bytes.concat(
                    templateInfo.transferSignature,
                    result,
                    abi.encode(deployedAddr)
                )
            );
            if (!success) {
                assembly {
                    revert(add(result, 32), mload(result))
                }
            }
        }

        /* 5. Register the deployed auction. */
        auctions[deployedAddr] = true;
    }

    /// @notice Add template with required information
    /// @param templateName_ The name of the template
    /// @param implementationAddr_ implementation address
    /// @param initializeSignature_ function signature of initialize auction
    /// @param transferSignature_ function signature of transfer token
    function addTemplate(
        bytes32 templateName_,
        address implementationAddr_,
        bytes4 initializeSignature_,
        bytes4 transferSignature_
    ) external onlyOwner {
        require(
            templates[templateName_].implementation == address(0),
            "This template name is already taken."
        );

        templates[templateName_] = TemplateInfo(
            implementationAddr_,
            initializeSignature_,
            transferSignature_
        );

        emit TemplateAdded(templateName_, implementationAddr_);
    }

    /// @notice Remove template
    /// @param templateName_ The name of the template
    function removeTemplate(bytes32 templateName_) external onlyOwner {
        TemplateInfo memory templateInfo = templates[templateName_];
        delete templates[templateName_];

        emit TemplateRemoved(templateName_, templateInfo.implementation);
    }

    /// @dev Deploy implementation's minimal proxy by create
    /// @param implementation_ Template address
    /// @return instance Deployed address
    function _createClone(
        address implementation_
    ) internal returns (address instance) {
        /// @solidity memory-safe-assembly
        assembly {
            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes
            // of the `implementation` address with the bytecode before the address.
            mstore(
                0x00,
                or(
                    shr(0xe8, shl(0x60, implementation_)),
                    0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000
                )
            )
            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.
            mstore(
                0x20,
                or(shl(0x78, implementation_), 0x5af43d82803e903d91602b57fd5bf3)
            )
            instance := create(0, 0x09, 0x37)
        }
        require(instance != address(0), "ERC1167: create failed");
    }
}

