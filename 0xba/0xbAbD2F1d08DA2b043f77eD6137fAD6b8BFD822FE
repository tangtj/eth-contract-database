// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: contracts/Swaptoken.sol

//SPDX-License-Identifier:MIT


pragma solidity ^0.8.20;

contract Swap_Token {
    address public owner;
    IERC20 public token;
    uint public ratio = 12000000; 
    bool public sale = false;
    uint8 public percentBonus = 8 ; 
    bool public status = false;

    struct Account {
        uint quantity;
        uint bonus;
        uint totalRewards;
    }

    uint totalBonus = 0;
    uint totalQuantity = 0;

    mapping(address => Account) accounts;
                            
    constructor(address _token){
        token = IERC20(_token);
        owner = msg.sender;
    }

    modifier isOwner() {
        require(msg.sender == owner, "You are not the owner");
        _;
    }

    function changeOwner(address _newOwner) external isOwner {
        require(_newOwner != address(0), "Sorry! You enter new  owner address");
        owner = _newOwner;
    }


    function withdraw(uint _amount) public isOwner {
        require(_amount <= address(this).balance, "Insufficient balance");
        payable(owner).transfer(_amount);
    }

    function withdrawToken(uint _amount) public isOwner {
        require(_amount <= token.balanceOf(address(this)), "Insufficient token balance");
        token.transfer(owner, _amount);
    }


    function updateSale() public  isOwner {
        sale = !sale;
    }

    function updateStatus() public  isOwner {
        status = !status;
    }

    function updateBonusPercentage(uint8 _percentBonus) public  isOwner {
        percentBonus = _percentBonus;
    }

    function updateRatio(uint _ratio) public  isOwner {
        ratio = _ratio;
    }

    function buyToken(address _refAccount) public payable {
        require(sale == true, "The system has not opened token sale yet");
        require(msg.sender != _refAccount, "The purchasing account must be different from the referral account" );
        require(token.balanceOf(address(this)) >= msg.value * ratio, "The system is busy, please come back later");
        require(msg.value > 0, "Sorry ETH must be bigger than zero");
        uint _amount = msg.value * ratio;
        accounts[msg.sender].quantity += _amount;
        totalQuantity += _amount;
        if(_refAccount != address(0)){
            uint _percentAmount = (_amount * 5) / 100;
            uint _bonus = (msg.value * percentBonus) / 100; 
            accounts[_refAccount].bonus += _bonus;
            accounts[msg.sender].quantity += _percentAmount;
            totalBonus += _bonus;
        }
    }

     function claimToken() public {
        require(status == true, "The system has not opened token sale yet");
        require(token.balanceOf(address(this)) >= accounts[msg.sender].quantity, "The system is busy, please come back later");
        require(accounts[msg.sender].quantity > 0, "Please buy tokens");
        uint _amount = accounts[msg.sender].quantity;
        token.transfer(msg.sender, _amount);
        accounts[msg.sender].quantity = 0;
    }

    function getRewards() public  {
        require(accounts[msg.sender].bonus > 0 , "No rewards yet");
        require(address(this).balance >= accounts[msg.sender].bonus, "The system is busy, please come back later");
        uint _bonus = accounts[msg.sender].bonus; 
        (bool sent,) = payable(msg.sender).call{value: _bonus}("");
        require(sent, "Failed to send Ether");
        accounts[msg.sender].totalRewards += _bonus;
        totalBonus -= _bonus;
        accounts[msg.sender].bonus = 0;
    }

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }

    function getTokenBalance() public view returns (uint) {
        return token.balanceOf(address(this)); 
    }

    function getTotalBonus() public view returns (uint) {
        return totalBonus; 
    }

     function getTotalQuantity() public view returns (uint) {
        return totalQuantity; 
    }

    function getAccountInfo() public view returns (uint, uint, uint, uint) {
        return (
                    accounts[msg.sender].quantity, 
                    accounts[msg.sender].bonus,
                    accounts[msg.sender].totalRewards,
                    address(msg.sender).balance
                );

    }

}