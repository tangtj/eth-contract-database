
// File: @openzeppelin/contracts/token/ERC721/ERC721.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver(to).onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Counters.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: base64-sol/base64.sol
// SPDX-License-Identifier: MIT

/// @title Base64
/// @author Brecht Devos - <brecht@loopring.org>
/// @notice Provides a function for encoding some bytes in base64
library Base64 {
    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    function encode(bytes memory data) internal pure returns (string memory) {
        if (data.length == 0) return '';
        
        // load the table into memory
        string memory table = TABLE;

        // multiply by 4/3 rounded up
        uint256 encodedLen = 4 * ((data.length + 2) / 3);

        // add some extra buffer at the end required for the writing
        string memory result = new string(encodedLen + 32);

        assembly {
            // set the actual output length
            mstore(result, encodedLen)
            
            // prepare the lookup table
            let tablePtr := add(table, 1)
            
            // input ptr
            let dataPtr := data
            let endPtr := add(dataPtr, mload(data))
            
            // result ptr, jump over length
            let resultPtr := add(result, 32)
            
            // run over the input, 3 bytes at a time
            for {} lt(dataPtr, endPtr) {}
            {
               dataPtr := add(dataPtr, 3)
               
               // read 3 bytes
               let input := mload(dataPtr)
               
               // write 4 characters
               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))
               resultPtr := add(resultPtr, 1)
               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))
               resultPtr := add(resultPtr, 1)
               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))
               resultPtr := add(resultPtr, 1)
               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))
               resultPtr := add(resultPtr, 1)
            }
            
            // padding with '='
            switch mod(mload(data), 3)
            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }
            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }
        }
        
        return result;
    }
}


// File: contracts/BurnNFT.sol
// SPDX-License-Identifier: MIT
/*
   (                          (
 ( )\   (  (         (      ( )\      (
 )((_) ))\ )(   (    )\ )   )((_)  (  )\ ) (
((_)_ /((_|()\  )\ )(()/(  ((_)_   )\(()/( )\
 | _ |_))( ((_)_(_/( )(_))  | _ ) ((_))(_)|(_)
 | _ \ || | '_| ' \)) || |  | _ \/ _ \ || (_-<
 |___/\_,_|_| |_||_| \_, |  |___/\___/\_, /__/
                     |__/             |__/
*/

pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "./MetaDataGenerator.sol";

contract BurnNFT is ERC721 {

    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    event NewToken(address _minter, uint256 _tokenId, uint256 _baseFee);

    uint public limit;
    uint256 public price;
    address public beneficiary;
    uint256 public minBaseFee = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
    uint256 public maxBaseFee = 1;

    mapping(uint256 => uint256) public tokenBaseFee;

    constructor(uint _limit, uint256 _price, address _beneficiary) ERC721("BurnyBoy", "BURN") {
      limit = _limit;
      price = _price;
      beneficiary = _beneficiary;
    }

    function mint() public payable returns (uint256) {

        require(msg.value >= price, "price too low");

        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();
        require(newItemId <= limit, "at limit");

        _safeMint(msg.sender, newItemId);

        uint256 baseFee = block.basefee;
        tokenBaseFee[newItemId] = baseFee;

        if(baseFee > maxBaseFee) {
          maxBaseFee = baseFee;
        }
        if(baseFee < minBaseFee) {
          minBaseFee = baseFee;
        }

        emit NewToken(msg.sender, newItemId, baseFee);

        return newItemId;
    }

    function withdrawFunds() public {
      require(msg.sender == beneficiary, 'only beneficiary');
      uint amount = address(this).balance;

      (bool success,) = beneficiary.call{value: amount}("");
      require(success, "Failed");
    }

    function totalSupply() public view returns (uint256) {
      return _tokenIds.current();
    }

    function tokenURI(uint256 id) public view override returns (string memory) {

        require(_exists(id), "not exist");

        return MetaDataGenerator.tokenURI(
          MetaDataGenerator.MetaDataParams({
            tokenId: id,
            tokenBaseFee:
            tokenBaseFee[id],
            owner: ownerOf(id),
            minBaseFee: minBaseFee,
            maxBaseFee: maxBaseFee,
            fireHeight: 0,
            readableBaseFee: '',
            ownerOrBurniest: ''
            }));

    }
}


// File: contracts/HexStrings.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

library HexStrings {
    bytes16 internal constant ALPHABET = '0123456789abcdef';

    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = '0';
        buffer[1] = 'x';
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = ALPHABET[value & 0xf];
            value >>= 4;
        }
        return string(buffer);
    }
}


// File: contracts/MetaDataGenerator.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import 'base64-sol/base64.sol';
import "@openzeppelin/contracts/utils/Strings.sol";
import './HexStrings.sol';
/// @title NFTSVG
/// @notice Provides a function for generating an SVG associated with a Uniswap NFT
library MetaDataGenerator {

  using Strings for uint256;
  using HexStrings for uint160;

  struct MetaDataParams {
    uint256 tokenId;
    uint256 tokenBaseFee;
    address owner;
    uint256 minBaseFee;
    uint256 maxBaseFee;
    uint fireHeight;
    string readableBaseFee;
    string ownerOrBurniest;
  }

  string internal constant svgStart = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 300 300"><defs><linearGradient id="linear-gradient" x1="150" x2="150" y2="300" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#00bdd0"/><stop offset="1" stop-color="#008ad0"/></linearGradient><linearGradient id="linear-gradient-2" x1="30.7" y1="-8.2" x2="30.7" y2="141.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#f16d76"/><stop offset="1" stop-color="#ffa358"/></linearGradient><linearGradient id="linear-gradient-3" x1="34.5" y1="29.9" x2="34.5" y2="144.9" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffbd58"/><stop offset="1" stop-color="#f6ec47"/></linearGradient><linearGradient id="linear-gradient-4" x1="31.9" y1="2.5" x2="31.9" y2="146.3" xlink:href="#linear-gradient-2"/><linearGradient id="linear-gradient-5" x1="67.8" y1="27.9" x2="67.8" y2="74.5" xlink:href="#linear-gradient-2"/><linearGradient id="linear-gradient-6" x1="36.5" y1="-15.1" x2="36.5" y2="52.8" xlink:href="#linear-gradient-2"/><linearGradient id="linear-gradient-7" x1="33.6" y1="22.5" x2="33.6" y2="148.5" xlink:href="#linear-gradient-3"/><linearGradient id="linear-gradient-8" x1="23.1" y1="-8.3" x2="23.1" y2="155.9" xlink:href="#linear-gradient-2"/><linearGradient id="linear-gradient-9" x1="64.9" y1="6.7" x2="64.9" y2="100" xlink:href="#linear-gradient-2"/><linearGradient id="linear-gradient-10" x1="48.4" y1="-45.8" x2="48.4" y2="80.7" xlink:href="#linear-gradient-2"/><linearGradient id="linear-gradient-11" x1="25.6" y1="8.2" x2="25.6" y2="149.8" xlink:href="#linear-gradient-3"/><linearGradient id="linear-gradient-12" x1="150" y1="300" x2="150" y2="139.8" xlink:href="#linear-gradient-3"/><linearGradient id="linear-gradient-13" x1="96" y1="202.4" x2="150" y2="202.4" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#574581"/><stop offset="1" stop-color="#4c235b"/></linearGradient><linearGradient id="linear-gradient-14" x1="150" y1="202.4" x2="204" y2="202.4" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ea496a"/><stop offset="1" stop-color="#ea6b60"/></linearGradient><linearGradient id="linear-gradient-15" x1="150" y1="153.7" x2="204" y2="153.7" xlink:href="#linear-gradient-14"/><linearGradient id="linear-gradient-16" x1="204" y1="105" x2="150" y2="105" xlink:href="#linear-gradient"/><linearGradient id="linear-gradient-17" x1="96" y1="105" x2="150" y2="105" xlink:href="#linear-gradient-14"/><linearGradient id="linear-gradient-18" x1="96" y1="153.7" x2="150" y2="153.7" xlink:href="#linear-gradient-13"/><linearGradient id="linear-gradient-19" x1="149.1" y1="24" x2="149.1" y2="276" xlink:href="#linear-gradient-13"/><clipPath id="clip-path"><path class="cls-1" d="M0-42.3h300v188.6H0z"/></clipPath><clipPath id="clip-path-2"><path class="cls-1" d="M.4 0h300v300H.4z"/></clipPath><style>.cls-1{fill:none}.cls-2{fill:url(#linear-gradient)}.cls-4{fill:url(#linear-gradient-2)}.cls-5{fill:url(#linear-gradient-3)}.cls-14{fill:url(#linear-gradient-12)}.cls-15{opacity:.2}.cls-16{clip-path:url(#clip-path-2)}.cls-17{fill:#e75a00}.cls-18{fill:url(#linear-gradient-13)}.cls-19{fill:#fff}.cls-20{fill:url(#linear-gradient-14)}.cls-21{fill:url(#linear-gradient-15)}.cls-22{fill:url(#linear-gradient-16)}.cls-23{fill:url(#linear-gradient-17)}.cls-24{fill:url(#linear-gradient-18)}.cls-25{stroke:#fff;stroke-miterlimit:10;fill:url(#linear-gradient-19)}</style></defs><path class="cls-2" d="M0 0h300v300H0z" id="background"/><g id="fire-layer"><g id="Fire_to_move" data-name="Fire to move"><g id="Fire1"><g id="fire-001"><path class="cls-4" d="M-4.4 139.2c-.4-12.2-17.5-31.5-9.6-49s21-13 24-30c0 0 10.3 9.6 1.1 21.6 0 0 13.3-3.8 12.8-14.6s1.5-15.7-7.4-18-22.2-18.4-9.3-35.5c0 0 2.4 14.4 13.8 8.1s20.7-26 1-26.5c0 0 12.3-8.1 19.7.4s-9.4 27-3.5 31.5S52 33.1 51.5 43 35.8 61.8 41.2 66.3s19.3 1.5 19.7-3.3c.3-4.8-7.9-10.6-1-20a18.7 18.7 0 009 11.8c9.9 5.5 12.2 17.8 2.3 26.8-6.7 6.2-15-3.4-15.9 5.9-.6 5.4 21 13 19 29.1-3.7 29.7 9.3 24.5-33.1 24.5-47.6 0-45.6-1.9-45.6-1.9z"/><path class="cls-5" d="M35 145c-62.2 0-33.8-7.3-27-16.2C19.8 113.2-2.7 113.6-2.2 100s8.9-20.3 8.9-20.3-5.2 16 2.2 16.5S24 91 27.9 76c6.6-26.2.5-40.3-8.4-46.2A37.5 37.5 0 0138 39.6c6 6-4.6 17.3-4.3 26.7.7 24.6 34.8 5 31.7-5.8 0 0 9.5 14.8-2.9 17-22.4 4.2-21.4 20.6-13 26s6 16.3 13.6 24.6c10 11 26 16.8-28.3 16.8z"/></g><use href="#fire-001" x="77"/><use href="#fire-001" x="154"/><use href="#fire-001" x="231"/></g><path class="cls-14" d="M0 139.8h300V300H0z"/></g></g><g class="cls-15" id="ray"><g class="cls-16"><path id="ray1" class="cls-17" d="M153.4 383q8.5-.1 16.9-.8L153.4 211z"/></g>';

  string internal constant svgMiddle = '</g><g id="Ether"><path class="cls-18" d="M150 197.4v44.5l-54-79 54 34.5z"/><path class="cls-19" d="M150 242.3a.4.4 0 01-.3-.2l-54-78.9a.4.4 0 01.5-.5l54 34.3a.4.4 0 01.2.4v44.5a.4.4 0 01-.3.4.4.4 0 01-.1 0zm-52.6-78l52.2 76.3v-43z"/><path class="cls-20" d="M204 163l-54 78.9v-44.5l54-34.4z"/><path class="cls-19" d="M150 242.3a.4.4 0 01-.1 0 .4.4 0 01-.3-.4v-44.5a.4.4 0 01.2-.4l54-34.3a.4.4 0 01.5.5l-54 78.9a.4.4 0 01-.3.2zm.4-44.7v43l52.2-76.2z"/><path class="cls-21" d="M204 151.9l-54-30.7v65l54-34.3z"/><path class="cls-19" d="M150 186.7a.4.4 0 01-.4-.4v-65.1a.4.4 0 01.6-.4l54 30.7a.4.4 0 010 .7l-54 34.4a.4.4 0 01-.2 0zm.4-64.8v63.6l52.8-33.6z"/><g><path class="cls-22" d="M204 151.9L150 58v63l54 30.8z"/><path class="cls-19" d="M204 152.3a.4.4 0 01-.2 0l-54-30.8a.4.4 0 01-.2-.3v-63a.4.4 0 01.7-.3l54 93.8a.4.4 0 01-.3.6zM150.4 121l52.5 29.8-52.5-91.2z"/></g><g><path class="cls-23" d="M150 58.1v63L96 152 150 58z"/><path class="cls-19" d="M96 152.3a.4.4 0 01-.3-.6l54-93.8a.4.4 0 01.7.2v63a.4.4 0 01-.2.4l-54 30.7a.4.4 0 01-.2 0zm53.6-92.7l-52.5 91.2 52.5-29.8z"/></g><g><path class="cls-24" d="M150 121.2v65L96 152l54-30.7z"/><path class="cls-19" d="M150 186.7a.4.4 0 01-.2 0l-54-34.5a.4.4 0 010-.7l54-30.7a.4.4 0 01.6.4v65a.4.4 0 01-.4.5zm-53.2-34.8l52.8 33.6V122z"/></g><g><path class="cls-19" d="M203.8 162.7L150 196.9l-53.8-34.2a.4.4 0 00-.5.5l54 78.9a.4.4 0 00.2.1.4.4 0 00.2 0 .4.4 0 00.2 0v-.1l54-78.9a.4.4 0 00-.5-.5zm-54.2 34.9v43l-52.2-76.2zm.8 43v-43l52.2-33.2z"/><path class="cls-19" d="M95.6 151.9a.4.4 0 00.1.2v.1l54 34.4h.1a.4.4 0 00.4 0l54-34.4h.1a.4.4 0 000-.2.4.4 0 000-.1h.1a.4.4 0 000-.2l-54-93.8a.4.4 0 00-.1 0 .3.3 0 00-.1-.1.2.2 0 00-.1 0 .4.4 0 00-.1 0h-.1a.3.3 0 00-.1 0 .3.3 0 00-.1.1l-54 93.8a.4.4 0 000 .2c-.1 0 0 0 0 0zm54-30v63.6L96.8 152zm.8 63.6V122l52.8 30zm0-64.5V59.6l52.5 91.2zm-.8-61.4V121l-52.5 29.8z"/></g></g><g id="Ring"><g id="rotatethis"><path class="cls-25" d="M149 24a126 126 0 10126 126A126 126 0 00149 24zm0 225.3a99.3 99.3 0 1199.4-99.3 99.3 99.3 0 01-99.3 99.3z"/><path id="textcircle" class="cls-1" d="M32 150a118 118 0 10236 0 118 118 0 10-236 0"><animateTransform attributeName="transform" begin="0s" dur="50s" type="rotate" from="0 150 150" to="360 150 150" repeatCount="indefinite"/></path></g></g><defs><style>@keyframes ff{0%,49.9%,to{transform:translate(0,0) scale(1,1)}50%,99.9%{transform:translate(300px,0) scale(-1,1)}}#Fire1{animation:ff 300ms linear infinite normal forwards}text{font-size:16px;font-family:Helvetica,sans-serif;font-weight:900;fill:#fff;letter-spacing:1px}#Ether,#Ring,#background{filter:hue-rotate(';

  function generateConfigString(MetaDataParams memory params) internal pure returns (string memory) {

    if(params.tokenBaseFee < 10000000) {
      params.readableBaseFee = '&lt;0.01 Gwei';
    }

    return string(abi.encodePacked(Strings.toString((params.tokenBaseFee + (params.tokenId * 30)) % 360),
    'deg)}#Fire_to_move{transform:translate(0px,',
    params.fireHeight.toString(),
    'px)}</style></defs><text dy="0"><textPath xlink:href="#textcircle"> / EIP-1559 / #',
    params.tokenId.toString(),
    ' / Basefee: ',
    params.readableBaseFee,
    ' / ',
    params.ownerOrBurniest,
    unicode'🔥🔥🔥🔥🔥🔥🔥🔥',
    '</textPath></text></svg>'));
  }

  function generateRayString() internal pure returns (string memory) {
    uint16[59] memory rotations = [6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,96,102,108,114,120,126,132,138,144,150,156,162,168,174,180,186,192,198,204,210,216,222,228,234,240,246,252,258,264,270,276,282,288,294,300,306,312,318,324,330,336,342,348,354];
    string memory rays = '';
    for (uint i=0; i<rotations.length; i++) {
      rays = string(abi.encodePacked(rays,
        '<use href="#ray1" transform="rotate(',
        Strings.toString(rotations[i]),
        ' 150 150)" />'));
    }

    return rays;
  }

  function appendEmoji(string memory start, string memory emoji, uint emojiCount) internal pure returns (string memory) {
    for (uint i=0; i<emojiCount; i++) {
      start = string(abi.encodePacked(start, emoji));
    }
    return start;
  }

  function generateSVGofTokenById(MetaDataParams memory params) internal pure returns (string memory) {

      uint height = 270;

      if(params.minBaseFee == params.maxBaseFee) {
        params.fireHeight = 0;
      } else {
        params.fireHeight = height*(uint(100)-(uint(100)*(params.tokenBaseFee-params.minBaseFee)/(params.maxBaseFee-params.minBaseFee))) / uint(100);
      }

      if(params.maxBaseFee == params.tokenBaseFee) {
        params.ownerOrBurniest = appendEmoji(unicode'Burniest Boy ',unicode'🔥',30);
      } else if(params.minBaseFee == params.tokenBaseFee) {
        params.ownerOrBurniest = appendEmoji(unicode'Ice cold ',unicode'🧊',30);
      } else if((params.tokenBaseFee / uint(1_000_000_000)) == 69) {
        params.ownerOrBurniest = appendEmoji(unicode'Nice. ',unicode'♋',30);
      } else if((params.tokenBaseFee / uint(1_000_000_000)) == 420) {
        params.ownerOrBurniest = appendEmoji(unicode'Nice. ',unicode'🌲',30);
      } else {
        params.ownerOrBurniest = (uint160(params.owner)).toHexString(20);
      }

      string memory svg = string(abi.encodePacked(
        svgStart,
        generateRayString(),
        svgMiddle,
        generateConfigString(params)
        ));

      return svg;
  }

  function tokenURI(MetaDataParams memory params) internal pure returns (string memory) {

      string memory name = string(abi.encodePacked('Burny Boy #',params.tokenId.toString()));

      if(params.tokenBaseFee < uint(10_000_000)) {
        params.readableBaseFee = string(abi.encodePacked(params.tokenBaseFee.toString(), ' wei'));
        } else if(params.tokenBaseFee < uint(100_000_000)) {
          params.readableBaseFee = string(abi.encodePacked('0.0',Strings.toString(params.tokenBaseFee/uint(10_000_000)), ' Gwei'));
        } else if(params.tokenBaseFee < uint(10_000_000_000)) {
          params.readableBaseFee = string(abi.encodePacked(Strings.toString(params.tokenBaseFee/uint(1_000_000_000)),'.',Strings.toString((params.tokenBaseFee/uint(10_000_000)) % uint(100)), ' Gwei'));
        } else {
          params.readableBaseFee = string(abi.encodePacked(Strings.toString(params.tokenBaseFee/uint(1_000_000_000)), ' Gwei'));
        }

      string memory description = string(abi.encodePacked('When this burny boy was minted, the basefee was ',params.readableBaseFee));
      string memory image = Base64.encode(bytes(generateSVGofTokenById(params)));

      return
          string(
              abi.encodePacked(
                'data:application/json;base64,',
                Base64.encode(
                    bytes(
                          abi.encodePacked(
                              '{"name":"',
                              name,
                              '", "description":"',
                              description,
                              '", "external_url":"https://burnyboys.com/token/',
                              params.tokenId.toString(),
                              '", "attributes": [{"trait_type": "Base fee per gas (wei)", "value": ',
                              Strings.toString(params.tokenBaseFee),
                              '}], "owner":"',
                              (uint160(params.owner)).toHexString(20),
                              '", "image": "',
                              'data:image/svg+xml;base64,',
                              image,
                              '"}'
                          )
                        )
                    )
              )
          );
  }

}

