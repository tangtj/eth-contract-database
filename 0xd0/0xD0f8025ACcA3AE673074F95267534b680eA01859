/**

   ____                             __  __              _____                                     
  / __ \                           |  \/  |            / ____|                                    
 | |  | |_ __ __ _ _ __   __ _  ___| \  / | __ _ _ __ | (___  _   _ _ __ ___  _ __ ___   ___ _ __ 
 | |  | | '__/ _` | '_ \ / _` |/ _ \ |\/| |/ _` | '_ \ \___ \| | | | '_ ` _ \| '_ ` _ \ / _ \ '__|
 | |__| | | | (_| | | | | (_| |  __/ |  | | (_| | | | |____) | |_| | | | | | | | | | | |  __/ |   
  \____/|_|  \__,_|_| |_|\__, |\___|_|  |_|\__,_|_| |_|_____/ \__,_|_| |_| |_|_| |_| |_|\___|_|   
                          __/ |                                                                   
                         |___/                                                                    
                                                                 
*/
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

contract OrangeManSummer {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    string private constant _tokenName = "OrangeManSummer";
    string private constant _tokenSymbol = "OMS";
    uint8 private constant _tokenDecimals = 18;
    uint256 private constant _initialSupply = 100_000_000_000 * 10**_tokenDecimals;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        _balances[msg.sender] = _initialSupply;
        emit Transfer(address(0), msg.sender, _initialSupply);
    }

    function name() external pure returns (string memory) {
        return _tokenName;
    }

    function symbol() external pure returns (string memory) {
        return _tokenSymbol;
    }

    function decimals() external pure returns (uint8) {
        return _tokenDecimals;
    }

    function totalSupply() external pure returns (uint256) {
        return _initialSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        address sender = msg.sender;
        require(sender != recipient, "Transfer to self not allowed");
        _performTransfer(sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        address owner = msg.sender;
        _grantApproval(owner, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        address caller = msg.sender;
        require(caller != sender, "Caller cannot be the sender");
        _useAllowance(sender, caller, amount);
        _performTransfer(sender, recipient, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        address owner = msg.sender;
        _grantApproval(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        address owner = msg.sender;
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedValue, "Allowance below zero");
        unchecked {
            _grantApproval(owner, spender, currentAllowance - subtractedValue);
        }
        return true;
    }

    function _performTransfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "Transfer from zero address");
        require(to != address(0), "Transfer to zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 senderBalance = _balances[from];
        require(senderBalance >= amount, "Transfer amount exceeds balance");
        unchecked {
            _balances[from] = senderBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);
    }

    function _grantApproval(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approval from zero address");
        require(spender != address(0), "Approval to zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _useAllowance(address owner, address spender, uint256 amount) internal {
        uint256 currentAllowance = _allowances[owner][spender];
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "Insufficient allowance");
            unchecked {
                _grantApproval(owner, spender, currentAllowance - amount);
            }
        }
    }
}