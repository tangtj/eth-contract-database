{"CeramicAnchorServiceV2.sol":{"content":"// SPDX-License-Identifier: GPL\npragma solidity ^0.8.13;\n\nimport \"./Ownable.sol\";\n\n\ncontract CeramicAnchorServiceV2 is Ownable {\n\n    //the list of addresses\n    mapping (address =\u003e bool) allowList;\n\n    //when a service is added to allow list \n    event DidAddCas(address indexed _service);\n\n    //when a service was removed from allow list\n    event DidRemoveCas(address indexed _service);\n\n    //upon successful anchor\n    event DidAnchor(address indexed _service, bytes32 _root);\n\n    // Only addresses in the allow list is allowed to anchor\n    modifier onlyAllowed() {\n        require(\n            ( allowList[ msg.sender ] || msg.sender == owner() ), \n            \"Allow List: caller is not allowed\");\n        _;\n    }\n\n    constructor(){}\n\n    /*\n        @name addCas\n        @param address _service - the service to be added\n        @desc add an address to the allow list\n        @note Only owner can add to the allowlist\n    */\n    function addCas(address _service) public onlyOwner {\n        allowList[_service] = true;\n        emit DidAddCas(_service);\n    }\n        \n    /*\n        @name removeCas\n        @param address _service - service to be removed\n        @desc Removal can be performed by the owner or the service itself\n    */\n    function removeCas(address _service) public {\n        // require((owner() == _msgSender()) || (allowList[_msgSender()].allowed \u0026\u0026 _msgSender() == _service), \"Caller is not allowed or the owner\");\n        require((owner() == _msgSender()) || (allowList[_msgSender()] \u0026\u0026 _msgSender() == _service), \"Caller is not allowed or the owner\");\n        delete allowList[_service];\n        emit DidRemoveCas(_service);\n    }\n\n    /*\n        @name isServiceAllowed\n        @param address _service - address to check\n        @desc check if a service/address is allowed\n    */\n    function isServiceAllowed(address _service) public view returns(bool) {\n        return allowList[_service];\n    }\n\n    /* \n        @name anchor\n        @param calldata _root\n        @desc Here _root is a byte representation of Merkle root CID.\n    */\n    function anchorDagCbor(bytes32 _root) public onlyAllowed {\n        emit DidAnchor(msg.sender, _root);\n    }\n    \n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}}