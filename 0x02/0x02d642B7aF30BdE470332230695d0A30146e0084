
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/FairStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract FairStaking is ReentrancyGuard, Ownable {
    struct User {
        uint256 stakedAmount;
        uint256 stakingTimestamp;
        uint256 paidOutRewards;
        uint lockupPeriod;
    }

    mapping(address => User) public users;

    IERC20 public fairToken;
    uint256 public totalStakedAmount;
    uint256 public totalWeight;

    // Total rewards ever deposited
    uint256 public stakingRewardsTotal;
    // Remaining rewards to be claimed
    uint256 public stakingRewardsRemaining;
    // When we started staking
    uint256 public stakingStartTimestamp;
    uint256 public stakingEndTimestamp;

    uint256 public minLockupPeriod = 7 days;
    uint256 public bonus30Days = 50;
    uint256 public bonus90Days = 100;

    uint public constant LOCKUP_WEEK = 0;
    uint public constant LOCKUP_MONTH = 1;
    uint public constant LOCKUP_QUARTER = 2;

    mapping(uint => uint256) public lockupTimes;
    mapping(uint => uint256) public rewardBonuses;

    uint256 public constant SECONDS_IN_YEAR = 365 days;

    event Staked(address indexed user, uint256 amount, uint lockupPeriod);
    event Unstaked(address indexed user, uint256 amount);
    event RewardClaimed(address indexed user, uint256 amount);
    event RewardTokensDeposited(address indexed user, uint256 amount);

    constructor(address _fairToken) {
        fairToken = IERC20(_fairToken);

        stakingRewardsRemaining = 0;
        stakingRewardsTotal = 0;

        lockupTimes[LOCKUP_WEEK] = 7 days;
        lockupTimes[LOCKUP_MONTH] = 30 days;
        lockupTimes[LOCKUP_QUARTER] = 90 days;

        rewardBonuses[LOCKUP_WEEK] = 0;
        rewardBonuses[LOCKUP_MONTH] = 50;
        rewardBonuses[LOCKUP_QUARTER] = 100;

        stakingStartTimestamp = block.timestamp;
        stakingEndTimestamp = block.timestamp + SECONDS_IN_YEAR;
    }

    function depositRewardTokens(uint256 _amount) external {
        fairToken.transferFrom(msg.sender, address(this), _amount);
        stakingRewardsTotal += _amount;
        stakingRewardsRemaining += _amount;

        emit RewardTokensDeposited(msg.sender, _amount);
    }

    function stake(uint256 _amount, uint _lockupPeriod) external nonReentrant {
        require(_amount > 0, "Amount must be greater than 0");
        require(lockupTimes[_lockupPeriod] > 0, "Invalid lockup period");
        require(_lockupPeriod >= users[msg.sender].lockupPeriod, "Cannot decrease lockup period");

        if (users[msg.sender].stakedAmount > 0) {
            claimRewards();
        }

        fairToken.transferFrom(msg.sender, address(this), _amount);

        // Remove the old weight, since it can change if the user is restaking with a different lockup period.
        totalWeight -= getUserWeight(msg.sender);
        users[msg.sender].stakedAmount += _amount;
        users[msg.sender].lockupPeriod = _lockupPeriod;
        totalWeight += getUserWeight(msg.sender);

        // Resetting staking timestamp and paid out rewards along with it.
        users[msg.sender].stakingTimestamp = block.timestamp;
        users[msg.sender].paidOutRewards = 0;

        totalStakedAmount += _amount;

        emit Staked(msg.sender, _amount, _lockupPeriod);
    }

    function unstake() external nonReentrant {
        require(users[msg.sender].stakedAmount > 0, "No stake to unstake");
        require(block.timestamp >= users[msg.sender].stakingTimestamp + lockupTimes[users[msg.sender].lockupPeriod], "Lockup period not ended");

        claimRewards();

        uint256 amountToUnstake = users[msg.sender].stakedAmount;

        totalWeight -= getUserWeight(msg.sender);
        totalStakedAmount -= amountToUnstake;

        users[msg.sender].stakedAmount = 0;
        users[msg.sender].stakingTimestamp = 0;
        users[msg.sender].lockupPeriod = 0;
        users[msg.sender].paidOutRewards = 0;

        fairToken.transfer(msg.sender, amountToUnstake);

        emit Unstaked(msg.sender, amountToUnstake);
    }

    function claimRewards() public {
        User storage user = users[msg.sender];
        require(user.stakedAmount > 0, "No stake to claim rewards");
        require(stakingEndTimestamp > block.timestamp, "Staking period ended");

        uint256 pendingRewards = calculateRewards(msg.sender);
        if (pendingRewards == 0) {
            return;
        }

        user.paidOutRewards += pendingRewards;
        // Update remaining rewards
        stakingRewardsRemaining -= pendingRewards;

        fairToken.transfer(msg.sender, pendingRewards);

        emit RewardClaimed(msg.sender, pendingRewards);
    }

    function calculateRewards(address _user) public view returns (uint256) {
        User storage user = users[_user];
        if (user.stakedAmount == 0) {
            return 0;
        }

        uint256 userStakingDuration = block.timestamp - user.stakingTimestamp;
        uint256 totalStakingDuration = stakingEndTimestamp - stakingStartTimestamp;
        uint256 userStakingDurationShare = (userStakingDuration * 1e9) / totalStakingDuration;

        uint256 userWeight = getUserWeight(_user);
        uint256 userWeightShare = (userWeight * 1e9) / totalWeight;

        // Rewards can be negative as staking parameters change (i.e. stakingEndTimestamp)
        uint256 accrued = userStakingDurationShare * userWeightShare * stakingRewardsTotal / 1e18;
        if (accrued > user.paidOutRewards)
            return accrued - user.paidOutRewards;
        else
            return 0;
    }

    function getUserWeight(address _user) public view returns (uint256) {
        User storage user = users[_user];
        if (user.stakedAmount == 0) {
            return 0;
        }

        return user.stakedAmount * (100 + rewardBonuses[user.lockupPeriod]);
    }

    function setLockupTime(uint _lockupPeriod, uint256 _period) external onlyOwner {
        lockupTimes[_lockupPeriod] = _period;
    }

    function setRewardBonus(uint _lockupPeriod, uint256 _bonus) external onlyOwner {
        rewardBonuses[_lockupPeriod] = _bonus;
    }

    function setStakingEndTimestamp(uint256 _timestamp) external onlyOwner {
        require(_timestamp > block.timestamp, "End timestamp must be in the future");
        stakingEndTimestamp = _timestamp;
    }

    function currentBaseApy() public view returns (uint256) {
        return apyForRatio(stakingRewardsTotal, totalStakedAmount);
    }

    function getUserApy(address user_address) public view returns (uint256) {
        uint256 userWeight = getUserWeight(user_address);
        uint256 userWeightShare = (userWeight * 1e9) / totalWeight;

        return apyForRatio(
            userWeightShare * stakingRewardsTotal / 1e9,
            users[user_address].stakedAmount
        );
    }

    function apyForRatio(uint256 rewards, uint256 balance) public view returns (uint256) {
        if (balance == 0) {
            return 0;
        }

        return (rewards * 1e9 / balance) *
                (SECONDS_IN_YEAR * 1e9 / (stakingEndTimestamp - stakingStartTimestamp)) / 1e14;
    }
}

