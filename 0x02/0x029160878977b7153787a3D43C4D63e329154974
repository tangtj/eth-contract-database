
// File: src/MemeBotRouter.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

// import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
// import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./UniswapV2Router.sol";

import "./RouterState.sol";

contract MemeBotRouter is Ownable, RouterState, UniswapV2Router {
    receive() external payable {}

    constructor(
        address _WETH,
        address _UNI_V2_FACTORY,
        uint256 feeRate
    ) Ownable(msg.sender) UniswapV2Router(_WETH, _UNI_V2_FACTORY) {
        setFeeRate(feeRate);
    }

    function withdraw(address token, uint256 amount) public onlyOwner {
        if (token == address(0)) {
            payable(owner()).transfer(amount);
        } else if (token == WETH) {
            IWETH(WETH).withdraw(amount);
            payable(owner()).transfer(amount);
        } else {
            IERC20(token).transfer(owner(), amount);
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: src/UniswapV2Router.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./libraries/SafeMath.sol";
import "./libraries/UniV2/UniswapV2Library.sol";
import "./interfaces/IWETH.sol";
import "./interfaces/UniV2/IUniswapV2Pair.sol";
import "./interfaces/UniV2/IUniswapV2Factory.sol";

import "./RouterState.sol";

struct UniswapV2SwapData {
    address inputToken;
    address outputToken;
    address recipient;
    uint256 inputAmount;
    uint256 outputAmount;
}

abstract contract UniswapV2Router is RouterState {
    using SafeMath for uint;
    address public immutable UNI_V2_FACTORY;

    event SwapEthToTokenOnUniswapV2(
        address pair,
        address recipient,
        uint256 inputAmount,
        uint256 outputAmount,
        uint256 fee
    );

    event SwapTokenToEthOnUniswapV2(
        address pair,
        address recipient,
        uint256 inputAmount,
        uint256 outputAmount,
        uint256 fee
    );

    constructor(address _WETH, address _UNI_V2_FACTORY) RouterState(_WETH) {
        UNI_V2_FACTORY = _UNI_V2_FACTORY;
    }

    function swapExactEthForTokensOnUniswapV2(
        UniswapV2SwapData memory params
    )
        external
        payable
        onlyWEth(params.inputToken)
        unEmptyRecipient(params.recipient)
        returns (uint256)
    {
        address inputToken = params.inputToken;
        address outputToken = params.outputToken;
        address pair = IUniswapV2Factory(UNI_V2_FACTORY).getPair(
            inputToken,
            outputToken
        );

        require(pair != address(0), "InVailfPair");

        uint256 originalInputAmount = params.inputAmount;
        uint256 expectedOutputAmount = params.outputAmount;

        require(msg.value == originalInputAmount, "InValidEthAmount");

        // Charge Fee
        uint256 fee = _getFeeAmount(originalInputAmount);
        uint256 inputAmountAfterFee = originalInputAmount - fee;

        // Predict OutputAmount (before transfer tax)
        (uint256 outputAmount, bool isReverse) = getAmountOutOnUniswapV2(
            inputToken,
            outputToken,
            pair,
            inputAmountAfterFee
        );

        // Transfer Input token to pair (pool)
        IWETH(WETH).deposit{value: inputAmountAfterFee}();
        IWETH(WETH).transfer(pair, inputAmountAfterFee);

        // Execute swap on UniswapV2 Pair
        address recipient = params.recipient;
        uint256 recipientTokenBalanceBeforeTransfer = IERC20(outputToken)
            .balanceOf(recipient);
        _swapOnUniswapV2(pair, recipient, outputAmount, isReverse);
        uint256 actualOutputAmount = IERC20(outputToken).balanceOf(recipient) -
            recipientTokenBalanceBeforeTransfer;

        require(
            expectedOutputAmount <= actualOutputAmount,
            "InsufficientOutputAmount"
        );

        emit SwapEthToTokenOnUniswapV2(
            pair,
            recipient,
            originalInputAmount,
            outputAmount,
            fee
        );

        return outputAmount;
    }

    function swapExactTokensForEthOnUniswapV2(
        UniswapV2SwapData memory params
    )
        external
        onlyWEth(params.outputToken)
        unEmptyRecipient(params.recipient)
        returns (uint256)
    {
        address inputToken = params.inputToken;
        address outputToken = params.outputToken;
        address pair = IUniswapV2Factory(UNI_V2_FACTORY).getPair(
            inputToken,
            outputToken
        );

        require(pair != address(0), "InVailfPair");

        uint256 originalInputAmount = params.inputAmount;
        uint256 expectedOutputAmount = params.outputAmount;
        address recipient = params.recipient;
        IERC20(inputToken).transferFrom(msg.sender, pair, originalInputAmount);

        (address token0, ) = UniswapV2Library.sortTokens(
            inputToken,
            outputToken
        );
        bool isReverse = inputToken != token0;

        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pair)
            .getReserves();

        if (isReverse) {
            (reserve0, reserve1) = (reserve1, reserve0);
        }

        uint256 actualInputAmount = IERC20(inputToken).balanceOf(pair) -
            reserve0;

        uint256 outputAmount = UniswapV2Library.getAmountOut(
            actualInputAmount,
            reserve0,
            reserve1
        );

        require(
            expectedOutputAmount <= outputAmount,
            "InsufficientOutputAmount"
        );

        _swapOnUniswapV2(pair, address(this), outputAmount, isReverse);

        uint256 fee = _getFeeAmount(outputAmount);
        outputAmount = outputAmount - fee;

        IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this))); // Should withdraw all balance of this contract
        payable(msg.sender).transfer(outputAmount);

        emit SwapTokenToEthOnUniswapV2(
            pair,
            recipient,
            originalInputAmount,
            outputAmount,
            fee
        );

        return outputAmount;
    }

    function _swapOnUniswapV2(
        address pair,
        address receipent,
        uint256 amount,
        bool isReverse
    ) internal {
        if (isReverse) {
            IUniswapV2Pair(pair).swap(amount, 0, receipent, new bytes(0));
        } else {
            IUniswapV2Pair(pair).swap(0, amount, receipent, new bytes(0));
        }
    }

    function getAmountOutOnUniswapV2(
        address inputToken,
        address outputToken,
        address pair,
        uint256 inputAmount
    ) public view returns (uint256 outputAmount, bool isReverse) {
        (address token0, ) = UniswapV2Library.sortTokens(
            inputToken,
            outputToken
        );
        isReverse = inputToken != token0;

        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pair)
            .getReserves();
        if (isReverse) {
            (reserve0, reserve1) = (reserve1, reserve0);
        }

        outputAmount = UniswapV2Library.getAmountOut(
            inputAmount,
            reserve0,
            reserve1
        );
    }
}


// File: src/RouterState.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

import "./interfaces/IWETH.sol";
import "./libraries/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

abstract contract RouterState is Ownable {
    uint256 public constant THOUSAND = 1000;
    address public immutable WETH; // 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
    uint256 public feeRate;

    event SetFeeRate(uint256 feeRate);

    // error InsufficientOutputAmount(uint256 targetAmount, uint256 actualAmount);

    modifier onlyWEth(address token) {
        require(token == WETH, "InvalidToken");
        _;
    }

    modifier unEmptyRecipient(address addr) {
        require(addr != address(0), "InvalidRecipient");
        _;
    }

    constructor(address _WETH) {
        WETH = _WETH;
    }

    function setFeeRate(uint256 _feeRate) public onlyOwner {
        feeRate = _feeRate;
        emit SetFeeRate(feeRate);
    }

    function getMultiAccountBalance(
        address[] memory accounts,
        address token
    ) public view returns (uint256[] memory) {
        uint256[] memory balances = new uint256[](accounts.length);

        for (uint256 i = 0; i < accounts.length; i++) {
            balances[i] = IERC20(token).balanceOf(accounts[i]);
        }

        return balances;
    }

    function getAccountMultiTokenBalance(
        address account,
        address[] memory tokens
    ) public view returns (uint256[] memory) {
        uint256[] memory balances = new uint256[](tokens.length);

        for (uint256 i = 0; i < tokens.length; i++) {
            if (tokens[i] == address(0)) {
                balances[i] = account.balance;
            } else {
                balances[i] = IERC20(tokens[i]).balanceOf(account);
            }
        }

        return balances;
    }

    function _getFeeAmount(uint256 amountIn) internal view returns (uint256) {
        return (amountIn * feeRate) / THOUSAND;
    }

    function _checkOutputAmount(
        uint256 targetAmount,
        uint256 actualAmount
    ) internal pure {
        require(targetAmount <= actualAmount, "InsufficientOutputAmount");
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: src/libraries/SafeMath.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)

library SafeMath {
    function add(uint x, uint y) internal pure returns (uint z) {
        require((z = x + y) >= x, "ds-math-add-overflow");
    }

    function sub(uint x, uint y) internal pure returns (uint z) {
        require((z = x - y) <= x, "ds-math-sub-underflow");
    }

    function mul(uint x, uint y) internal pure returns (uint z) {
        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");
    }
}


// File: src/libraries/UniV2/UniswapV2Library.sol
pragma solidity >=0.5.0;

import "../../interfaces/UniV2/IUniswapV2Pair.sol";

import "../SafeMath.sol";

library UniswapV2Library {
    using SafeMath for uint;

    // returns sorted token addresses, used to handle return values from pairs sorted in this order
    function sortTokens(
        address tokenA,
        address tokenB
    ) internal pure returns (address token0, address token1) {
        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");
        (token0, token1) = tokenA < tokenB
            ? (tokenA, tokenB)
            : (tokenB, tokenA);
        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");
    }

    // calculates the CREATE2 address for a pair without making any external calls
    function pairFor(
        address factory,
        address tokenA,
        address tokenB
    ) internal pure returns (address pair) {
        (address token0, address token1) = sortTokens(tokenA, tokenB);
        pair = address(
            uint160(
                uint(
                    keccak256(
                        abi.encodePacked(
                            hex"ff",
                            factory,
                            keccak256(abi.encodePacked(token0, token1)),
                            hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" // init code hash
                        )
                    )
                )
            )
        );
    }

    // fetches and sorts the reserves for a pair
    function getReserves(
        address factory,
        address tokenA,
        address tokenB
    ) internal view returns (uint reserveA, uint reserveB) {
        (address token0, ) = sortTokens(tokenA, tokenB);
        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(
            pairFor(factory, tokenA, tokenB)
        ).getReserves();
        (reserveA, reserveB) = tokenA == token0
            ? (reserve0, reserve1)
            : (reserve1, reserve0);
    }

    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset
    function quote(
        uint amountA,
        uint reserveA,
        uint reserveB
    ) internal pure returns (uint amountB) {
        require(amountA > 0, "UniswapV2Library: INSUFFICIENT_AMOUNT");
        require(
            reserveA > 0 && reserveB > 0,
            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"
        );
        amountB = amountA.mul(reserveB) / reserveA;
    }

    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset
    function getAmountOut(
        uint amountIn,
        uint reserveIn,
        uint reserveOut
    ) internal pure returns (uint amountOut) {
        require(amountIn > 0, "UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT");
        require(
            reserveIn > 0 && reserveOut > 0,
            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"
        );
        uint amountInWithFee = amountIn.mul(997);
        uint numerator = amountInWithFee.mul(reserveOut);
        uint denominator = reserveIn.mul(1000).add(amountInWithFee);
        amountOut = numerator / denominator;
    }

    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset
    function getAmountIn(
        uint amountOut,
        uint reserveIn,
        uint reserveOut
    ) internal pure returns (uint amountIn) {
        require(amountOut > 0, "UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT");
        require(
            reserveIn > 0 && reserveOut > 0,
            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"
        );
        uint numerator = reserveIn.mul(amountOut).mul(1000);
        uint denominator = reserveOut.sub(amountOut).mul(997);
        amountIn = (numerator / denominator).add(1);
    }

    // performs chained getAmountOut calculations on any number of pairs
    function getAmountsOut(
        address factory,
        uint amountIn,
        address[] memory path
    ) internal view returns (uint[] memory amounts) {
        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");
        amounts = new uint[](path.length);
        amounts[0] = amountIn;
        for (uint i; i < path.length - 1; i++) {
            (uint reserveIn, uint reserveOut) = getReserves(
                factory,
                path[i],
                path[i + 1]
            );
            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
        }
    }

    // performs chained getAmountIn calculations on any number of pairs
    function getAmountsIn(
        address factory,
        uint amountOut,
        address[] memory path
    ) internal view returns (uint[] memory amounts) {
        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");
        amounts = new uint[](path.length);
        amounts[amounts.length - 1] = amountOut;
        for (uint i = path.length - 1; i > 0; i--) {
            (uint reserveIn, uint reserveOut) = getReserves(
                factory,
                path[i - 1],
                path[i]
            );
            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
        }
    }
}


// File: src/interfaces/IWETH.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

interface IWETH {
    function deposit() external payable;
    function withdraw(uint wad) external;
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(
        address from,
        address to,
        uint value
    ) external returns (bool);
    function approve(address spender, uint value) external returns (bool);
    function balanceOf(address owner) external view returns (uint);
    function allowance(
        address owner,
        address spender
    ) external view returns (uint);
}


// File: src/interfaces/UniV2/IUniswapV2Pair.sol
pragma solidity ^0.8.24;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(
        address from,
        address to,
        uint value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(
        address owner,
        address spender,
        uint value,
        uint deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(
        address indexed sender,
        uint amount0,
        uint amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves()
        external
        view
        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(
        uint amount0Out,
        uint amount1Out,
        address to,
        bytes calldata data
    ) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: src/interfaces/UniV2/IUniswapV2Factory.sol
pragma solidity ^0.8.24;

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint
    );

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

