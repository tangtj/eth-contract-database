
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/WaitStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract WaitStaking is Ownable, ReentrancyGuard {
    struct StakingPlan {
        uint256 multiplier;
        uint256 duration;
    }

    struct StakingInfo {
        uint256 amount;
        uint256 planId;
        uint256 startTime;
        // this is the reward from previous staking, current staking IS NOT counted yet
        // use func getCurrentReward to get the total reward
        uint256 accumulatedReward;
    }

    event Staked(address indexed user, uint256 amount, uint256 planId);
    event Unstaked(address indexed user, uint256 amount);

    IERC20 public waitToken;
    uint256 public constant FREEZING_DURATION = 7 * 24 * 60 * 60 seconds;

    mapping(uint256 => StakingPlan) public stakingPlans;
    mapping(address => StakingInfo) public stakingInfos;

    constructor(address _waitToken) {
        waitToken = IERC20(_waitToken);
    }

    function addStakingPlan(uint256 _planId, uint256 _multiplier, uint256 _duration) external onlyOwner {
        stakingPlans[_planId] = StakingPlan(_multiplier, _duration);
    }

    function removeStakingPlan(uint256 _planId) external onlyOwner {
        delete stakingPlans[_planId];
    }

    /// @notice Stake $WAIT token to get reward
    /// @param _amount The amount of $WAIT token to stake, in 9 decimals
    /// @param _planId The index of the staking plan
    function stake(uint256 _amount, uint256 _planId) external {
        // check on inputs
        require(_amount >= 1_000e9, "WaitStaking: Must stake at least 1000");
        require(_amount < 1_000_000e9, "WaitStaking: Must stake less than 1000000");
        require(stakingPlans[_planId].multiplier != 0, "WaitStaking: Invalid staking plan");

        // check on user status
        (bool isStaking, bool isInFreezingPeriod) = getUserStatus(msg.sender);
        require(!isStaking, "WaitStaking: Already staking");
        if (isInFreezingPeriod) {
            // if in freezing period, user must stake higher than previously staked amount
            require(
                _amount >= stakingInfos[msg.sender].amount,
                "WaitStaking: Must stake at least previously staked amount"
            );
            // record the reward from current staking to accumulated reward
            stakingInfos[msg.sender].accumulatedReward += getCurrentReward(msg.sender);
        } else {
            // if freezing period is expired, reset the accumulated reward
            stakingInfos[msg.sender].accumulatedReward = 0;
        }

        // transfer the difference to the contract
        if (_amount > stakingInfos[msg.sender].amount) {
            waitToken.transferFrom(msg.sender, address(this), _amount - stakingInfos[msg.sender].amount);
        }

        // update staking info
        stakingInfos[msg.sender].amount = _amount;
        stakingInfos[msg.sender].planId = _planId;
        stakingInfos[msg.sender].startTime = block.timestamp;

        emit Staked(msg.sender, _amount, _planId);
    }

    /// @notice Unstake $WAIT token after staking period
    function unstake() external nonReentrant {
        // check the status of the user
        (bool isStaking, ) = getUserStatus(msg.sender);

        require(!isStaking, "WaitStaking: Cannot unstake during active staking");
        require(stakingInfos[msg.sender].amount != 0, "WaitStaking: Not staked");

        waitToken.transfer(msg.sender, stakingInfos[msg.sender].amount);

        delete stakingInfos[msg.sender];

        emit Unstaked(msg.sender, stakingInfos[msg.sender].amount);
    }

    /// @notice The definitive source to get the current reward
    /// @param _user The address of the user
    /// @return The accumulated reward of the user
    function getCurrentReward(address _user) public view returns (uint256) {
        (bool isStaking, bool isInFreezingPeriod) = getUserStatus(_user);

        if (!isStaking && !isInFreezingPeriod) {
            return 0;
        }

        StakingInfo memory info = stakingInfos[_user];

        // find the number of days that the user has staked in days
        uint256 stakedDays = (block.timestamp - info.startTime) / 1 days;

        // the reward should accumulate daily
        uint256 currentReward = (info.amount * stakingPlans[info.planId].multiplier * stakedDays) / 10000;

        // add the reward from previous staking
        return currentReward + info.accumulatedReward;
    }

    /// @notice Get the status of a user
    /// @param _user The address of the user
    /// @return isStaking True if the user is staking, false otherwise
    /// @return isInFreezingPeriod True if the user is in freezing period, false otherwise
    function getUserStatus(address _user) public view returns (bool isStaking, bool isInFreezingPeriod) {
        StakingInfo memory info = stakingInfos[_user];

        if (info.amount == 0) {
            return (false, false);
        }

        uint256 userStakingEndTime = info.startTime + stakingPlans[info.planId].duration;

        // user is in the middle of staking period
        if (block.timestamp <= userStakingEndTime) {
            return (true, false);
        }

        // user is in the middle of freezing period
        if (block.timestamp <= userStakingEndTime + FREEZING_DURATION) {
            return (false, true);
        }

        return (false, false);
    }
}

