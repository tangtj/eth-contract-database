
// File: @openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControlUpgradeable {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/ContextUpgradeable.sol";
import {Initializable} from "../proxy/utils/Initializable.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal onlyInitializing {
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal onlyInitializing {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.2;

import "../../utils/AddressUpgradeable.sol";

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```solidity
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 *
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized != type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;
import {Initializable} from "../proxy/utils/Initializable.sol";

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal onlyInitializing {
    }

    function __Context_init_unchained() internal onlyInitializing {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: contracts/interface/IConfig.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

interface IConfig {
    function setSigner(address _signer) external;

    function setEventProvider(address _eventProvider) external;

    function setLaunchpadImplement(address _launchpadImplement) external;

    function setOrochiProvider(address _orochiProvider, address _orochiProvider2) external;

    function setOrochiAggregator(address _orochiAggregator) external;

    function signer() external view returns (address);

    function eventProvider() external view returns (address);

    function launchpadImplement() external view returns (address);

    function orochiProvider() external view returns (address);

    function orochiProvider2() external view returns (address);

    function orochiAggregator() external view returns (address);
}


// File: contracts/interface/IEventProvider.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol";

interface IEventProvider is IAccessControlUpgradeable {

    function EMIT_EVENT() external returns (bytes32);

    function submitCreateLaunchpad(address _launchpadAddress, address _collection, address _owner, uint256 _requestId) external;

    function submitLaunchpadUpdate(address _launchpadAddress, address collection, address paymentToken) external;

    function submitSaleInfoUpdate(address _launchpadAddress, uint256[] memory info) external;

    function submitBuyTicket(address _launchpadAddress, uint256 buyType, address account, uint256 amount, uint256 from, uint256 to, uint256 requestId) external;

    function submitBuyNFT(address _launchpadAddress, uint256 buyType, address account, uint256 quantity, uint256 nftAmount, uint256 fromId, uint256 toId, uint256 requestId) external;

    function submitBuyNFTBatch(address _launchpadAddress, uint256 buyType, address account, uint256 quantity, uint256 nftAmount, uint256 tokenId, uint256 index, uint256 requestId) external;

    function submitRefund(address _launchpadAddress, address account, uint256 amount, uint256 requestId) external;

    function submitNFTClaimRequested(address _launchpadAddress, address account, uint256 ticketId, uint256 requestId) external;

    function submitNFTClaim(address _launchpadAddress, address account, uint256 ticketId, uint256 tokenId, uint256 requestId) external;

    function submitTokenClaim(address launchpad, uint256 buyType, address account, uint256 amount, uint256 requestId) external;

    function submitErrorConsume(address launchpad, bytes memory reason) external;

    function submitErrorRevert(address launchpad, string memory reason) external;

    function submitRandomnessRequest() external;

}

// File: contracts/interface/ILaunchpadFactory.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

interface ILaunchpadFactory {

    function getConfig() external view returns (address);

    function validSignature(uint256 typeFunc, bytes32 hash, bytes memory signature, uint256 requestId, uint256 expiredTime) external returns (bool);

    function requestRandomness() external;
}


// File: contracts/interface/IOriginERC721.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol";

interface IOriginERC721 is IERC721Enumerable {

    function mintBatch(address toAddress, uint256 amount) external returns (uint256);

    function mintMulti(address owner, uint256 amount) external;

    function setBaseURI(string memory baseTokenURI) external;

    function transferOwnership(address newOwner) external;

    function grantRole(bytes32 role, address account) external;

    function revokeRole(bytes32 role, address account) external;
}


// File: contracts/LaunchpadBase.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./interface/IOriginERC721.sol";
import "./interface/ILaunchpadFactory.sol";
import "./interface/IEventProvider.sol";
import "./interface/IConfig.sol";
import "./LaunchpadConstants.sol";

contract LaunchpadBase is LaunchpadConstants, OwnableUpgradeable {

    struct SaleInfo {
        uint256 maxSupply;
        uint256 startTime;
        uint256 endTime;
        uint256 price;
        uint256 fee;
        uint256 maxAllocationPerUser;
        bool active;
        uint256 sold;
        bool fcfs;
    }

    struct Purchase {
        uint256 whitelist;
        uint256 publicSale;
        uint256 guaranteed;
    }

    struct PaymentQueue {
        uint256 buyType;
        address sender;
        uint256 paymentAmount; // aka ticketId in ClaimNFT
        uint256 amount;
        uint256 requestId;
    }

    struct UserQueue {
        PaymentQueue[] queue;
        uint256 current;
    }

    struct Refund {
        uint256 amount;
        bool refunded;
    }

    IOriginERC721 public collection;
    IERC20 public paymentToken;
    ILaunchpadFactory public factory;
    IConfig public config;
    SaleInfo public guaranteedSale;
    SaleInfo public privateSale;
    SaleInfo public publicSale;

    address public nftVault;
    mapping(address => Purchase) internal itemSoldMapping;
    mapping(address => UserQueue) internal paymentQueueMapping;
    mapping(address => Refund) internal refundMapping;
    mapping(uint256 => bool) public ticketClaimed;
    address[] public userQueueList;
    uint256 public currentQueue;
    uint256 public mintType;
    mapping(uint256 => mapping(uint256 => bool)) public requestIdIndexMapping;
    mapping(uint256 => mapping(uint256 => bool)) public requestIdTicketIdMapping;
    mapping(address => mapping(uint256 => bool)) public ticketMapping;

    function isMinterLaunchpad() public view returns (bool) {
        return nftVault == address(0);
    }

    function isNativePayment() public view returns (bool) {
        return address(paymentToken) == address(0);
    }

    function isPublicFCFS() public view returns (bool) {
        return publicSale.fcfs;
    }

    function skipQueue(uint256 skip) external onlyOwner {
        require(currentQueue + skip <= userQueueList.length, "Skip too high");
        currentQueue += skip;
    }

    function revertQueue(uint256 _revert) external onlyOwner {
        require(_revert < currentQueue, "Revert too low");
        currentQueue -= _revert;
    }

    function setMinterType(uint256 _mintType) public onlyOwner {
        require(_mintType == MINT_TYPE_BATCH || _mintType == MINT_TYPE_MULTI, "MintType Invalid");
        mintType = _mintType;
        if (_mintType == MINT_TYPE_MULTI) {
            nftVault = address(0);
        }
    }

    function updateGuaranteedSupply(uint256 _newMaxSupply) external onlyOwner {
        require(guaranteedSale.active, "Guaranteed not active");
        require(!_isEnd(guaranteedSale), "Guaranteed ended");
        require(_newMaxSupply >= guaranteedSale.sold, "new supply not below sold amount");
        guaranteedSale.maxSupply = _newMaxSupply;
    }

    function _consumeRandomness(uint256 randomness) internal returns (bool){
        uint256 nftBalanceOfVault = collection.balanceOf(nftVault);
        require(nftBalanceOfVault > 0, "Vault dont have any NFT");
        uint256 indexPicker = (randomness % nftBalanceOfVault);

        if (userQueueList.length <= currentQueue) {
            return false;
        }

        address user = userQueueList[currentQueue];
        currentQueue++;
        UserQueue storage userQueue = paymentQueueMapping[user];
        require(userQueue.queue.length > userQueue.current, "User dont have any queue");
        PaymentQueue memory payment = userQueue.queue[userQueue.current];
        userQueue.current++;

        uint256 id = collection.tokenOfOwnerByIndex(nftVault, indexPicker);
        collection.transferFrom(nftVault, payment.sender, id);
        if (payment.buyType == CLAIM_NFT) {
            _getEventProvider().submitNFTClaim(address(this), user, payment.paymentAmount, id, payment.requestId);
        } else {
            _getEventProvider().submitBuyNFTBatch(address(this), payment.buyType, payment.sender, payment.paymentAmount, 1, id, payment.amount, payment.requestId);
        }
        return true;
    }

    function _getEventProvider() internal view returns (IEventProvider) {
        return IEventProvider(config.eventProvider());
    }

    function _transferTokenToAddress(address sender, uint256 amount) internal returns (uint256) {
        if (isNativePayment()) {
            require(address(this).balance >= amount, "Not enough balance");
            (bool sent,) = sender.call{value: amount}("");
            require(sent, "Refund failed");
            return TOKEN_NATIVE;
        } else {
            require(paymentToken.balanceOf(address(this)) >= amount, "Not enough balance");
            paymentToken.transfer(sender, amount);
            return TOKEN_ERC20;
        }
    }

    function _updateLaunchpad(address _collection, address _paymentToken, address _nftVault) internal {
        require(_collection != address(0), "Collection address invalid");

        nftVault = _nftVault;
        collection = IOriginERC721(_collection);
        paymentToken = IERC20(_paymentToken);

        _getEventProvider().submitLaunchpadUpdate(address(this), _collection, _paymentToken);
    }

    function _updateInfo(uint256[] memory _saleInfo) internal {
        bool updated = false;
        if (!_isStart(publicSale)) {
            _updateSaleInfo(publicSale, _saleInfo, 0);
            updated = true;
        }

        if (!_isStart(privateSale)) {
            _updateSaleInfo(privateSale, _saleInfo, SALE_INFO_OFFSET);
            updated = true;
        }

        if (!_isStart(guaranteedSale)) {
            _updateSaleInfo(guaranteedSale, _saleInfo, 2 * SALE_INFO_OFFSET);
            updated = true;
        }
        require(updated, "Sale info cannot update after started");
        _getEventProvider().submitSaleInfoUpdate(address(this), _saleInfo);
    }

    function _updateSaleInfo(SaleInfo storage _saleInfo, uint256[] memory _saleInfos, uint256 offset) internal {
        uint256 _startTime = _saleInfos[2 + offset];
        uint256 _endTime = _saleInfos[3 + offset];

        require(block.timestamp < _startTime, "Start time invalidate");
        require(_startTime < _endTime, "Start time must be lower than End time");

        _saleInfo.maxSupply = _saleInfos[0 + offset];
        _saleInfo.maxAllocationPerUser = _saleInfos[1 + offset];
        _saleInfo.startTime = _startTime;
        _saleInfo.endTime = _endTime;
        _saleInfo.price = _saleInfos[4 + offset];
        _saleInfo.fee = _saleInfos[5 + offset];
        _saleInfo.active = _saleInfos[6 + offset] == 1;
        _saleInfo.fcfs = _saleInfos[7 + offset] == 1;
    }

    function getRefundInfo(address _user) external view returns (Refund memory) {
        return refundMapping[_user];
    }

    function _buyNFTValidate(SaleInfo memory saleInfo, uint256 quantity, uint256 offset) internal view {
        require(saleInfo.active, "Sale not active");
        require(block.timestamp > saleInfo.startTime, "Sale not started");
        require(block.timestamp < saleInfo.endTime, "Sale ended");
        require(saleInfo.sold + quantity <= saleInfo.maxSupply + offset, "The purchase limit has been reached");
    }

    function _buyNFTWhitelist(uint256 buyType, uint256 quantity, uint256 maxQuantity, uint256 paymentAmount, uint256[] memory index, uint256 requestId) internal {
        uint256 offset = _isEnd(guaranteedSale) ? guaranteedSale.maxSupply - guaranteedSale.sold : 0;

        _buyNFTValidate(privateSale, quantity, offset);
        Purchase storage purchased = itemSoldMapping[_msgSender()];
        require(purchased.whitelist + quantity <= maxQuantity, "The individual purchase limit has been reached.");

        privateSale.sold += quantity;
        purchased.whitelist += quantity;

        _buyNFT(buyType, quantity, paymentAmount, index, requestId);
    }

    function _buyNFTGuaranteed(uint256 buyType, uint256 quantity, uint256 maxQuantity, uint256 paymentAmount, uint256[] memory index, uint256 requestId) internal {
        _buyNFTValidate(guaranteedSale, quantity, 0);
        Purchase storage purchased = itemSoldMapping[_msgSender()];
        require(purchased.guaranteed + quantity <= maxQuantity, "The individual purchase limit has been reached.");

        guaranteedSale.sold += quantity;
        purchased.guaranteed += quantity;

        _buyNFT(buyType, quantity, paymentAmount, index, requestId);
    }

    function _buyNFTPublic(uint256 buyType, uint256 quantity, uint256 paymentAmount, uint256[] memory index, uint256 requestId) internal {
        uint256 offset = _getNFTRemaining();
        _buyNFTValidate(publicSale, quantity, offset);
        Purchase storage purchased = itemSoldMapping[_msgSender()];
        require(purchased.publicSale + quantity <= publicSale.maxAllocationPerUser, "The individual purchase limit has been reached.");

        publicSale.sold += quantity;
        purchased.publicSale += quantity;

        _buyNFT(buyType, quantity, paymentAmount, index, requestId);
    }

    function _getNFTRemaining() internal view returns (uint256) {
        if ((_isEnd(privateSale) || !privateSale.active) && (_isEnd(guaranteedSale) || !guaranteedSale.active)) {
            (uint256 maxSupplyG, uint256 soldG) = _getPurchaseInfo(guaranteedSale);
            (uint256 maxSupplyW, uint256 soldW) = _getPurchaseInfo(privateSale);
            return (maxSupplyG + maxSupplyW) - (soldG + soldW);
        }
        return 0;
    }

    function _getPurchaseInfo(SaleInfo memory saleInfo) private view returns (uint256 maxSupply, uint256 sold) {
        if (!_isEnd(saleInfo)) {
            maxSupply = 0;
            sold = 0;
        } else {
            maxSupply = saleInfo.active ? saleInfo.maxSupply : 0;
            sold = saleInfo.active ? saleInfo.sold : 0;
        }
    }

    function _buyNFT(uint256 buyType, uint256 quantity, uint256 paymentAmount, uint256[] memory index, uint256 requestId) internal {
        if (isMinterLaunchpad()) {
            (uint256 from, uint256 to) = _mintNFTToAddress(_msgSender(), quantity);
            _getEventProvider().submitBuyNFT(address(this), buyType, _msgSender(), paymentAmount, quantity, from, to, requestId);
            return;
        }

        // buy nft with nft vault
        for (uint256 i = 0; i < quantity; i++) {
            requestIdIndexMapping[requestId][index[i]] = true;
            paymentQueueMapping[_msgSender()].queue.push(PaymentQueue(buyType, _msgSender(), paymentAmount, index[i], requestId));
            userQueueList.push(_msgSender());
            factory.requestRandomness();
        }
    }

    function _mintNFTToAddress(address sender, uint256 quantity) internal returns (uint256 from, uint256 to) {
        if (mintType == MINT_TYPE_BATCH) {
            to = collection.mintBatch(sender, quantity);
            from = to + 1 - quantity;
        } else if (mintType == MINT_TYPE_MULTI) {
            from = collection.totalSupply() + 1;
            to = from + quantity - 1;
            collection.mintMulti(sender, quantity);
        } else {
            revert("MintType invalid");
        }
    }

    function _buyTicket(uint256 buyType, uint256 paymentAmount, uint256 quantity, uint256 requestId) internal {
        require(publicSale.active, "PublicSale not active");
        require(block.timestamp > publicSale.startTime, "PublicSale not started");
        require(block.timestamp < publicSale.endTime, "PublicSale ended");
        Purchase storage purchased = itemSoldMapping[_msgSender()];
        require(purchased.publicSale + quantity <= publicSale.maxAllocationPerUser, "The individual purchase limit has been reached.");

        uint256 from = publicSale.sold;
        uint256 to = publicSale.sold + quantity - 1;
        publicSale.sold += quantity;
        purchased.publicSale += quantity;

        for (uint256 i = 0; i < quantity; i ++) {
            ticketMapping[_msgSender()][i + from] = true;
        }

        _getEventProvider().submitBuyTicket(address(this), buyType, _msgSender(), paymentAmount, from, to, requestId);
    }

    function _claimNFTWithTicketId(uint256 ticketId, uint256 requestId) internal {
        requestIdTicketIdMapping[requestId][ticketId] = true;
        require(ticketMapping[_msgSender()][ticketId], "User not own this ticket");
        require(!ticketClaimed[ticketId], "ticket claim already requested");
        ticketClaimed[ticketId] = true;
        if (isMinterLaunchpad()) {
            (uint256 from,) = _mintNFTToAddress(_msgSender(), 1);
            _getEventProvider().submitNFTClaim(address(this), _msgSender(), ticketId, from, requestId);
        } else {
            paymentQueueMapping[_msgSender()].queue.push(PaymentQueue(CLAIM_NFT, _msgSender(), ticketId, 1, requestId));
            userQueueList.push(_msgSender());
            factory.requestRandomness();
            _getEventProvider().submitNFTClaimRequested(address(this), _msgSender(), ticketId, requestId);
        }
    }

    function _startTimeValid() internal view {
        require(!_isStart(publicSale), "Cannot change payment token after publicSale started");
        require(!_isStart(privateSale), "Cannot change payment token after privateSale started");
        require(!_isStart(guaranteedSale), "Cannot change payment token after guaranteedSale started");
    }

    function _isStart(SaleInfo memory _saleInfo) internal view returns (bool) {
        return _saleInfo.startTime <= block.timestamp && _saleInfo.active;
    }

    function _isEnd(SaleInfo memory _saleInfo) internal view returns (bool) {
        return _saleInfo.endTime <= block.timestamp && _saleInfo.active;
    }
}


// File: contracts/LaunchpadConstants.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract LaunchpadConstants {

    uint256 public constant TOKEN_ERC20 = 2001;
    uint256 public constant TOKEN_NATIVE = 2002;
    uint256 public constant CLAIM_NFT = 2003;

    bytes32 internal constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;

    uint256 internal constant SALE_INFO_OFFSET = 8;
    uint256 internal constant TYPE_FUNC_BUY_NFT_WL_ERC20 = 1;
    uint256 internal constant TYPE_FUNC_BUY_NFT_PL_ERC20 = 11;
    uint256 internal constant TYPE_FUNC_BUY_NFT_GT_ERC20 = 12;
    uint256 internal constant TYPE_FUNC_BUY_NFT_WL_NATIVE = 2;
    uint256 internal constant TYPE_FUNC_BUY_NFT_PL_NATIVE = 21;
    uint256 internal constant TYPE_FUNC_BUY_NFT_GT_NATIVE = 22;
    uint256 internal constant TYPE_FUNC_BUY_TICKET_ERC20 = 3;
    uint256 internal constant TYPE_FUNC_BUY_TICKET_NATIVE = 4;
    uint256 internal constant TYPE_FUNC_REFUND = 5;
    uint256 internal constant TYPE_FUNC_CLAIM_NFT = 6;
    uint256 internal constant TYPE_FUNC_CLAIM_TOKEN = 7;

    uint256 public constant MINT_TYPE_BATCH = 0;
    uint256 public constant MINT_TYPE_MULTI = 1001;
}


// File: contracts/LaunchpadERC721.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./interface/IOriginERC721.sol";
import "./interface/ILaunchpadFactory.sol";
import "./interface/IEventProvider.sol";
import "./interface/IConfig.sol";
import "./LaunchpadBase.sol";

contract LaunchpadERC721 is LaunchpadBase {

    modifier onlyFactory() {
        require(address(factory) == msg.sender, "Sender not factory");
        _;
    }

    modifier ignoreOwner() {
        require(_msgSender() != owner(), "Owner not permit");
        _;
    }

    function initialize(address _collection, address _paymentToken, address _nftVault) public initializer {
        __Ownable_init();

        factory = ILaunchpadFactory(_msgSender());
        config = IConfig(factory.getConfig());

        _updateLaunchpad(_collection, _paymentToken, _nftVault);
    }

    function updateLaunchpad(
        address _collection,
        address _paymentToken,
        address _nftVault
    ) external onlyOwner {
        _startTimeValid();
        _updateLaunchpad(_collection, _paymentToken, _nftVault);
    }

    function updateLaunchpadSaleInfo(uint256[] memory _saleInfo) external onlyOwner {
        _updateInfo(_saleInfo);
    }

    function updateSaleInfoMintType(uint256 mintType, uint256[] memory _saleInfo) external onlyOwner {
        _updateInfo(_saleInfo);
        if (!_isStart(publicSale) && !_isStart(privateSale) && !_isStart(guaranteedSale)) {
            setMinterType(mintType);
        }
    }

    function updatePaymentToken(address _paymentToken) external onlyOwner {
        _startTimeValid();
        paymentToken = IERC20(_paymentToken);
        _getEventProvider().submitLaunchpadUpdate(address(this), address(collection), _paymentToken);
    }

    function updateCollectionBaseURI(string memory baseURI) external onlyOwner {
        IOriginERC721(collection).setBaseURI(baseURI);
    }

    function buyNFTWhitelistERC20(uint256 quantity, uint256 maxQuantity, bytes memory signature, uint256[] memory index, uint256 requestId, uint256 expiredTime) external ignoreOwner {
        require(!isNativePayment(), "payment method not support");
        uint256 paymentAmount = quantity * privateSale.price;
        paymentToken.transferFrom(msg.sender, address(this), paymentAmount);
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_BUY_NFT_WL_ERC20, quantity, maxQuantity, index, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_BUY_NFT_WL_ERC20, msgHash, signature, requestId, expiredTime), "Signature invalid");
        _buyNFTWhitelist(TOKEN_ERC20, quantity, maxQuantity, paymentAmount, index, requestId);
    }

    function buyNFTWhitelistETH(uint256 quantity, uint256 maxQuantity, bytes memory signature, uint256[] memory index, uint256 requestId, uint256 expiredTime) external payable ignoreOwner {
        require(isNativePayment(), "payment method not support");
        uint256 paymentAmount = quantity * privateSale.price;
        require(msg.value == paymentAmount, "value invalidate");
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_BUY_NFT_WL_NATIVE, quantity, maxQuantity, index, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_BUY_NFT_WL_NATIVE, msgHash, signature, requestId, expiredTime), "Signature invalid");
        _buyNFTWhitelist(TOKEN_NATIVE, quantity, maxQuantity, paymentAmount, index, requestId);
    }

    function buyNFTGuaranteedERC20(uint256 quantity, uint256 maxQuantity, bytes memory signature, uint256[] memory index, uint256 requestId, uint256 expiredTime) external ignoreOwner {
        require(!isNativePayment(), "payment method not support");
        uint256 paymentAmount = quantity * guaranteedSale.price;
        paymentToken.transferFrom(msg.sender, address(this), paymentAmount);
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_BUY_NFT_GT_ERC20, quantity, maxQuantity, index, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_BUY_NFT_GT_ERC20, msgHash, signature, requestId, expiredTime), "Signature invalid");
        _buyNFTGuaranteed(TOKEN_ERC20, quantity, maxQuantity, paymentAmount, index, requestId);
    }

    function buyNFTGuaranteedETH(uint256 quantity, uint256 maxQuantity, bytes memory signature, uint256[] memory index, uint256 requestId, uint256 expiredTime) external payable ignoreOwner {
        require(isNativePayment(), "payment method not support");
        uint256 paymentAmount = quantity * guaranteedSale.price;
        require(msg.value == paymentAmount, "value invalidate");
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_BUY_NFT_GT_NATIVE, quantity, maxQuantity, index, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_BUY_NFT_GT_NATIVE, msgHash, signature, requestId, expiredTime), "Signature invalid");
        _buyNFTGuaranteed(TOKEN_NATIVE, quantity, maxQuantity, paymentAmount, index, requestId);
    }

    function buyNFTPublicERC20(uint256 quantity, bytes memory signature, uint256[] memory index, uint256 requestId, uint256 expiredTime) external ignoreOwner {
        require(!isNativePayment(), "payment method not support");
        require(isPublicFCFS(), "Public not FCFS");
        uint256 paymentAmount = quantity * publicSale.price;
        paymentToken.transferFrom(msg.sender, address(this), paymentAmount);
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_BUY_NFT_PL_ERC20, quantity, index, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_BUY_NFT_PL_ERC20, msgHash, signature, requestId, expiredTime), "Signature invalid");
        _buyNFTPublic(TOKEN_ERC20, quantity, paymentAmount, index, requestId);
    }

    function buyNFTPublicETH(uint256 quantity, bytes memory signature, uint256[] memory index, uint256 requestId, uint256 expiredTime) external payable ignoreOwner {
        require(isNativePayment(), "payment method not support");
        require(isPublicFCFS(), "Public not FCFS");
        uint256 paymentAmount = quantity * publicSale.price;
        require(msg.value == paymentAmount, "value invalidate");
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_BUY_NFT_PL_NATIVE, quantity, index, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_BUY_NFT_PL_NATIVE, msgHash, signature, requestId, expiredTime), "Signature invalid");
        _buyNFTPublic(TOKEN_NATIVE, quantity, paymentAmount, index, requestId);
    }

    function buyTicketERC20(uint256 quantity, bytes memory signature, uint256 requestId, uint256 expiredTime) external ignoreOwner {
        require(!isNativePayment(), "payment method not support");
        require(!isPublicFCFS(), "Public is FCFS");
        uint256 paymentAmount = quantity * publicSale.price;
        paymentToken.transferFrom(msg.sender, address(this), paymentAmount);
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_BUY_TICKET_ERC20, quantity, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_BUY_TICKET_ERC20, msgHash, signature, requestId, expiredTime), "Signature invalid");
        _buyTicket(TOKEN_ERC20, paymentAmount, quantity, requestId);
    }

    function buyTicketETH(uint256 quantity, bytes memory signature, uint256 requestId, uint256 expiredTime) external payable ignoreOwner {
        require(isNativePayment(), "payment method not support");
        require(!isPublicFCFS(), "Public is FCFS");
        uint256 paymentAmount = quantity * publicSale.price;
        require(msg.value == paymentAmount, "value invalidate");
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_BUY_TICKET_NATIVE, quantity, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_BUY_TICKET_NATIVE, msgHash, signature, requestId, expiredTime), "Signature invalid");
        _buyTicket(TOKEN_NATIVE, paymentAmount, quantity, requestId);
    }

    function refund(uint256 amount, bytes memory signature, uint256 requestId, uint256 expiredTime) external ignoreOwner {
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_REFUND, amount, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_REFUND, msgHash, signature, requestId, expiredTime), "Signature invalid");
        require(block.timestamp > publicSale.endTime, "Cannot NFT token before publicSale's endTime");
        Refund storage userRefund = refundMapping[_msgSender()];
        require(!userRefund.refunded, "User refunded");
        userRefund.refunded = true;
        userRefund.amount = amount;
        _transferTokenToAddress(_msgSender(), amount);
        _getEventProvider().submitRefund(address(this), _msgSender(), amount, requestId);
    }

    function claimNFT(uint256[] memory ticketIds, bytes memory signature, uint256 requestId, uint256 expiredTime) external ignoreOwner {
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_CLAIM_NFT, ticketIds, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_CLAIM_NFT, msgHash, signature, requestId, expiredTime), "Signature invalid");
        require(block.timestamp > publicSale.endTime, "Cannot NFT token before publicSale's endTime");
        for (uint256 i = 0; i < ticketIds.length; i++) {
            uint256 ticketId = ticketIds[i];
            _claimNFTWithTicketId(ticketId, requestId);
        }
    }

    function claimToken(address _to, uint256 _amount, bytes memory signature, uint256 requestId, uint256 expiredTime) external onlyOwner {
        bytes32 msgHash = keccak256(
            abi.encodePacked(_msgSender(), TYPE_FUNC_CLAIM_TOKEN, _to, _amount, requestId, expiredTime)
        );
        require(factory.validSignature(TYPE_FUNC_CLAIM_TOKEN, msgHash, signature, requestId, expiredTime), "Signature invalid");
        require(block.timestamp > publicSale.endTime, "Cannot claim token before publicSale's endTime");
        require(block.timestamp > privateSale.endTime, "Cannot claim token before privateSale's endTime");
        require(block.timestamp > guaranteedSale.endTime, "Cannot claim token before privateSale's endTime");
        uint256 buyType = _transferTokenToAddress(_to, _amount);
        _getEventProvider().submitTokenClaim(address(this), buyType, _to, _amount, requestId);
    }

    // orochi consume
    function consumeRandomness(uint256 randomness) external onlyFactory returns (bool) {
        return _consumeRandomness(randomness);
    }

    function getPendingTX(address _user) external view returns (uint256){
        UserQueue memory paymentQueue = paymentQueueMapping[_user];
        if (paymentQueue.queue.length > paymentQueue.current) {
            return paymentQueue.queue.length - paymentQueue.current;
        }
        return 0;
    }

    function getLaunchpadPendingTX() external view returns (uint256){
        if (userQueueList.length > currentQueue) {
            return userQueueList.length - currentQueue;
        }
        return 0;
    }

    function checkRequestIdIndex(uint256 requestId, uint256 index) external view returns (bool) {
        return requestIdIndexMapping[requestId][index];
    }

    function checkRequestIdTicketId(uint256 requestId, uint256 ticketId) external view returns (bool) {
        return requestIdTicketIdMapping[requestId][ticketId];
    }

    function getPurchase(address _user) external view returns (Purchase memory) {
        return itemSoldMapping[_user];
    }

    function getQueue(address _user) external view returns (UserQueue memory) {
        return paymentQueueMapping[_user];
    }

    function reOwnNFT(address _newOwner) external onlyOwner {
        if (mintType == MINT_TYPE_MULTI) {
            collection.transferOwnership(_newOwner);
        } else if (mintType == MINT_TYPE_BATCH) {
            collection.grantRole(DEFAULT_ADMIN_ROLE, _newOwner);
            collection.revokeRole(MINTER_ROLE, address(this));
            collection.revokeRole(DEFAULT_ADMIN_ROLE, address(this));
        }
    }
}
