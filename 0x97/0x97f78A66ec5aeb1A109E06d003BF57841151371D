
// File: svstaking.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


contract ShivaVoneStaker is Ownable {
    enum MinimumLockTime {
        ONEMONTH,
        THREEMONTHS,
        SIXMONTHS,
        ONEYEAR
    }

    //Declare tokens
    IERC20 stakeToken;
    IERC20 rewardToken;
    uint8 decimals;

    uint256 rewardPercentage = 1;
    uint256 yearInSeconds = 365 days;
    uint256 public totalStakedTokens;
    uint256 public stakers;
    MinimumLockTime public minimumLockTime;

    //Staking data
    mapping(address => uint) public stakingBalance;
    mapping(address => bool) public isStaking;
    mapping(address => uint256) public latestStakedTime;

    // Constructor 
    constructor(IERC20 _stakeToken, IERC20 _rewardToken,uint8 _stakeTokenDecimals) Ownable(msg.sender) {
        stakeToken = _stakeToken;
        rewardToken = _rewardToken;
        decimals = _stakeTokenDecimals;
    }

    // Stake tokens 
    function stakeTokens(uint _amount) public {
        uint256 minimumAmount = 1_000_000 * 10 ** decimals;
        require(_amount > 0 && _amount >=  minimumAmount, "Must be greater than 1 million");
        require(stakeToken.balanceOf(msg.sender) >= _amount, "Insufficient balance");
        
        //Get Token
        stakeToken.transferFrom(msg.sender, address(this), _amount);

        stakingBalance[msg.sender] += _amount ;
        if (!isStaking[msg.sender]) stakers += 1;
        isStaking[msg.sender] = true;
        latestStakedTime[msg.sender] = block.timestamp;
        totalStakedTokens += _amount;
        
    }



    //Unstake tokens
    function unstakeTokens() public {
        uint256 minTime = _getMinimumLockTime();
        require(isStaking[msg.sender], "NO STAKE");
        uint256 duration = block.timestamp - latestStakedTime[msg.sender];
        require(duration > minTime, "Time not exceeded");
        uint256 balance = stakingBalance[msg.sender];

        uint256 reward = _calculateRewards(msg.sender);

        stakingBalance[msg.sender] = 0;
        isStaking[msg.sender] = false;
        latestStakedTime[msg.sender] = 0;


        stakeToken.transfer(msg.sender, balance);
        rewardToken.transfer(msg.sender, reward);
    }
    function calculateRewards(address _staker) external view returns(uint256 reward) {
        reward = _calculateRewards(_staker);
    }

    function _calculateRewards(address _staker) internal view returns(uint256 reward) {
        uint256 balance = stakingBalance[_staker];
        uint256 duration = block.timestamp - latestStakedTime[_staker];

        reward = (duration * balance * rewardPercentage) / yearInSeconds;
    }

    function _getMinimumLockTime() internal view returns (uint256 minTime){
        if (minimumLockTime == MinimumLockTime.ONEYEAR){
            minTime = 365 days;
        }
        else if (minimumLockTime == MinimumLockTime.SIXMONTHS) {
            minTime = 180 days;
        }
        else if (minimumLockTime == MinimumLockTime.THREEMONTHS) {
            minTime = 90 days;
        }
        else {
            minTime = 30 days;
        }
    }

    function emergencyWithdrawal(IERC20 _token, uint _amount, address receiver) external onlyOwner {
        require(_token != stakeToken, "Cannot withdraw staked tokens");
        require(_token.balanceOf(address(this)) > 0, "No tokens to withdraw");
        _token.transfer(receiver, _amount);
    }

    function withDrawRewardTokens(uint _amount, address receiver) external onlyOwner {
        require(rewardToken.balanceOf(address(this)) > 0, "No tokens to withdraw");
        rewardToken.transfer(receiver, _amount);
    }

    // Setters
    function setRewardPercentage(uint _amount) external onlyOwner {
        rewardPercentage = _amount;
    }

    function setMinimumLockTime(MinimumLockTime _time) external onlyOwner {
        minimumLockTime = _time;
    }

    function setTimeToRatio(uint256 _timeInSeconds) external onlyOwner {
        yearInSeconds = _timeInSeconds;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

