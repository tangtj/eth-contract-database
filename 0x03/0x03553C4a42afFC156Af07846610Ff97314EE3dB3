
// File: /contracts/Settlement.sol
// SPDX-License-Identifier: MIT
// Tells the Solidity compiler to compile only from v0.8.13 to v0.9.0
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./AccessControl.sol";

struct SettlementStruct {
        address debtor;
        address creditor;
        address[] tokens;
        uint256[] amounts;
        bool exists;
        bool authorized;
        bool releaseDebtor;
        bool releaseCreditor;
}

contract Settlement {    

    address public owner;
    address public executor;

    AccessControl accessControl;
    event PendingSettlement(uint256 settlementUUID, address debtor, address creditor);
    event ExecutedSettlement(uint256 settlementUUID, address debtor, address creditor);
    event Deposit(address depositor, address token,  uint256 depositedAmount, uint256 currentAmount);
    event Redemption(address depositor, address token,  uint256 depositedAmount, uint256 currentAmount);
    event CustodianSignature(uint settlementUUID);
    event Locked(address depositor, address token,  uint256 lockedAmount);
    event Unlocked(address depositor, address token,  uint256 lockedAmount);


    mapping(address => mapping (address => uint256)) private custodianBalances;
    mapping(address => mapping (address => uint256)) private lockedCustodianBalances;
    mapping(uint256 => SettlementStruct) private custodianSettlements;

    constructor(address AccessControlAddress, address executorAddress){
        owner = msg.sender;
        checkZeroAddress(executorAddress);
        executor = executorAddress;
        checkZeroAddress(AccessControlAddress);
        accessControl = AccessControl(AccessControlAddress);
        //_paused = false;
    }

    modifier onlyOwner {
        require(msg.sender == owner, "Not contract owner");
        _;
    }

    modifier onlyExecutor {
        require(msg.sender == executor, "Not contract executor");
        _;
    }

    function checkZeroAddress(address _address) internal pure {
        require (_address != address(0), "Invalid address");
    }

    function deposit(address tokenAddress, uint256 amount) public {
        accessControl.onlyAllowed(msg.sender);
        accessControl.onlyAllowedToken(tokenAddress);
        bool overflow = false;
        IERC20 token = IERC20(tokenAddress);
        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);
        (overflow, custodianBalances[msg.sender][tokenAddress]) = SafeMath.tryAdd(custodianBalances[msg.sender][tokenAddress], amount);
        require(overflow, "Overflow");
        emit Deposit(msg.sender, tokenAddress, amount, custodianBalances[msg.sender][tokenAddress]);
    }

    function lockFunds(address tokenAddress, uint256 amount) public {
        accessControl.onlyAllowed(msg.sender);
        accessControl.onlyAllowedToken(tokenAddress);
        accessControl.relockForVC(msg.sender);
        bool operationOverflow = false;
        //moves from unlocked debtor to locked debtor
        (operationOverflow, custodianBalances[msg.sender][tokenAddress], lockedCustodianBalances[msg.sender][tokenAddress]) = 
            _moveFunds(custodianBalances[msg.sender][tokenAddress], lockedCustodianBalances[msg.sender][tokenAddress], amount);
        require(operationOverflow, "Insuficient funds to lock");
        emit Locked(msg.sender, tokenAddress, amount);
    }

    function unlockFunds(address tokenAddress) public {
        accessControl.onlyAllowed(msg.sender);
        bool operationOverflow = false;
        require(accessControl.isReleased(msg.sender), "Custodian is not marked for release");
        //releases funds of token address
        (operationOverflow, custodianBalances[msg.sender][tokenAddress]) = SafeMath.tryAdd(custodianBalances[msg.sender][tokenAddress], lockedCustodianBalances[msg.sender][tokenAddress]);
        lockedCustodianBalances[msg.sender][tokenAddress] = 0;
        require(operationOverflow, "Overflow");
        emit Unlocked(msg.sender, tokenAddress, custodianBalances[msg.sender][tokenAddress]);
    }

    function createPendingSettlement(uint256 settlementUUID, address debtor, address creditor, address[] memory tokenAddresses, 
        uint256[] memory tokenAmounts, bool releaseDebtor, bool releaseCreditor) external onlyExecutor /*whenNotPaused*/ {
        require(tokenAddresses.length == tokenAmounts.length, "Invalid tokens/amount pairs");
        require(!custodianSettlements[settlementUUID].exists, "Settlement already exists");
        accessControl.validateSettlement(creditor, debtor, releaseCreditor, releaseDebtor, tokenAddresses);
        custodianSettlements[settlementUUID] = SettlementStruct(debtor, creditor, tokenAddresses, tokenAmounts, true, false, releaseDebtor, releaseCreditor);
        emit PendingSettlement(settlementUUID, debtor, creditor);
    }

    function authorizeSettlement(uint256 settlementUUID) public {
        accessControl.onlyAllowed(msg.sender);
        require(_mappingObjectExists(settlementUUID), "Inexistent settlement");
        if (accessControl.isBrickAndMortar(msg.sender)) {
            require(msg.sender == custodianSettlements[settlementUUID].debtor, "Address is not the debtor");
            _lockFunds(settlementUUID);
        }
        else if (accessControl.isVirtualCustodian(custodianSettlements[settlementUUID].debtor)) {
            require(accessControl.isAuditor(msg.sender));
        } else {
            revert("Invalid custodian category");
        }
        custodianSettlements[settlementUUID].authorized = true;
        emit CustodianSignature(settlementUUID);
    }

    function authorizeMultiple(uint256[] memory settlementUUIDs) public {
        for (uint256 i = 0; i< settlementUUIDs.length; i++) {
            authorizeSettlement(settlementUUIDs[i]);
        }
    }

    function executeSettlement(uint256[] memory executedIds) external onlyExecutor {
        for (uint256 settlementIndex= 0; settlementIndex < executedIds.length; settlementIndex++) {
            require(_mappingObjectExists(executedIds[settlementIndex]), "Inexistent settlement");
            require(custodianSettlements[executedIds[settlementIndex]].authorized, "Settlement not signed");
            _settle(executedIds[settlementIndex]);
            _freeStorage(executedIds[settlementIndex]);
        }
    }

    function _mappingObjectExists(uint256 settlementUUID) private view returns (bool){
        return custodianSettlements[settlementUUID].exists == true ? true : false;
    }

    function _settle(uint256 settlementUUID) private {
        bool overflow = true;
        SettlementStruct storage settlement = custodianSettlements[settlementUUID];
        require(!accessControl.isReleased(settlement.debtor) && !accessControl.isReleased(settlement.creditor), "creditor/debtor marked as released");
        for (uint index = 0; index < settlement.tokens.length; index++) {
            bool operationOverflow = false;
            if(accessControl.isBrickAndMortar(settlement.creditor)) {
            //moves from locked debtor to unlocked creditor if creditor is category 1(BRICK)
                (operationOverflow, lockedCustodianBalances[settlement.debtor][settlement.tokens[index]], custodianBalances[settlement.creditor][settlement.tokens[index]]) = 
                        _moveFunds(lockedCustodianBalances[settlement.debtor][settlement.tokens[index]], custodianBalances[settlement.creditor][settlement.tokens[index]], settlement.amounts[index]);
                overflow = operationOverflow && overflow;
            } else if (accessControl.isVirtualCustodian(settlement.creditor)) {
                //moves from locked debtor to locked creditor if creditor is category 2(VC)
                (operationOverflow, lockedCustodianBalances[settlement.debtor][settlement.tokens[index]], lockedCustodianBalances[settlement.creditor][settlement.tokens[index]]) = 
                    _moveFunds(lockedCustodianBalances[settlement.debtor][settlement.tokens[index]], lockedCustodianBalances[settlement.creditor][settlement.tokens[index]], settlement.amounts[index]);
                overflow = operationOverflow && overflow;
            }
        }
        if (settlement.releaseCreditor == true) accessControl.markAsRelease(settlement.creditor);
        if (settlement.releaseDebtor == true) accessControl.markAsRelease(settlement.debtor);
        require(overflow, "Insuficient funds to settle");
        emit ExecutedSettlement(settlementUUID, settlement.debtor, settlement.creditor);
    }

    function _lockFunds(uint256 settlementUUID) private {
        bool overflow = true;
        SettlementStruct storage settlement = custodianSettlements[settlementUUID];
        for (uint index = 0; index < settlement.tokens.length; index++) {
            bool operationOverflow = false;
            //moves from unlocked debtor to locked debtor
            (operationOverflow, custodianBalances[settlement.debtor][settlement.tokens[index]], lockedCustodianBalances[settlement.debtor][settlement.tokens[index]]) = 
                    _moveFunds(custodianBalances[settlement.debtor][settlement.tokens[index]], lockedCustodianBalances[settlement.debtor][settlement.tokens[index]], settlement.amounts[index]);
            overflow = operationOverflow && overflow;
        }
        require(overflow, "Insuficient funds to lock");
    }

    function _freeStorage(uint256 key) private {
        SettlementStruct memory emptyStruct;
        custodianSettlements[key] = emptyStruct;
    }

    function redeem(address tokenAddress, uint256 amount) public {
        accessControl.onlyAllowed(msg.sender);
        IERC20 token = IERC20(tokenAddress);
        require(amount <= custodianBalances[msg.sender][tokenAddress], "Insuficient funds");
        (, custodianBalances[msg.sender][tokenAddress]) = SafeMath.trySub(custodianBalances[msg.sender][tokenAddress], amount);
        SafeERC20.safeTransfer(token, msg.sender, amount);
        emit Redemption(msg.sender, tokenAddress, amount, custodianBalances[msg.sender][tokenAddress]);        
    }

    function getBalancesOfToken(address custodianAddress, address tokenAddress) public view returns (uint256 balance, uint256 lockedBalance){
        return (custodianBalances[custodianAddress][tokenAddress], lockedCustodianBalances[custodianAddress][tokenAddress]);
    }

    function getSettlementData(uint256 settlementId) public view returns (address debtor, address creditor, 
        address[] memory tokens, uint256[] memory amounts, bool releaseDebtor, bool releaseCreditor, bool authorized) {
        return (custodianSettlements[settlementId].debtor, custodianSettlements[settlementId].creditor, 
            custodianSettlements[settlementId].tokens, custodianSettlements[settlementId].amounts,
            custodianSettlements[settlementId].releaseDebtor, custodianSettlements[settlementId].releaseCreditor, 
            custodianSettlements[settlementId].authorized);
    }

    function getContractData() public view returns (address executorAddress, address adminAddress){
        return (executor, owner);
    }
    /*

    function paused() public view virtual returns (bool) {
        return _paused;
    }

    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    function pause() external whenNotPaused onlyOwner {
        _paused = true;
        emit Paused(msg.sender);
    }

    function unpause() external whenPaused onlyOwner {
        _paused = false;
        emit Unpaused(msg.sender);
    }*/

    function _moveFunds(uint256 debtorAmt, uint256 creditorAmt, uint256 amt) internal pure 
        returns (bool overflow, uint256 debtorBalance, uint256 creditorBalance) {
        bool overflowSub = false;
        bool overflowAdd = false;           
        (overflowSub , debtorBalance) = SafeMath.trySub(debtorAmt, amt);
        (overflowAdd, creditorBalance) = SafeMath.tryAdd(creditorAmt, amt);
        return (overflowSub && overflowAdd, debtorBalance, creditorBalance);
    }
    
    function deleteSettlement(uint256 settlementUUID) external onlyOwner {
        if (!accessControl.isVirtualCustodian(custodianSettlements[settlementUUID].debtor)){
            //Only non VC users need to move funds
            if (custodianSettlements[settlementUUID].authorized){
            bool overflow = true;
            SettlementStruct storage settlement = custodianSettlements[settlementUUID];
            for (uint index = 0; index < settlement.tokens.length; index++) {
                bool operationOverflow = false;
                //moves from locked debtor to unlocked debtor      
                (operationOverflow, lockedCustodianBalances[settlement.debtor][settlement.tokens[index]], custodianBalances[settlement.debtor][settlement.tokens[index]]) = 
                    _moveFunds(lockedCustodianBalances[settlement.debtor][settlement.tokens[index]], custodianBalances[settlement.debtor][settlement.tokens[index]], settlement.amounts[index]);
                overflow = operationOverflow && overflow;
                }
            require(overflow, "Could not settle due to insuficient funds");
            }
        }        
        _freeStorage(settlementUUID);
    }

    function changeOwnership(address ownerAddress) external onlyOwner {
        checkZeroAddress(ownerAddress);
        owner = ownerAddress;
    }
}


// File: /contracts/AccessControl.sol
// SPDX-License-Identifier: MIT
// Tells the Solidity compiler to compile only from v0.8.13 to v0.9.0
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract AccessControl {    

    address public owner;
    address public auditor;
    address public settlementContract;

    bool public definedContract = false;

    mapping(address => bool) private custodianAddresses; 
    mapping(address => uint8) private custodianCategory; // 1 - Big custodians  2 - Individuals 10 - Marked as releasable
    mapping(address => bool) private allowableTokens;

    event CustodianAdded(address custodianAddress, uint8 custodianCategory);


    constructor(address auditorAddress){
        checkZeroAddress(auditorAddress);
        auditor = auditorAddress;
        owner = msg.sender;
    }

    function onlyOwner (address sentAddress) private view {
        require(sentAddress == owner, "Not contract owner");
        return;
    }

    function checkZeroAddress(address _address) internal pure {
        require (_address != address(0), "Invalid address");
    }

    function onlySettlementAndAuditor(address settlementContractOrAuditorAddress) private view {
        require((settlementContractOrAuditorAddress == auditor) || (settlementContractOrAuditorAddress == settlementContract), "No permission to release");
        return;
    }

     function onlySettlement(address settlementContractOrAuditorAddress) private view {
        require((settlementContractOrAuditorAddress == settlementContract), "No permission to lock");
        return;
    }

    function onlyAllowed (address sentAddress) external view {
        require(custodianAddresses[sentAddress] == true || sentAddress == auditor, "Address not allowed");
        return;
    }

    function onlyAllowedToken(address tokenAddress) external view {
        require(allowableTokens[tokenAddress] == true, "Token not allowed");
        return;
    }

    function isAuditor(address auditorAddress) external view returns (bool) {
        require(auditor == auditorAddress, "Address is not the auditor");
        return true;
    }

    function markAsRelease(address custodianAddress) public {
        onlySettlementAndAuditor(msg.sender);
        require (custodianCategory[custodianAddress] == 2, "Wrong custodian category");
        custodianCategory[custodianAddress] = 10;
    }

    function setMultipleCustodiansAllowable(address[] calldata newCustodianAddresses, uint8[] calldata custodianCategories) external {
        require(newCustodianAddresses.length == custodianCategories.length);
        onlyOwner(msg.sender);
        for (uint8 i = 0; i< newCustodianAddresses.length; i++){
            setCustodianAllowable(newCustodianAddresses[i], custodianCategories[i]);
        }
    }

    function setCustodianAllowable(address custodianAddress, uint8 custodianCategoryValue) public {
        onlyOwner(msg.sender);
        checkZeroAddress(custodianAddress);
        custodianAddresses[custodianAddress] = true;
        custodianCategory[custodianAddress] = custodianCategoryValue;
        emit CustodianAdded(custodianAddress, custodianCategoryValue);
    }

    function getCustodianAllowable(address custodianAddress) external view returns (bool, uint8) {
        return (custodianAddresses[custodianAddress], custodianCategory[custodianAddress]);
    }

    function isVirtualCustodian(address custodianAddress) external view returns (bool) {
        return 2 == custodianCategory[custodianAddress];
    }
    function isBrickAndMortar(address custodianAddress) external view returns (bool){
        return 1 == custodianCategory[custodianAddress];
    }

    function isReleased(address custodianAddress) external view returns (bool) {
        return 10 == custodianCategory[custodianAddress];
    }

    function relockForVC(address custodianAddress) external {
        onlySettlement(msg.sender);
        if(custodianCategory[custodianAddress] == 10) custodianCategory[custodianAddress] = 2; //relocks custodian after marked for release
        require(custodianCategory[custodianAddress] == 2, "Custodian category cannot lock funds");
        return;
    }

    function validateSettlement(address creditor, address debtor, bool releaseCreditor, bool releaseDebtor, address[] calldata tokenAddresses) external view{
        require ((custodianAddresses[creditor] && custodianAddresses[debtor]), "Invalid creditor/debtor");
        bool inconsistent = false;
        if (releaseCreditor && custodianCategory[creditor]!= 2){
            inconsistent = true;
        }
        if (releaseDebtor && custodianCategory[debtor]!= 2){
            inconsistent = true;
        }
        require(!inconsistent, "Creditor/debtor is not a VC to be released");
        for(uint index = 0; index < tokenAddresses.length; index++) {
            require(allowableTokens[tokenAddresses[index]], "Invalid token used");
        }        
    }

    function removeCustodianAllowable(address custodianAddress) external {
        onlyOwner(msg.sender);
        custodianAddresses[custodianAddress] = false;
    }    

    function setTokenAllowable(address tokenAddress) external {
        onlyOwner(msg.sender);
        allowableTokens[tokenAddress] = true;
    }

    function removeTokenAllowable(address tokenAddress) external {
        onlyOwner(msg.sender);
        allowableTokens[tokenAddress] = false;
    }

    function getTokenAllowable(address tokenAddress) public view returns (bool) {
        return allowableTokens[tokenAddress];
    }

    function changeOwnership(address ownerAddress) external {
        onlyOwner(msg.sender);
        checkZeroAddress(ownerAddress);
        owner = ownerAddress;
    }

    function addSettlementContractAddress(address settlementAddress) public {
        onlyOwner(msg.sender);
        require (definedContract == false, "Cannot redefine linked settlement contract");
        checkZeroAddress(settlementAddress);
        settlementContract = settlementAddress;
        definedContract = true;
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

