
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/access/Ownable2Step.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)

pragma solidity ^0.8.0;

import "./Ownable.sol";

/**
 * @dev Contract module which provides access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership} and {acceptOwnership}.
 *
 * This module is used through inheritance. It will make available all functions
 * from parent (Ownable).
 */
abstract contract Ownable2Step is Ownable {
    address private _pendingOwner;

    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Returns the address of the pending owner.
     */
    function pendingOwner() public view virtual returns (address) {
        return _pendingOwner;
    }

    /**
     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual override onlyOwner {
        _pendingOwner = newOwner;
        emit OwnershipTransferStarted(owner(), newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual override {
        delete _pendingOwner;
        super._transferOwnership(newOwner);
    }

    /**
     * @dev The new owner accepts the ownership transfer.
     */
    function acceptOwnership() public virtual {
        address sender = _msgSender();
        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");
        _transferOwnership(sender);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/Commission.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "@openzeppelin/contracts/access/Ownable2Step.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

// Errors
error CommissionTransferFailed();
error NativeClaimFailed();
error NotEnoughBalance();
error ZeroAddress();
error ViolationOfFixedNativeTokensLimit();
error UnauthorizedCommissionReceiver(address caller);
error PercentageLimitExceeded();
error InvalidProportionSum(uint8 proportion1, uint8 proportion2);
error TakeFixedNativeTokensCommissionFailed(uint256 sent, uint256 required);
error ZeroFixedNativeTokensCommissionLimit();
error EnablingZeroFixedNativeTokenCommission();
error EnablingZeroFixedTokenCommission();
error EnablingZeroTokenPercentageCommission();


/// @title Commission module for bridge contract
/// @author SingularityNET
abstract contract Commission is Ownable2Step, ReentrancyGuard {
    // Address of token contract for  
    address internal immutable TOKEN;

    uint256 private constant ONE_HUNDRED = 100;
    uint256 private immutable FIXED_NATIVE_TOKEN_COMMISSION_LIMIT;
    
    enum CommissionType {
        PercentageTokens, // commission in percentage tokens
        FixedTokens, // commission in fix value of tokens
        FixedNativeTokens // commission in native currency
    }

    CommissionSettings public commissionSettings;
    struct CommissionSettings {
        uint8 convertTokenPercentage; // percentage sum of commission in token
        uint8 receiverCommissionProportion; // proportion for commission receiver
        uint8 bridgeOwnerCommissionProportion; // proportion for bridge owner commission receiver
        uint16 pointOffsetShifter; // point offset variable
        bool commissionIsEnabled; // activate/deactivate commission
        uint256 fixedNativeTokensCommission; // fixed value of commission in native tokens
        uint256 fixedTokenCommission; // fixed value of commission in tokens
        CommissionType commissionType; // global type of commission
        address payable receiverCommission;
        address payable bridgeOwner; // can't be zero address
    } 
    
    /**
     * @dev Selector for the `transferFrom(address,address,uint256)` function
     * calculated as bytes4(keccak256("transferFrom(address,address,uint256)"))
     */
    bytes4 private constant TRANSFERFROM_SELECTOR = 0x23b872dd;

    /**
     * @dev Selector for the `transfer(address,uint256)` function
     * calculated as bytes4(keccak256("transfer(address,uint256)"))
     */
    bytes4 internal constant TRANSFER_SELECTOR = 0xa9059cbb;

    // Events
    event UpdateReceiver(address indexed previousReceiver, address indexed newReceiver);
    event UpdateCommissionType(
        bool indexed commissionIsEnabled,
        uint256 indexed commissionType,
        uint256 indexed timestamp     // matches `Update...Commission` events
    );
    event UpdateFixedNativeTokensCommission( 
        uint256 indexed timestamp,
        uint256 fixedNativeTokensCommission
    );
    event UpdateFixedTokensCommission( 
        uint256 indexed timestamp,
        uint256 fixedTokenCommission
    );
     event UpdatePercentageTokensCommission( 
        uint256 indexed timestamp,
        uint256 convertTokenPercentage,
        uint256 pointOffsetShifter
    );
    event UpdateCommissionProportions(
        uint8 receiverCommissionProportion, 
        uint8 bridgeOwnerCommissionProportion,
        uint256 updateTimestamp
    );
    event FixedNativeTokensCommissionClaim(uint256 indexed time);

    // Check that the caller is a recipient of the commission.
    modifier isCommissionReceiver(address caller) {
        if (
            _msgSender() != commissionSettings.receiverCommission &&
            _msgSender() != commissionSettings.bridgeOwner
        ) 
            revert UnauthorizedCommissionReceiver(_msgSender());
        _;
    }

    modifier checkProportion(uint8 proportionOne, uint8 proportionTwo) {
        if (proportionOne + proportionTwo != uint8(100)) 
            revert InvalidProportionSum(proportionOne, proportionTwo);
        _;
    }

    modifier notZeroAddress(address account) {
        if (account == address(0))
            revert ZeroAddress();
        _;
    }

    constructor(
        address token,
        bool commissionIsEnabled,
        uint8 receiverCommissionProportion,
        uint8 bridgeOwnerCommissionProportion,
        uint256 fixedNativeTokensCommissionLimit,
        address payable receiverCommission,
        address payable bridgeOwner
    ) 
        Ownable() 
        notZeroAddress(token) 
        notZeroAddress(bridgeOwner) 
    {

        TOKEN = token;

        if (fixedNativeTokensCommissionLimit == 0)
            revert ZeroFixedNativeTokensCommissionLimit();
        FIXED_NATIVE_TOKEN_COMMISSION_LIMIT = fixedNativeTokensCommissionLimit;
 
        uint256 timestamp = block.timestamp;
        if (commissionIsEnabled) {
            commissionSettings.commissionIsEnabled = true;
            emit UpdateCommissionType(true, 0, timestamp);
        }

        if (receiverCommission != address(0)) {
            commissionSettings.receiverCommission = payable(receiverCommission);
            emit UpdateReceiver(address(0), receiverCommission);
            
            updateCommissionProportions(receiverCommissionProportion, bridgeOwnerCommissionProportion);
        } else {
            updateCommissionProportions(0, 100);
        }

        commissionSettings.bridgeOwner = payable(bridgeOwner);
        emit UpdateReceiver(address(0), bridgeOwner);

        emit UpdateCommissionProportions(
            receiverCommissionProportion, 
            bridgeOwnerCommissionProportion, 
            timestamp
        );
    }

    /**
     * @notice Method to disable commission of any type
     */
    function disableCommission() external onlyOwner {
        commissionSettings.commissionIsEnabled = false;

        emit UpdateCommissionType(false, uint256(commissionSettings.commissionType), block.timestamp);
    }


    /**
     * @notice Method to enable commission, if it's not enabled and
     *  update amount of native tokens charged as a commission
     * @dev Enables the commission if it is currently disabled. Sets the commission type to fixed native tokens if it is not already. 
     * If `newFixedNativeTokensCommission` is non-zero, updates the commission amount. Emits corresponding events.
     * @param newFixedNativeTokensCommission The new amount of native tokens to be charged as commission.
     */
    function enableAndUpdateFixedNativeTokensCommission(
        uint256 newFixedNativeTokensCommission
    ) 
        external 
        onlyOwner 
    {
        uint256 timestamp = block.timestamp;

        if (!commissionSettings.commissionIsEnabled) {
            commissionSettings.commissionIsEnabled = true;
        }

        // enable type of fixed native token commission
        if ( commissionSettings.commissionType != CommissionType.FixedNativeTokens) {
            if (newFixedNativeTokensCommission == 0)
                revert EnablingZeroFixedNativeTokenCommission();
            commissionSettings.commissionType = CommissionType.FixedNativeTokens;
            emit UpdateCommissionType(true, 2, timestamp);
        }

        // update amount of fixed native token commission
        _checkFixedFixedNativeTokensLimit(newFixedNativeTokensCommission);
        commissionSettings.fixedNativeTokensCommission = newFixedNativeTokensCommission;
        emit UpdateFixedNativeTokensCommission(timestamp, newFixedNativeTokensCommission);
    }

    /**
     * @notice Method to enable commission, if it's not enabled and update the amount of fixed tokens charged as a commission.
     * @dev Enables the commission if it is currently disabled. Sets the commission type to fixed tokens if it is not already. 
     * If `newFixedTokenCommission` is non-zero, updates the commission amount. Emits corresponding events.
     * @param newFixedTokenCommission The new amount of fixed tokens to be charged as commission.
     */
    function enableAndUpdateFixedTokensCommission(uint256 newFixedTokenCommission) external onlyOwner {
        uint256 timestamp = block.timestamp;

        if (!commissionSettings.commissionIsEnabled) 
            commissionSettings.commissionIsEnabled = true;

        // enable type of fixed token commission
        if (commissionSettings.commissionType != CommissionType.FixedTokens) {
            if (newFixedTokenCommission == 0)
                revert EnablingZeroFixedTokenCommission();
            commissionSettings.commissionType = CommissionType.FixedTokens;
            emit UpdateCommissionType(true, 1, timestamp);
        }
            
        // update amount of fixed token commission
        commissionSettings.fixedTokenCommission = newFixedTokenCommission;
        emit UpdateFixedTokensCommission(timestamp, newFixedTokenCommission);
    }

    /**
     * @notice Method to enable commission, if it's not enabled and update the percentage of tokens charged as a commission.
     *  Updates together token percentage and point offset shifter
     * @dev Enables the commission if it is currently disabled. Sets the commission type to percentage tokens if it is not already. 
     * If `newConvertTokenPercentage` and `newPointOffsetShifter` are non-zero, updates the commission percentage and point offset. 
     * Emits corresponding events.
     * @param newConvertTokenPercentage The new percentage of tokens to be charged as commission.
     * @param newPointOffsetShifter The new point offset shifter for the token percentage commission.
     */
    function enableAndUpdatePercentageTokensCommission(
        uint8 newConvertTokenPercentage, 
        uint16 newPointOffsetShifter
    ) 
        external 
        onlyOwner 
    {
        uint256 timestamp = block.timestamp;

        if (!commissionSettings.commissionIsEnabled) 
            commissionSettings.commissionIsEnabled = true;

        // enable type of token commission in percentage
        if (commissionSettings.commissionType != CommissionType.PercentageTokens) {
            if (newConvertTokenPercentage == 0 || newPointOffsetShifter == 0)
                revert EnablingZeroTokenPercentageCommission();
            commissionSettings.commissionType = CommissionType.PercentageTokens;
            emit UpdateCommissionType(true, 0, timestamp);
        }

        // update amount of token commission in percentage
        _checkPercentageLimit(newConvertTokenPercentage, newPointOffsetShifter);
        commissionSettings.pointOffsetShifter = newPointOffsetShifter;
        commissionSettings.convertTokenPercentage = newConvertTokenPercentage;
        emit UpdatePercentageTokensCommission(
            timestamp, 
            newConvertTokenPercentage, 
            newPointOffsetShifter
        );
    }

    /**
     * @notice Method for changing bridge commission receiver address
     * @dev newReceiverCommission address can be zero address
     * @param newReceiverCommission - new bridge commission receiver address
     */
    function updateReceiverCommission(address newReceiverCommission) external onlyOwner { 
        if(newReceiverCommission == address(0))
            updateCommissionProportions(0, 100);
        emit UpdateReceiver(commissionSettings.receiverCommission, newReceiverCommission);

        commissionSettings.receiverCommission = payable(newReceiverCommission);
    }

    /**
     * @notice Method for changing bridge owner commission receiver address
     * @param newBridgeOwner - new bridge owner commission receiver address
     */
    function updateBridgeOwner(address newBridgeOwner) 
        external 
        onlyOwner  
        notZeroAddress(newBridgeOwner)
    {
        emit UpdateReceiver(commissionSettings.bridgeOwner, newBridgeOwner);

        commissionSettings.bridgeOwner = payable(newBridgeOwner);
    }

    /**
     * @notice Method for claiming collected native token commission
     * @dev This method can be called by one of the recipients, which will result in receiving
     * its share of the collected commission, as well as sending a share to the second recipient
     * according to the current shares in the contract
     */
    function claimFixedNativeTokensCommission()
        external
        nonReentrant
        isCommissionReceiver(_msgSender())
    {
        CommissionSettings memory cachedCommissionSettings = commissionSettings;
        uint256 contractBalance = address(this).balance;
        if (contractBalance == 0 )
            revert NotEnoughBalance();

        if (
            cachedCommissionSettings.receiverCommissionProportion != 0
        ) {
            (bool sendToReceiver, ) = 
                cachedCommissionSettings.receiverCommission
                    .call{ 
                        value: 
                            contractBalance * cachedCommissionSettings.receiverCommissionProportion 
                                / ONE_HUNDRED 
                    }("");
        
            if (!sendToReceiver) {
                revert NativeClaimFailed();
            }
        }

        (bool sendToOwner,) = 
            commissionSettings.bridgeOwner
                .call{
                    value: 
                        contractBalance * cachedCommissionSettings.bridgeOwnerCommissionProportion 
                            / ONE_HUNDRED
                }("");

        if (!sendToOwner) 
            revert NativeClaimFailed();
        
        emit FixedNativeTokensCommissionClaim(block.timestamp);
    }

    /**
     * @notice Method for get receivers addresses
     * @return Receivers addresses
     */
    function getCommissionReceiverAddresses() external view returns(address, address) {
        return (commissionSettings.receiverCommission, commissionSettings.bridgeOwner);
    }
    

    /**
     * @notice Method for get current commission configuration
     */
    function getCommissionSettings() external view returns (
        bool commissionIsEnabled,
        uint8 receiverCommissionProportion,
        uint8 bridgeOwnerCommissionProportion,
        uint8 convertTokenPercentage,
        uint16 offsetShifter,
        uint256 tokenTypeCommission,
        uint256 fixedTokenCommission,
        uint256 fixedNativeTokensCommission,
        address payable receiverCommission,
        address payable bridgeOwner,
        address token
    ) {
        return (
            commissionSettings.commissionIsEnabled,
            commissionSettings.receiverCommissionProportion,
            commissionSettings.bridgeOwnerCommissionProportion,
            commissionSettings.convertTokenPercentage,
            commissionSettings.pointOffsetShifter,
            uint256(commissionSettings.commissionType),
            commissionSettings.fixedTokenCommission,
            commissionSettings.fixedNativeTokensCommission,
            commissionSettings.receiverCommission,
            commissionSettings.bridgeOwner,
            TOKEN
        );
    }

    /**
     * @notice Method to update the commission proportions for the receiver and the bridge owner.
     * @dev Updates the receiver's commission proportion and the bridge owner's commission proportion 
     * if the new values are different from the current ones. Emits an event with the new proportions.
     * @param newReceiverCommissionProportion The new proportion of commission for the receiver.
     * @param newBridgeOwnerCommissionProportion The new proportion of commission for the bridge owner.
     */
    function updateCommissionProportions(
        uint8 newReceiverCommissionProportion,
        uint8 newBridgeOwnerCommissionProportion
    ) 
        public
        onlyOwner
        checkProportion(
            newReceiverCommissionProportion, 
            newBridgeOwnerCommissionProportion
        ) 
    {
        CommissionSettings memory cachedCommissionSettings = commissionSettings;
        // receiverCommissionProportion can be null
        if (cachedCommissionSettings.receiverCommissionProportion != newReceiverCommissionProportion)
            commissionSettings.receiverCommissionProportion = newReceiverCommissionProportion; 

        if (
            newBridgeOwnerCommissionProportion != 0 && 
            cachedCommissionSettings.bridgeOwnerCommissionProportion != newBridgeOwnerCommissionProportion
        )  
            commissionSettings.bridgeOwnerCommissionProportion = newBridgeOwnerCommissionProportion; 

        emit UpdateCommissionProportions(
            cachedCommissionSettings.receiverCommissionProportion, 
            cachedCommissionSettings.bridgeOwnerCommissionProportion,
            block.timestamp
        );
    }


    /**
     * @notice Method to check when charging a fee in native token
     */
    function _checkPayedCommissionInNative() internal {
        CommissionSettings memory cachedCommissionSettings = commissionSettings;

        if (msg.value != cachedCommissionSettings.fixedNativeTokensCommission) {
            revert TakeFixedNativeTokensCommissionFailed(
                msg.value,
                cachedCommissionSettings.fixedNativeTokensCommission
            );
        }
    }
    
    /**
     * @notice Method to take a commission in tokens in conversionOut
     * @param amount - amount of conversion
     * @return charged commission amount
     */
    function _takeCommissionInTokenOutput(uint256 amount) internal returns (uint256) {
        CommissionSettings memory cachedCommissionSettings = commissionSettings;

        (uint256 commissionAmountBridgeOwner, uint256 commissionSum) =
            _calculateCommissionInToken(amount);

        if (cachedCommissionSettings.receiverCommissionProportion != 0 && commissionSum != commissionAmountBridgeOwner) {
            (bool transferToReceiver, ) = TOKEN.call(
                abi.encodeWithSelector(
                    TRANSFERFROM_SELECTOR,
                    _msgSender(),
                    cachedCommissionSettings.receiverCommission,
                    commissionSum - commissionAmountBridgeOwner
                )
            );
            
            if (!transferToReceiver) 
                revert CommissionTransferFailed();
        }
        (bool transferToBridgeOwner, ) = TOKEN.call(
            abi.encodeWithSelector(
                TRANSFERFROM_SELECTOR,
                _msgSender(),
                cachedCommissionSettings.bridgeOwner,
                commissionAmountBridgeOwner
            )
        );

        if(!transferToBridgeOwner) 
            revert CommissionTransferFailed();

        return commissionSum;
    }

    /**
     * @notice Method to take a commission in tokens in conversionIn
     * @param amount - amount of conversion
     * @return charged commission amount
     */
    function _takeCommissionInTokenInput(uint256 amount) internal returns (uint256) {
        CommissionSettings memory cachedCommissionSettings = commissionSettings;

        (uint256 commissionAmountBridgeOwner, uint256 commissionSum) =
            _calculateCommissionInToken(amount);

        if (cachedCommissionSettings.receiverCommissionProportion != 0 && commissionSum != commissionAmountBridgeOwner) {
            (bool transferToReceiver, ) = TOKEN.call(
                abi.encodeWithSelector(
                    TRANSFER_SELECTOR,
                    cachedCommissionSettings.receiverCommission,
                    commissionSum - commissionAmountBridgeOwner
                )
            );
            
            if (!transferToReceiver) 
                revert CommissionTransferFailed();
        }

        (bool transferToBridgeOwner, ) = TOKEN.call(
            abi.encodeWithSelector(
                TRANSFER_SELECTOR,
                cachedCommissionSettings.bridgeOwner,
                commissionAmountBridgeOwner
            )
        );

        if (!transferToBridgeOwner) 
            revert CommissionTransferFailed();

        return commissionSum;
    }

    /**
     * @notice Method for calculating a charging commission in tokens
     * @param amount - amount of conversion
     * @return commission amount for bridge owner and the whole sum of commission
     */
    function _calculateCommissionInToken(uint256 amount) internal view returns (uint256, uint256) {
        CommissionSettings memory cachedCommissionSettings = commissionSettings;

        if (cachedCommissionSettings.commissionType == CommissionType.PercentageTokens) {
            uint256 commissionSum = amount* uint256(cachedCommissionSettings.convertTokenPercentage) / cachedCommissionSettings.pointOffsetShifter;
            return (
                _calculateCommissionBridgeOwnerProportion(commissionSum), 
                commissionSum
            );
        }
        return (
            _calculateCommissionBridgeOwnerProportion(
                cachedCommissionSettings.fixedTokenCommission
            ), 
            cachedCommissionSettings.fixedTokenCommission
        );
    }

    /**
     * @notice Method for calculating a bridge owner proportion of the whole sum of commission
     * @param amount - amount of conversion
     * @return bridge owner proportion of commission
     */
    function _calculateCommissionBridgeOwnerProportion(uint256 amount) private view returns(uint256) {
        return (amount * uint256(commissionSettings.bridgeOwnerCommissionProportion) / ONE_HUNDRED);
    }

    /**
     * @notice Method to disable commission
     * @param fixedNativeTokensCommission - value native tokens commission value for check
     */
    function _checkFixedFixedNativeTokensLimit(uint256 fixedNativeTokensCommission) private view {
        if (fixedNativeTokensCommission > FIXED_NATIVE_TOKEN_COMMISSION_LIMIT)
            revert ViolationOfFixedNativeTokensLimit();
    }

    /**
     * @notice Method to check customization of percenatage parameters
     * @param convertTokenPercentage - new convert token percentage
     * @param pointOffsetShifter - new offset point shifter
     */
    // convertTokenPercentage <= pointOffsetShifter in order to represent 
    // floating point fees with one decimal place
    function _checkPercentageLimit(uint8 convertTokenPercentage, uint16 pointOffsetShifter) private pure {
        if (convertTokenPercentage > pointOffsetShifter) 
            revert PercentageLimitExceeded();
    }
}

// File: contracts/TokenConversionManagerV2.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "./Commission.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

// Errors
error ViolationOfTxAmountLimits();
error InvalidRequestOrSignature();
error UsedSignature();
error ConversionFailed();
error ConversionMintFailed();
error InvalidUpdateConfigurations();
error MintingMoreThanMaxSupply();

contract TokenConversionManagerV2 is Commission {
    address private _conversionAuthorizer; // Authorizer Address for the conversion

    /**
     * @dev Selector for the `mint(address,uint256)` function
     * calculated as bytes4(keccak256("mint(address,uint256)"))
     */
    bytes4 private constant MINT_SELECTOR = 0x40c10f19;
    
    /**
     * @dev Selector for the `burnFrom(address,uint256)` function
     * calculated as bytes4(keccak256("burnFrom(address,uint256)"))
     */
    bytes4 private constant BURN_SELECTOR = 0x79cc6790;

    //already used conversion signature from authorizer in order to prevent replay attack
    mapping (bytes32 => bool) private _usedSignatures; 

    // Conversion Configurations
    uint256 private _perTxnMinAmount;
    uint256 private _perTxnMaxAmount;
    uint256 private _maxSupply;

    // Events
    event NewAuthorizer(address conversionAuthorizer);
    event UpdateConfiguration(uint256 perTxnMinAmount, uint256 perTxnMaxAmount, uint256 maxSupply);

    event ConversionOut(address indexed tokenHolder, bytes32 conversionId, uint256 amount);
    event ConversionIn(address indexed tokenHolder, bytes32 conversionId, uint256 amount);


    // Modifiers
    modifier checkLimits(uint256 amount) {
        // Check for min, max per transaction limits
        if (amount < _perTxnMinAmount || amount > _perTxnMaxAmount)
            revert ViolationOfTxAmountLimits();
        _;
    }

    constructor(
        address token, 
        bool commissionIsEnabled,
        uint8 receiverCommissionProportion,
        uint8 bridgeOwnerCommissionProportion,
        uint256 fixedNativeTokenCommissionLimit,
        address payable commissionReceiver,
        address payable bridgeOwner
    ) 
        Commission(
            token,
            commissionIsEnabled,
            receiverCommissionProportion,
            bridgeOwnerCommissionProportion,
            fixedNativeTokenCommissionLimit,
            commissionReceiver,
            bridgeOwner
        )
    {   
        _conversionAuthorizer = _msgSender(); 
    }

    /**
    * @dev To update the authorizer who can authorize the conversions.
    * @param newAuthorizer - new contract authorizer address
    */
    function updateAuthorizer(address newAuthorizer) external notZeroAddress(newAuthorizer) onlyOwner {
        _conversionAuthorizer = newAuthorizer;

        emit NewAuthorizer(newAuthorizer);
    }

    /**
    * @dev To update the per transaction limits for the conversion and to provide max total supply 
    * @param perTxnMinAmount - min amount for conversion
    * @param perTxnMaxAmount - max amount for conversion
    * @param maxSupply - value of max supply for bridging token
    */
    function updateConfigurations(
        uint256 perTxnMinAmount, 
        uint256 perTxnMaxAmount, 
        uint256 maxSupply
    )
        external 
        onlyOwner 
    {
        // Check for the valid inputs
        if (perTxnMinAmount == 0 || perTxnMaxAmount <= perTxnMinAmount || maxSupply == 0) 
            revert InvalidUpdateConfigurations();

        // Update the configurations
        _perTxnMinAmount = perTxnMinAmount;
        _perTxnMaxAmount = perTxnMaxAmount;
        _maxSupply = maxSupply;

        emit UpdateConfiguration(perTxnMinAmount, perTxnMaxAmount, maxSupply);
    }


    /**
    * @dev To convert the tokens from Ethereum to non Ethereum network. 
    * The tokens which needs to be convereted will be burned on the host network.
    * The conversion authorizer needs to provide the signature to call this function.
    * @param amount - conversion amount
    * @param conversionId - hashed conversion id
    * @param v - split authorizer signature
    */
    function conversionOut(
        uint256 amount, 
        bytes32 conversionId, 
        uint8 v, 
        bytes32 r, 
        bytes32 s
    ) 
        external 
        payable
        checkLimits(amount) 
        nonReentrant 
    {
        bool success;
        // Check for non zero value for the amount is not needed as the Signature will not be generated for zero amount
        
        // Compose the message which was signed
        bytes32 message = prefixed(
            keccak256(
                abi.encodePacked(
                    "__conversionOut", 
                    amount,
                    _msgSender(),
                    conversionId, 
                    this
                )
            )
        );

        // Check that the signature is from the authorizer
        if (ecrecover(message, v, r, s) != _conversionAuthorizer)
            revert InvalidRequestOrSignature();

        // Check for replay attack (message signature can be used only once)
        if (_usedSignatures[message])
            revert UsedSignature();
        _usedSignatures[message] = true;
        
        if (commissionSettings.commissionIsEnabled) {
            if (commissionSettings.commissionType == CommissionType.FixedNativeTokens) {
                _checkPayedCommissionInNative();
                (success, ) = TOKEN.call(abi.encodeWithSelector(BURN_SELECTOR, _msgSender(), amount));
            } else {
                (success, ) = TOKEN.call(abi.encodeWithSelector(BURN_SELECTOR, _msgSender(), amount - _takeCommissionInTokenOutput(amount)));
            }
        } else {
            (success, ) = TOKEN.call(abi.encodeWithSelector(BURN_SELECTOR, _msgSender(), amount));
        }
                    
        // In case if the burn call fails
        if (!success)
            revert ConversionFailed();

        emit ConversionOut(_msgSender(), conversionId, amount);
    }

    /**
    * @dev To convert the tokens from non Ethereum to Ethereum network. 
    * The tokens which needs to be convereted will be minted on the host network.
    * The conversion authorizer needs to provide the signature to call this function.
    * @param to - distination conversion operation address for mint converted tokens
    * @param amount - conversion amount
    * @param conversionId - hashed conversion id
    * @param v - split authorizer signature
    */
    function conversionIn(
        address to, 
        uint256 amount, 
        bytes32 conversionId, 
        uint8 v, 
        bytes32 r, 
        bytes32 s
    ) 
        external
        payable
        checkLimits(amount) 
        nonReentrant 
        notZeroAddress(to)
    {
        bool success;

        // Check for non zero value for the amount is not needed as the Signature will not be generated for zero amount

        // Compose the message which was signed
        bytes32 message = prefixed(
            keccak256(
                abi.encodePacked(
                    "__conversionIn",
                    amount, 
                    _msgSender(), 
                    conversionId, 
                    this
                )
            )
        );

        // Check that the signature is from the authorizer
        if (ecrecover(message, v, r, s) != _conversionAuthorizer)
            revert InvalidRequestOrSignature();

        // Check for replay attack (message signature can be used only once)
        if (_usedSignatures[message])
            revert UsedSignature();
        _usedSignatures[message] = true;

        // Check for the supply
        if (IERC20(TOKEN).totalSupply() + amount > _maxSupply)
            revert MintingMoreThanMaxSupply();

        if (commissionSettings.commissionIsEnabled) {
            if (commissionSettings.commissionType == CommissionType.FixedNativeTokens) {
                _checkPayedCommissionInNative();

                (success, ) = TOKEN.call(abi.encodeWithSelector(MINT_SELECTOR, to, amount));
            } else {
                (success, ) = TOKEN.call(abi.encodeWithSelector(MINT_SELECTOR, address(this), amount));
                if (!success)
                    revert ConversionMintFailed();
                (success, ) = TOKEN.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, amount - _takeCommissionInTokenInput(amount)));
            }
        } else {
            (success, ) = TOKEN.call(abi.encodeWithSelector(MINT_SELECTOR, to, amount));
        }

        if (!success)
            revert ConversionFailed();

        emit ConversionIn(to, conversionId, amount);
    }

    /// Builds a prefixed hash to mimic the behavior of ethSign.
    function prefixed(bytes32 hash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    function getConversionAuthorizer() external view returns(address) {
        return _conversionAuthorizer;
    }

    function getConversionConfigurations() external view returns(uint256,uint256,uint256) {
        return(_perTxnMinAmount, _perTxnMaxAmount, _maxSupply);
    }

}

