
// File: /contracts/Votium.sol
// SPDX-License-Identifier: MIT
// Votium

pragma solidity ^0.8.13;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Votium is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    /* ========== STATE VARIABLES ========== */

    // relevant time constraints
    uint256 epochDuration = 86400 * 14; // 2 weeks
    uint256 roundDuration = 86400 * 5; // 5 days
    uint256 deadlineDuration = 60 * 60 * 6; // 6 hours

    mapping(address => bool) public tokenAllowed; // token allow list
    mapping(address => bool) public approvedTeam; // for team functions that do not require multi-sig security

    address public feeAddress; // address to receive platform fees
    uint256 public platformFee = 400; // 4%
    uint256 public constant DENOMINATOR = 10000; // denominates weights 10000 = 100%
    address public distributor; // address of distributor contract
    uint256 private maxMaxPerVote = type(uint256).max/(100000000*10**18); // to prevent overflow when ending round

    bool public requireAllowlist = true; // begin with erc20 allow list in effect
    uint256 public maxExclusions; // number of excluded addresses allowed per incentive

    struct Incentive {
        address token;
        uint256 amount;
        uint256 maxPerVote;
        uint256 distributed;
        uint256 recycled;
        address depositor;
        address[] excluded; // list of addresses that cannot receive this incentive
    }

    mapping(uint256 => address[]) public roundGauges; // round => gauge array
    mapping(uint256 => mapping(address => bool)) public inRoundGauges; // round => gauge => bool
    mapping(uint256 => mapping(address => Incentive[])) public incentives; // round => gauge => incentive array
    mapping(uint256 => mapping(address => uint256)) public votesReceived; // round => gauge => votes
    mapping(uint256 => mapping(address => mapping(address => uint256))) public excludedVotesReceived; // round => gauge => excluded => votes

    mapping(uint256 => mapping(address => uint256)) private nextIndexProcessed; // round => gauge => last incentive index processed
    mapping(uint256 => uint256) private nextGaugeIndexProcessed; // round => last gauge index processed

    mapping(address => uint256) public virtualBalance; // token => amount

    uint256 public lastRoundProcessed; // last round that was processed by multi-sig

    mapping(address => uint256) private toTransfer; // token => amount
    address[] private toTransferList; // list of tokens to transfer, needed for push 

    /* ========== CONSTRUCTOR ========== */

    constructor(
        address _approved,
        address _approved2,
        address _feeAddress,
        address _distributor,
        address _initialOwner
    ) {
        approvedTeam[_approved] = true;
        approvedTeam[_approved2] = true;
        feeAddress = _feeAddress;
        distributor = _distributor;
        transferOwnership(_initialOwner);
        lastRoundProcessed = activeRound() - 1;
    }

    /* ========== PUBLIC FUNCTIONS ========== */

    function gaugesLength(uint256 _round) public view returns (uint256) {
        return roundGauges[_round].length;
    }

    function incentivesLength(
        uint256 _round,
        address _gauge
    ) public view returns (uint256) {
        return incentives[_round][_gauge].length;
    }


    function currentEpoch() public view returns (uint256) {
        return (block.timestamp / epochDuration) * epochDuration;
    }

    // Display current or next active round
    function activeRound() public view returns (uint256) {
        if (
            block.timestamp < currentEpoch() + roundDuration - deadlineDuration
        ) {
            return currentEpoch() / epochDuration - 1348; // 1348 is the votium genesis round
        } else {
            return currentEpoch() / epochDuration - 1347;
        }
    }

    // Include excluded addresses in incentive
    function viewIncentive(
        uint256 _round,
        address _gauge,
        uint256 _incentive
    ) public view returns (Incentive memory) {
        return incentives[_round][_gauge][_incentive];
    }

    // Deposit vote incentive for a single gauge in a active round with no max and no exclusions -- for gas efficiency
    function depositIncentiveSimple(
        address _token,
        uint256 _amount,
        address _gauge
    ) public {
        _takeDeposit(_token, _amount);
        uint256 _round = activeRound();
        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);
        virtualBalance[_token] += rewardTotal;
        incentives[_round][_gauge].push(Incentive({
            token: _token,
            amount: rewardTotal,
            maxPerVote: 0,
            distributed: 0,
            recycled: 0,
            depositor: msg.sender,
            excluded: new address[](0)
        }));
        _maintainGaugeArrays(_round, _gauge);
        emit NewIncentive(
            incentives[_round][_gauge].length - 1,
            _token,
            rewardTotal,
            _round,
            _gauge,
            0,
            new address[](0),
            msg.sender,
            false
        );
    }

    function depositIncentive(
        address _token,
        uint256 _amount,
        uint256 _round,
        address _gauge,
        uint256 _maxPerVote,
        address[] calldata _excluded
    ) public {
        require(_round >= activeRound(), "!roundEnded");
        require(_round <= activeRound() + 6, "!farFuture");
        require(_maxPerVote < maxMaxPerVote, "!highMax"); // prevent overflow when ending round
        if(_excluded.length > 0) {
            _checkExclusions(_excluded);
        }
        _takeDeposit(_token, _amount);
        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);
        virtualBalance[_token] += rewardTotal;
        incentives[_round][_gauge].push(Incentive({
            token: _token,
            amount: rewardTotal,
            maxPerVote: _maxPerVote,
            distributed: 0,
            recycled: 0,
            depositor: msg.sender,
            excluded: _excluded
        }));
        _maintainGaugeArrays(_round, _gauge);
        emit NewIncentive(
            incentives[_round][_gauge].length - 1,
            _token,
            rewardTotal,
            _round,
            _gauge,
            _maxPerVote,
            _excluded,
            msg.sender,
            false
        );
    }

    // evenly split deposit across a single gauge in multiple rounds
    function depositSplitRounds(
        address _token,
        uint256 _amount,
        uint256 _numRounds,
        address _gauge,
        uint256 _maxPerVote,
        address[] calldata _excluded
    ) public {
        require(_numRounds < 8, "!farFuture");
        require(_numRounds > 1, "!numRounds");
        require(_maxPerVote < maxMaxPerVote, "!highMax"); // prevent overflow when ending round
        if(_excluded.length > 0) {
            _checkExclusions(_excluded);
        }
        uint256 totalDeposit = _amount * _numRounds;
        _takeDeposit(_token, totalDeposit);
        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);
        virtualBalance[_token] += rewardTotal * _numRounds;
        uint256 round = activeRound();
        Incentive memory incentive = Incentive({
            token: _token,
            amount: rewardTotal,
            maxPerVote: _maxPerVote,
            distributed: 0,
            recycled: 0,
            depositor: msg.sender,
            excluded: _excluded
        });
        for (uint256 i = 0; i < _numRounds; i++) {
            incentives[round + i][_gauge].push(incentive);
            _maintainGaugeArrays(round + i, _gauge);
            emit NewIncentive(
                incentives[round + i][_gauge].length - 1,
                incentive.token,
                rewardTotal,
                round + i,
                _gauge,
                _maxPerVote,
                _excluded,
                msg.sender,
                false
            );
        }
    }

    // evenly split deposit across multiple gauges in a single round
    function depositSplitGauges(
        address _token,
        uint256 _amount,
        uint256 _round,
        address[] calldata _gauges,
        uint256 _maxPerVote,
        address[] calldata _excluded
    ) public {
        require(_round >= activeRound(), "!roundEnded");
        require(_round <= activeRound() + 6, "!farFuture");
        require(_maxPerVote < maxMaxPerVote, "!highMax"); // prevent overflow when ending round
        require(_gauges.length > 1, "!gauges");
        if(_excluded.length > 0) {
            _checkExclusions(_excluded);
        }
        uint256 totalDeposit = _amount * _gauges.length;
        _takeDeposit(_token, totalDeposit);
        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);
        virtualBalance[_token] += rewardTotal * _gauges.length;
        Incentive memory incentive = Incentive({
            token: _token,
            amount: rewardTotal,
            maxPerVote: _maxPerVote,
            distributed: 0,
            recycled: 0,
            depositor: msg.sender,
            excluded: _excluded
        });
        for (uint256 i = 0; i < _gauges.length; i++) {
            incentives[_round][_gauges[i]].push(incentive);
            uint256 id = incentives[_round][_gauges[i]].length - 1; // stack depth
            _maintainGaugeArrays(_round, _gauges[i]);
            emit NewIncentive(
                id,
                incentive.token,
                rewardTotal,
                _round,
                _gauges[i],
                _maxPerVote,
                _excluded,
                msg.sender,
                false
            );
        }
    }

    // evenly split deposit across multiple gauges in multiple rounds
    function depositSplitGaugesRounds(
        address _token,
        uint256 _amount,
        uint256 _numRounds,
        address[] memory _gauges,
        uint256 _maxPerVote,
        address[] calldata _excluded
    ) public {
        require(_numRounds < 8, "!farFuture");
        require(_numRounds > 1, "!numRounds");
        require(_maxPerVote < maxMaxPerVote, "!highMax"); // prevent overflow when ending round
        require(_gauges.length > 1, "!gauges");
        if(_excluded.length > 0) {
            _checkExclusions(_excluded);
        }
        uint256 totalDeposit = _amount * _numRounds * _gauges.length;
        _takeDeposit(_token, totalDeposit);
        uint256 rewardTotal = _amount - ((_amount * platformFee) / DENOMINATOR);
        virtualBalance[_token] += rewardTotal * _numRounds * _gauges.length;
        uint256 round = activeRound();
        Incentive memory incentive = Incentive({
            token: _token,
            amount: rewardTotal,
            maxPerVote: _maxPerVote,
            distributed: 0,
            recycled: 0,
            depositor: msg.sender,
            excluded: _excluded
        });
        uint256 maxPerVote = _maxPerVote; // stack depth
        address[] calldata excluded = _excluded; // stack depth
        for (uint256 i = 0; i < _numRounds; i++) {
            for (uint256 j = 0; j < _gauges.length; j++) {
                address gauge = _gauges[j]; // stack depth
                incentives[round + i][gauge].push(incentive);
                _maintainGaugeArrays(round + i, gauge);
                emit NewIncentive(
                    incentives[round + i][gauge].length - 1,
                    incentive.token,
                    rewardTotal,
                    round + i,
                    gauge,
                    maxPerVote,
                    excluded,
                    msg.sender,
                    false
                );
            }
        }
    }

    // deposit same token to multiple gauges with different amounts in a single round
    function depositUnevenSplitGauges(
        address _token,
        uint256 _round,
        address[] memory _gauges,
        uint256[] calldata _amounts,
        uint256 _maxPerVote,
        address[] calldata _excluded
    ) public {
        require(_gauges.length == _amounts.length, "!length");
        require(_round >= activeRound(), "!roundEnded");
        require(_round <= activeRound() + 6, "!farFuture");
        require(_maxPerVote < maxMaxPerVote, "!highMax"); // prevent overflow when ending round
        if(_excluded.length > 0) {
            _checkExclusions(_excluded);
        }
        uint256 totalDeposit;
        uint256 rewardsTotal;
        Incentive memory incentive = Incentive({
            token: _token,
            amount: 0,
            maxPerVote: _maxPerVote,
            distributed: 0,
            recycled: 0,
            depositor: msg.sender,
            excluded: _excluded
        });
        for (uint256 i = 0; i < _gauges.length; i++) {
            require(_amounts[i] > 0, "!amount");
            totalDeposit += _amounts[i];
            uint256 rewardTotal = _amounts[i] - (_amounts[i] * platformFee) / DENOMINATOR;
            incentive.amount = rewardTotal;
            rewardsTotal += rewardTotal;
            incentives[_round][_gauges[i]].push(incentive);
            uint256 id = incentives[_round][_gauges[i]].length - 1; // stack depth
            _maintainGaugeArrays(_round, _gauges[i]);
            emit NewIncentive(
                id,
                incentive.token,
                rewardTotal,
                _round,
                _gauges[i],
                _maxPerVote,
                _excluded,
                msg.sender,
                false
            );
        }
        _takeDeposit(_token, totalDeposit);
        virtualBalance[_token] += rewardsTotal;
    }

    // deposit same token to multiple gauges with different amounts in active round with no max and no exclusions
    function depositUnevenSplitGaugesSimple(
        address _token,
        address[] memory _gauges,
        uint256[] memory _amounts
    ) public {
        require(_gauges.length == _amounts.length, "!length");
        uint256 _round = activeRound();
        uint256 totalDeposit;
        uint256 rewardsTotal;
        Incentive memory incentive = Incentive({
            token: _token,
            amount: 0,
            maxPerVote: 0,
            distributed: 0,
            recycled: 0,
            depositor: msg.sender,
            excluded: new address[](0)
        });
        for (uint256 i = 0; i < _gauges.length; i++) {
            require(_amounts[i] > 0, "!amount");
            totalDeposit += _amounts[i];
            uint256 rewardTotal = _amounts[i] - (_amounts[i] * platformFee) / DENOMINATOR;
            incentive.amount = rewardTotal;
            rewardsTotal += rewardTotal;
            incentives[_round][_gauges[i]].push(incentive);
            _maintainGaugeArrays(_round, _gauges[i]);
            emit NewIncentive(
                incentives[_round][_gauges[i]].length - 1,
                _token,
                rewardTotal,
                _round,
                _gauges[i],
                0,
                new address[](0),
                msg.sender,
                false
            );
        }
        _takeDeposit(_token, totalDeposit);
        virtualBalance[_token] += rewardsTotal;
    }

    // deposit same token to multiple gauges with different amounts in a single round
    function depositUnevenSplitGaugesRounds(
        address _token,
        uint256 _numRounds,
        address[] memory _gauges,
        uint256[] memory _amounts,
        uint256 _maxPerVote,
        address[] calldata _excluded
    ) public {
        require(_gauges.length == _amounts.length, "!length");
        require(_numRounds < 8, "!farFuture");
        require(_maxPerVote < maxMaxPerVote, "!highMax"); // prevent overflow when ending round
        require(_numRounds > 1, "!numRounds");
        if(_excluded.length > 0) {
            _checkExclusions(_excluded);
        }
        uint256 totalDeposit;
        uint256 rewardsTotal;
        Incentive memory incentive = Incentive({
            token: _token,
            amount: 0,
            maxPerVote: _maxPerVote,
            distributed: 0,
            recycled: 0,
            depositor: msg.sender,
            excluded: _excluded
        });
        for (uint256 i = 0; i < _gauges.length; i++) {
            require(_amounts[i] > 0, "!amount");
            totalDeposit += _amounts[i];
            uint256 round = activeRound();
            // to prevent rounding issues and potentially failed txs, virtual balance should directly reflect Inventive amount sums
            uint256 rewardTotal = _amounts[i] - (_amounts[i] * platformFee) / DENOMINATOR;
            incentive.amount = rewardTotal;
            rewardsTotal += rewardTotal * _numRounds;
            for (uint256 j = 0; j < _numRounds; j++) {
                incentives[round + j][_gauges[i]].push(incentive);
                uint256 id = incentives[round + j][_gauges[i]].length - 1; // stack depth
                _maintainGaugeArrays(round + j, _gauges[i]);
                emit NewIncentive(
                    id,
                    incentive.token,
                    rewardTotal,
                    round + j,
                    _gauges[i],
                    incentive.maxPerVote,
                    incentive.excluded,
                    msg.sender,
                    false
                );
            }
        }
        totalDeposit = totalDeposit * _numRounds;
        _takeDeposit(_token, totalDeposit);
        virtualBalance[_token] += rewardsTotal;
    }

    function increaseIncentive(
        uint256 _round,
        address _gauge,
        uint256 _incentive,
        uint256 _increase,
        uint256 _maxPerVote
    ) public {
        require(_maxPerVote < maxMaxPerVote, "!highMax"); // prevent overflow when ending round
        require(
            _maxPerVote != incentives[_round][_gauge][_incentive].maxPerVote ||
                _increase > 0,
            "!change"
        );
        require(_round >= activeRound(), "!deadline");
        require(
            incentives[_round][_gauge][_incentive].depositor == msg.sender,
            "!depositor"
        );
        if (_maxPerVote > 0) {
            require(
                _maxPerVote >=
                    incentives[_round][_gauge][_incentive].maxPerVote,
                "!increaseOnly"
            );
            require(
                incentives[_round][_gauge][_incentive].maxPerVote != 0,
                "!increaseOnly"
            );
        }
        if (_maxPerVote != incentives[_round][_gauge][_incentive].maxPerVote) {
            incentives[_round][_gauge][_incentive].maxPerVote = _maxPerVote;
        }
        uint256 rewardIncrease;
        if (_increase > 0) {
            _takeDeposit(
                incentives[_round][_gauge][_incentive].token,
                _increase
            );
            rewardIncrease =
                _increase -
                ((_increase * platformFee) / DENOMINATOR);
            incentives[_round][_gauge][_incentive].amount += rewardIncrease;
            virtualBalance[
                incentives[_round][_gauge][_incentive].token
            ] += rewardIncrease;
        }
        emit IncreasedIncentive(
            _incentive,
            incentives[_round][_gauge][_incentive].token,
            incentives[_round][_gauge][_incentive].amount,
            rewardIncrease,
            _round,
            _gauge,
            _maxPerVote
        );
    }

    // function for depositor to withdraw unprocessed incentives
    // this should only happen if a gauge does not exist or is killed before the round ends
    // fees are not returned
    function withdrawUnprocessed(
        uint256 _round,
        address _gauge,
        uint256 _incentive
    ) public nonReentrant {
        require(
            _round <= lastRoundProcessed || _round + 3 < activeRound(),
            "!roundNotProcessed"
        ); // allow 3 rounds for processing before withdraw can be forced
        require(
            incentives[_round][_gauge][_incentive].depositor == msg.sender,
            "!depositor"
        );
        require(
            incentives[_round][_gauge][_incentive].distributed == 0,
            "!distributed"
        );
        require(
            incentives[_round][_gauge][_incentive].recycled == 0,
            "!recycled"
        );
        require(
            incentives[_round][_gauge][_incentive].amount > 0,
            "!zero"
        );
        uint256 amount = incentives[_round][_gauge][_incentive].amount;
        incentives[_round][_gauge][_incentive].amount = 0;
        uint256 adjustedAmount = (amount *
            IERC20(incentives[_round][_gauge][_incentive].token).balanceOf(
                address(this)
            )) / virtualBalance[incentives[_round][_gauge][_incentive].token];
        amount = amount > adjustedAmount ? adjustedAmount : amount; // use lower amount to avoid over-withdrawal for negative rebase tokens, honeypotting, etc
        IERC20(incentives[_round][_gauge][_incentive].token).safeTransfer(
            msg.sender,
            amount
        );
        virtualBalance[incentives[_round][_gauge][_incentive].token] -= amount;
        emit WithdrawUnprocessed(_incentive, _round, _gauge, amount);
    }

    // function for depositor to recycle unprocessed incentives instead of withdrawing (maybe gauge was not active yet or was killed and revived)
    function recycleUnprocessed(
        uint256 _round,
        address _gauge,
        uint256 _incentive
    ) public nonReentrant {
        require(_round <= lastRoundProcessed, "!roundNotProcessed");
        require(
            incentives[_round][_gauge][_incentive].depositor == msg.sender ||
                msg.sender == owner(),
            "!auth"
        );
        require(
            incentives[_round][_gauge][_incentive].distributed == 0,
            "!distributed"
        );
        require(
            incentives[_round][_gauge][_incentive].recycled == 0,
            "!recycled"
        );
        require(
            incentives[_round][_gauge][_incentive].amount > 0,
            "!zero"
        );
        Incentive memory original = incentives[_round][_gauge][_incentive];
        uint256 currentRound = activeRound();
        incentives[currentRound][_gauge].push(original);
        _maintainGaugeArrays(currentRound, _gauge);
        uint256 id = incentives[currentRound][_gauge].length - 1; // stack depth
        incentives[_round][_gauge][_incentive].recycled = original.amount;
        emit NewIncentive(id, original.token, original.amount, currentRound, _gauge, original.maxPerVote, original.excluded, original.depositor, true);
    }

    /* ========== APPROVED TEAM FUNCTIONS ========== */

    // allow/deny token
    function allowToken(address _token, bool _allow) public onlyTeam {
        tokenAllowed[_token] = _allow;
        emit TokenAllow(_token, _allow);
    }

    // allow/deny multiple tokens
    // can be used to retire contract by denying all tokens
    function allowTokens(
        address[] calldata _tokens,
        bool _allow
    ) public onlyTeam {
        for (uint256 i = 0; i < _tokens.length; i++) {
            tokenAllowed[_tokens[i]] = _allow;
            emit TokenAllow(_tokens[i], _allow);
        }
    }

    /* ========== INTERNAL FUNCTIONS ========== */

    // take deposit and send fees to feeAddress, return rewardTotal
    function _takeDeposit(address _token, uint256 _amount) internal {
        if (requireAllowlist == true) {
            require(tokenAllowed[_token] == true, "!allowlist");
        }
        uint256 fee = (_amount * platformFee) / DENOMINATOR;
        require(fee > 0, "!amount");
        uint256 rewardTotal = _amount - fee;
        IERC20(_token).safeTransferFrom(msg.sender, feeAddress, fee);
        IERC20(_token).safeTransferFrom(msg.sender, address(this), rewardTotal);
    }

    function _maintainGaugeArrays(uint256 _round, address _gauge) internal {
        if (!inRoundGauges[_round][_gauge]) {
            roundGauges[_round].push(_gauge);
            inRoundGauges[_round][_gauge] = true;
        }
    }

    function _checkExclusions(address[] calldata _excluded) internal view {
        require(_excluded.length <= maxExclusions, "!excluded");
        uint160 addressHeight;
        for(uint256 i = 0; i < _excluded.length; i++) {
            uint160 height = uint160(_excluded[i]);
            require(height > addressHeight, "!sorted");
            addressHeight = height;
        }
    }

    /* ========== MUTLI-SIG FUNCTIONS ========== */

    // submit vote totals
    function submitVoteTotals(
        uint256 _round,
        address[] calldata _gauges,
        uint256[] calldata _totals
    ) public onlyOwner {
        require(_gauges.length == _totals.length, "!gauges/totals");
        require(_round < activeRound(), "!activeRound");
        require(_round - 1 == lastRoundProcessed, "!lastRoundProcessed");
        for (uint256 i = 0; i < _gauges.length; i++) {
            require(votesReceived[_round][_gauges[i]] == 0, "!votesReceived");
            votesReceived[_round][_gauges[i]] = _totals[i];
        }
    }

    // submit excluded address totals
    function submitExcludedTotals(
        uint256 _round, 
        address _gauge, 
        address[] calldata _excluded, 
        uint256[] calldata _totals
    ) public onlyOwner {
        require(_excluded.length == _totals.length, "!excluded/totals");
        require(_round < activeRound(), "!activeRound");
        require(_round - 1 == lastRoundProcessed, "!lastRoundProcessed");
        for (uint256 i = 0; i < _excluded.length; i++) {
            require(excludedVotesReceived[_round][_gauge][_excluded[i]] == 0, "!excludedVotesReceived");
            excludedVotesReceived[_round][_gauge][_excluded[i]] = _totals[i];
        }

    }

    // handle incentives for gauges that received votes, batchable for both gauges and incentives length
    function endRound(
        uint256 _round,
        address[] calldata _gauges, // can group gauges to stay within gas limits
        uint256 _batch // how many incentives to process per gauge, to stay within gas limits
    ) public onlyOwner {
        require(_round < activeRound(), "!activeRound");
        require(_round - 1 == lastRoundProcessed, "!lastRoundProcessed");
        for (uint256 i = 0; i < _gauges.length; i++) {
            bool recycle;
            address gauge = _gauges[i];
            uint256 round = _round; // stack depth
            uint256 next = nextIndexProcessed[round][gauge];
            uint256 batch = incentives[round][gauge].length - next; // incentives left to process
            if(_batch < batch) {
                batch = _batch; // limit batch size to stay within gas limits
            }
            for (
                uint256 n = next; // will be 0 if no incentives processed yet
                n < next+batch;
                n++
            ) {
                Incentive memory incentive = incentives[round][gauge][n];
                uint256 reward;
                // get submited vote totals
                uint256 totalVotes = votesReceived[round][gauge];
                // remove excluded votes for specific incentive in gauge
                if(incentive.excluded.length > 0) {
                    for(uint256 j = 0; j < incentive.excluded.length; j++) {
                        totalVotes -= excludedVotesReceived[round][gauge][incentive.excluded[j]];
                    }
                }
                if (incentive.maxPerVote > 0) {
                    reward = incentive.maxPerVote * totalVotes;
                    if (reward >= incentive.amount) {
                        reward = incentive.amount;
                    } else {
                        // recycle unused reward
                        incentive.amount -= reward;
                        incentives[round+1][gauge].push(incentive);
                        uint256 id = incentives[round+1][gauge].length-1; // stack depth
                        recycle = true;
                        incentives[round][gauge][n].recycled = incentive.amount; // already subtracted reward
                        emit NewIncentive(id, incentive.token, incentive.amount, round+1, gauge, incentive.maxPerVote, incentive.excluded, incentive.depositor, true);
                    }
                    incentives[round][gauge][n].distributed = reward;
                } else {
                    if(totalVotes == 0) {
                        // can pass 0 votes to recycle reward (for gauges that were not active, but will be next round)
                        // if a gauge is killed or nonexistent, it should not be passed at all
                        incentives[round+1][gauge].push(incentive);
                        uint256 id = incentives[round+1][gauge].length-1; // stack depth
                        recycle = true;
                        incentives[round][gauge][n].recycled = incentive.amount;
                        emit NewIncentive(id, incentive.token, incentive.amount, round+1, gauge, incentive.maxPerVote, incentive.excluded, incentive.depositor, true);
                    } else {
                        reward = incentive.amount;
                        incentives[round][gauge][n].distributed = reward;
                    }
                }
                toTransfer[incentive.token] += reward;
                toTransferList.push(incentive.token);
            }
            // update nextIndexProcessed
            nextIndexProcessed[round][gauge] = next+batch;
            if(recycle) {
                _maintainGaugeArrays(round+1, gauge);
            }
        }
        for (uint256 i = 0; i < toTransferList.length; i++) {
            if (toTransfer[toTransferList[i]] == 0) continue; // skip if already transferred
            IERC20(toTransferList[i]).safeTransfer(
                distributor,
                (toTransfer[toTransferList[i]] *
                    IERC20(toTransferList[i]).balanceOf(address(this))) /
                    virtualBalance[toTransferList[i]] // account for rebasing tokens
            );
            virtualBalance[toTransferList[i]] -= toTransfer[toTransferList[i]];
            toTransfer[toTransferList[i]] = 0;
        }
        delete toTransferList;
    }

    // finalize round and check to make sure all incentives were processed for gauges that received votes
    function finalizeRound(uint256 _round, uint256 _batch) public onlyOwner {
        require(_round < activeRound(), "!activeRound");
        require(_round - 1 == lastRoundProcessed, "!lastRoundProcessed");
        uint256 next = nextGaugeIndexProcessed[_round];
        uint256 batch = roundGauges[_round].length - next; // gauges left to process
        if(_batch < batch) {
            batch = _batch; // limit batch size to stay within gas limits
        } else {
            lastRoundProcessed = _round; // only update lastRoundProcessed if all gauges processed
        }
        for(uint256 i = next; i < next+batch; i++) {
            if(votesReceived[_round][roundGauges[_round][i]] > 0) {
                require(nextIndexProcessed[_round][roundGauges[_round][i]] == incentives[_round][roundGauges[_round][i]].length, "!incentivesProcessed");
            }
        }
        nextGaugeIndexProcessed[_round] = next+batch; // update nextGaugeIndexProcessed
    }

    // invalidate incentive - for spam deposits with tiny maxPerVote
    // to prevent end of round from being clogged with ~$0 rewards
    function invalidateIncentive(
        uint256 _round,
        address _gauge,
        uint256 _incentive
    ) public onlyOwner {
        require(_round < activeRound(), "!activeRound");
        // can only invalidate incentives with maxPerVote > 0
        require(
            incentives[_round][_gauge][_incentive].maxPerVote > 0,
                "!maxPerVote"
        );
        virtualBalance[
            incentives[_round][_gauge][_incentive].token
        ] -= incentives[_round][_gauge][_incentive].amount;
        incentives[_round][_gauge][_incentive].amount = 0;

        // spam incentives will not be withdrawable or be part of a recycled incentive,
        // but will be consumed if new rewards use the same token, as if it were a positive token rebase passed along to voters
    }

    // toggle allowlist requirement
    function setAllowlistRequired(bool _requireAllowlist) public onlyOwner {
        requireAllowlist = _requireAllowlist;
        emit AllowlistRequirement(_requireAllowlist);
    }

    // toggle allowExclusions
    function setMaxExclusions(uint256 _maxExclusions) public onlyOwner {
        maxExclusions = _maxExclusions;
        emit MaxExclusions(_maxExclusions);
    }

    // update fee address
    function updateFeeAddress(address _feeAddress) public onlyOwner {
        feeAddress = _feeAddress;
    }

    // update fee amount
    function updateFeeAmount(uint256 _feeAmount) public onlyOwner {
        require(_feeAmount < 400, "max fee"); // Max fee 4%
        platformFee = _feeAmount;
        emit UpdatedFee(_feeAmount);
    }

    // add or remove address from team functions
    function modifyTeam(address _member, bool _approval) public onlyOwner {
        approvedTeam[_member] = _approval;
        emit ModifiedTeam(_member, _approval);
    }

    // update token distributor address
    function updateDistributor(address _distributor) public onlyOwner {
        distributor = _distributor;
        emit UpdatedDistributor(distributor);
    }

    // Fallback executable function
    function execute(
        address _to,
        uint256 _value,
        bytes calldata _data
    ) external onlyOwner returns (bool, bytes memory) {
        (bool success, bytes memory result) = _to.call{value: _value}(_data);
        return (success, result);
    }

    /* ========== MODIFIERS ========== */

    modifier onlyTeam() {
        require(approvedTeam[msg.sender] == true, "Team only");
        _;
    }

    /* ========== EVENTS ========== */

    event NewIncentive(
        uint256 _index,
        address _token,
        uint256 _amount,
        uint256 indexed _round,
        address indexed _gauge,
        uint256 _maxPerVote,
        address[] _excluded,
        address indexed _depositor,
        bool _recycled
    );
    event TokenAllow(address _token, bool _allow);
    event AllowlistRequirement(bool _requireAllowlist);
    event MaxExclusions(uint256 _maxExclusions);
    event UpdatedFee(uint256 _feeAmount);
    event ModifiedTeam(address _member, bool _approval);
    event UpdatedDistributor(address _distributor);
    event WithdrawUnprocessed(
        uint256 _index,
        uint256 indexed _round,
        address indexed _gauge,
        uint256 _amount
    );
    event IncreasedIncentive(
        uint256 _index,
        address _token,
        uint256 _total,
        uint256 _increase,
        uint256 indexed _round,
        address indexed _gauge,
        uint256 _maxPerVote
    );
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to
     * 0 before setting it to a non-zero value.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

