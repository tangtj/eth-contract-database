{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \u0027./IERC165.sol\u0027;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return interfaceId == type(IERC165).interfaceId;\r\n  }\r\n}\r\n"},"ERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \u0027./IERC2981.sol\u0027;\r\nimport \u0027./ERC165.sol\u0027;\r\n\r\n/**\r\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\r\n *\r\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\r\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\r\n *\r\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\r\n * fee is specified in basis points by default.\r\n *\r\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\r\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\r\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\r\n *\r\n * _Available since v4.5._\r\n */\r\nabstract contract ERC2981 is IERC2981, ERC165 {\r\n  struct RoyaltyInfo {\r\n    address receiver;\r\n    uint96 royaltyFraction;\r\n  }\r\n\r\n  RoyaltyInfo private _defaultRoyaltyInfo;\r\n  mapping(uint256 =\u003e RoyaltyInfo) private _tokenRoyaltyInfo;\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(IERC165, ERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC2981).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc IERC2981\r\n   */\r\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address, uint256)\r\n  {\r\n    RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\r\n\r\n    if (royalty.receiver == address(0)) {\r\n      royalty = _defaultRoyaltyInfo;\r\n    }\r\n\r\n    uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) /\r\n      _feeDenominator();\r\n\r\n    return (royalty.receiver, royaltyAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\r\n   * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\r\n   * override.\r\n   */\r\n  function _feeDenominator() internal pure virtual returns (uint96) {\r\n    return 10000;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the royalty information that all ids in this contract will default to.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `receiver` cannot be the zero address.\r\n   * - `feeNumerator` cannot be greater than the fee denominator.\r\n   */\r\n  function _setDefaultRoyalty(address receiver, uint96 feeNumerator)\r\n    internal\r\n    virtual\r\n  {\r\n    require(\r\n      feeNumerator \u003c= _feeDenominator(),\r\n      \u0027ERC2981: royalty fee will exceed salePrice\u0027\r\n    );\r\n    require(receiver != address(0), \u0027ERC2981: invalid receiver\u0027);\r\n\r\n    _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\r\n  }\r\n\r\n  /**\r\n   * @dev Removes default royalty information.\r\n   */\r\n  function _deleteDefaultRoyalty() internal virtual {\r\n    delete _defaultRoyaltyInfo;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the royalty information for a specific token id, overriding the global default.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `receiver` cannot be the zero address.\r\n   * - `feeNumerator` cannot be greater than the fee denominator.\r\n   */\r\n  function _setTokenRoyalty(\r\n    uint256 tokenId,\r\n    address receiver,\r\n    uint96 feeNumerator\r\n  ) internal virtual {\r\n    require(\r\n      feeNumerator \u003c= _feeDenominator(),\r\n      \u0027ERC2981: royalty fee will exceed salePrice\u0027\r\n    );\r\n    require(receiver != address(0), \u0027ERC2981: Invalid parameters\u0027);\r\n\r\n    _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\r\n  }\r\n\r\n  /**\r\n   * @dev Resets royalty information for the token id back to the global default.\r\n   */\r\n  function _resetTokenRoyalty(uint256 tokenId) internal virtual {\r\n    delete _tokenRoyaltyInfo[tokenId];\r\n  }\r\n}\r\n"},"ERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.2.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \u0027./IERC721A.sol\u0027;\r\n\r\n/**\r\n * @dev Interface of ERC721 token receiver.\r\n */\r\ninterface ERC721A__IERC721Receiver {\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721A\r\n *\r\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\r\n * Non-Fungible Token Standard, including the Metadata extension.\r\n * Optimized for lower gas during batch mints.\r\n *\r\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\r\n * starting from `_startTokenId()`.\r\n *\r\n * Assumptions:\r\n *\r\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n  // Reference type for token approval.\r\n  struct TokenApprovalRef {\r\n    address value;\r\n  }\r\n\r\n  // =============================================================\r\n  //                           CONSTANTS\r\n  // =============================================================\r\n\r\n  // Mask of an entry in packed address data.\r\n  uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 \u003c\u003c 64) - 1;\r\n\r\n  // The bit position of `numberMinted` in packed address data.\r\n  uint256 private constant _BITPOS_NUMBER_MINTED = 64;\r\n\r\n  // The bit position of `numberBurned` in packed address data.\r\n  uint256 private constant _BITPOS_NUMBER_BURNED = 128;\r\n\r\n  // The bit position of `aux` in packed address data.\r\n  uint256 private constant _BITPOS_AUX = 192;\r\n\r\n  // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n  uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 \u003c\u003c 192) - 1;\r\n\r\n  // The bit position of `startTimestamp` in packed ownership.\r\n  uint256 private constant _BITPOS_START_TIMESTAMP = 160;\r\n\r\n  // The bit mask of the `burned` bit in packed ownership.\r\n  uint256 private constant _BITMASK_BURNED = 1 \u003c\u003c 224;\r\n\r\n  // The bit position of the `nextInitialized` bit in packed ownership.\r\n  uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n  // The bit mask of the `nextInitialized` bit in packed ownership.\r\n  uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 \u003c\u003c 225;\r\n\r\n  // The bit position of `extraData` in packed ownership.\r\n  uint256 private constant _BITPOS_EXTRA_DATA = 232;\r\n\r\n  // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\r\n  uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 \u003c\u003c 232) - 1;\r\n\r\n  // The mask of the lower 160 bits for addresses.\r\n  uint256 private constant _BITMASK_ADDRESS = (1 \u003c\u003c 160) - 1;\r\n\r\n  // The maximum `quantity` that can be minted with {_mintERC2309}.\r\n  // This limit is to prevent overflows on the address data entries.\r\n  // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\r\n  // is required to cause an overflow, which is unrealistic.\r\n  uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\r\n\r\n  // The `Transfer` event signature is given by:\r\n  // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n  bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\r\n    0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n  // =============================================================\r\n  //                            STORAGE\r\n  // =============================================================\r\n\r\n  // The next token ID to be minted.\r\n  uint256 private _currentIndex;\r\n\r\n  // The number of tokens burned.\r\n  uint256 private _burnCounter;\r\n\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Mapping from token ID to ownership details\r\n  // An empty struct value does not necessarily mean the token is unowned.\r\n  // See {_packedOwnershipOf} implementation for details.\r\n  //\r\n  // Bits Layout:\r\n  // - [0..159]   `addr`\r\n  // - [160..223] `startTimestamp`\r\n  // - [224]      `burned`\r\n  // - [225]      `nextInitialized`\r\n  // - [232..255] `extraData`\r\n  mapping(uint256 =\u003e uint256) private _packedOwnerships;\r\n\r\n  // Mapping owner address to address data.\r\n  //\r\n  // Bits Layout:\r\n  // - [0..63]    `balance`\r\n  // - [64..127]  `numberMinted`\r\n  // - [128..191] `numberBurned`\r\n  // - [192..255] `aux`\r\n  mapping(address =\u003e uint256) private _packedAddressData;\r\n\r\n  // Mapping from token ID to approved address.\r\n  mapping(uint256 =\u003e TokenApprovalRef) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\r\n\r\n  // =============================================================\r\n  //                          CONSTRUCTOR\r\n  // =============================================================\r\n\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _currentIndex = _startTokenId();\r\n  }\r\n\r\n  // =============================================================\r\n  //                   TOKEN COUNTING OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Returns the starting token ID.\r\n   * To change the starting token ID, please override this function.\r\n   */\r\n  function _startTokenId() internal view virtual returns (uint256) {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the next token ID to be minted.\r\n   */\r\n  function _nextTokenId() internal view virtual returns (uint256) {\r\n    return _currentIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total number of tokens in existence.\r\n   * Burned tokens will reduce the count.\r\n   * To get the total number of tokens minted, please see {_totalMinted}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    // Counter underflow is impossible as _burnCounter cannot be incremented\r\n    // more than `_currentIndex - _startTokenId()` times.\r\n    unchecked {\r\n      return _currentIndex - _burnCounter - _startTokenId();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total amount of tokens minted in the contract.\r\n   */\r\n  function _totalMinted() internal view virtual returns (uint256) {\r\n    // Counter underflow is impossible as `_currentIndex` does not decrement,\r\n    // and it is initialized to `_startTokenId()`.\r\n    unchecked {\r\n      return _currentIndex - _startTokenId();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total number of tokens burned.\r\n   */\r\n  function _totalBurned() internal view virtual returns (uint256) {\r\n    return _burnCounter;\r\n  }\r\n\r\n  // =============================================================\r\n  //                    ADDRESS DATA OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Returns the number of tokens in `owner`\u0027s account.\r\n   */\r\n  function balanceOf(address owner)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n    return _packedAddressData[owner] \u0026 _BITMASK_ADDRESS_DATA_ENTRY;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of tokens minted by `owner`.\r\n   */\r\n  function _numberMinted(address owner) internal view returns (uint256) {\r\n    return\r\n      (_packedAddressData[owner] \u003e\u003e _BITPOS_NUMBER_MINTED) \u0026\r\n      _BITMASK_ADDRESS_DATA_ENTRY;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of tokens burned by or on behalf of `owner`.\r\n   */\r\n  function _numberBurned(address owner) internal view returns (uint256) {\r\n    return\r\n      (_packedAddressData[owner] \u003e\u003e _BITPOS_NUMBER_BURNED) \u0026\r\n      _BITMASK_ADDRESS_DATA_ENTRY;\r\n  }\r\n\r\n  /**\r\n   * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n   */\r\n  function _getAux(address owner) internal view returns (uint64) {\r\n    return uint64(_packedAddressData[owner] \u003e\u003e _BITPOS_AUX);\r\n  }\r\n\r\n  /**\r\n   * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n   * If there are multiple variables, please pack them into a uint64.\r\n   */\r\n  function _setAux(address owner, uint64 aux) internal virtual {\r\n    uint256 packed = _packedAddressData[owner];\r\n    uint256 auxCasted;\r\n    // Cast `aux` with assembly to avoid redundant masking.\r\n    assembly {\r\n      auxCasted := aux\r\n    }\r\n    packed = (packed \u0026 _BITMASK_AUX_COMPLEMENT) | (auxCasted \u003c\u003c _BITPOS_AUX);\r\n    _packedAddressData[owner] = packed;\r\n  }\r\n\r\n  // =============================================================\r\n  //                            IERC165\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    // The interface IDs are constants representing the first 4 bytes\r\n    // of the XOR of all function selectors in the interface.\r\n    // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\r\n    // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\r\n    return\r\n      interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n      interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n      interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n  }\r\n\r\n  // =============================================================\r\n  //                        IERC721Metadata\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Returns the token collection name.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token collection symbol.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n   */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n    string memory baseURI = _baseURI();\r\n    return\r\n      bytes(baseURI).length != 0\r\n        ? string(abi.encodePacked(baseURI, _toString(tokenId)))\r\n        : \u0027\u0027;\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n   * by default, it can be overridden in child contracts.\r\n   */\r\n  function _baseURI() internal view virtual returns (string memory) {\r\n    return \u0027\u0027;\r\n  }\r\n\r\n  // =============================================================\r\n  //                     OWNERSHIPS OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Returns the owner of the `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function ownerOf(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    return address(uint160(_packedOwnershipOf(tokenId)));\r\n  }\r\n\r\n  /**\r\n   * @dev Gas spent here starts off proportional to the maximum mint batch size.\r\n   * It gradually moves to O(1) as tokens get transferred around over time.\r\n   */\r\n  function _ownershipOf(uint256 tokenId)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (TokenOwnership memory)\r\n  {\r\n    return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the unpacked `TokenOwnership` struct at `index`.\r\n   */\r\n  function _ownershipAt(uint256 index)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (TokenOwnership memory)\r\n  {\r\n    return _unpackedOwnership(_packedOwnerships[index]);\r\n  }\r\n\r\n  /**\r\n   * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n   */\r\n  function _initializeOwnershipAt(uint256 index) internal virtual {\r\n    if (_packedOwnerships[index] == 0) {\r\n      _packedOwnerships[index] = _packedOwnershipOf(index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the packed ownership data of `tokenId`.\r\n   */\r\n  function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n    uint256 curr = tokenId;\r\n\r\n    unchecked {\r\n      if (_startTokenId() \u003c= curr)\r\n        if (curr \u003c _currentIndex) {\r\n          uint256 packed = _packedOwnerships[curr];\r\n          // If not burned.\r\n          if (packed \u0026 _BITMASK_BURNED == 0) {\r\n            // Invariant:\r\n            // There will always be an initialized ownership slot\r\n            // (i.e. `ownership.addr != address(0) \u0026\u0026 ownership.burned == false`)\r\n            // before an unintialized ownership slot\r\n            // (i.e. `ownership.addr == address(0) \u0026\u0026 ownership.burned == false`)\r\n            // Hence, `curr` will not underflow.\r\n            //\r\n            // We can directly compare the packed value.\r\n            // If the address is zero, packed will be zero.\r\n            while (packed == 0) {\r\n              packed = _packedOwnerships[--curr];\r\n            }\r\n            return packed;\r\n          }\r\n        }\r\n    }\r\n    revert OwnerQueryForNonexistentToken();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\r\n   */\r\n  function _unpackedOwnership(uint256 packed)\r\n    private\r\n    pure\r\n    returns (TokenOwnership memory ownership)\r\n  {\r\n    ownership.addr = address(uint160(packed));\r\n    ownership.startTimestamp = uint64(packed \u003e\u003e _BITPOS_START_TIMESTAMP);\r\n    ownership.burned = packed \u0026 _BITMASK_BURNED != 0;\r\n    ownership.extraData = uint24(packed \u003e\u003e _BITPOS_EXTRA_DATA);\r\n  }\r\n\r\n  /**\r\n   * @dev Packs ownership data into a single uint256.\r\n   */\r\n  function _packOwnershipData(address owner, uint256 flags)\r\n    private\r\n    view\r\n    returns (uint256 result)\r\n  {\r\n    assembly {\r\n      // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren\u0027t clean.\r\n      owner := and(owner, _BITMASK_ADDRESS)\r\n      // `owner | (block.timestamp \u003c\u003c _BITPOS_START_TIMESTAMP) | flags`.\r\n      result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\r\n   */\r\n  function _nextInitializedFlag(uint256 quantity)\r\n    private\r\n    pure\r\n    returns (uint256 result)\r\n  {\r\n    // For branchless setting of the `nextInitialized` flag.\r\n    assembly {\r\n      // `(quantity == 1) \u003c\u003c _BITPOS_NEXT_INITIALIZED`.\r\n      result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\r\n    }\r\n  }\r\n\r\n  // =============================================================\r\n  //                      APPROVAL OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n   * The approval is cleared when the token is transferred.\r\n   *\r\n   * Only a single account can be approved at a time, so approving the\r\n   * zero address clears previous approvals.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The caller must own the token or be an approved operator.\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address to, uint256 tokenId) public virtual override {\r\n    address owner = ownerOf(tokenId);\r\n\r\n    if (_msgSenderERC721A() != owner)\r\n      if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n        revert ApprovalCallerNotOwnerNorApproved();\r\n      }\r\n\r\n    _tokenApprovals[tokenId].value = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the account approved for `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function getApproved(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n    return _tokenApprovals[tokenId].value;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve or remove `operator` as an operator for the caller.\r\n   * Operators can call {transferFrom} or {safeTransferFrom}\r\n   * for any token owned by the caller.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The `operator` cannot be the caller.\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    virtual\r\n    override\r\n  {\r\n    if (operator == _msgSenderERC721A()) revert ApproveToCaller();\r\n\r\n    _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n    emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n   *\r\n   * See {setApprovalForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether `tokenId` exists.\r\n   *\r\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n   *\r\n   * Tokens start existing when they are minted. See {_mint}.\r\n   */\r\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n    return\r\n      _startTokenId() \u003c= tokenId \u0026\u0026\r\n      tokenId \u003c _currentIndex \u0026\u0026 // If within bounds,\r\n      _packedOwnerships[tokenId] \u0026 _BITMASK_BURNED == 0; // and not burned.\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\r\n   */\r\n  function _isSenderApprovedOrOwner(\r\n    address approvedAddress,\r\n    address owner,\r\n    address msgSender\r\n  ) private pure returns (bool result) {\r\n    assembly {\r\n      // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren\u0027t clean.\r\n      owner := and(owner, _BITMASK_ADDRESS)\r\n      // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren\u0027t clean.\r\n      msgSender := and(msgSender, _BITMASK_ADDRESS)\r\n      // `msgSender == owner || msgSender == approvedAddress`.\r\n      result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the storage slot and value for the approved address of `tokenId`.\r\n   */\r\n  function _getApprovedSlotAndAddress(uint256 tokenId)\r\n    private\r\n    view\r\n    returns (uint256 approvedAddressSlot, address approvedAddress)\r\n  {\r\n    TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\r\n    // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\r\n    assembly {\r\n      approvedAddressSlot := tokenApproval.slot\r\n      approvedAddress := sload(approvedAddressSlot)\r\n    }\r\n  }\r\n\r\n  // =============================================================\r\n  //                      TRANSFER OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token\r\n   * by either {approve} or {setApprovalForAll}.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n    if (address(uint160(prevOwnershipPacked)) != from)\r\n      revert TransferFromIncorrectOwner();\r\n\r\n    (\r\n      uint256 approvedAddressSlot,\r\n      address approvedAddress\r\n    ) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n    // The nested ifs save around 20+ gas over a compound boolean condition.\r\n    if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n      if (!isApprovedForAll(from, _msgSenderERC721A()))\r\n        revert TransferCallerNotOwnerNorApproved();\r\n\r\n    if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n    _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n    // Clear approvals from the previous owner.\r\n    assembly {\r\n      if approvedAddress {\r\n        // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n        sstore(approvedAddressSlot, 0)\r\n      }\r\n    }\r\n\r\n    // Underflow of the sender\u0027s balance is impossible because we check for\r\n    // ownership above and the recipient\u0027s balance can\u0027t realistically overflow.\r\n    // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n    unchecked {\r\n      // We can directly increment and decrement the balances.\r\n      --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n      ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n\r\n      // Updates:\r\n      // - `address` to the next owner.\r\n      // - `startTimestamp` to the timestamp of transfering.\r\n      // - `burned` to `false`.\r\n      // - `nextInitialized` to `true`.\r\n      _packedOwnerships[tokenId] = _packOwnershipData(\r\n        to,\r\n        _BITMASK_NEXT_INITIALIZED |\r\n          _nextExtraData(from, to, prevOwnershipPacked)\r\n      );\r\n\r\n      // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n      if (prevOwnershipPacked \u0026 _BITMASK_NEXT_INITIALIZED == 0) {\r\n        uint256 nextTokenId = tokenId + 1;\r\n        // If the next slot\u0027s address is zero and not burned (i.e. packed value is zero).\r\n        if (_packedOwnerships[nextTokenId] == 0) {\r\n          // If the next slot is within bounds.\r\n          if (nextTokenId != _currentIndex) {\r\n            // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n            _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, to, tokenId);\r\n    _afterTokenTransfers(from, to, tokenId, 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Equivalent to `safeTransferFrom(from, to, tokenId, \u0027\u0027)`.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    safeTransferFrom(from, to, tokenId, \u0027\u0027);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token\r\n   * by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement\r\n   * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public virtual override {\r\n    transferFrom(from, to, tokenId);\r\n    if (to.code.length != 0)\r\n      if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n        revert TransferToNonERC721ReceiverImplementer();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before a set of serially-ordered token IDs\r\n   * are about to be transferred. This includes minting.\r\n   * And also called before burning one token.\r\n   *\r\n   * `startTokenId` - the first token ID to be transferred.\r\n   * `quantity` - the amount to be transferred.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, `from`\u0027s `tokenId` will be\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` will be minted for `to`.\r\n   * - When `to` is zero, `tokenId` will be burned by `from`.\r\n   * - `from` and `to` are never both zero.\r\n   */\r\n  function _beforeTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after a set of serially-ordered token IDs\r\n   * have been transferred. This includes minting.\r\n   * And also called after one token has been burned.\r\n   *\r\n   * `startTokenId` - the first token ID to be transferred.\r\n   * `quantity` - the amount to be transferred.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, `from`\u0027s `tokenId` has been\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` has been minted for `to`.\r\n   * - When `to` is zero, `tokenId` has been burned by `from`.\r\n   * - `from` and `to` are never both zero.\r\n   */\r\n  function _afterTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n   *\r\n   * `from` - Previous owner of the given token ID.\r\n   * `to` - Target address that will receive the token.\r\n   * `tokenId` - Token ID to be transferred.\r\n   * `_data` - Optional data to send along with the call.\r\n   *\r\n   * Returns whether the call correctly returned the expected magic value.\r\n   */\r\n  function _checkContractOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    try\r\n      ERC721A__IERC721Receiver(to).onERC721Received(\r\n        _msgSenderERC721A(),\r\n        from,\r\n        tokenId,\r\n        _data\r\n      )\r\n    returns (bytes4 retval) {\r\n      return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n    } catch (bytes memory reason) {\r\n      if (reason.length == 0) {\r\n        revert TransferToNonERC721ReceiverImplementer();\r\n      } else {\r\n        assembly {\r\n          revert(add(32, reason), mload(reason))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // =============================================================\r\n  //                        MINT OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Mints `quantity` tokens and transfers them to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `quantity` must be greater than 0.\r\n   *\r\n   * Emits a {Transfer} event for each mint.\r\n   */\r\n  function _mint(address to, uint256 quantity) internal virtual {\r\n    uint256 startTokenId = _currentIndex;\r\n    require(quantity \u003e 0, \u0027ERC721a: Mint Zero Quantity!\u0027);\r\n\r\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    // Overflows are incredibly unrealistic.\r\n    // `balance` and `numberMinted` have a maximum limit of 2**64.\r\n    // `tokenId` has a maximum limit of 2**256.\r\n    unchecked {\r\n      // Updates:\r\n      // - `balance += quantity`.\r\n      // - `numberMinted += quantity`.\r\n      //\r\n      // We can directly add to the `balance` and `numberMinted`.\r\n      _packedAddressData[to] += quantity * ((1 \u003c\u003c _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n      // Updates:\r\n      // - `address` to the owner.\r\n      // - `startTimestamp` to the timestamp of minting.\r\n      // - `burned` to `false`.\r\n      // - `nextInitialized` to `quantity == 1`.\r\n      _packedOwnerships[startTokenId] = _packOwnershipData(\r\n        to,\r\n        _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n      );\r\n\r\n      uint256 toMasked;\r\n      uint256 end = startTokenId + quantity;\r\n\r\n      // Use assembly to loop and emit the `Transfer` event for gas savings.\r\n      assembly {\r\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren\u0027t clean.\r\n        toMasked := and(to, _BITMASK_ADDRESS)\r\n        // Emit the `Transfer` event.\r\n        log4(\r\n          0, // Start of data (0, since no data).\r\n          0, // End of data (0, since no data).\r\n          _TRANSFER_EVENT_SIGNATURE, // Signature.\r\n          0, // `address(0)`.\r\n          toMasked, // `to`.\r\n          startTokenId // `tokenId`.\r\n        )\r\n\r\n        for {\r\n          let tokenId := add(startTokenId, 1)\r\n        } iszero(eq(tokenId, end)) {\r\n          tokenId := add(tokenId, 1)\r\n        } {\r\n          // Emit the `Transfer` event. Similar to above.\r\n          log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\r\n        }\r\n      }\r\n      if (toMasked == 0) revert MintToZeroAddress();\r\n\r\n      _currentIndex = end;\r\n    }\r\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev Mints `quantity` tokens and transfers them to `to`.\r\n   *\r\n   * This function is intended for efficient minting only during contract creation.\r\n   *\r\n   * It emits only one {ConsecutiveTransfer} as defined in\r\n   * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\r\n   * instead of a sequence of {Transfer} event(s).\r\n   *\r\n   * Calling this function outside of contract creation WILL make your contract\r\n   * non-compliant with the ERC721 standard.\r\n   * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\r\n   * {ConsecutiveTransfer} event is only permissible during contract creation.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `quantity` must be greater than 0.\r\n   *\r\n   * Emits a {ConsecutiveTransfer} event.\r\n   */\r\n  function _mintERC2309(address to, uint256 quantity) internal virtual {\r\n    uint256 startTokenId = _currentIndex;\r\n    if (to == address(0)) revert MintToZeroAddress();\r\n    if (quantity == 0) revert MintZeroQuantity();\r\n    if (quantity \u003e _MAX_MINT_ERC2309_QUANTITY_LIMIT)\r\n      revert MintERC2309QuantityExceedsLimit();\r\n\r\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\r\n    unchecked {\r\n      // Updates:\r\n      // - `balance += quantity`.\r\n      // - `numberMinted += quantity`.\r\n      //\r\n      // We can directly add to the `balance` and `numberMinted`.\r\n      _packedAddressData[to] += quantity * ((1 \u003c\u003c _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n      // Updates:\r\n      // - `address` to the owner.\r\n      // - `startTimestamp` to the timestamp of minting.\r\n      // - `burned` to `false`.\r\n      // - `nextInitialized` to `quantity == 1`.\r\n      _packedOwnerships[startTokenId] = _packOwnershipData(\r\n        to,\r\n        _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n      );\r\n\r\n      emit ConsecutiveTransfer(\r\n        startTokenId,\r\n        startTokenId + quantity - 1,\r\n        address(0),\r\n        to\r\n      );\r\n\r\n      _currentIndex = startTokenId + quantity;\r\n    }\r\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - If `to` refers to a smart contract, it must implement\r\n   * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n   * - `quantity` must be greater than 0.\r\n   *\r\n   * See {_mint}.\r\n   *\r\n   * Emits a {Transfer} event for each mint.\r\n   */\r\n  function _safeMint(\r\n    address to,\r\n    uint256 quantity,\r\n    bytes memory _data\r\n  ) internal virtual {\r\n    _mint(to, quantity);\r\n\r\n    unchecked {\r\n      if (to.code.length != 0) {\r\n        uint256 end = _currentIndex;\r\n        uint256 index = end - quantity;\r\n        do {\r\n          if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n          }\r\n        } while (index \u003c end);\r\n        // Reentrancy protection.\r\n        if (_currentIndex != end) revert();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Equivalent to `_safeMint(to, quantity, \u0027\u0027)`.\r\n   */\r\n  function _safeMint(address to, uint256 quantity) internal virtual {\r\n    _safeMint(to, quantity, \u0027\u0027);\r\n  }\r\n\r\n  // =============================================================\r\n  //                        BURN OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Equivalent to `_burn(tokenId, false)`.\r\n   */\r\n  function _burn(uint256 tokenId) internal virtual {\r\n    _burn(tokenId, false);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `tokenId`.\r\n   * The approval is cleared when the token is burned.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n    uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n    address from = address(uint160(prevOwnershipPacked));\r\n\r\n    (\r\n      uint256 approvedAddressSlot,\r\n      address approvedAddress\r\n    ) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n    if (approvalCheck) {\r\n      // The nested ifs save around 20+ gas over a compound boolean condition.\r\n      if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n        if (!isApprovedForAll(from, _msgSenderERC721A()))\r\n          revert TransferCallerNotOwnerNorApproved();\r\n    }\r\n\r\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n    // Clear approvals from the previous owner.\r\n    assembly {\r\n      if approvedAddress {\r\n        // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n        sstore(approvedAddressSlot, 0)\r\n      }\r\n    }\r\n\r\n    // Underflow of the sender\u0027s balance is impossible because we check for\r\n    // ownership above and the recipient\u0027s balance can\u0027t realistically overflow.\r\n    // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n    unchecked {\r\n      // Updates:\r\n      // - `balance -= 1`.\r\n      // - `numberBurned += 1`.\r\n      //\r\n      // We can directly decrement the balance, and increment the number burned.\r\n      // This is equivalent to `packed -= 1; packed += 1 \u003c\u003c _BITPOS_NUMBER_BURNED;`.\r\n      _packedAddressData[from] += (1 \u003c\u003c _BITPOS_NUMBER_BURNED) - 1;\r\n\r\n      // Updates:\r\n      // - `address` to the last owner.\r\n      // - `startTimestamp` to the timestamp of burning.\r\n      // - `burned` to `true`.\r\n      // - `nextInitialized` to `true`.\r\n      _packedOwnerships[tokenId] = _packOwnershipData(\r\n        from,\r\n        (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) |\r\n          _nextExtraData(from, address(0), prevOwnershipPacked)\r\n      );\r\n\r\n      // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n      if (prevOwnershipPacked \u0026 _BITMASK_NEXT_INITIALIZED == 0) {\r\n        uint256 nextTokenId = tokenId + 1;\r\n        // If the next slot\u0027s address is zero and not burned (i.e. packed value is zero).\r\n        if (_packedOwnerships[nextTokenId] == 0) {\r\n          // If the next slot is within bounds.\r\n          if (nextTokenId != _currentIndex) {\r\n            // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n            _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, address(0), tokenId);\r\n    _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n    // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n    unchecked {\r\n      _burnCounter++;\r\n    }\r\n  }\r\n\r\n  // =============================================================\r\n  //                     EXTRA DATA OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Directly sets the extra data for the ownership data `index`.\r\n   */\r\n  function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\r\n    uint256 packed = _packedOwnerships[index];\r\n    if (packed == 0) revert OwnershipNotInitializedForExtraData();\r\n    uint256 extraDataCasted;\r\n    // Cast `extraData` with assembly to avoid redundant masking.\r\n    assembly {\r\n      extraDataCasted := extraData\r\n    }\r\n    packed =\r\n      (packed \u0026 _BITMASK_EXTRA_DATA_COMPLEMENT) |\r\n      (extraDataCasted \u003c\u003c _BITPOS_EXTRA_DATA);\r\n    _packedOwnerships[index] = packed;\r\n  }\r\n\r\n  /**\r\n   * @dev Called during each token transfer to set the 24bit `extraData` field.\r\n   * Intended to be overridden by the cosumer contract.\r\n   *\r\n   * `previousExtraData` - the value of `extraData` before transfer.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, `from`\u0027s `tokenId` will be\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` will be minted for `to`.\r\n   * - When `to` is zero, `tokenId` will be burned by `from`.\r\n   * - `from` and `to` are never both zero.\r\n   */\r\n  function _extraData(\r\n    address from,\r\n    address to,\r\n    uint24 previousExtraData\r\n  ) internal view virtual returns (uint24) {}\r\n\r\n  /**\r\n   * @dev Returns the next extra data for the packed ownership data.\r\n   * The returned result is shifted into position.\r\n   */\r\n  function _nextExtraData(\r\n    address from,\r\n    address to,\r\n    uint256 prevOwnershipPacked\r\n  ) private view returns (uint256) {\r\n    uint24 extraData = uint24(prevOwnershipPacked \u003e\u003e _BITPOS_EXTRA_DATA);\r\n    return uint256(_extraData(from, to, extraData)) \u003c\u003c _BITPOS_EXTRA_DATA;\r\n  }\r\n\r\n  // =============================================================\r\n  //                       OTHER OPERATIONS\r\n  // =============================================================\r\n\r\n  /**\r\n   * @dev Returns the message sender (defaults to `msg.sender`).\r\n   *\r\n   * If you are writing GSN compatible contracts, you need to override this function.\r\n   */\r\n  function _msgSenderERC721A() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a uint256 to its ASCII string decimal representation.\r\n   */\r\n  function _toString(uint256 value)\r\n    internal\r\n    pure\r\n    virtual\r\n    returns (string memory str)\r\n  {\r\n    assembly {\r\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit),\r\n      // but we allocate 0x80 bytes to keep the free memory pointer 32-byte word aliged.\r\n      // We will need 1 32-byte word to store the length,\r\n      // and 3 32-byte words to store a maximum of 78 digits. Total: 0x20 + 3 * 0x20 = 0x80.\r\n      str := add(mload(0x40), 0x80)\r\n      // Update the free memory pointer to allocate.\r\n      mstore(0x40, str)\r\n\r\n      // Cache the end of the memory to calculate the length later.\r\n      let end := str\r\n\r\n      // We write the string from rightmost digit to leftmost digit.\r\n      // The following is essentially a do-while loop that also handles the zero case.\r\n      // prettier-ignore\r\n      for { let temp := value } 1 {} {\r\n                str := sub(str, 1)\r\n                // Write the character to the pointer.\r\n                // The ASCII index of the \u00270\u0027 character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                // prettier-ignore\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n      let length := sub(end, str)\r\n      // Move the pointer 32 bytes leftwards to make room for the length.\r\n      str := sub(str, 0x20)\r\n      // Store the length.\r\n      mstore(str, length)\r\n    }\r\n  }\r\n}\r\n"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"},"IERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n"},"IERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.2.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of ERC721A.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller cannot approve to their own address.\r\n     */\r\n    error ApproveToCaller();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the\r\n     * ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    // =============================================================\r\n    //                            STRUCTS\r\n    // =============================================================\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Stores the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\r\n        uint24 extraData;\r\n    }\r\n\r\n    // =============================================================\r\n    //                         TOKEN COUNTERS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                            IERC721\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables\r\n     * (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`\u0027s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\r\n     * checking first that contract recipients are aware of the ERC721 protocol\r\n     * to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move\r\n     * this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, \u0027\u0027)`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\r\n     * whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // =============================================================\r\n    //                           IERC2309\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\r\n     * (inclusive) is transferred from `from` to `to`, as defined in the\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\r\n     *\r\n     * See {_mintERC2309} for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}\r\n"},"MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function verifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs \u0026 pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i \u003c proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i \u003c proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\r\n     * consuming from one or the other at each step according to the instructions given by\r\n     * `proofFlags`.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\u0027s \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i \u003c totalHashes; i++) {\r\n            bytes32 a = leafPos \u003c leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos \u003c leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes \u003e 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen \u003e 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\u0027s \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i \u003c totalHashes; i++) {\r\n            bytes32 a = leafPos \u003c leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos \u003c leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes \u003e 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen \u003e 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a \u003c b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \u0027./Context.sol\u0027;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    _checkOwner();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if the sender is not the owner.\r\n   */\r\n  function _checkOwner() internal view virtual {\r\n    require(owner() == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \u0027Ownable: new owner is the zero address\u0027);\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n"},"Retrogression.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \u0027./Ownable.sol\u0027;\r\nimport \u0027./Address.sol\u0027;\r\nimport \u0027./MerkleProof.sol\u0027;\r\nimport \u0027./Strings.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./ERC721A.sol\u0027;\r\nimport \u0027./ERC2981.sol\u0027;\r\n\r\nerror PublicSaleNotLive();\r\nerror WhiteListNotLive();\r\nerror OgListNotLive();\r\nerror ExceededLimit();\r\nerror NotEnoughTokensLeft();\r\nerror WrongEther();\r\nerror InvalidMerkle();\r\nerror OgListUsed();\r\nerror WhitelistUsed();\r\nerror MintZeroQuantity();\r\n\r\ncontract Retrogression is ERC721A, ERC2981, Ownable {\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n  using MerkleProof for bytes32[];\r\n\r\n  bytes32 public whiteListMerkleRoot; // root hash for verying whitelist address\r\n  uint256 public whiteListMaxMint; // max mint each address can mint\r\n  uint256 public totalMaxSupply; // total max supply\r\n  uint256 public ogMaxSupply; // og max supply\r\n  uint256 public whiteListMaxSupply; // white list max supply\r\n  uint256 public mintRate; // 150USD worth of ETH\r\n  uint256 public whitelistMintRate; // 150USD worth of ETH\r\n  uint256 public totalOgSupply; // og minted supply\r\n  uint256 public totalWhiteListSupply; // whitelist minted supply\r\n  string public baseExtension = \u0027.json\u0027;\r\n  string public baseURI = \u0027\u0027; // ipfs://\u003cLIVE_CID\u003e/\r\n  string public baseHiddenUri = \u0027\u0027; // unreveal url\r\n  bool public isWhitelistSale; // a boolean to handle stages of whitelist sale\r\n  bool public isPublicSale; // a boolean to handle stages of public sale\r\n  bool public revealed; // a boolean to indicate revealing of token.\r\n  address payable public feeCollecter;\r\n\r\n  /**\r\n   * @dev a mapping to check the max mint for each address.\r\n   */\r\n  mapping(address =\u003e uint256) public whiteListUsedAddresses;\r\n\r\n  constructor() ERC721A(\u0027RETROGRESSION - Rise of the Dark Army\u0027, \u0027RTGN\u0027) {\r\n    mintRate = 150000000000000000; // 0.15eth tbc\r\n    whitelistMintRate = 150000000000000000; // 0.15eth tbc\r\n    whiteListMaxMint = 2;\r\n    totalMaxSupply = 5462; // OG/EI and Character NFT\r\n    ogMaxSupply = 412;\r\n    whiteListMaxSupply = 200;\r\n    isWhitelistSale = false;\r\n    isPublicSale = false;\r\n    revealed = false;\r\n    feeCollecter = payable(0x02A522D98EC2D2c3bBe91AcC29ee7fD32ab880ab);\r\n    baseHiddenUri = \u0027ipfs://QmegkArmJMKAWXGFFKETuoCFJAfsE6hoJRM2khgkZCvf5y/\u0027;\r\n    whiteListMerkleRoot = 0x1e833049290a0843af727836cc7627d8742335ddd0073243c21f9186c5b3ba9d;\r\n\r\n    // @dev setting the royalty fee for retrogression address.\r\n    _setDefaultRoyalty(0xb8623497431893Fc4820eC708003f27DE086FEF1, 250);\r\n  }\r\n\r\n  modifier isPublicLive() {\r\n    if (!isPublicSale) revert PublicSaleNotLive();\r\n    _;\r\n  }\r\n\r\n  modifier isWhiteListLive() {\r\n    if (!isWhitelistSale) revert WhiteListNotLive();\r\n    _;\r\n  }\r\n\r\n  modifier isEnoughTokensLeft(uint256 _quantity) {\r\n    if (_quantity.add(totalSupply()) \u003e totalMaxSupply)\r\n      revert NotEnoughTokensLeft();\r\n    _;\r\n  }\r\n\r\n  modifier isAddressVerified(bytes32[] calldata _proof, bytes32 _rootHash) {\r\n    if (!MerkleProof.verify(_proof, _rootHash, leaf(msg.sender)))\r\n      revert InvalidMerkle();\r\n    _;\r\n  }\r\n\r\n  modifier isWithinOgMintLimit(uint256 _quantity) {\r\n    if (_quantity \u003e ogMaxSupply) revert ExceededLimit();\r\n    _;\r\n  }\r\n\r\n  modifier isWithinWhiteListMintLimit(uint256 _quantity) {\r\n    if (_quantity \u003e whiteListMaxSupply) revert ExceededLimit();\r\n    _;\r\n  }\r\n\r\n  modifier isCorrectPayment(uint256 _quantity, uint256 _mintRate) {\r\n    if (_quantity \u003c= 0) revert MintZeroQuantity();\r\n    if (_mintRate.mul(_quantity) != msg.value) revert WrongEther();\r\n    _;\r\n  }\r\n\r\n  modifier checkQuantity(uint256 _quantity) {\r\n    if (_quantity \u003c= 0) revert MintZeroQuantity();\r\n    _;\r\n  }\r\n\r\n  event SendFee(address from, address to, uint256 amount);\r\n\r\n  /**\r\n   * @dev a function to send 10% to dev account.\r\n   */\r\n  function sendFee() internal {\r\n    uint256 fee = msg.value.mul(10).div(100); // deduct 10% from minting and send to mintable account\r\n    require(address(this).balance \u003e= fee, \u0027Address: insufficient balance\u0027);\r\n    feeCollecter.transfer(fee);\r\n    emit SendFee(address(this), feeCollecter, fee);\r\n  }\r\n\r\n  /**\r\n   * @dev overrides contract supportInterface\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC721A, ERC2981)\r\n    returns (bool)\r\n  {\r\n    return\r\n      ERC721A.supportsInterface(_interfaceId) ||\r\n      ERC2981.supportsInterface(_interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev a function that uses ERC721A is an improved implementation of the\r\n   * IERC721 standard that supports minting multiple tokens for close to the cost of one\r\n   *\r\n   * handle oglist mint\r\n   */\r\n  function ogMint(uint256 _quantity)\r\n    external\r\n    payable\r\n    onlyOwner\r\n    checkQuantity(_quantity)\r\n    isWithinOgMintLimit(_quantity)\r\n    isEnoughTokensLeft(_quantity)\r\n  {\r\n    totalOgSupply = totalOgSupply.add(_quantity);\r\n    sendFee();\r\n    _mint(msg.sender, _quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev a function that uses ERC721A is an improved implementation of the\r\n   * IERC721 standard that supports minting multiple tokens for close to the cost of one\r\n   *\r\n   * handle whitelist mint\r\n   */\r\n  function whiteListMint(uint256 _quantity, bytes32[] calldata _proof)\r\n    external\r\n    payable\r\n    isWhiteListLive\r\n    isAddressVerified(_proof, whiteListMerkleRoot)\r\n    isWithinWhiteListMintLimit(_quantity)\r\n    isEnoughTokensLeft(_quantity)\r\n    isCorrectPayment(_quantity, whitelistMintRate)\r\n  {\r\n    if (_quantity.add(whiteListUsedAddresses[msg.sender]) \u003e whiteListMaxMint) {\r\n      revert WhitelistUsed();\r\n    }\r\n\r\n    whiteListUsedAddresses[msg.sender] = _quantity.add(\r\n      whiteListUsedAddresses[msg.sender]\r\n    );\r\n    totalWhiteListSupply = _quantity.add(totalWhiteListSupply);\r\n\r\n    sendFee();\r\n    _mint(msg.sender, _quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev a function that uses ERC721A is an improved implementation of the\r\n   * IERC721 standard that supports minting multiple tokens for close to the cost of one\r\n   */\r\n  function mint(uint256 _quantity)\r\n    external\r\n    payable\r\n    isPublicLive\r\n    isEnoughTokensLeft(_quantity)\r\n    isCorrectPayment(_quantity, mintRate)\r\n  {\r\n    sendFee();\r\n    _mint(msg.sender, _quantity);\r\n  }\r\n\r\n  function tokenURI(uint256 _tokenId)\r\n    public\r\n    view\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(_exists(_tokenId), \u0027ERC721a: token nonexistent!\u0027);\r\n\r\n    if (!revealed) {\r\n      string memory currentHiddenBaseURI = _baseHiddenURI();\r\n\r\n      return\r\n        bytes(currentHiddenBaseURI).length \u003e 0\r\n          ? string(\r\n            abi.encodePacked(\r\n              currentHiddenBaseURI,\r\n              Strings.toString(_tokenId),\r\n              baseExtension\r\n            )\r\n          )\r\n          : \u0027\u0027;\r\n    }\r\n\r\n    // added reveal\r\n    string memory currentBaseURI = _baseURI();\r\n    return\r\n      bytes(currentBaseURI).length \u003e 0\r\n        ? string(\r\n          abi.encodePacked(\r\n            currentBaseURI,\r\n            Strings.toString(_tokenId),\r\n            baseExtension\r\n          )\r\n        )\r\n        : \u0027\u0027;\r\n  }\r\n\r\n  function _baseURI() internal view override returns (string memory) {\r\n    return baseURI;\r\n  }\r\n\r\n  function _baseHiddenURI() internal view returns (string memory) {\r\n    return baseHiddenUri;\r\n  }\r\n\r\n  function leaf(address _account) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_account));\r\n  }\r\n\r\n  function setWhiteListMerkleRoot(bytes32 _root) external onlyOwner {\r\n    whiteListMerkleRoot = _root;\r\n  }\r\n\r\n  function toggleWhitelistSale() public onlyOwner {\r\n    isWhitelistSale = !isWhitelistSale;\r\n  }\r\n\r\n  function togglePublicSale() public onlyOwner {\r\n    isPublicSale = !isPublicSale;\r\n  }\r\n\r\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\r\n    baseURI = _newBaseURI;\r\n    revealed = !revealed;\r\n  }\r\n\r\n  function withdraw() external payable onlyOwner {\r\n    payable(msg.sender).transfer(address(this).balance);\r\n  }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp \u003e\u003e= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\r\n            value \u003e\u003e= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n"}}