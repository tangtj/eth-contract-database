
// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)

pragma solidity ^0.8.20;

import {IAccessControl} from "./IAccessControl.sol";
import {Context} from "../utils/Context.sol";
import {ERC165} from "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```solidity
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```solidity
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
 * to enforce additional security measures for this role.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address account => bool) hasRole;
        bytes32 adminRole;
    }

    mapping(bytes32 role => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with an {AccessControlUnauthorizedAccount} error including the required role.
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual returns (bool) {
        return _roles[role].hasRole[account];
    }

    /**
     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`
     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`
     * is missing `role`.
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert AccessControlUnauthorizedAccount(account, role);
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleGranted} event.
     */
    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleRevoked} event.
     */
    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `callerConfirmation`.
     *
     * May emit a {RoleRevoked} event.
     */
    function renounceRole(bytes32 role, address callerConfirmation) public virtual {
        if (callerConfirmation != _msgSender()) {
            revert AccessControlBadConfirmation();
        }

        _revokeRole(role, callerConfirmation);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleGranted} event.
     */
    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {
        if (!hasRole(role, account)) {
            _roles[role].hasRole[account] = true;
            emit RoleGranted(role, account, _msgSender());
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleRevoked} event.
     */
    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {
        if (hasRole(role, account)) {
            _roles[role].hasRole[account] = false;
            emit RoleRevoked(role, account, _msgSender());
            return true;
        } else {
            return false;
        }
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)

pragma solidity ^0.8.20;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev The `account` is missing a role.
     */
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);

    /**
     * @dev The caller of a function is not the expected one.
     *
     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.
     */
    error AccessControlBadConfirmation();

    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `callerConfirmation`.
     */
    function renounceRole(bytes32 role, address callerConfirmation) external;
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/governance/TimelockController.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (governance/TimelockController.sol)

pragma solidity ^0.8.20;

import {AccessControl} from "../access/AccessControl.sol";
import {ERC721Holder} from "../token/ERC721/utils/ERC721Holder.sol";
import {ERC1155Holder} from "../token/ERC1155/utils/ERC1155Holder.sol";
import {Address} from "../utils/Address.sol";

/**
 * @dev Contract module which acts as a timelocked controller. When set as the
 * owner of an `Ownable` smart contract, it enforces a timelock on all
 * `onlyOwner` maintenance operations. This gives time for users of the
 * controlled contract to exit before a potentially dangerous maintenance
 * operation is applied.
 *
 * By default, this contract is self administered, meaning administration tasks
 * have to go through the timelock process. The proposer (resp executor) role
 * is in charge of proposing (resp executing) operations. A common use case is
 * to position this {TimelockController} as the owner of a smart contract, with
 * a multisig or a DAO as the sole proposer.
 */
contract TimelockController is AccessControl, ERC721Holder, ERC1155Holder {
    bytes32 public constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");
    bytes32 public constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");
    bytes32 public constant CANCELLER_ROLE = keccak256("CANCELLER_ROLE");
    uint256 internal constant _DONE_TIMESTAMP = uint256(1);

    mapping(bytes32 id => uint256) private _timestamps;
    uint256 private _minDelay;

    enum OperationState {
        Unset,
        Waiting,
        Ready,
        Done
    }

    /**
     * @dev Mismatch between the parameters length for an operation call.
     */
    error TimelockInvalidOperationLength(uint256 targets, uint256 payloads, uint256 values);

    /**
     * @dev The schedule operation doesn't meet the minimum delay.
     */
    error TimelockInsufficientDelay(uint256 delay, uint256 minDelay);

    /**
     * @dev The current state of an operation is not as required.
     * The `expectedStates` is a bitmap with the bits enabled for each OperationState enum position
     * counting from right to left.
     *
     * See {_encodeStateBitmap}.
     */
    error TimelockUnexpectedOperationState(bytes32 operationId, bytes32 expectedStates);

    /**
     * @dev The predecessor to an operation not yet done.
     */
    error TimelockUnexecutedPredecessor(bytes32 predecessorId);

    /**
     * @dev The caller account is not authorized.
     */
    error TimelockUnauthorizedCaller(address caller);

    /**
     * @dev Emitted when a call is scheduled as part of operation `id`.
     */
    event CallScheduled(
        bytes32 indexed id,
        uint256 indexed index,
        address target,
        uint256 value,
        bytes data,
        bytes32 predecessor,
        uint256 delay
    );

    /**
     * @dev Emitted when a call is performed as part of operation `id`.
     */
    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);

    /**
     * @dev Emitted when new proposal is scheduled with non-zero salt.
     */
    event CallSalt(bytes32 indexed id, bytes32 salt);

    /**
     * @dev Emitted when operation `id` is cancelled.
     */
    event Cancelled(bytes32 indexed id);

    /**
     * @dev Emitted when the minimum delay for future operations is modified.
     */
    event MinDelayChange(uint256 oldDuration, uint256 newDuration);

    /**
     * @dev Initializes the contract with the following parameters:
     *
     * - `minDelay`: initial minimum delay in seconds for operations
     * - `proposers`: accounts to be granted proposer and canceller roles
     * - `executors`: accounts to be granted executor role
     * - `admin`: optional account to be granted admin role; disable with zero address
     *
     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment
     * without being subject to delay, but this role should be subsequently renounced in favor of
     * administration through timelocked proposals. Previous versions of this contract would assign
     * this admin to the deployer automatically and should be renounced as well.
     */
    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address admin) {
        // self administration
        _grantRole(DEFAULT_ADMIN_ROLE, address(this));

        // optional admin
        if (admin != address(0)) {
            _grantRole(DEFAULT_ADMIN_ROLE, admin);
        }

        // register proposers and cancellers
        for (uint256 i = 0; i < proposers.length; ++i) {
            _grantRole(PROPOSER_ROLE, proposers[i]);
            _grantRole(CANCELLER_ROLE, proposers[i]);
        }

        // register executors
        for (uint256 i = 0; i < executors.length; ++i) {
            _grantRole(EXECUTOR_ROLE, executors[i]);
        }

        _minDelay = minDelay;
        emit MinDelayChange(0, minDelay);
    }

    /**
     * @dev Modifier to make a function callable only by a certain role. In
     * addition to checking the sender's role, `address(0)` 's role is also
     * considered. Granting a role to `address(0)` is equivalent to enabling
     * this role for everyone.
     */
    modifier onlyRoleOrOpenRole(bytes32 role) {
        if (!hasRole(role, address(0))) {
            _checkRole(role, _msgSender());
        }
        _;
    }

    /**
     * @dev Contract might receive/hold ETH as part of the maintenance process.
     */
    receive() external payable {}

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(
        bytes4 interfaceId
    ) public view virtual override(AccessControl, ERC1155Holder) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns whether an id corresponds to a registered operation. This
     * includes both Waiting, Ready, and Done operations.
     */
    function isOperation(bytes32 id) public view returns (bool) {
        return getOperationState(id) != OperationState.Unset;
    }

    /**
     * @dev Returns whether an operation is pending or not. Note that a "pending" operation may also be "ready".
     */
    function isOperationPending(bytes32 id) public view returns (bool) {
        OperationState state = getOperationState(id);
        return state == OperationState.Waiting || state == OperationState.Ready;
    }

    /**
     * @dev Returns whether an operation is ready for execution. Note that a "ready" operation is also "pending".
     */
    function isOperationReady(bytes32 id) public view returns (bool) {
        return getOperationState(id) == OperationState.Ready;
    }

    /**
     * @dev Returns whether an operation is done or not.
     */
    function isOperationDone(bytes32 id) public view returns (bool) {
        return getOperationState(id) == OperationState.Done;
    }

    /**
     * @dev Returns the timestamp at which an operation becomes ready (0 for
     * unset operations, 1 for done operations).
     */
    function getTimestamp(bytes32 id) public view virtual returns (uint256) {
        return _timestamps[id];
    }

    /**
     * @dev Returns operation state.
     */
    function getOperationState(bytes32 id) public view virtual returns (OperationState) {
        uint256 timestamp = getTimestamp(id);
        if (timestamp == 0) {
            return OperationState.Unset;
        } else if (timestamp == _DONE_TIMESTAMP) {
            return OperationState.Done;
        } else if (timestamp > block.timestamp) {
            return OperationState.Waiting;
        } else {
            return OperationState.Ready;
        }
    }

    /**
     * @dev Returns the minimum delay in seconds for an operation to become valid.
     *
     * This value can be changed by executing an operation that calls `updateDelay`.
     */
    function getMinDelay() public view virtual returns (uint256) {
        return _minDelay;
    }

    /**
     * @dev Returns the identifier of an operation containing a single
     * transaction.
     */
    function hashOperation(
        address target,
        uint256 value,
        bytes calldata data,
        bytes32 predecessor,
        bytes32 salt
    ) public pure virtual returns (bytes32) {
        return keccak256(abi.encode(target, value, data, predecessor, salt));
    }

    /**
     * @dev Returns the identifier of an operation containing a batch of
     * transactions.
     */
    function hashOperationBatch(
        address[] calldata targets,
        uint256[] calldata values,
        bytes[] calldata payloads,
        bytes32 predecessor,
        bytes32 salt
    ) public pure virtual returns (bytes32) {
        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));
    }

    /**
     * @dev Schedule an operation containing a single transaction.
     *
     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.
     *
     * Requirements:
     *
     * - the caller must have the 'proposer' role.
     */
    function schedule(
        address target,
        uint256 value,
        bytes calldata data,
        bytes32 predecessor,
        bytes32 salt,
        uint256 delay
    ) public virtual onlyRole(PROPOSER_ROLE) {
        bytes32 id = hashOperation(target, value, data, predecessor, salt);
        _schedule(id, delay);
        emit CallScheduled(id, 0, target, value, data, predecessor, delay);
        if (salt != bytes32(0)) {
            emit CallSalt(id, salt);
        }
    }

    /**
     * @dev Schedule an operation containing a batch of transactions.
     *
     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.
     *
     * Requirements:
     *
     * - the caller must have the 'proposer' role.
     */
    function scheduleBatch(
        address[] calldata targets,
        uint256[] calldata values,
        bytes[] calldata payloads,
        bytes32 predecessor,
        bytes32 salt,
        uint256 delay
    ) public virtual onlyRole(PROPOSER_ROLE) {
        if (targets.length != values.length || targets.length != payloads.length) {
            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);
        }

        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);
        _schedule(id, delay);
        for (uint256 i = 0; i < targets.length; ++i) {
            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);
        }
        if (salt != bytes32(0)) {
            emit CallSalt(id, salt);
        }
    }

    /**
     * @dev Schedule an operation that is to become valid after a given delay.
     */
    function _schedule(bytes32 id, uint256 delay) private {
        if (isOperation(id)) {
            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Unset));
        }
        uint256 minDelay = getMinDelay();
        if (delay < minDelay) {
            revert TimelockInsufficientDelay(delay, minDelay);
        }
        _timestamps[id] = block.timestamp + delay;
    }

    /**
     * @dev Cancel an operation.
     *
     * Requirements:
     *
     * - the caller must have the 'canceller' role.
     */
    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {
        if (!isOperationPending(id)) {
            revert TimelockUnexpectedOperationState(
                id,
                _encodeStateBitmap(OperationState.Waiting) | _encodeStateBitmap(OperationState.Ready)
            );
        }
        delete _timestamps[id];

        emit Cancelled(id);
    }

    /**
     * @dev Execute an (ready) operation containing a single transaction.
     *
     * Emits a {CallExecuted} event.
     *
     * Requirements:
     *
     * - the caller must have the 'executor' role.
     */
    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,
    // thus any modifications to the operation during reentrancy should be caught.
    // slither-disable-next-line reentrancy-eth
    function execute(
        address target,
        uint256 value,
        bytes calldata payload,
        bytes32 predecessor,
        bytes32 salt
    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {
        bytes32 id = hashOperation(target, value, payload, predecessor, salt);

        _beforeCall(id, predecessor);
        _execute(target, value, payload);
        emit CallExecuted(id, 0, target, value, payload);
        _afterCall(id);
    }

    /**
     * @dev Execute an (ready) operation containing a batch of transactions.
     *
     * Emits one {CallExecuted} event per transaction in the batch.
     *
     * Requirements:
     *
     * - the caller must have the 'executor' role.
     */
    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,
    // thus any modifications to the operation during reentrancy should be caught.
    // slither-disable-next-line reentrancy-eth
    function executeBatch(
        address[] calldata targets,
        uint256[] calldata values,
        bytes[] calldata payloads,
        bytes32 predecessor,
        bytes32 salt
    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {
        if (targets.length != values.length || targets.length != payloads.length) {
            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);
        }

        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);

        _beforeCall(id, predecessor);
        for (uint256 i = 0; i < targets.length; ++i) {
            address target = targets[i];
            uint256 value = values[i];
            bytes calldata payload = payloads[i];
            _execute(target, value, payload);
            emit CallExecuted(id, i, target, value, payload);
        }
        _afterCall(id);
    }

    /**
     * @dev Execute an operation's call.
     */
    function _execute(address target, uint256 value, bytes calldata data) internal virtual {
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        Address.verifyCallResult(success, returndata);
    }

    /**
     * @dev Checks before execution of an operation's calls.
     */
    function _beforeCall(bytes32 id, bytes32 predecessor) private view {
        if (!isOperationReady(id)) {
            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));
        }
        if (predecessor != bytes32(0) && !isOperationDone(predecessor)) {
            revert TimelockUnexecutedPredecessor(predecessor);
        }
    }

    /**
     * @dev Checks after execution of an operation's calls.
     */
    function _afterCall(bytes32 id) private {
        if (!isOperationReady(id)) {
            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));
        }
        _timestamps[id] = _DONE_TIMESTAMP;
    }

    /**
     * @dev Changes the minimum timelock duration for future operations.
     *
     * Emits a {MinDelayChange} event.
     *
     * Requirements:
     *
     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing
     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.
     */
    function updateDelay(uint256 newDelay) external virtual {
        address sender = _msgSender();
        if (sender != address(this)) {
            revert TimelockUnauthorizedCaller(sender);
        }
        emit MinDelayChange(_minDelay, newDelay);
        _minDelay = newDelay;
    }

    /**
     * @dev Encodes a `OperationState` into a `bytes32` representation where each bit enabled corresponds to
     * the underlying position in the `OperationState` enum. For example:
     *
     * 0x000...1000
     *   ^^^^^^----- ...
     *         ^---- Done
     *          ^--- Ready
     *           ^-- Waiting
     *            ^- Unset
     */
    function _encodeStateBitmap(OperationState operationState) internal pure returns (bytes32) {
        return bytes32(1 << uint8(operationState));
    }
}


// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)
pragma solidity ^0.8.20;

/**
 * @dev Standard ERC20 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.
 */
interface IERC20Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC20InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC20InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     * @param allowance Amount of tokens a `spender` is allowed to operate with.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC20InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC20InvalidSpender(address spender);
}

/**
 * @dev Standard ERC721 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.
 */
interface IERC721Errors {
    /**
     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.
     * Used in balance queries.
     * @param owner Address of the current owner of a token.
     */
    error ERC721InvalidOwner(address owner);

    /**
     * @dev Indicates a `tokenId` whose `owner` is the zero address.
     * @param tokenId Identifier number of a token.
     */
    error ERC721NonexistentToken(uint256 tokenId);

    /**
     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param tokenId Identifier number of a token.
     * @param owner Address of the current owner of a token.
     */
    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC721InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC721InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param tokenId Identifier number of a token.
     */
    error ERC721InsufficientApproval(address operator, uint256 tokenId);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC721InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC721InvalidOperator(address operator);
}

/**
 * @dev Standard ERC1155 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.
 */
interface IERC1155Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     * @param tokenId Identifier number of a token.
     */
    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC1155InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC1155InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param owner Address of the current owner of a token.
     */
    error ERC1155MissingApprovalForAll(address operator, address owner);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC1155InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC1155InvalidOperator(address operator);

    /**
     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
     * Used in batch transfers.
     * @param idsLength Length of the array of token identifiers
     * @param valuesLength Length of the array of token amounts
     */
    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
}


// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)

pragma solidity ^0.8.20;

import {IERC165} from "../../utils/introspection/IERC165.sol";

/**
 * @dev Interface that must be implemented by smart contracts in order to receive
 * ERC-1155 token transfers.
 */
interface IERC1155Receiver is IERC165 {
    /**
     * @dev Handles the receipt of a single ERC1155 token type. This function is
     * called at the end of a `safeTransferFrom` after the balance has been updated.
     *
     * NOTE: To accept the transfer, this must return
     * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
     * (i.e. 0xf23a6e61, or its own function selector).
     *
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param value The amount of tokens being transferred
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
     */
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4);

    /**
     * @dev Handles the receipt of a multiple ERC1155 token types. This function
     * is called at the end of a `safeBatchTransferFrom` after the balances have
     * been updated.
     *
     * NOTE: To accept the transfer(s), this must return
     * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
     * (i.e. 0xbc197c81, or its own function selector).
     *
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
     */
    function onERC1155BatchReceived(
        address operator,
        address from,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)

pragma solidity ^0.8.20;

import {IERC165, ERC165} from "../../../utils/introspection/ERC165.sol";
import {IERC1155Receiver} from "../IERC1155Receiver.sol";

/**
 * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.
 *
 * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be
 * stuck.
 */
abstract contract ERC1155Holder is ERC165, IERC1155Receiver {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);
    }

    function onERC1155Received(
        address,
        address,
        uint256,
        uint256,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC1155Received.selector;
    }

    function onERC1155BatchReceived(
        address,
        address,
        uint256[] memory,
        uint256[] memory,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC1155BatchReceived.selector;
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "./IERC20.sol";
import {IERC20Metadata} from "./extensions/IERC20Metadata.sol";
import {Context} from "../../utils/Context.sol";
import {IERC20Errors} from "../../interfaces/draft-IERC6093.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 */
abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
    mapping(address account => uint256) private _balances;

    mapping(address account => mapping(address spender => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `value`.
     */
    function transfer(address to, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, value);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, value);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `value`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `value`.
     */
    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, value);
        _transfer(from, to, value);
        return true;
    }

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _transfer(address from, address to, uint256 value) internal {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(from, to, value);
    }

    /**
     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
     * this function.
     *
     * Emits a {Transfer} event.
     */
    function _update(address from, address to, uint256 value) internal virtual {
        if (from == address(0)) {
            // Overflow check required: The rest of the code assumes that totalSupply never overflows
            _totalSupply += value;
        } else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < value) {
                revert ERC20InsufficientBalance(from, fromBalance, value);
            }
            unchecked {
                // Overflow not possible: value <= fromBalance <= totalSupply.
                _balances[from] = fromBalance - value;
            }
        }

        if (to == address(0)) {
            unchecked {
                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
                _totalSupply -= value;
            }
        } else {
            unchecked {
                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
                _balances[to] += value;
            }
        }

        emit Transfer(from, to, value);
    }

    /**
     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
     * Relies on the `_update` mechanism
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _mint(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(address(0), account, value);
    }

    /**
     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
     * Relies on the `_update` mechanism.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead
     */
    function _burn(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        _update(account, address(0), value);
    }

    /**
     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     *
     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
     */
    function _approve(address owner, address spender, uint256 value) internal {
        _approve(owner, spender, value, true);
    }

    /**
     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
     *
     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
     * `Approval` event during `transferFrom` operations.
     *
     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
     * true using the following override:
     * ```
     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
     *     super._approve(owner, spender, value, true);
     * }
     * ```
     *
     * Requirements are the same as {_approve}.
     */
    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
        if (owner == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[owner][spender] = value;
        if (emitEvent) {
            emit Approval(owner, spender, value);
        }
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `value`.
     *
     * Does not update the allowance value in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Does not emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < value) {
                revert ERC20InsufficientAllowance(spender, currentAllowance, value);
            }
            unchecked {
                _approve(owner, spender, currentAllowance - value, false);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)

pragma solidity ^0.8.20;

import {ERC20} from "../ERC20.sol";
import {Context} from "../../../utils/Context.sol";

/**
 * @dev Extension of {ERC20} that allows token holders to destroy both their own
 * tokens and those that they have an allowance for, in a way that can be
 * recognized off-chain (via event analysis).
 */
abstract contract ERC20Burnable is Context, ERC20 {
    /**
     * @dev Destroys a `value` amount of tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 value) public virtual {
        _burn(_msgSender(), value);
    }

    /**
     * @dev Destroys a `value` amount of tokens from `account`, deducting from
     * the caller's allowance.
     *
     * See {ERC20-_burn} and {ERC20-allowance}.
     *
     * Requirements:
     *
     * - the caller must have allowance for ``accounts``'s tokens of at least
     * `value`.
     */
    function burnFrom(address account, uint256 value) public virtual {
        _spendAllowance(account, _msgSender(), value);
        _burn(account, value);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.20;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be
     * reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)

pragma solidity ^0.8.20;

import {IERC721Receiver} from "../IERC721Receiver.sol";

/**
 * @dev Implementation of the {IERC721Receiver} interface.
 *
 * Accepts all token transfers.
 * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or
 * {IERC721-setApprovalForAll}.
 */
abstract contract ERC721Holder is IERC721Receiver {
    /**
     * @dev See {IERC721Receiver-onERC721Received}.
     *
     * Always returns `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {
        return this.onERC721Received.selector;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)

pragma solidity ^0.8.20;

/**
 * @dev These functions deal with verification of Merkle Tree proofs.
 *
 * The tree and the proofs can be generated using our
 * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].
 * You will find a quickstart guide in the readme.
 *
 * WARNING: You should avoid using leaf values that are 64 bytes long prior to
 * hashing, or use a hash function other than keccak256 for hashing leaves.
 * This is because the concatenation of a sorted pair of internal nodes in
 * the Merkle tree could be reinterpreted as a leaf value.
 * OpenZeppelin's JavaScript library generates Merkle trees that are safe
 * against this attack out of the box.
 */
library MerkleProof {
    /**
     *@dev The multiproof provided is not valid.
     */
    error MerkleProofInvalidMultiproof();

    /**
     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
     * defined by `root`. For this, a `proof` must be provided, containing
     * sibling hashes on the branch from the leaf to the root of the tree. Each
     * pair of leaves and each pair of pre-images are assumed to be sorted.
     */
    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
        return processProof(proof, leaf) == root;
    }

    /**
     * @dev Calldata version of {verify}
     */
    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
        return processProofCalldata(proof, leaf) == root;
    }

    /**
     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up
     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt
     * hash matches the root of the tree. When processing the proof, the pairs
     * of leafs & pre-images are assumed to be sorted.
     */
    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            computedHash = _hashPair(computedHash, proof[i]);
        }
        return computedHash;
    }

    /**
     * @dev Calldata version of {processProof}
     */
    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            computedHash = _hashPair(computedHash, proof[i]);
        }
        return computedHash;
    }

    /**
     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by
     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.
     *
     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.
     */
    function multiProofVerify(
        bytes32[] memory proof,
        bool[] memory proofFlags,
        bytes32 root,
        bytes32[] memory leaves
    ) internal pure returns (bool) {
        return processMultiProof(proof, proofFlags, leaves) == root;
    }

    /**
     * @dev Calldata version of {multiProofVerify}
     *
     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.
     */
    function multiProofVerifyCalldata(
        bytes32[] calldata proof,
        bool[] calldata proofFlags,
        bytes32 root,
        bytes32[] memory leaves
    ) internal pure returns (bool) {
        return processMultiProofCalldata(proof, proofFlags, leaves) == root;
    }

    /**
     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction
     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another
     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false
     * respectively.
     *
     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree
     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the
     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).
     */
    function processMultiProof(
        bytes32[] memory proof,
        bool[] memory proofFlags,
        bytes32[] memory leaves
    ) internal pure returns (bytes32 merkleRoot) {
        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by
        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the
        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of
        // the Merkle tree.
        uint256 leavesLen = leaves.length;
        uint256 proofLen = proof.length;
        uint256 totalHashes = proofFlags.length;

        // Check proof validity.
        if (leavesLen + proofLen != totalHashes + 1) {
            revert MerkleProofInvalidMultiproof();
        }

        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using
        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's "pop".
        bytes32[] memory hashes = new bytes32[](totalHashes);
        uint256 leafPos = 0;
        uint256 hashPos = 0;
        uint256 proofPos = 0;
        // At each step, we compute the next hash using two values:
        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we
        //   get the next hash.
        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the
        //   `proof` array.
        for (uint256 i = 0; i < totalHashes; i++) {
            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
            bytes32 b = proofFlags[i]
                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])
                : proof[proofPos++];
            hashes[i] = _hashPair(a, b);
        }

        if (totalHashes > 0) {
            if (proofPos != proofLen) {
                revert MerkleProofInvalidMultiproof();
            }
            unchecked {
                return hashes[totalHashes - 1];
            }
        } else if (leavesLen > 0) {
            return leaves[0];
        } else {
            return proof[0];
        }
    }

    /**
     * @dev Calldata version of {processMultiProof}.
     *
     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.
     */
    function processMultiProofCalldata(
        bytes32[] calldata proof,
        bool[] calldata proofFlags,
        bytes32[] memory leaves
    ) internal pure returns (bytes32 merkleRoot) {
        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by
        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the
        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of
        // the Merkle tree.
        uint256 leavesLen = leaves.length;
        uint256 proofLen = proof.length;
        uint256 totalHashes = proofFlags.length;

        // Check proof validity.
        if (leavesLen + proofLen != totalHashes + 1) {
            revert MerkleProofInvalidMultiproof();
        }

        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using
        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's "pop".
        bytes32[] memory hashes = new bytes32[](totalHashes);
        uint256 leafPos = 0;
        uint256 hashPos = 0;
        uint256 proofPos = 0;
        // At each step, we compute the next hash using two values:
        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we
        //   get the next hash.
        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the
        //   `proof` array.
        for (uint256 i = 0; i < totalHashes; i++) {
            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
            bytes32 b = proofFlags[i]
                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])
                : proof[proofPos++];
            hashes[i] = _hashPair(a, b);
        }

        if (totalHashes > 0) {
            if (proofPos != proofLen) {
                revert MerkleProofInvalidMultiproof();
            }
            unchecked {
                return hashes[totalHashes - 1];
            }
        } else if (leavesLen > 0) {
            return leaves[0];
        } else {
            return proof[0];
        }
    }

    /**
     * @dev Sorts the pair (a, b) and hashes the result.
     */
    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {
        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);
    }

    /**
     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.
     */
    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, a)
            mstore(0x20, b)
            value := keccak256(0x00, 0x40)
        }
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)

pragma solidity ^0.8.20;

import {IERC165} from "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Muldiv operation overflow.
     */
    error MathOverflowedMulDiv();

    enum Rounding {
        Floor, // Toward negative infinity
        Ceil, // Toward positive infinity
        Trunc, // Toward zero
        Expand // Away from zero
    }

    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds towards infinity instead
     * of rounding towards zero.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        if (b == 0) {
            // Guarantee the same behavior as in a regular Solidity division.
            return a / b;
        }

        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
     * denominator == 0.
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
     * Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0 = x * y; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            if (denominator <= prod1) {
                revert MathOverflowedMulDiv();
            }

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.

            uint256 twos = denominator & (0 - denominator);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
            // works in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
     * towards zero.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);
        }
    }

    /**
     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
     */
    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
        return uint8(rounding) % 2 == 1;
    }
}


// File: contracts/AdvisorsSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "./MerkleTokenUnlockSchedule.sol";

contract AdvisorsSchedule is MerkleTokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address _timelockController
    ) MerkleTokenUnlockSchedule(_timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(210 days, 333));
        unlockSchedule.push(UnlockScheduleItem(240 days, 667));
        unlockSchedule.push(UnlockScheduleItem(270 days, 1000));
        unlockSchedule.push(UnlockScheduleItem(300 days, 1333));
        unlockSchedule.push(UnlockScheduleItem(330 days, 1667));
        unlockSchedule.push(UnlockScheduleItem(360 days, 2000));
        unlockSchedule.push(UnlockScheduleItem(390 days, 2333));
        unlockSchedule.push(UnlockScheduleItem(420 days, 2667));
        unlockSchedule.push(UnlockScheduleItem(450 days, 3000));
        unlockSchedule.push(UnlockScheduleItem(480 days, 3333));
        unlockSchedule.push(UnlockScheduleItem(510 days, 3667));
        unlockSchedule.push(UnlockScheduleItem(540 days, 4000));
        unlockSchedule.push(UnlockScheduleItem(570 days, 4333));
        unlockSchedule.push(UnlockScheduleItem(600 days, 4667));
        unlockSchedule.push(UnlockScheduleItem(630 days, 5000));
        unlockSchedule.push(UnlockScheduleItem(660 days, 5333));
        unlockSchedule.push(UnlockScheduleItem(690 days, 5667));
        unlockSchedule.push(UnlockScheduleItem(720 days, 6000));
        unlockSchedule.push(UnlockScheduleItem(750 days, 6333));
        unlockSchedule.push(UnlockScheduleItem(780 days, 6667));
        unlockSchedule.push(UnlockScheduleItem(810 days, 7000));
        unlockSchedule.push(UnlockScheduleItem(840 days, 7333));
        unlockSchedule.push(UnlockScheduleItem(870 days, 7667));
        unlockSchedule.push(UnlockScheduleItem(900 days, 8000));
        unlockSchedule.push(UnlockScheduleItem(930 days, 8333));
        unlockSchedule.push(UnlockScheduleItem(960 days, 8667));
        unlockSchedule.push(UnlockScheduleItem(990 days, 9000));
        unlockSchedule.push(UnlockScheduleItem(1020 days, 9333));
        unlockSchedule.push(UnlockScheduleItem(1050 days, 9667));
        unlockSchedule.push(UnlockScheduleItem(1080 days, 10000));
    }
}


// File: contracts/constants.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

uint256 constant TOTAL_RYO_SUPPLY = 2_000_000_000;


// File: contracts/EarlyContributorsSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "./MerkleTokenUnlockSchedule.sol";

contract EarlyContributorsSchedule is MerkleTokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
        address _timelockController
    ) MerkleTokenUnlockSchedule(_timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(0 days, 200));
        unlockSchedule.push(UnlockScheduleItem(210 days, 608));
        unlockSchedule.push(UnlockScheduleItem(240 days, 1017));
        unlockSchedule.push(UnlockScheduleItem(270 days, 1425));
        unlockSchedule.push(UnlockScheduleItem(300 days, 1832));
        unlockSchedule.push(UnlockScheduleItem(330 days, 2242));
        unlockSchedule.push(UnlockScheduleItem(360 days, 2650));
        unlockSchedule.push(UnlockScheduleItem(390 days, 3058));
        unlockSchedule.push(UnlockScheduleItem(420 days, 3467));
        unlockSchedule.push(UnlockScheduleItem(450 days, 3875));
        unlockSchedule.push(UnlockScheduleItem(480 days, 4283));
        unlockSchedule.push(UnlockScheduleItem(510 days, 4692));
        unlockSchedule.push(UnlockScheduleItem(540 days, 5100));
        unlockSchedule.push(UnlockScheduleItem(570 days, 5508));
        unlockSchedule.push(UnlockScheduleItem(600 days, 5917));
        unlockSchedule.push(UnlockScheduleItem(630 days, 6325));
        unlockSchedule.push(UnlockScheduleItem(660 days, 6733));
        unlockSchedule.push(UnlockScheduleItem(690 days, 7142));
        unlockSchedule.push(UnlockScheduleItem(720 days, 7550));
        unlockSchedule.push(UnlockScheduleItem(750 days, 7958));
        unlockSchedule.push(UnlockScheduleItem(780 days, 8367));
        unlockSchedule.push(UnlockScheduleItem(810 days, 8775));
        unlockSchedule.push(UnlockScheduleItem(840 days, 9183));
        unlockSchedule.push(UnlockScheduleItem(870 days, 9592));
        unlockSchedule.push(UnlockScheduleItem(900 days, 10000));
    }
}


// File: contracts/EcosystemSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;


import "./TokenUnlockSchedule.sol";

contract EcosystemSchedule is TokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address timelockController
    ) TokenUnlockSchedule(timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(0 days, 300));
        unlockSchedule.push(UnlockScheduleItem(30 days, 462));
        unlockSchedule.push(UnlockScheduleItem(60 days, 623));
        unlockSchedule.push(UnlockScheduleItem(90 days, 785));
        unlockSchedule.push(UnlockScheduleItem(120 days, 947));
        unlockSchedule.push(UnlockScheduleItem(150 days, 1108));
        unlockSchedule.push(UnlockScheduleItem(180 days, 1270));
        unlockSchedule.push(UnlockScheduleItem(210 days, 1432));
        unlockSchedule.push(UnlockScheduleItem(240 days, 1593));
        unlockSchedule.push(UnlockScheduleItem(270 days, 1755));
        unlockSchedule.push(UnlockScheduleItem(300 days, 1917));
        unlockSchedule.push(UnlockScheduleItem(330 days, 2078));
        unlockSchedule.push(UnlockScheduleItem(360 days, 2240));
        unlockSchedule.push(UnlockScheduleItem(390 days, 2402));
        unlockSchedule.push(UnlockScheduleItem(420 days, 2563));
        unlockSchedule.push(UnlockScheduleItem(450 days, 2725));
        unlockSchedule.push(UnlockScheduleItem(480 days, 2887));
        unlockSchedule.push(UnlockScheduleItem(510 days, 3048));
        unlockSchedule.push(UnlockScheduleItem(540 days, 3210));
        unlockSchedule.push(UnlockScheduleItem(570 days, 3372));
        unlockSchedule.push(UnlockScheduleItem(600 days, 3533));
        unlockSchedule.push(UnlockScheduleItem(630 days, 3695));
        unlockSchedule.push(UnlockScheduleItem(660 days, 3857));
        unlockSchedule.push(UnlockScheduleItem(690 days, 4018));
        unlockSchedule.push(UnlockScheduleItem(720 days, 4180));
        unlockSchedule.push(UnlockScheduleItem(750 days, 4342));
        unlockSchedule.push(UnlockScheduleItem(780 days, 4503));
        unlockSchedule.push(UnlockScheduleItem(810 days, 4665));
        unlockSchedule.push(UnlockScheduleItem(840 days, 4827));
        unlockSchedule.push(UnlockScheduleItem(870 days, 4988));
        unlockSchedule.push(UnlockScheduleItem(900 days, 5150));
        unlockSchedule.push(UnlockScheduleItem(930 days, 5312));
        unlockSchedule.push(UnlockScheduleItem(960 days, 5473));
        unlockSchedule.push(UnlockScheduleItem(990 days, 5635));
        unlockSchedule.push(UnlockScheduleItem(1020 days, 5797));
        unlockSchedule.push(UnlockScheduleItem(1050 days, 5958));
        unlockSchedule.push(UnlockScheduleItem(1080 days, 6120));
        unlockSchedule.push(UnlockScheduleItem(1110 days, 6282));
        unlockSchedule.push(UnlockScheduleItem(1140 days, 6443));
        unlockSchedule.push(UnlockScheduleItem(1170 days, 6605));
        unlockSchedule.push(UnlockScheduleItem(1200 days, 6767));
        unlockSchedule.push(UnlockScheduleItem(1230 days, 6928));
        unlockSchedule.push(UnlockScheduleItem(1260 days, 7090));
        unlockSchedule.push(UnlockScheduleItem(1290 days, 7252));
        unlockSchedule.push(UnlockScheduleItem(1320 days, 7413));
        unlockSchedule.push(UnlockScheduleItem(1350 days, 7575));
        unlockSchedule.push(UnlockScheduleItem(1380 days, 7737));
        unlockSchedule.push(UnlockScheduleItem(1410 days, 7898));
        unlockSchedule.push(UnlockScheduleItem(1440 days, 8059));
        unlockSchedule.push(UnlockScheduleItem(1470 days, 8222));
        unlockSchedule.push(UnlockScheduleItem(1500 days, 8383));
        unlockSchedule.push(UnlockScheduleItem(1530 days, 8545));
        unlockSchedule.push(UnlockScheduleItem(1560 days, 8707));
        unlockSchedule.push(UnlockScheduleItem(1590 days, 8868));
        unlockSchedule.push(UnlockScheduleItem(1620 days, 9030));
        unlockSchedule.push(UnlockScheduleItem(1650 days, 9192));
        unlockSchedule.push(UnlockScheduleItem(1680 days, 9353));
        unlockSchedule.push(UnlockScheduleItem(1710 days, 9515));
        unlockSchedule.push(UnlockScheduleItem(1740 days, 9677));
        unlockSchedule.push(UnlockScheduleItem(1770 days, 9838));
        unlockSchedule.push(UnlockScheduleItem(1800 days, 10000));
    }
}


// File: contracts/GovernanceTimeLock.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/governance/TimelockController.sol";

contract GovernanceTimeLock is TimelockController {
    constructor(
        uint256 minDelay,
        address[] memory proposers,
        address[] memory executors
    ) TimelockController(minDelay, proposers, executors, address(0)) {}
}


// File: contracts/InvestorsSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;


import "./TokenUnlockSchedule.sol";

contract InvestorsSchedule is TokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address timelockController
    ) TokenUnlockSchedule(timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(390 days, 417));
        unlockSchedule.push(UnlockScheduleItem(420 days, 833));
        unlockSchedule.push(UnlockScheduleItem(450 days, 1250));
        unlockSchedule.push(UnlockScheduleItem(480 days, 1667));
        unlockSchedule.push(UnlockScheduleItem(510 days, 2083));
        unlockSchedule.push(UnlockScheduleItem(540 days, 2500));
        unlockSchedule.push(UnlockScheduleItem(570 days, 2917));
        unlockSchedule.push(UnlockScheduleItem(600 days, 3333));
        unlockSchedule.push(UnlockScheduleItem(630 days, 3750));
        unlockSchedule.push(UnlockScheduleItem(660 days, 4167));
        unlockSchedule.push(UnlockScheduleItem(690 days, 4583));
        unlockSchedule.push(UnlockScheduleItem(720 days, 5000));
        unlockSchedule.push(UnlockScheduleItem(750 days, 5417));
        unlockSchedule.push(UnlockScheduleItem(780 days, 5833));
        unlockSchedule.push(UnlockScheduleItem(810 days, 6250));
        unlockSchedule.push(UnlockScheduleItem(840 days, 6667));
        unlockSchedule.push(UnlockScheduleItem(870 days, 7083));
        unlockSchedule.push(UnlockScheduleItem(900 days, 7500));
        unlockSchedule.push(UnlockScheduleItem(930 days, 7917));
        unlockSchedule.push(UnlockScheduleItem(960 days, 8333));
        unlockSchedule.push(UnlockScheduleItem(990 days, 8750));
        unlockSchedule.push(UnlockScheduleItem(1020 days, 9167));
        unlockSchedule.push(UnlockScheduleItem(1050 days, 9583));
        unlockSchedule.push(UnlockScheduleItem(1080 days, 10000));
    }
}


// File: contracts/LiquiditySchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;


import "./TokenUnlockSchedule.sol";

contract LiquiditySchedule is TokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address timelockController
    ) TokenUnlockSchedule(timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(0 days, 2000));
        unlockSchedule.push(UnlockScheduleItem(30 days, 2222));
        unlockSchedule.push(UnlockScheduleItem(60 days, 2444));
        unlockSchedule.push(UnlockScheduleItem(90 days, 2667));
        unlockSchedule.push(UnlockScheduleItem(120 days, 2889));
        unlockSchedule.push(UnlockScheduleItem(150 days, 3111));
        unlockSchedule.push(UnlockScheduleItem(180 days, 3333));
        unlockSchedule.push(UnlockScheduleItem(210 days, 3556));
        unlockSchedule.push(UnlockScheduleItem(240 days, 3778));
        unlockSchedule.push(UnlockScheduleItem(270 days, 4000));
        unlockSchedule.push(UnlockScheduleItem(300 days, 4222));
        unlockSchedule.push(UnlockScheduleItem(330 days, 4444));
        unlockSchedule.push(UnlockScheduleItem(360 days, 4667));
        unlockSchedule.push(UnlockScheduleItem(390 days, 4889));
        unlockSchedule.push(UnlockScheduleItem(420 days, 5111));
        unlockSchedule.push(UnlockScheduleItem(450 days, 5333));
        unlockSchedule.push(UnlockScheduleItem(480 days, 5556));
        unlockSchedule.push(UnlockScheduleItem(510 days, 5778));
        unlockSchedule.push(UnlockScheduleItem(540 days, 6000));
        unlockSchedule.push(UnlockScheduleItem(570 days, 6222));
        unlockSchedule.push(UnlockScheduleItem(600 days, 6444));
        unlockSchedule.push(UnlockScheduleItem(630 days, 6667));
        unlockSchedule.push(UnlockScheduleItem(660 days, 6889));
        unlockSchedule.push(UnlockScheduleItem(690 days, 7111));
        unlockSchedule.push(UnlockScheduleItem(720 days, 7333));
        unlockSchedule.push(UnlockScheduleItem(750 days, 7556));
        unlockSchedule.push(UnlockScheduleItem(780 days, 7778));
        unlockSchedule.push(UnlockScheduleItem(810 days, 8000));
        unlockSchedule.push(UnlockScheduleItem(840 days, 8222));
        unlockSchedule.push(UnlockScheduleItem(870 days, 8444));
        unlockSchedule.push(UnlockScheduleItem(900 days, 8667));
        unlockSchedule.push(UnlockScheduleItem(930 days, 8889));
        unlockSchedule.push(UnlockScheduleItem(960 days, 9111));
        unlockSchedule.push(UnlockScheduleItem(990 days, 9333));
        unlockSchedule.push(UnlockScheduleItem(1020 days, 9556));
        unlockSchedule.push(UnlockScheduleItem(1050 days, 9778));
        unlockSchedule.push(UnlockScheduleItem(1080 days, 10000));
    }
}


// File: contracts/MarketingSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;


import "./TokenUnlockSchedule.sol";

contract MarketingSchedule is TokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address timelockController
    ) TokenUnlockSchedule(timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(0 days, 200));
        unlockSchedule.push(UnlockScheduleItem(30 days, 363));
        unlockSchedule.push(UnlockScheduleItem(60 days, 527));
        unlockSchedule.push(UnlockScheduleItem(90 days, 690));
        unlockSchedule.push(UnlockScheduleItem(120 days, 852));
        unlockSchedule.push(UnlockScheduleItem(150 days, 1017));
        unlockSchedule.push(UnlockScheduleItem(180 days, 1180));
        unlockSchedule.push(UnlockScheduleItem(210 days, 1343));
        unlockSchedule.push(UnlockScheduleItem(240 days, 1507));
        unlockSchedule.push(UnlockScheduleItem(270 days, 1670));
        unlockSchedule.push(UnlockScheduleItem(300 days, 1832));
        unlockSchedule.push(UnlockScheduleItem(330 days, 1997));
        unlockSchedule.push(UnlockScheduleItem(360 days, 2160));
        unlockSchedule.push(UnlockScheduleItem(390 days, 2323));
        unlockSchedule.push(UnlockScheduleItem(420 days, 2487));
        unlockSchedule.push(UnlockScheduleItem(450 days, 2650));
        unlockSchedule.push(UnlockScheduleItem(480 days, 2813));
        unlockSchedule.push(UnlockScheduleItem(510 days, 2977));
        unlockSchedule.push(UnlockScheduleItem(540 days, 3140));
        unlockSchedule.push(UnlockScheduleItem(570 days, 3303));
        unlockSchedule.push(UnlockScheduleItem(600 days, 3467));
        unlockSchedule.push(UnlockScheduleItem(630 days, 3629));
        unlockSchedule.push(UnlockScheduleItem(660 days, 3793));
        unlockSchedule.push(UnlockScheduleItem(690 days, 3957));
        unlockSchedule.push(UnlockScheduleItem(720 days, 4120));
        unlockSchedule.push(UnlockScheduleItem(750 days, 4283));
        unlockSchedule.push(UnlockScheduleItem(780 days, 4447));
        unlockSchedule.push(UnlockScheduleItem(810 days, 4610));
        unlockSchedule.push(UnlockScheduleItem(840 days, 4773));
        unlockSchedule.push(UnlockScheduleItem(870 days, 4937));
        unlockSchedule.push(UnlockScheduleItem(900 days, 5100));
        unlockSchedule.push(UnlockScheduleItem(930 days, 5263));
        unlockSchedule.push(UnlockScheduleItem(960 days, 5427));
        unlockSchedule.push(UnlockScheduleItem(990 days, 5590));
        unlockSchedule.push(UnlockScheduleItem(1020 days, 5753));
        unlockSchedule.push(UnlockScheduleItem(1050 days, 5917));
        unlockSchedule.push(UnlockScheduleItem(1080 days, 6080));
        unlockSchedule.push(UnlockScheduleItem(1110 days, 6243));
        unlockSchedule.push(UnlockScheduleItem(1140 days, 6406));
        unlockSchedule.push(UnlockScheduleItem(1170 days, 6570));
        unlockSchedule.push(UnlockScheduleItem(1200 days, 6733));
        unlockSchedule.push(UnlockScheduleItem(1230 days, 6897));
        unlockSchedule.push(UnlockScheduleItem(1260 days, 7059));
        unlockSchedule.push(UnlockScheduleItem(1290 days, 7223));
        unlockSchedule.push(UnlockScheduleItem(1320 days, 7387));
        unlockSchedule.push(UnlockScheduleItem(1350 days, 7550));
        unlockSchedule.push(UnlockScheduleItem(1380 days, 7713));
        unlockSchedule.push(UnlockScheduleItem(1410 days, 7877));
        unlockSchedule.push(UnlockScheduleItem(1440 days, 8040));
        unlockSchedule.push(UnlockScheduleItem(1470 days, 8203));
        unlockSchedule.push(UnlockScheduleItem(1500 days, 8367));
        unlockSchedule.push(UnlockScheduleItem(1530 days, 8530));
        unlockSchedule.push(UnlockScheduleItem(1560 days, 8693));
        unlockSchedule.push(UnlockScheduleItem(1590 days, 8857));
        unlockSchedule.push(UnlockScheduleItem(1620 days, 9020));
        unlockSchedule.push(UnlockScheduleItem(1650 days, 9183));
        unlockSchedule.push(UnlockScheduleItem(1680 days, 9347));
        unlockSchedule.push(UnlockScheduleItem(1710 days, 9510));
        unlockSchedule.push(UnlockScheduleItem(1740 days, 9673));
        unlockSchedule.push(UnlockScheduleItem(1770 days, 9837));
        unlockSchedule.push(UnlockScheduleItem(1800 days, 10000));
    }
}


// File: contracts/MerkleTokenUnlockSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/utils/math/Math.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

/**
 * @title Abstract TokenUnlockSchedule
 * @dev TokenUnlockSchedule implements unlocking schedule for early investors.
 */
abstract contract MerkleTokenUnlockSchedule is AccessControl {
    using SafeERC20 for IERC20;

    event ClaimRootSet(bytes32 _newClaimRoot);
    event SaleLaunch(address sender);
    event TokenInitialized(address token);

    struct UnlockScheduleItem {
        uint256 unlockTimePass;
        uint16 totalPercentageUnlocked;
    }

    mapping(address => uint256) private _withdrawnBalances;
    UnlockScheduleItem[] internal unlockSchedule;

    uint256 public scheduleStartTimestamp = 0;
    bytes32 private claimRoot;

    IERC20 public token;

    bytes32 public constant CONTROLLER_ROLE = keccak256("CONTROLLER_ROLE");
    uint16 private constant PERCENT_DENOMINATOR = 10_000;

    function _initUnlockSchedule() internal virtual;

    constructor(address _timelockController) {
        require(
            _timelockController != address(0), 
            "MerkleTokenUnlockSchedule: Timelock controller address cannot be null"
        );

        _grantRole(CONTROLLER_ROLE, _timelockController);

        _initUnlockSchedule();
        _validateUnlockSchedule();
    }

    function setToken(IERC20 token_) external onlyRole(CONTROLLER_ROLE) {
        require(
            address(token_) != address(0),
            "MerkleTokenUnlockSchedule: New token address cannot be null"
        );
        require(
            address(token) == address(0),
            "MerkleTokenUnlockSchedule: Token already set"
        );

        token = token_;
        emit TokenInitialized(address(token_));
    }

    function setClaimRoot(bytes32 _root) external onlyRole(CONTROLLER_ROLE) {
        require(_root != bytes32(0), "MerkleTokenUnlockSchedule: Claim root cannot be null");
        claimRoot = _root;
        emit ClaimRootSet(_root);
    }

    function launchSale() external onlyRole(CONTROLLER_ROLE) {
        require(scheduleStartTimestamp == 0, "MerkleTokenUnlockSchedule: Sale already launched");
        require(address(token) != address(0), "TokenUnlockSchedule: Token not set");
        require(
            claimRoot != bytes32(0), 
            "MerkleTokenUnlockSchedule: Cannot launch - Claim root is not set"
        );
        // solhint-disable-next-line not-rely-on-time
        scheduleStartTimestamp = block.timestamp;

        emit SaleLaunch(msg.sender);
    }

    function withdraw(
        address to,
        uint256 amountToWithdraw,
        uint256 lockedAmount,
        bytes32[] calldata proof
    ) external returns (bool) {
        require(
            to != address(0),
            "MerkleTokenUnlockSchedule: Recipient address cannot be null"
        );
        require(
            amountToWithdraw > 0,
            "MerkleTokenUnlockSchedule: Withdraw amount must be greater than zero"
        );
        require(
            scheduleStartTimestamp > 0 && scheduleStartTimestamp < block.timestamp, // solhint-disable-line not-rely-on-time
            "MerkleTokenUnlockSchedule: Unlock schedule not started yet"
        );
        require(
            unlockedOf(msg.sender, lockedAmount) >= amountToWithdraw,
            "MerkleTokenUnlockSchedule: Amount to withdraw is greater than unlocked amount"
        );

        /* Verify proof */

        bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(msg.sender, lockedAmount))));
        require(
            MerkleProof.verifyCalldata(proof, claimRoot, leaf),
            "MerkleTokenUnlockSchedule: Invalid claim proof"
        );

        _withdrawnBalances[msg.sender] += amountToWithdraw;
        token.safeTransfer(to, amountToWithdraw);
        return true;
    }

    function unlockedOf(
        address account,
        uint256 lockedAmount
    ) public view returns (uint256) {
        if (scheduleStartTimestamp > 0) {
            uint256 totalUnlocked = Math.mulDiv(
                lockedAmount,
                getUnlockedPercent(block.timestamp - scheduleStartTimestamp), // solhint-disable-line not-rely-on-time
                PERCENT_DENOMINATOR
            );

            if (totalUnlocked <= _withdrawnBalances[account]) {
                return 0;
            }

            return totalUnlocked - _withdrawnBalances[account];
        }

        return 0;
    }

    function getUnlockedPercent(
        uint256 secondsPassed
    ) internal view returns (uint16) {
        uint256 index = 0;
        while(index < unlockSchedule.length && unlockSchedule[index].unlockTimePass < secondsPassed) { index++; }

        return index > 0 ? unlockSchedule[index - 1].totalPercentageUnlocked : 0;
    }

    function _validateUnlockSchedule() private view {
        uint256 steps = unlockSchedule.length;
        assert(steps > 1);
        assert(unlockSchedule[steps - 1].totalPercentageUnlocked == PERCENT_DENOMINATOR);

        for (uint256 i = 1; i < steps; ++i) {
            assert(
                unlockSchedule[i - 1].unlockTimePass <
                    unlockSchedule[i].unlockTimePass
            );
            assert(
                unlockSchedule[i - 1].totalPercentageUnlocked <
                    unlockSchedule[i].totalPercentageUnlocked
            );
        }
    }
}

// File: contracts/PrivateSaleSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;


import "./TokenUnlockSchedule.sol";

contract PrivateSaleSchedule is TokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address timelockController
    ) TokenUnlockSchedule(timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(210 days, 830));
        unlockSchedule.push(UnlockScheduleItem(240 days, 1670));
        unlockSchedule.push(UnlockScheduleItem(270 days, 2500));
        unlockSchedule.push(UnlockScheduleItem(300 days, 3329));
        unlockSchedule.push(UnlockScheduleItem(330 days, 4170));
        unlockSchedule.push(UnlockScheduleItem(360 days, 5000));
        unlockSchedule.push(UnlockScheduleItem(390 days, 5830));
        unlockSchedule.push(UnlockScheduleItem(420 days, 6670));
        unlockSchedule.push(UnlockScheduleItem(450 days, 7500));
        unlockSchedule.push(UnlockScheduleItem(480 days, 8330));
        unlockSchedule.push(UnlockScheduleItem(510 days, 9170));
        unlockSchedule.push(UnlockScheduleItem(540 days, 10000));
    }
}


// File: contracts/RYO.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "./constants.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title RYO Token
 * @notice Smart contract implements token for RYO
 */
contract RYO is ERC20, ERC20Burnable {
    constructor(
        address privateSaleSchedule,
        address investorsSchedule,
        address teamSchedule,
        address earlyContributorsSchedule,
        address advisorsSchedule,
        address ecosystemSchedule,
        address validatorSchedule,
        address marketingSchedule,
        address liquiditySchedule,
        address treasurySchedule
    ) ERC20("RYO Token", "RYO") {
        uint256 scale =  10 ** decimals();
        _mint(privateSaleSchedule, 30_000_000 * scale);
        _mint(investorsSchedule, 200_000_000 * scale);
        _mint(teamSchedule, 300_000_000 * scale);
        _mint(earlyContributorsSchedule, 120_000_000 * scale);
        _mint(advisorsSchedule, 120_000_000 * scale);
        _mint(ecosystemSchedule, 250_000_000 * scale);
        _mint(validatorSchedule, 300_000_000 * scale);
        _mint(marketingSchedule, 200_000_000 * scale);
        _mint(liquiditySchedule, 240_000_000 * scale);
        _mint(treasurySchedule, 240_000_000 * scale);
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
}


// File: contracts/TeamSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;


import "./TokenUnlockSchedule.sol";

contract TeamSchedule is TokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address timelockController
    ) TokenUnlockSchedule(timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(390 days, 208));
        unlockSchedule.push(UnlockScheduleItem(420 days, 417));
        unlockSchedule.push(UnlockScheduleItem(450 days, 625));
        unlockSchedule.push(UnlockScheduleItem(480 days, 833));
        unlockSchedule.push(UnlockScheduleItem(510 days, 1042));
        unlockSchedule.push(UnlockScheduleItem(540 days, 1250));
        unlockSchedule.push(UnlockScheduleItem(570 days, 1458));
        unlockSchedule.push(UnlockScheduleItem(600 days, 1667));
        unlockSchedule.push(UnlockScheduleItem(630 days, 1875));
        unlockSchedule.push(UnlockScheduleItem(660 days, 2083));
        unlockSchedule.push(UnlockScheduleItem(690 days, 2292));
        unlockSchedule.push(UnlockScheduleItem(720 days, 2500));
        unlockSchedule.push(UnlockScheduleItem(750 days, 2708));
        unlockSchedule.push(UnlockScheduleItem(780 days, 2917));
        unlockSchedule.push(UnlockScheduleItem(810 days, 3125));
        unlockSchedule.push(UnlockScheduleItem(840 days, 3333));
        unlockSchedule.push(UnlockScheduleItem(870 days, 3542));
        unlockSchedule.push(UnlockScheduleItem(900 days, 3750));
        unlockSchedule.push(UnlockScheduleItem(930 days, 3958));
        unlockSchedule.push(UnlockScheduleItem(960 days, 4167));
        unlockSchedule.push(UnlockScheduleItem(990 days, 4375));
        unlockSchedule.push(UnlockScheduleItem(1020 days, 4583));
        unlockSchedule.push(UnlockScheduleItem(1050 days, 4792));
        unlockSchedule.push(UnlockScheduleItem(1080 days, 5000));
        unlockSchedule.push(UnlockScheduleItem(1110 days, 5208));
        unlockSchedule.push(UnlockScheduleItem(1140 days, 5417));
        unlockSchedule.push(UnlockScheduleItem(1170 days, 5625));
        unlockSchedule.push(UnlockScheduleItem(1200 days, 5833));
        unlockSchedule.push(UnlockScheduleItem(1230 days, 6042));
        unlockSchedule.push(UnlockScheduleItem(1260 days, 6250));
        unlockSchedule.push(UnlockScheduleItem(1290 days, 6458));
        unlockSchedule.push(UnlockScheduleItem(1320 days, 6667));
        unlockSchedule.push(UnlockScheduleItem(1350 days, 6875));
        unlockSchedule.push(UnlockScheduleItem(1380 days, 7083));
        unlockSchedule.push(UnlockScheduleItem(1410 days, 7292));
        unlockSchedule.push(UnlockScheduleItem(1440 days, 7500));
        unlockSchedule.push(UnlockScheduleItem(1470 days, 7708));
        unlockSchedule.push(UnlockScheduleItem(1500 days, 7917));
        unlockSchedule.push(UnlockScheduleItem(1530 days, 8125));
        unlockSchedule.push(UnlockScheduleItem(1560 days, 8333));
        unlockSchedule.push(UnlockScheduleItem(1590 days, 8542));
        unlockSchedule.push(UnlockScheduleItem(1620 days, 8750));
        unlockSchedule.push(UnlockScheduleItem(1650 days, 8958));
        unlockSchedule.push(UnlockScheduleItem(1680 days, 9167));
        unlockSchedule.push(UnlockScheduleItem(1710 days, 9375));
        unlockSchedule.push(UnlockScheduleItem(1740 days, 9583));
        unlockSchedule.push(UnlockScheduleItem(1770 days, 9792));
        unlockSchedule.push(UnlockScheduleItem(1800 days, 10000));
    }
}


// File: contracts/TokenUnlockSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/utils/math/Math.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

/**
 * @title Abstract TokenUnlockSchedule
 * @dev TokenUnlockSchedule implements unlocking schedule for early investors.
 */
abstract contract TokenUnlockSchedule is AccessControl {
    using SafeERC20 for IERC20;

    event Deposit(
        address sender,
        address indexed to,
        uint256 amount
    );
    event TokenInitialized(address token);
    event SaleLaunch(address sender);

    bytes32 public constant CONTROLLER_ROLE = keccak256("CONTROLLER_ROLE");
    uint16 private constant PERCENT_DENOMINATOR = 10_000;

    uint256 public scheduleStartTimestamp = 0;

    mapping(address => uint256) private _balances;
    mapping(address => uint256) private _withdrawnBalances;

    uint256 public totalBalance;

    struct UnlockScheduleItem {
        uint256 unlockTimePass;
        uint16 totalPercentageUnlocked;
    }

    UnlockScheduleItem[] internal unlockSchedule;

    IERC20 public token;

    function _initUnlockSchedule() internal virtual;

    constructor(address timelockController_) {
        require(
          timelockController_ != address(0),
          "TokenUnlockSchedule: Timelock controller address cannot be null"
        );

        _grantRole(CONTROLLER_ROLE, timelockController_);

        _initUnlockSchedule();
        _validateUnlockSchedule();
    }

    function setToken(IERC20 token_) external onlyRole(CONTROLLER_ROLE) {
        require(
            address(token_) != address(0),
            "TokenUnlockSchedule: New token address cannot be null"
        );
        require(
            address(token) == address(0),
            "TokenUnlockSchedule: Token already set"
        );

        token = token_;
        emit TokenInitialized(address(token_));
    }

    function launchSale() external onlyRole(CONTROLLER_ROLE) {
        require(scheduleStartTimestamp == 0, "TokenUnlockSchedule: Sale already launched");
        require(address(token) != address(0), "TokenUnlockSchedule: Token not set");

        // solhint-disable-next-line not-rely-on-time
        scheduleStartTimestamp = block.timestamp;

        emit SaleLaunch(msg.sender);
    }

    function addBalance(
        address to,
        uint256 amount
    ) external virtual onlyRole(CONTROLLER_ROLE) {
        _addBalance(to, amount);
    }

    function withdraw(address to, uint256 amount) external returns (bool) {
        require(
            to != address(0),
            "TokenUnlockSchedule: Recipient address cannot be null"
        );
        require(
            amount > 0,
            "TokenUnlockSchedule: Withdraw amount must be greater than zero"
        );
        require(
            scheduleStartTimestamp > 0 && scheduleStartTimestamp < block.timestamp, // solhint-disable-line not-rely-on-time
            "TokenUnlockSchedule: Unlock schedule not started yet"
        );
        require(
            unlockedOf(msg.sender) >= amount,
            "TokenUnlockSchedule: Amount to withdraw is greater than unlocked amount"
        );

        _withdrawnBalances[msg.sender] += amount;
        totalBalance -= amount;
        token.safeTransfer(to, amount);
        return true;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account] - _withdrawnBalances[account];
    }

    function unlockedOf(address account) public view returns (uint256) {
        if (scheduleStartTimestamp > 0) {
            uint256 totalUnlocked = Math.mulDiv(
                _balances[account],
                getUnlockedPercent(block.timestamp - scheduleStartTimestamp), // solhint-disable-line not-rely-on-time
                PERCENT_DENOMINATOR
            );

            if (totalUnlocked <= _withdrawnBalances[account]) {
                return 0;
            }

            return totalUnlocked - _withdrawnBalances[account];
        }

        return 0;
    }

    function getUnlockedPercent(
        uint256 secondsPassed
    ) internal view returns (uint16) {
        uint256 index = 0;
        while(index < unlockSchedule.length && unlockSchedule[index].unlockTimePass < secondsPassed) { index++; }

        return index > 0 ? unlockSchedule[index - 1].totalPercentageUnlocked : 0;
    }

    function _addBalance(address to, uint256 amount) internal {
        require(
            to != address(0),
            "TokenUnlockSchedule: Recipient address cannot be null"
        );
        require(
            amount > 0,
            "TokenUnlockSchedule: Balance amount must be greater than zero"
        );
        require(
            totalBalance + amount <= token.balanceOf(address(this)),
            "TokenUnlockSchedule: Total balance exceeds available balance"
        );

        _balances[to] += amount;
        totalBalance += amount;

        emit Deposit(msg.sender, to, amount);
    }

    function _validateUnlockSchedule() private view {
        uint256 steps = unlockSchedule.length;
        assert(steps > 1);
        assert(unlockSchedule[steps - 1].totalPercentageUnlocked == PERCENT_DENOMINATOR);

        for (uint256 i = 1; i < steps; ++i) {
          assert(
              unlockSchedule[i - 1].unlockTimePass <
              unlockSchedule[i].unlockTimePass
          );
          assert(
              unlockSchedule[i - 1].totalPercentageUnlocked <
              unlockSchedule[i].totalPercentageUnlocked
          );
        }
    }
}

// File: contracts/TreasurySchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;


import "./TokenUnlockSchedule.sol";

contract TreasurySchedule is TokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address timelockController
    ) TokenUnlockSchedule(timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(30 days, 167));
        unlockSchedule.push(UnlockScheduleItem(60 days, 333));
        unlockSchedule.push(UnlockScheduleItem(90 days, 500));
        unlockSchedule.push(UnlockScheduleItem(120 days, 667));
        unlockSchedule.push(UnlockScheduleItem(150 days, 833));
        unlockSchedule.push(UnlockScheduleItem(180 days, 1000));
        unlockSchedule.push(UnlockScheduleItem(210 days, 1167));
        unlockSchedule.push(UnlockScheduleItem(240 days, 1333));
        unlockSchedule.push(UnlockScheduleItem(270 days, 1500));
        unlockSchedule.push(UnlockScheduleItem(300 days, 1667));
        unlockSchedule.push(UnlockScheduleItem(330 days, 1832));
        unlockSchedule.push(UnlockScheduleItem(360 days, 2000));
        unlockSchedule.push(UnlockScheduleItem(390 days, 2167));
        unlockSchedule.push(UnlockScheduleItem(420 days, 2333));
        unlockSchedule.push(UnlockScheduleItem(450 days, 2500));
        unlockSchedule.push(UnlockScheduleItem(480 days, 2667));
        unlockSchedule.push(UnlockScheduleItem(510 days, 2833));
        unlockSchedule.push(UnlockScheduleItem(540 days, 3000));
        unlockSchedule.push(UnlockScheduleItem(570 days, 3167));
        unlockSchedule.push(UnlockScheduleItem(600 days, 3333));
        unlockSchedule.push(UnlockScheduleItem(630 days, 3500));
        unlockSchedule.push(UnlockScheduleItem(660 days, 3667));
        unlockSchedule.push(UnlockScheduleItem(690 days, 3833));
        unlockSchedule.push(UnlockScheduleItem(720 days, 4000));
        unlockSchedule.push(UnlockScheduleItem(750 days, 4167));
        unlockSchedule.push(UnlockScheduleItem(780 days, 4333));
        unlockSchedule.push(UnlockScheduleItem(810 days, 4500));
        unlockSchedule.push(UnlockScheduleItem(840 days, 4667));
        unlockSchedule.push(UnlockScheduleItem(870 days, 4833));
        unlockSchedule.push(UnlockScheduleItem(900 days, 5000));
        unlockSchedule.push(UnlockScheduleItem(930 days, 5167));
        unlockSchedule.push(UnlockScheduleItem(960 days, 5333));
        unlockSchedule.push(UnlockScheduleItem(990 days, 5500));
        unlockSchedule.push(UnlockScheduleItem(1020 days, 5667));
        unlockSchedule.push(UnlockScheduleItem(1050 days, 5833));
        unlockSchedule.push(UnlockScheduleItem(1080 days, 6000));
        unlockSchedule.push(UnlockScheduleItem(1110 days, 6167));
        unlockSchedule.push(UnlockScheduleItem(1140 days, 6333));
        unlockSchedule.push(UnlockScheduleItem(1170 days, 6500));
        unlockSchedule.push(UnlockScheduleItem(1200 days, 6667));
        unlockSchedule.push(UnlockScheduleItem(1230 days, 6833));
        unlockSchedule.push(UnlockScheduleItem(1260 days, 7000));
        unlockSchedule.push(UnlockScheduleItem(1290 days, 7167));
        unlockSchedule.push(UnlockScheduleItem(1320 days, 7333));
        unlockSchedule.push(UnlockScheduleItem(1350 days, 7500));
        unlockSchedule.push(UnlockScheduleItem(1380 days, 7667));
        unlockSchedule.push(UnlockScheduleItem(1410 days, 7833));
        unlockSchedule.push(UnlockScheduleItem(1440 days, 8000));
        unlockSchedule.push(UnlockScheduleItem(1470 days, 8167));
        unlockSchedule.push(UnlockScheduleItem(1500 days, 8333));
        unlockSchedule.push(UnlockScheduleItem(1530 days, 8500));
        unlockSchedule.push(UnlockScheduleItem(1560 days, 8667));
        unlockSchedule.push(UnlockScheduleItem(1590 days, 8833));
        unlockSchedule.push(UnlockScheduleItem(1620 days, 9000));
        unlockSchedule.push(UnlockScheduleItem(1650 days, 9167));
        unlockSchedule.push(UnlockScheduleItem(1680 days, 9333));
        unlockSchedule.push(UnlockScheduleItem(1710 days, 9500));
        unlockSchedule.push(UnlockScheduleItem(1740 days, 9667));
        unlockSchedule.push(UnlockScheduleItem(1770 days, 9833));
        unlockSchedule.push(UnlockScheduleItem(1800 days, 10000));
    }
}


// File: contracts/ValidatorSchedule.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;


import "./TokenUnlockSchedule.sol";

contract ValidatorSchedule is TokenUnlockSchedule {
    // solhint-disable-next-line no-empty-blocks
    constructor(
      address timelockController
    ) TokenUnlockSchedule(timelockController) {}

    function _initUnlockSchedule() internal override {
        unlockSchedule.push(UnlockScheduleItem(30 days, 167));
        unlockSchedule.push(UnlockScheduleItem(60 days, 333));
        unlockSchedule.push(UnlockScheduleItem(90 days, 500));
        unlockSchedule.push(UnlockScheduleItem(120 days, 667));
        unlockSchedule.push(UnlockScheduleItem(150 days, 833));
        unlockSchedule.push(UnlockScheduleItem(180 days, 1000));
        unlockSchedule.push(UnlockScheduleItem(210 days, 1167));
        unlockSchedule.push(UnlockScheduleItem(240 days, 1333));
        unlockSchedule.push(UnlockScheduleItem(270 days, 1500));
        unlockSchedule.push(UnlockScheduleItem(300 days, 1667));
        unlockSchedule.push(UnlockScheduleItem(330 days, 1832));
        unlockSchedule.push(UnlockScheduleItem(360 days, 2000));
        unlockSchedule.push(UnlockScheduleItem(390 days, 2167));
        unlockSchedule.push(UnlockScheduleItem(420 days, 2333));
        unlockSchedule.push(UnlockScheduleItem(450 days, 2500));
        unlockSchedule.push(UnlockScheduleItem(480 days, 2667));
        unlockSchedule.push(UnlockScheduleItem(510 days, 2833));
        unlockSchedule.push(UnlockScheduleItem(540 days, 3000));
        unlockSchedule.push(UnlockScheduleItem(570 days, 3167));
        unlockSchedule.push(UnlockScheduleItem(600 days, 3333));
        unlockSchedule.push(UnlockScheduleItem(630 days, 3500));
        unlockSchedule.push(UnlockScheduleItem(660 days, 3667));
        unlockSchedule.push(UnlockScheduleItem(690 days, 3833));
        unlockSchedule.push(UnlockScheduleItem(720 days, 4000));
        unlockSchedule.push(UnlockScheduleItem(750 days, 4167));
        unlockSchedule.push(UnlockScheduleItem(780 days, 4333));
        unlockSchedule.push(UnlockScheduleItem(810 days, 4500));
        unlockSchedule.push(UnlockScheduleItem(840 days, 4667));
        unlockSchedule.push(UnlockScheduleItem(870 days, 4833));
        unlockSchedule.push(UnlockScheduleItem(900 days, 5000));
        unlockSchedule.push(UnlockScheduleItem(930 days, 5167));
        unlockSchedule.push(UnlockScheduleItem(960 days, 5333));
        unlockSchedule.push(UnlockScheduleItem(990 days, 5500));
        unlockSchedule.push(UnlockScheduleItem(1020 days, 5667));
        unlockSchedule.push(UnlockScheduleItem(1050 days, 5833));
        unlockSchedule.push(UnlockScheduleItem(1080 days, 6000));
        unlockSchedule.push(UnlockScheduleItem(1110 days, 6167));
        unlockSchedule.push(UnlockScheduleItem(1140 days, 6333));
        unlockSchedule.push(UnlockScheduleItem(1170 days, 6500));
        unlockSchedule.push(UnlockScheduleItem(1200 days, 6667));
        unlockSchedule.push(UnlockScheduleItem(1230 days, 6833));
        unlockSchedule.push(UnlockScheduleItem(1260 days, 7000));
        unlockSchedule.push(UnlockScheduleItem(1290 days, 7167));
        unlockSchedule.push(UnlockScheduleItem(1320 days, 7333));
        unlockSchedule.push(UnlockScheduleItem(1350 days, 7500));
        unlockSchedule.push(UnlockScheduleItem(1380 days, 7667));
        unlockSchedule.push(UnlockScheduleItem(1410 days, 7833));
        unlockSchedule.push(UnlockScheduleItem(1440 days, 8000));
        unlockSchedule.push(UnlockScheduleItem(1470 days, 8167));
        unlockSchedule.push(UnlockScheduleItem(1500 days, 8333));
        unlockSchedule.push(UnlockScheduleItem(1530 days, 8500));
        unlockSchedule.push(UnlockScheduleItem(1560 days, 8667));
        unlockSchedule.push(UnlockScheduleItem(1590 days, 8833));
        unlockSchedule.push(UnlockScheduleItem(1620 days, 9000));
        unlockSchedule.push(UnlockScheduleItem(1650 days, 9167));
        unlockSchedule.push(UnlockScheduleItem(1680 days, 9333));
        unlockSchedule.push(UnlockScheduleItem(1710 days, 9500));
        unlockSchedule.push(UnlockScheduleItem(1740 days, 9667));
        unlockSchedule.push(UnlockScheduleItem(1770 days, 9833));
        unlockSchedule.push(UnlockScheduleItem(1800 days, 10000));
    }
}

