
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Muldiv operation overflow.
     */
    error MathOverflowedMulDiv();

    enum Rounding {
        Floor, // Toward negative infinity
        Ceil, // Toward positive infinity
        Trunc, // Toward zero
        Expand // Away from zero
    }

    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds towards infinity instead
     * of rounding towards zero.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        if (b == 0) {
            // Guarantee the same behavior as in a regular Solidity division.
            return a / b;
        }

        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
     * denominator == 0.
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
     * Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0 = x * y; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            if (denominator <= prod1) {
                revert MathOverflowedMulDiv();
            }

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.

            uint256 twos = denominator & (0 - denominator);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
            // works in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
     * towards zero.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);
        }
    }

    /**
     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
     */
    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
        return uint8(rounding) % 2 == 1;
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/le_oven_v2.sol
// SPDX-License-Identifier: MIT
// https://www.l3th1mc00k.xyz/
pragma solidity ^0.8.20;

import "../libraries/ABDKMath64x64.sol";
import "../libraries/UQ112x112.sol";
import "@openzeppelin/contracts/utils/math/Math.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IUniswapPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function totalSupply() external view returns (uint);
    function transferFrom(address from, address to, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
}

interface IDOUGH {
    function totalSupply() external view returns (uint256);
    function mint(address to, uint256 amount) external;
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function transfer(address to, uint256 amount) external returns (bool);
    function burn(uint256 amount) external;
}

// Main contract for Le Oven - $DOUGH staking protocol.
contract LeOvenV4 is Ownable, ReentrancyGuard {
    using UQ112x112 for uint224;

    struct DepositInfo {
        uint128 amount; // How many tokens the user has provided.
        uint128 claimedRewards; // Amount of claimed rewards.
        uint128 shares; // Shares in reward pool. (amount * price difference multiple).
        uint128 rewardDeductible; // Reward deductible. (deposit.amount * accRewardPerShare at the time of staking)
        uint224 targetPrice; // Target price. Tokens can only be withdrawn if current price is above this.
        address account; // Owner account address.
        // pending reward = (deposit.shares * accRewardPerShare) - deposit.rewardDeductible
    }

    // Deposit ID counters
    uint256 public DEPOSIT_ID;
    uint256 public DEPOSIT_ID_LP;

    // Reward variables
    uint256 public accRewardPerShare; // Accumulated rewards per share.
    uint256 public totalShares; // Total number of shares.
    uint256 public accRewardPerShareLP; // Accumulated rewards per share.
    uint256 public totalSharesLP; // Total number of shares.
    uint256 public lastRewardBlock; // checkpoint block on last update of rewards for $dough staking
    uint256 public lastRewardBlockLP; // checkpoint block on last update of rewards for LP staking

    // Emission rates and decay
    uint256 public rewardPerBlock;
    uint256 public rewardPerBlockLP;
    uint256 public decay = 999999465 * 1e9; //0.999999465 * 1e18 ~ reward per block halvens every 6 months
    uint256 public decayLP = decay;

    // Min and max target price multiples
    uint256 public constant maxBakingTemp = 400; // Max price difference multiple (100x)
    uint256 public minBakingTemp = 8; // Min price difference multiple (2x)

    // Jeet penalty (penalty for withdrawing below target and forfeiting rewards)
    uint256 public jeetPenalty = 15; // 15% penalty for $DOUGH staking
    uint256 public jeetPenaltyLP = 20; // 20% penalty for LP staking

    // Variables that keep track of rewards: tokens burned (rewards) = netCirculatingDough - totalSupply
    uint256 public netCirculatingDough; //netCirculatingDough gets increased when new dough is minted, decreased when burned tokens are added to reward pool
    uint256 public burnRewardPercentage = 100; //Percentage of burned tokens that go towards rewards
    uint256 public burnRewardsLPRatio = 20; //Ratio of burned token rewards that go towards LP stakers


    // dough
    IDOUGH public dough;
    // dough lp
    IUniswapPair public doughLp;

    // Info of each deposit.
    mapping(uint256 => DepositInfo) private depositInfo;
    mapping(uint256 => DepositInfo) private depositInfoLP;

    // Bool to enable deposits
    bool public preheated;

    // Events
    event Deposit(address indexed user, uint256 indexed depositId, uint224 indexed targetPrice, uint256 amount, uint256 shares);
    event DepositLP(address indexed user, uint256 indexed depositId, uint224 indexed targetPrice, uint256 amount, uint256 shares);
    event Withdrawal(address indexed user, uint256 indexed depositId, uint256 amount, bool isLP);
    event Jeet(address indexed user, uint256 indexed depositId, uint256 amount, bool isLP);
    event Claim(address indexed user, uint256 indexed depositId, uint256 amount, bool isLP);

    // Modifier that ensures caller is not a smart contract
    modifier nonContractCaller() {
        require(msg.sender == tx.origin, "contract not allowed");
        _;
    }

    // Constructooor
    constructor(
        IDOUGH _dough,
        IUniswapPair _doughLp,
        uint256 _rewardPerBlock,
        uint256 _rewardPerBlockLP,
        uint256 _decay
    ) Ownable(msg.sender) ReentrancyGuard() {
        dough = _dough;
        doughLp = _doughLp;
        rewardPerBlock = _rewardPerBlock;
        rewardPerBlockLP = _rewardPerBlockLP;
        lastRewardBlock = lastRewardBlockLP = block.number;
        netCirculatingDough = 1_000_000_000 * 1e9;
        decay = decayLP = _decay;
    }

    /**
     * @dev Computes decay => principal * (ratio ^ n)
     * @param principal: Principal amount.
     * @param ratio: Ratio.
     * @param n: Number of blocks.
     */
    function computeDecay(
        uint256 principal,
        uint256 ratio,
        uint256 n
    ) private pure returns (uint256) {
        return
            ABDKMath64x64.mulu(
                ABDKMath64x64.pow(
                    ABDKMath64x64.divu(ratio, 1e18),
                    n
                ),
                principal
            );
    }

    /**
     * @dev View function to get pending rewards for a given deposit.
     * @param _depositId: Deposit ID.
     * @param _isLP: Whether the deposit is an LP deposit or not.
     * @param _withLimit: Whether to return raw pending rewards or to return pending rewards after deducting claimed rewards.
     * @notice If _withLimit is true, it returns pending rewards after checking if pending + claimed rewards > principal and reducing it appropriately.
     * @notice _withLimit only applies to $DOUGH stakers, as it this limit isn't there for LP stakers.
     */
    function getPendingRewards(uint256 _depositId, bool _isLP, bool _withLimit)
        external
        view
        returns (uint128)
    {
        DepositInfo storage dep = _isLP ? depositInfoLP[_depositId] : depositInfo[_depositId];
        uint128 pendingRaw = uint128(Math.mulDiv(
            dep.shares,
            _isLP ? accRewardPerShareLP : accRewardPerShare,
            1e12
        ));
        uint128 pending = pendingRaw - dep.rewardDeductible;
        if (!_withLimit) return pending;
        if (!_isLP) {
            uint128 pendingPlusClaimed = pending + dep.claimedRewards;
            if (pendingPlusClaimed > dep.amount) {
                pending -= (pendingPlusClaimed - dep.amount);
            }
        }
        return pending;
    }

    /**
     * @dev View function to get deposit info of _depositId
     * @param _depositId: Deposit ID.
     * @param _isLP: Whether the deposit is an LP deposit or not.
     */
    function getDepositInfo(uint256 _depositId, bool _isLP)
        external
        view
        returns (DepositInfo memory)
    {
        return _isLP ? depositInfoLP[_depositId] : depositInfo[_depositId];
    }

    /**
     * @dev Internal function to get current price from Uniswap V2 pool.
     */
    function _getCurrPrice() private view returns (uint224 currPrice) {
        (uint112 reserve0, uint112 reserve1, ) = doughLp.getReserves();
        currPrice = UQ112x112.encode(reserve0 * 1e9).uqdiv(reserve1); //scaling reserve0 (WETH) by factor of 1e9 for more precision
    }

    /**
     * @dev External view function to get current price from Uniswap V2 pool.
     */
    function getCurrPrice() external view returns (uint224) {
        return _getCurrPrice();
    }

    /**
     * @dev Preheat LeOven (enable/disable deposits)
     * @param _isPreheated: Whether to enable or disable deposits.
     * @notice Withdrawals/claims can never be disabled, this can only halt new deposits.
     */
    function preheat(bool _isPreheated) external onlyOwner {
        preheated = _isPreheated;
        if (_isPreheated) {
            //update last reward block if totalShares = 0
            if (totalShares == 0) lastRewardBlock = block.number;
            if (totalSharesLP == 0) lastRewardBlockLP = block.number;
        }
    }

    /**
     * @dev Updates reward variables.
     */
    function updateRewardVariables(
        uint256 _rewardPerBlock,
        uint256 _rewardPerBlockLP,
        uint256 _decay,
        uint256 _jeetPenalty,
        uint256 _minBakingTemp,
        uint256 _burnRewardPercentage,
        uint256 _burnRewardsLPRatio,
        bool _isLP
    ) external onlyOwner {
        if (_isLP) {
            require(_jeetPenalty <= 30, "exceeds max penalty for LP stakers");
            decayLP = _decay;
            jeetPenaltyLP = _jeetPenalty;
        } else {
            require(_jeetPenalty <= 30, "exceeds max penalty for Dough stakers");
            decay = _decay;
            jeetPenalty = _jeetPenalty;
        }
        require(_burnRewardPercentage <= 100 && _burnRewardPercentage > 30, "burn reward percentage out of bounds");

        //handle 2 cases - transitioning from burn rewards to emissions, and transitioning from emissions to burn rewards
        //case 1: transitioning from burn rewards to emissions
        if (rewardPerBlock == 0 && rewardPerBlockLP == 0 && (_rewardPerBlock > 0 || _rewardPerBlockLP > 0)) {
            lastRewardBlock = lastRewardBlockLP = block.number; //start new reward cycle
        }
        //case 2: transitioning from emissions to burn rewards
        if (rewardPerBlock > 0 && rewardPerBlockLP > 0 && (_rewardPerBlock == 0 || _rewardPerBlockLP == 0)) {
            netCirculatingDough = dough.totalSupply(); //set netCirculatingDough to totalSupply as we are now transitioning to burn tax rewards.
        }
        
        rewardPerBlock = _rewardPerBlock;
        rewardPerBlockLP = _rewardPerBlockLP;
        minBakingTemp = _minBakingTemp;
        burnRewardPercentage = _burnRewardPercentage;
        burnRewardsLPRatio = _burnRewardsLPRatio;
    }

    /**
     * @dev Force updates rewards for $DOUGH staking or LP staking.
     * @param _isLP: Whether to update rewards for LP staking or $DOUGH staking.
     */
    function forceUpdateRewards(bool _isLP) external onlyOwner {
        if (_isLP) updateRewardsLP();
        else updateRewards();
    }

    /**
     * @dev Internal function that updates the following for $DOUGH staking:
     * - rewardPerBlock - gets updated based on decay
     * - lastRewardBlock - gets updated to current block
     * - accRewardPerShare - gets increased by emissions (or burn tax if rewardPerBlock == 0) divided by totalShares
     */
    function updateRewards() private {
        if (totalShares == 0 || lastRewardBlock >= block.number) return;
        if (rewardPerBlock == 0) {
            // use burned tokens for rewards once emissions are depleted
            uint256 tokensBurnt = netCirculatingDough - dough.totalSupply(); //cannot underflow as netCirculatingDough >= totalSupply
            uint256 burntRewards = Math.mulDiv(tokensBurnt, burnRewardPercentage, 100);
            netCirculatingDough -= tokensBurnt; //netCirculatingDough == totalSupply after this
            if (totalSharesLP > 0 && rewardPerBlockLP == 0) {
                uint256 lpRewards = Math.mulDiv(burntRewards, burnRewardsLPRatio, 100);
                accRewardPerShare += Math.mulDiv(
                    burntRewards - lpRewards,
                    1e12,
                    totalShares
                );
                accRewardPerShareLP += Math.mulDiv(
                    lpRewards,
                    1e12,
                    totalSharesLP
                );
            } else {
                accRewardPerShare += Math.mulDiv(
                    burntRewards,
                    1e12,
                    totalShares
                );
            }
        } else {
            // accRewardPerShare += (block difference * rewardPerBlock) / total shares
            accRewardPerShare += Math.mulDiv(
                (block.number - lastRewardBlock) * rewardPerBlock,
                1e12,
                totalShares
            );
            rewardPerBlock = computeDecay(rewardPerBlock, decay, block.number - lastRewardBlock);
            lastRewardBlock = block.number; //don't need to update lastRewardBlock once emissions are depleted
            if (rewardPerBlock == 0) netCirculatingDough = dough.totalSupply(); //set netCirculatingDough to totalSupply as we are now transitioning to burn tax rewards.
        }
    }

    /**
     * @dev Internal function that updates the following for LP staking:
     * - rewardPerBlock - gets updated based on decay
     * - lastRewardBlock - gets updated to current block
     * - accRewardPerShare - gets increased by emissions (or burn tax if rewardPerBlock == 0) divided by totalShares
     */
    function updateRewardsLP() private {
        if (totalSharesLP == 0 || lastRewardBlockLP >= block.number) return;
        if (rewardPerBlockLP == 0) { 
            // use burned tokens for rewards once emissions are depleted
            uint256 tokensBurnt = netCirculatingDough - dough.totalSupply(); //cannot underflow as netCirculatingDough >= totalSupply
            uint256 burntRewards = Math.mulDiv(tokensBurnt, burnRewardPercentage, 100);
            netCirculatingDough -= tokensBurnt; //netCirculatingDough == totalSupply after this
            if (totalShares > 0 && rewardPerBlock == 0) {
                uint256 lpRewards = Math.mulDiv(burntRewards, burnRewardsLPRatio, 100);
                accRewardPerShare += Math.mulDiv(
                    burntRewards - lpRewards,
                    1e12,
                    totalShares
                );
                accRewardPerShareLP += Math.mulDiv(
                    lpRewards,
                    1e12,
                    totalSharesLP
                );
            } else {
                accRewardPerShareLP += Math.mulDiv(
                    burntRewards,
                    1e12,
                    totalSharesLP
                );
            }
        } else {
            // accRewardPerShare += (block difference * rewardPerBlock) / total shares
            accRewardPerShareLP += Math.mulDiv(
                (block.number - lastRewardBlockLP) * rewardPerBlockLP,
                1e12,
                totalSharesLP
            );
            rewardPerBlockLP = computeDecay(rewardPerBlockLP, decayLP, block.number - lastRewardBlockLP);
            lastRewardBlockLP = block.number;
            if (rewardPerBlockLP == 0) netCirculatingDough = dough.totalSupply(); //set netCirculatingDough to totalSupply as we are now transitioning to burn tax rewards.
        }
    }

    /**
     * @dev Deposit $DOUGH internal function
     * @param _amount: Amount of tokens to deposit.
     * @param _bakingTemperature: Target price multiple.
     * @param _account: Account address.
     */
    function _deposit(
        uint256 _amount,
        uint128 _bakingTemperature,
        address _account
    ) private {
        // Checks
        require(preheated, "oven not preheated");
        require(_amount > 0, "invalid amount");
        require(_bakingTemperature >= minBakingTemp && _bakingTemperature <= maxBakingTemp, "invalid target price"); // must be between 1.25x (+25%) and maxBakingTemp (max price multiple)

        // Get current price and target price
        uint224 currPrice = _getCurrPrice();
        uint224 targetPrice = UQ112x112.mul126_2x112_112(_bakingTemperature, currPrice);
        
        DepositInfo storage dep = depositInfo[++DEPOSIT_ID];

        //calculate shares, emit event
        uint256 shares = UQ112x112.mul126_2x256(_bakingTemperature, _amount);
        emit Deposit(_account, DEPOSIT_ID, targetPrice, _amount, shares);

        // Update reward variables
        updateRewards();

        //update storage variables
        dep.amount = uint128(_amount);
        dep.shares = uint128(shares);
        dep.rewardDeductible = uint128(Math.mulDiv(
            shares,
            accRewardPerShare,
            1e12
        ));
        dep.account = _account;
        dep.targetPrice = targetPrice;

        totalShares += shares;
    }

    /**
     * @dev Deposit LP tokens internal function
     * @param _amount: Amount of tokens to deposit.
     * @param _bakingTemperature: Target price multiple.
     * @param _account: Account address.
     */
    function _depositLP(
        uint256 _amount,
        uint128 _bakingTemperature,
        address _account
    ) private {
        // Checks
        require(preheated, "oven not preheated");
        require(_amount > 0, "invalid amount");
        require(_bakingTemperature >= minBakingTemp && _bakingTemperature <= maxBakingTemp, "invalid target price"); // must be between 1.25x (+25%) and maxBakingTemp (max price multiple)

        // Get current price and target price
        uint224 currPrice = _getCurrPrice();
        uint224 targetPrice = UQ112x112.mul126_2x112_112(_bakingTemperature, currPrice);
        
        DepositInfo storage dep = depositInfoLP[++DEPOSIT_ID_LP];

        //calculate shares, emit event
        uint256 shares = UQ112x112.mul126_2x256(_bakingTemperature, _amount);
        emit DepositLP(_account, DEPOSIT_ID_LP, targetPrice, _amount, shares);

        // Update reward variables
        updateRewardsLP();

        //update storage variables
        dep.amount = uint128(_amount);
        dep.shares = uint128(shares);
        dep.rewardDeductible = uint128(Math.mulDiv(
            shares,
            accRewardPerShareLP,
            1e12
        ));
        dep.account = _account;
        dep.targetPrice = targetPrice;

        totalSharesLP += shares;
    }

    /**
     * @dev Claim rewards internal function for claiming/compounding. Returns raw rewards (without subtracting deductible).
     * @param _dep: DepositInfo for deposit.
     * @param _isLP: Whether the deposit is an LP deposit or not.
     */
    function _claimRaw(DepositInfo storage _dep, bool _isLP)
        private
        returns (uint128)
    {
        if (_isLP) {
            updateRewardsLP();
            return uint128(Math.mulDiv(
                _dep.shares,
                accRewardPerShareLP,
                1e12
            ));
        } else {
            updateRewards();
            return uint128(Math.mulDiv(
                _dep.shares,
                accRewardPerShare,
                1e12
            ));
        }
    }

    /**
     * @dev Stakes (deposits) tokens in LeOven.
     * @param _amount: Amount of tokens to deposit.
     * @param _bakingTemperature: Target price multiple - a Q126.2 binary fixed point number representing price multiple in increments of .25x or 25%.
     * @param _isLP: Whether the deposit is an LP deposit or not.
     */
    function stakeNbake(
        uint256 _amount,
        uint128 _bakingTemperature,
        bool _isLP
    ) external nonReentrant nonContractCaller {
        if (_isLP) {
            doughLp.transferFrom(msg.sender, address(this), _amount);
            _depositLP(_amount, _bakingTemperature, msg.sender);
        } else {
            dough.transferFrom(msg.sender, address(this), _amount);
            _deposit(_amount, _bakingTemperature, msg.sender);
        }
    }

    /**
     * @dev Withdraws a deposit from LeOven
     * @param _depositId: Deposit ID.
     * @param _isLP: Whether the deposit is an LP deposit or not.
     * @notice Requirements:
     * - Deposit must be unlocked (current price >= target price)
     * - Only the owner of the deposit can withdraw
     * @notice Claims all pending rewards as well.
     */
    function removeWhenGoldenBrown(uint256 _depositId, bool _isLP) 
        external
        nonReentrant
        nonContractCaller
    {
        DepositInfo storage dep = _isLP ? depositInfoLP[_depositId] : depositInfo[_depositId];
        require(dep.account == msg.sender, "not allowed");

        // Check current market price and make sure it's >= target price.
        uint224 currPrice = _getCurrPrice();
        require(currPrice >= dep.targetPrice, "deposit not unlocked");

        // Get pending rewards
        uint256 pending = _claimRaw(dep, _isLP) - dep.rewardDeductible;

        //mint rewards to sender, log events
        dough.mint(msg.sender, pending);
        netCirculatingDough += pending;
        emit Claim(msg.sender, _depositId, pending, _isLP);
        emit Withdrawal(msg.sender, _depositId, dep.amount, _isLP);

        //transfer principal amount, clear storage
        if (_isLP) {
            unchecked {
                totalSharesLP -= dep.shares; 
            }
            doughLp.transfer(msg.sender, dep.amount);
            delete depositInfoLP[_depositId];
        } else {
            unchecked {
                totalShares -= dep.shares;
            }
            dough.transfer(msg.sender, dep.amount);
            delete depositInfo[_depositId];
        }
    }

    /**
     * @dev Claim pending rewards for a deposit.
     * @param _depositId: Deposit ID.
     * @param _isLP: Whether the deposit is an LP deposit or not.
     * @notice Requirements:
     * - Deposit cannot be unlocked, requires current price < target price. If deposit is unlocked user can only withdraw.
     * - Only the owner of the deposit can claim.
     * - Can only claim rewards up to principal staked amount.
     * @notice Claims all pending rewards, user cannot claim a specific amount.
     */
    function collectBread(uint256 _depositId, bool _isLP)
        external
        nonReentrant
        nonContractCaller
        returns (uint128 pending)
    {
        DepositInfo storage dep = _isLP ? depositInfoLP[_depositId] : depositInfo[_depositId];
        require(dep.account == msg.sender, "not allowed");

        // Checks if deposit is unlocked
        uint224 currPrice = _getCurrPrice();
        require(currPrice < dep.targetPrice, "cannot claim once deposit is unlocked, must withdraw");

        // Get pending rewards, check if pending + claimed rewards > principal, and adjusts
        uint128 pendingRaw = _claimRaw(dep, _isLP);
        pending = pendingRaw - dep.rewardDeductible;
        if (!_isLP) {
            uint128 pendingPlusClaimed = pending + dep.claimedRewards;
            if (pendingPlusClaimed > dep.amount) {
                pendingRaw -= (pendingPlusClaimed - dep.amount);
                pending -= (pendingPlusClaimed - dep.amount);
            }
        }
        dep.rewardDeductible = pendingRaw;
        dep.claimedRewards += pending;

        // Mint rewards to sender, log event
        emit Claim(msg.sender, _depositId, pending, _isLP);
        dough.mint(msg.sender, pending);
        netCirculatingDough += pending;
    }

    /**
     * @dev Compounds pending rewards and creates a new deposit.
     * @param _depositId: Deposit ID.
     * @param _bakingTemperature: Target price multiple - a Q126.2 binary fixed point number representing price multiple in increments of .25x or 25%.
     * @param _isLP: Whether the deposit is an LP deposit or not.
     * @notice Requirements:
     * - Deposit cannot be unlocked, requires current price < target price. If deposit is unlocked user can only withdraw.
     * - Only the owner of the deposit can compound
     * - Can only compound rewards up to principal staked amount.
     */
    function stayBaked(
        uint256 _depositId,
        uint128 _bakingTemperature,
        bool _isLP
    ) 
        external
        nonReentrant
        nonContractCaller
        returns (uint128 pending) 
    {
        DepositInfo storage dep = _isLP ? depositInfoLP[_depositId] : depositInfo[_depositId];
        require(dep.account == msg.sender, "not allowed");

        // Checks if deposit is unlocked
        uint224 currPrice = _getCurrPrice();
        require(currPrice < dep.targetPrice, "cannot compound once deposit is unlocked");

        // Get pending rewards, check if pending + claimed rewards > principal, and adjusts
        uint128 pendingRaw = _claimRaw(dep, _isLP);
        pending = pendingRaw - dep.rewardDeductible;
        if (!_isLP) {
            uint128 pendingPlusClaimed = pending + dep.claimedRewards;
            if (pendingPlusClaimed > dep.amount) {
                pendingRaw -= (pendingPlusClaimed - dep.amount);
                pending -= (pendingPlusClaimed - dep.amount);
            }
        }
        dep.rewardDeductible = pendingRaw;
        dep.claimedRewards += uint128(pending);

        //create new deposit, log event
        emit Claim(msg.sender, _depositId, pending, _isLP);
        dough.mint(address(this), pending);
        netCirculatingDough += pending;
        _deposit(pending, _bakingTemperature, msg.sender);
    }

    /**
     * @dev Emergency withdraw - forfeit rewards and withdraw principal with penalty.
     * @param _depositId: Deposit ID.
     * @param _isLP: Whether the deposit is an LP deposit or not.
     * @notice Requirements:
     * - Deposit cannot have any claimed rewards. Claiming rewards forfeits right to jeet.
     * - Only the owner of the deposit can jeet.
     */
    function jeet(uint256 _depositId, bool _isLP) external nonReentrant nonContractCaller {
        DepositInfo storage dep = _isLP ? depositInfoLP[_depositId] : depositInfo[_depositId];
        require(dep.account == msg.sender, "not allowed");

        // Transfer principal to owner, delete deposit
        if (_isLP) {
            unchecked {
                totalSharesLP -= dep.shares;
            }
            uint256 pendingRewards = Math.mulDiv(
                dep.shares,
                accRewardPerShareLP,
                1e12
            ) - dep.rewardDeductible;
            accRewardPerShareLP += Math.mulDiv(
                pendingRewards,
                1e12,
                totalSharesLP
            );
            uint256 penalty = Math.mulDiv(dep.amount, jeetPenaltyLP, 100, Math.Rounding.Ceil);
            doughLp.transfer(msg.sender, dep.amount - penalty);
            doughLp.transfer(address(0), penalty);
            emit Jeet(msg.sender, _depositId, dep.amount - penalty, true);
            delete depositInfoLP[_depositId];
        } else {
            unchecked {
                totalShares -= dep.shares;
            }
            uint256 pendingRewards = Math.mulDiv(
                dep.shares,
                accRewardPerShare,
                1e12
            ) - dep.rewardDeductible;
            accRewardPerShare += Math.mulDiv(
                pendingRewards,
                1e12,
                totalShares
            );
            uint256 penalty = Math.mulDiv(dep.amount, jeetPenalty, 100, Math.Rounding.Ceil);
            require(dep.amount - penalty > dep.claimedRewards, "claimed rewards exceeds deposit amount - penalty");
            dough.transfer(msg.sender, (dep.amount - penalty) - dep.claimedRewards);
            dough.burn(penalty);
            emit Jeet(msg.sender, _depositId, dep.amount - penalty, false);
            delete depositInfo[_depositId];
        }
    }
}

// File: libraries/ABDKMath64x64.sol
// SPDX-License-Identifier: BSD-4-Clause
/*
 * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.
 * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>
 */
pragma solidity ^0.8.0;

/**
 * Smart contract library of mathematical functions operating with signed
 * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is
 * basically a simple fraction whose numerator is signed 128-bit integer and
 * denominator is 2^64.  As long as denominator is always the same, there is no
 * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are
 * represented by int128 type holding only the numerator.
 */
library ABDKMath64x64 {
    /*
     * Minimum value signed 64.64-bit fixed point number may have.
     */
    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;

    /*
     * Maximum value signed 64.64-bit fixed point number may have.
     */
    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;

    /**
     * Convert signed 256-bit integer number into signed 64.64-bit fixed point
     * number.  Revert on overflow.
     *
     * @param x signed 256-bit integer number
     * @return signed 64.64-bit fixed point number
     */
    function fromInt(int256 x) internal pure returns (int128) {
        unchecked {
            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);
            return int128(x << 64);
        }
    }

    /**
     * Convert signed 64.64 fixed point number into signed 64-bit integer number
     * rounding down.
     *
     * @param x signed 64.64-bit fixed point number
     * @return signed 64-bit integer number
     */
    function toInt(int128 x) internal pure returns (int64) {
        unchecked {
            return int64(x >> 64);
        }
    }

    /**
     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point
     * number.  Revert on overflow.
     *
     * @param x unsigned 256-bit integer number
     * @return signed 64.64-bit fixed point number
     */
    function fromUInt(uint256 x) internal pure returns (int128) {
        unchecked {
            require(x <= 0x7FFFFFFFFFFFFFFF);
            return int128(int256(x << 64));
        }
    }

    /**
     * Convert signed 64.64 fixed point number into unsigned 64-bit integer
     * number rounding down.  Revert on underflow.
     *
     * @param x signed 64.64-bit fixed point number
     * @return unsigned 64-bit integer number
     */
    function toUInt(int128 x) internal pure returns (uint64) {
        unchecked {
            require(x >= 0);
            return uint64(uint128(x >> 64));
        }
    }

    /**
     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point
     * number rounding down.  Revert on overflow.
     *
     * @param x signed 128.128-bin fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function from128x128(int256 x) internal pure returns (int128) {
        unchecked {
            int256 result = x >> 64;
            require(result >= MIN_64x64 && result <= MAX_64x64);
            return int128(result);
        }
    }

    /**
     * Convert signed 64.64 fixed point number into signed 128.128 fixed point
     * number.
     *
     * @param x signed 64.64-bit fixed point number
     * @return signed 128.128 fixed point number
     */
    function to128x128(int128 x) internal pure returns (int256) {
        unchecked {
            return int256(x) << 64;
        }
    }

    /**
     * Calculate x + y.  Revert on overflow.
     * The
     * @param x signed 64.64-bit fixed point number
     * @param y signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function add(int128 x, int128 y) internal pure returns (int128) {
        unchecked {
            int256 result = int256(x) + y;
            require(result >= MIN_64x64 && result <= MAX_64x64);
            return int128(result);
        }
    }

    /**
     * Calculate x - y.  Revert on overflow.
     *
     * @param x signed 64.64-bit fixed point number
     * @param y signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function sub(int128 x, int128 y) internal pure returns (int128) {
        unchecked {
            int256 result = int256(x) - y;
            require(result >= MIN_64x64 && result <= MAX_64x64);
            return int128(result);
        }
    }

    /**
     * Calculate x * y rounding down.  Revert on overflow.
     *
     * @param x signed 64.64-bit fixed point number
     * @param y signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function mul(int128 x, int128 y) internal pure returns (int128) {
        unchecked {
            int256 result = (int256(x) * y) >> 64;
            require(result >= MIN_64x64 && result <= MAX_64x64);
            return int128(result);
        }
    }

    /**
     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point
     * number and y is signed 256-bit integer number.  Revert on overflow.
     *
     * @param x signed 64.64 fixed point number
     * @param y signed 256-bit integer number
     * @return signed 256-bit integer number
     */
    function muli(int128 x, int256 y) internal pure returns (int256) {
        unchecked {
            if (x == MIN_64x64) {
                require(
                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&
                        y <= 0x1000000000000000000000000000000000000000000000000
                );
                return -y << 63;
            } else {
                bool negativeResult = false;
                if (x < 0) {
                    x = -x;
                    negativeResult = true;
                }
                if (y < 0) {
                    y = -y; // We rely on overflow behavior here
                    negativeResult = !negativeResult;
                }
                uint256 absoluteResult = mulu(x, uint256(y));
                if (negativeResult) {
                    require(
                        absoluteResult <=
                            0x8000000000000000000000000000000000000000000000000000000000000000
                    );
                    return -int256(absoluteResult); // We rely on overflow behavior here
                } else {
                    require(
                        absoluteResult <=
                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                    );
                    return int256(absoluteResult);
                }
            }
        }
    }

    /**
     * Calculate x * y rounding down, where x is signed 64.64 fixed point number
     * and y is unsigned 256-bit integer number.  Revert on overflow.
     * beginning
     * @param x signed 64.64 fixed point number
     * @param y unsigned 256-bit integer number
     * @return unsigned 256-bit integer number
     */
    function mulu(int128 x, uint256 y) internal pure returns (uint256) {
        unchecked {
            if (y == 0) return 0;

            require(x >= 0);

            uint256 lo = (uint256(int256(x)) *
                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;
            uint256 hi = uint256(int256(x)) * (y >> 128);

            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
            hi <<= 64;

            require(
                hi <=
                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -
                        lo
            );
            return hi + lo;
        }
    }

    /**
     * Calculate x / y rounding towards zero.  Revert on overflow or when y is
     * zero.
     *
     * @param x signed 64.64-bit fixed point number
     * @param y signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function div(int128 x, int128 y) internal pure returns (int128) {
        unchecked {
            require(y != 0);
            int256 result = (int256(x) << 64) / y;
            require(result >= MIN_64x64 && result <= MAX_64x64);
            return int128(result);
        }
    }

    /**
     * Calculate x / y rounding towards zero, where x and y are signed 256-bit
     * integer numbers.  Revert on overflow or when y is zero.
     *
     * @param x signed 256-bit integer number
     * @param y signed 256-bit integer number
     * @return signed 64.64-bit fixed point number
     */
    function divi(int256 x, int256 y) internal pure returns (int128) {
        unchecked {
            require(y != 0);

            bool negativeResult = false;
            if (x < 0) {
                x = -x; // We rely on overflow behavior here
                negativeResult = true;
            }
            if (y < 0) {
                y = -y; // We rely on overflow behavior here
                negativeResult = !negativeResult;
            }
            uint128 absoluteResult = divuu(uint256(x), uint256(y));
            if (negativeResult) {
                require(absoluteResult <= 0x80000000000000000000000000000000);
                return -int128(absoluteResult); // We rely on overflow behavior here
            } else {
                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
                return int128(absoluteResult); // We rely on overflow behavior here
            }
        }
    }

    /**
     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit
     * integer numbers.  Revert on overflow or when y is zero.
     *
     * @param x unsigned 256-bit integer number
     * @param y unsigned 256-bit integer number
     * @return signed 64.64-bit fixed point number
     */
    function divu(uint256 x, uint256 y) internal pure returns (int128) {
        unchecked {
            require(y != 0);
            uint128 result = divuu(x, y);
            require(result <= uint128(MAX_64x64));
            return int128(result);
        }
    }

    /**
     * Calculate -x.  Revert on overflow.
     *
     * @param x signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function neg(int128 x) internal pure returns (int128) {
        unchecked {
            require(x != MIN_64x64);
            return -x;
        }
    }

    /**
     * Calculate |x|.  Revert on overflow.
     *
     * @param x signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function abs(int128 x) internal pure returns (int128) {
        unchecked {
            require(x != MIN_64x64);
            return x < 0 ? -x : x;
        }
    }

    /**
     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is
     * zero.
     *
     * @param x signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function inv(int128 x) internal pure returns (int128) {
        unchecked {
            require(x != 0);
            int256 result = int256(0x100000000000000000000000000000000) / x;
            require(result >= MIN_64x64 && result <= MAX_64x64);
            return int128(result);
        }
    }

    /**
     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.
     *
     * @param x signed 64.64-bit fixed point number
     * @param y signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function avg(int128 x, int128 y) internal pure returns (int128) {
        unchecked {
            return int128((int256(x) + int256(y)) >> 1);
        }
    }

    /**
     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.
     * Revert on overflow or in case x * y is negative.
     *
     * @param x signed 64.64-bit fixed point number
     * @param y signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function gavg(int128 x, int128 y) internal pure returns (int128) {
        unchecked {
            int256 m = int256(x) * int256(y);
            require(m >= 0);
            require(
                m <
                    0x4000000000000000000000000000000000000000000000000000000000000000
            );
            return int128(sqrtu(uint256(m)));
        }
    }

    /**
     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number
     * and y is unsigned 256-bit integer number.  Revert on overflow.
     *
     * @param x signed 64.64-bit fixed point number
     * @param y uint256 value
     * @return signed 64.64-bit fixed point number
     */
    function pow(int128 x, uint256 y) internal pure returns (int128) {
        unchecked {
            bool negative = x < 0 && y & 1 == 1;

            uint256 absX = uint128(x < 0 ? -x : x);
            uint256 absResult;
            absResult = 0x100000000000000000000000000000000;

            if (absX <= 0x10000000000000000) {
                absX <<= 63;
                while (y != 0) {
                    if (y & 0x1 != 0) {
                        absResult = (absResult * absX) >> 127;
                    }
                    absX = (absX * absX) >> 127;

                    if (y & 0x2 != 0) {
                        absResult = (absResult * absX) >> 127;
                    }
                    absX = (absX * absX) >> 127;

                    if (y & 0x4 != 0) {
                        absResult = (absResult * absX) >> 127;
                    }
                    absX = (absX * absX) >> 127;

                    if (y & 0x8 != 0) {
                        absResult = (absResult * absX) >> 127;
                    }
                    absX = (absX * absX) >> 127;

                    y >>= 4;
                }

                absResult >>= 64;
            } else {
                uint256 absXShift = 63;
                if (absX < 0x1000000000000000000000000) {
                    absX <<= 32;
                    absXShift -= 32;
                }
                if (absX < 0x10000000000000000000000000000) {
                    absX <<= 16;
                    absXShift -= 16;
                }
                if (absX < 0x1000000000000000000000000000000) {
                    absX <<= 8;
                    absXShift -= 8;
                }
                if (absX < 0x10000000000000000000000000000000) {
                    absX <<= 4;
                    absXShift -= 4;
                }
                if (absX < 0x40000000000000000000000000000000) {
                    absX <<= 2;
                    absXShift -= 2;
                }
                if (absX < 0x80000000000000000000000000000000) {
                    absX <<= 1;
                    absXShift -= 1;
                }

                uint256 resultShift = 0;
                while (y != 0) {
                    require(absXShift < 64);

                    if (y & 0x1 != 0) {
                        absResult = (absResult * absX) >> 127;
                        resultShift += absXShift;
                        if (absResult > 0x100000000000000000000000000000000) {
                            absResult >>= 1;
                            resultShift += 1;
                        }
                    }
                    absX = (absX * absX) >> 127;
                    absXShift <<= 1;
                    if (absX >= 0x100000000000000000000000000000000) {
                        absX >>= 1;
                        absXShift += 1;
                    }

                    y >>= 1;
                }

                require(resultShift < 64);
                absResult >>= 64 - resultShift;
            }
            int256 result = negative ? -int256(absResult) : int256(absResult);
            require(result >= MIN_64x64 && result <= MAX_64x64);
            return int128(result);
        }
    }

    /**
     * Calculate sqrt (x) rounding down.  Revert if x < 0.
     * of
     * @param x signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function sqrt(int128 x) internal pure returns (int128) {
        unchecked {
            require(x >= 0);
            return int128(sqrtu(uint256(int256(x)) << 64));
        }
    }

    /**
     * Calculate binary logarithm of x.  Revert if x <= 0.
     *
     * @param x signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function log_2(int128 x) internal pure returns (int128) {
        unchecked {
            require(x > 0);

            int256 msb = 0;
            int256 xc = x;
            if (xc >= 0x10000000000000000) {
                xc >>= 64;
                msb += 64;
            }
            if (xc >= 0x100000000) {
                xc >>= 32;
                msb += 32;
            }
            if (xc >= 0x10000) {
                xc >>= 16;
                msb += 16;
            }
            if (xc >= 0x100) {
                xc >>= 8;
                msb += 8;
            }
            if (xc >= 0x10) {
                xc >>= 4;
                msb += 4;
            }
            if (xc >= 0x4) {
                xc >>= 2;
                msb += 2;
            }
            if (xc >= 0x2) msb += 1; // No need to shift xc anymore

            int256 result = (msb - 64) << 64;
            uint256 ux = uint256(int256(x)) << uint256(127 - msb);
            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {
                ux *= ux;
                uint256 b = ux >> 255;
                ux >>= 127 + b;
                result += bit * int256(b);
            }

            return int128(result);
        }
    }

    /**
     * Calculate natural logarithm of x.  Revert if x <= 0.
     *
     * @param x signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function ln(int128 x) internal pure returns (int128) {
        unchecked {
            require(x > 0);

            return
                int128(
                    int256(
                        (uint256(int256(log_2(x))) *
                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128
                    )
                );
        }
    }

    /**
     * Calculate binary exponent of x.  Revert on overflow.
     *
     * @param x signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function exp_2(int128 x) internal pure returns (int128) {
        unchecked {
            require(x < 0x400000000000000000); // Overflow

            if (x < -0x400000000000000000) return 0; // Underflow

            uint256 result = 0x80000000000000000000000000000000;

            if (x & 0x8000000000000000 > 0)
                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;
            if (x & 0x4000000000000000 > 0)
                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;
            if (x & 0x2000000000000000 > 0)
                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;
            if (x & 0x1000000000000000 > 0)
                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;
            if (x & 0x800000000000000 > 0)
                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;
            if (x & 0x400000000000000 > 0)
                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;
            if (x & 0x200000000000000 > 0)
                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;
            if (x & 0x100000000000000 > 0)
                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;
            if (x & 0x80000000000000 > 0)
                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;
            if (x & 0x40000000000000 > 0)
                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;
            if (x & 0x20000000000000 > 0)
                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;
            if (x & 0x10000000000000 > 0)
                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;
            if (x & 0x8000000000000 > 0)
                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;
            if (x & 0x4000000000000 > 0)
                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;
            if (x & 0x2000000000000 > 0)
                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;
            if (x & 0x1000000000000 > 0)
                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;
            if (x & 0x800000000000 > 0)
                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;
            if (x & 0x400000000000 > 0)
                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;
            if (x & 0x200000000000 > 0)
                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;
            if (x & 0x100000000000 > 0)
                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;
            if (x & 0x80000000000 > 0)
                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;
            if (x & 0x40000000000 > 0)
                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;
            if (x & 0x20000000000 > 0)
                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;
            if (x & 0x10000000000 > 0)
                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;
            if (x & 0x8000000000 > 0)
                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;
            if (x & 0x4000000000 > 0)
                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;
            if (x & 0x2000000000 > 0)
                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;
            if (x & 0x1000000000 > 0)
                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;
            if (x & 0x800000000 > 0)
                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;
            if (x & 0x400000000 > 0)
                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;
            if (x & 0x200000000 > 0)
                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;
            if (x & 0x100000000 > 0)
                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;
            if (x & 0x80000000 > 0)
                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;
            if (x & 0x40000000 > 0)
                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;
            if (x & 0x20000000 > 0)
                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;
            if (x & 0x10000000 > 0)
                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;
            if (x & 0x8000000 > 0)
                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;
            if (x & 0x4000000 > 0)
                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;
            if (x & 0x2000000 > 0)
                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;
            if (x & 0x1000000 > 0)
                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;
            if (x & 0x800000 > 0)
                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;
            if (x & 0x400000 > 0)
                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;
            if (x & 0x200000 > 0)
                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;
            if (x & 0x100000 > 0)
                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;
            if (x & 0x80000 > 0)
                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;
            if (x & 0x40000 > 0)
                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;
            if (x & 0x20000 > 0)
                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;
            if (x & 0x10000 > 0)
                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;
            if (x & 0x8000 > 0)
                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;
            if (x & 0x4000 > 0)
                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;
            if (x & 0x2000 > 0)
                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;
            if (x & 0x1000 > 0)
                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;
            if (x & 0x800 > 0)
                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;
            if (x & 0x400 > 0)
                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;
            if (x & 0x200 > 0)
                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;
            if (x & 0x100 > 0)
                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;
            if (x & 0x80 > 0)
                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;
            if (x & 0x40 > 0)
                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;
            if (x & 0x20 > 0)
                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;
            if (x & 0x10 > 0)
                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;
            if (x & 0x8 > 0)
                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;
            if (x & 0x4 > 0)
                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;
            if (x & 0x2 > 0)
                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;
            if (x & 0x1 > 0)
                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;

            result >>= uint256(int256(63 - (x >> 64)));
            require(result <= uint256(int256(MAX_64x64)));

            return int128(int256(result));
        }
    }

    /**
     * Calculate natural exponent of x.  Revert on overflow.
     * his
     * @param x signed 64.64-bit fixed point number
     * @return signed 64.64-bit fixed point number
     */
    function exp(int128 x) internal pure returns (int128) {
        unchecked {
            require(x < 0x400000000000000000); // Overflow

            if (x < -0x400000000000000000) return 0; // Underflow

            return
                exp_2(
                    int128(
                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128
                    )
                );
        }
    }

    /**
     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit
     * integer numbers.  Revert on overflow or when y is zero.
     *
     * @param x unsigned 256-bit integer number
     * @param y unsigned 256-bit integer number
     * @return unsigned 64.64-bit fixed point number
     */
    function divuu(uint256 x, uint256 y) private pure returns (uint128) {
        unchecked {
            require(y != 0);

            uint256 result;

            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
                result = (x << 64) / y;
            else {
                uint256 msb = 192;
                uint256 xc = x >> 192;
                if (xc >= 0x100000000) {
                    xc >>= 32;
                    msb += 32;
                }
                if (xc >= 0x10000) {
                    xc >>= 16;
                    msb += 16;
                }
                if (xc >= 0x100) {
                    xc >>= 8;
                    msb += 8;
                }
                if (xc >= 0x10) {
                    xc >>= 4;
                    msb += 4;
                }
                if (xc >= 0x4) {
                    xc >>= 2;
                    msb += 2;
                }
                if (xc >= 0x2) msb += 1; // No need to shift xc anymore

                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);
                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);

                uint256 hi = result * (y >> 128);
                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);

                uint256 xh = x >> 192;
                uint256 xl = x << 64;

                if (xl < lo) xh -= 1;
                xl -= lo; // We rely on overflow behavior here
                lo = hi << 128;
                if (xl < lo) xh -= 1;
                xl -= lo; // We rely on overflow behavior here

                assert(xh == hi >> 128);

                result += xl / y;
            }

            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
            return uint128(result);
        }
    }

    /**
     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer
     * number.
     *
     * @param x unsigned 256-bit integer number
     * @return unsigned 128-bit integer number
     */
    function sqrtu(uint256 x) private pure returns (uint128) {
        unchecked {
            if (x == 0) return 0;
            else {
                uint256 xx = x;
                uint256 r = 1;
                if (xx >= 0x100000000000000000000000000000000) {
                    xx >>= 128;
                    r <<= 64;
                }
                if (xx >= 0x10000000000000000) {
                    xx >>= 64;
                    r <<= 32;
                }
                if (xx >= 0x100000000) {
                    xx >>= 32;
                    r <<= 16;
                }
                if (xx >= 0x10000) {
                    xx >>= 16;
                    r <<= 8;
                }
                if (xx >= 0x100) {
                    xx >>= 8;
                    r <<= 4;
                }
                if (xx >= 0x10) {
                    xx >>= 4;
                    r <<= 2;
                }
                if (xx >= 0x8) {
                    r <<= 1;
                }
                r = (r + x / r) >> 1;
                r = (r + x / r) >> 1;
                r = (r + x / r) >> 1;
                r = (r + x / r) >> 1;
                r = (r + x / r) >> 1;
                r = (r + x / r) >> 1;
                r = (r + x / r) >> 1; // Seven iterations should be enough
                uint256 r1 = x / r;
                return uint128(r < r1 ? r : r1);
            }
        }
    }
}

// File: libraries/UQ112x112.sol
//SPDX-License-Identifier: None
pragma solidity ^0.8.0;

// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))
// range: [0, 2**112 - 1]
// resolution: 1 / 2**112
library UQ112x112 {
    uint224 constant Q112 = 2**112;
    uint224 constant Q224 = 2**224 - 1;

    // encode a uint112 as a UQ112x112
    function encode(uint112 y) internal pure returns (uint224 z) {
        z = uint224(y) * Q112; // never overflows
    }

    // divide a UQ112x112 by a uint112, returning a UQ112x112
    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {
        z = x / uint224(y);
    }

    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112
    function div(uint224 x, uint224 y) internal pure returns (uint224 z) {
        unchecked {
            require (y != 0);
            // xDec = x & 2**112-1 i.e 112 precision 112 bits of padding on the left
            uint224 xDec = x & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
             //xInt x *2**-112 i.e. 112 precision 112 bits of padding on the right
            uint224 xInt = x >> 112;
            //hi = xInt*2**224-1 /y ==> leave a full uint224 of bits to store the integer representation of the fractional decimal with 112.112 precision
            uint224 hi = xInt * (Q224 / y);
            //lo = xDec*2**224-1 /y ==> leave full uint224 of bits to store the integer representation of fractional decimal with 112.112 precision, right shift 112 bits since output should be the right 112 bits of precision on the output
            uint224 lo = (xDec * (Q224 / y)) >> 112;

            require (hi <= Q224 - lo);
            return hi+lo;
        }
    }

    // Computes x * y where x is a Q126.2 fixed point number and y is an unsigned integer, rounding down to the nearest integer.
    function mul126_2x256(uint128 x, uint256 y) internal pure returns (uint256) {
        unchecked {
            if (y == 0) return 0;

            uint256 lo = (uint256(x) *
                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 2; //last 128 bits of y, right shift 2 bits to remove the 2 decimal bits at the end
            uint256 hi = uint256(x) * (y >> 128); //first 128 bits of y

            require(hi <= 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF); //2^254 - 1
            hi <<= 2; //left shift 2 bits to account for the 2 decimal bits in x

            require(
                hi <=
                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -
                        lo
            ); //ensure hi + lo does not overflow
            return hi + lo;
        }
    }

    //computes x * y where x is a Q126.2 fixed point number and y is a Q112.112 fixed point number, returning a Q112.112 fixed point number
    function mul126_2x112_112(uint128 x, uint224 y) internal pure returns (uint224) {
        unchecked {
            uint256 result = (uint256(x) * y) >> 2;
            require(result <= Q224);
            return uint224(result);
        }
    }
    
}
