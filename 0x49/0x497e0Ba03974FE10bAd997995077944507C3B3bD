
// File: contracts/VestingIDORefund.sol
// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.10;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/Math.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

struct CreateVestingInput {
    address user;
    uint128 amount;
}

/**
 * @param rate percentage vested from total amount during the phase in BPS
 * @param endAt Time when phase ends
 * @param minimumClaimablePeriod for linear vesting it would be "1 seconds", for weekly westing it would be "1 weeks", if not set(set to zero) user will be able to claim only after phase ends
 */
struct Phase {
    uint256 rate;
    uint256 endAt;
    uint256 minimumClaimablePeriod;
}

/**
 * @title VestingIDO
 * @dev no user can claim while contract is in locked state
 */
contract VestingIDORefund is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    error VestingIsNotUnlocked();
    error NoZeroAddress(string param);
    error CannotReinitializeAfterFirstClaim();
    error NothingToClaimCurrentlyPleaseTryAgainLater();
    error DepositedAmountIsInsufficientPleaseDepositMore();
    error WrongInputParameters();
    error AlreadyUnlocked();
    error OnlyOneVestingPerAddress();
    error MustNotBeZero(string param);
    error NoActiveVesting();
    error EmptyInputArray();

    /**
     * @param amount Total amount allocated for user
     * @param amountClaimed Total amount claimed by user so far
     * @param lastClaimAt Timestamp from user last claim
     */
    struct UserVesting {
        bool init;
        bool requestedRefund;
        uint256 amount;
        uint256 amountClaimed;
        uint256 lastClaimAt;
    }

    uint256 public totalAmountAllocated; // Amount owner allocated for all users
    uint256 public totalAmountClaimed; // Amount claimed by all users
    uint256 public totalAmountRefundRequested; // Amount reserved for refund, requested by users

    uint256 public constant RATE_CONVERTER = 10000;

    IERC20 public vestedToken;

    string public name;
    bool public refundMode; 
    bool public requestedRefundWithdrawn;
    bool public refundWithdrawn;
    uint256 public startDateAt;
    uint256 public vestingEndAt;
    uint256 public claimableAtStart; // in BPS
    uint32  public refundGracePeriodDuration; // in seconds
    bool public airdroptedAtStart;
    Phase[] public phases;
    
    // it is hard to add user and then remove it if cancle requestRefund. SO here wew ill store all users
    // that requestedRefund. Later we will check flag in UserVesting
    address[] public refundRequestedUsersAtLeastOnce;

    mapping(address => UserVesting) public vestings;

    event NewVestingCreated(address indexed user, uint256 amount);

    event NewClaim(address indexed user, uint256 amountClaimed);

    event RefundRequested(address indexed user);

    event RefundRequestedPulledBack(address indexed user);

    event RefundRequestedWithdrawn(address indexed user, uint256 amount);

    event RefundForAllWithdrawn(address indexed user, uint256 amount);

    constructor(
        IERC20 _vestedToken,
        string memory _name,
        uint256 _startDateAt,
        uint256 _claimableAtStart,
        bool _airdroptedAtStart,
        Phase[] memory _phases,
        uint32 _refundGracePeriodDuration
    ) {
        _initialize(
            _vestedToken,
            _name,
            _startDateAt,
            _claimableAtStart,
            _airdroptedAtStart,
            _phases,
            _refundGracePeriodDuration
        );
    }

    function reinitialize(
        IERC20 _vestedToken,
        string memory _name,
        uint256 _startDateAt,
        uint256 _claimableAtStart,
        Phase[] calldata _phases,
        uint32 _refundGracePeriodDuration
    ) external onlyOwner {
        if (totalAmountClaimed != 0) {
            revert CannotReinitializeAfterFirstClaim();
        }

        _initialize(
            _vestedToken,
            _name,
            _startDateAt,
            _claimableAtStart,
            false,
            _phases,
            _refundGracePeriodDuration
        );
    }

    function _initialize(
        IERC20 _vestedToken,
        string memory _name,
        uint256 _startDateAt,
        uint256 _claimableAtStart,
        bool _airdroptedAtStart,
        Phase[] memory _phases,
        uint32 _refundGracePeriodDuration
    ) private {
        uint256 prevStartDate = _startDateAt;
        uint256 total = _claimableAtStart;
        for (uint256 i = 0; i < _phases.length; i++) {
            Phase memory phase = _phases[i];
            if (prevStartDate > phase.endAt) {
                // phases should be ordered ascending by end date and should not overlap
                revert WrongInputParameters();
            }

            total += phase.rate;

            prevStartDate = phase.endAt;
        }

        require(total == RATE_CONVERTER, "total == 10000");

        if (address(_vestedToken) == address(0)) {
            revert NoZeroAddress("_vestedToken");
        }

        name = _name;
        vestedToken = _vestedToken;
        startDateAt = _startDateAt;
        // set vesting end date to last phase end date, if there is not phases then set end date to start date(e.g. for 100% claim at TGE)
        vestingEndAt = _phases.length > 0
            ? _phases[_phases.length - 1].endAt
            : _startDateAt;
        claimableAtStart = _claimableAtStart;
        airdroptedAtStart = _airdroptedAtStart;
        // clear the phases array in case of reinitialization
        delete phases;
        for (uint256 i = 0; i < _phases.length; i++) {
            phases.push(_phases[i]);
        }

        refundGracePeriodDuration = _refundGracePeriodDuration;
    }

    function getNumberOfRefundRequestedUsersAtLeastOnce() public view returns (uint256) {
        return refundRequestedUsersAtLeastOnce.length;
    }

    function getRefundRequestedUsersAtLeastOnceVesting(uint256 index) public view returns (UserVesting memory userVesting) {
        address user = refundRequestedUsersAtLeastOnce[index];

        userVesting = vestings[user];
    }

    /**
     * @notice Move vesting to another address in case user lose access to his original account
     */
    function moveVesting(address from, address to) external onlyOwner {
        UserVesting memory vesting = vestings[from];
        if (vesting.amount - vesting.amountClaimed == 0) {
            revert NoActiveVesting();
        }
        if (vestings[to].amount > 0) {
            revert OnlyOneVestingPerAddress();
        }
        if (to == address(0)) {
            revert NoZeroAddress("to");
        }

        vestings[to] = vesting;
        delete vestings[from];
    }

    /**
     * @notice create vesting for user, only one vesting per user address
     * @dev owner needs to first deploy enough tokens to vesting contract address
     */
    function createVestings(
        CreateVestingInput[] calldata vestingsInput,
        bool depositCheck
    ) external onlyOwner {
        if (vestingsInput.length == 0) {
            revert EmptyInputArray();
        }
        uint256 totalDepositedAmount = getDepositedAmount();
        uint256 amountAllocated;

        for (uint64 i = 0; i < vestingsInput.length; i++) {
            amountAllocated += vestingsInput[i].amount;
        }

        if (airdroptedAtStart) {
            totalAmountClaimed +=
                (amountAllocated * claimableAtStart) /
                RATE_CONVERTER;
        }

        if (depositCheck) {
            // check if depositor have enough credit
            if (
                (totalDepositedAmount +
                    totalAmountClaimed -
                    totalAmountAllocated) < amountAllocated
            ) {
                revert DepositedAmountIsInsufficientPleaseDepositMore();
            }
        }

        for (uint64 i = 0; i < vestingsInput.length; i++) {
            _createVesting(vestingsInput[i]);
        }
    }

    /**
     * @dev can be called any amount of time after vesting contract is unlocked, tokens are vested each block after cliffEnd
     */
    function claim() external nonReentrant {
        require(!refundMode, "vesting is refunded");

        UserVesting storage vesting = vestings[msg.sender];
        require(!vesting.requestedRefund, "user req refund");
        if (vesting.amount - vesting.amountClaimed == 0) {
            revert NoActiveVesting();
        }

        uint256 claimableAmount = _claimable(vesting);

        if (claimableAmount == 0) {
            revert NothingToClaimCurrentlyPleaseTryAgainLater();
        }

        totalAmountClaimed += claimableAmount;
        vesting.amountClaimed += claimableAmount;
        vesting.lastClaimAt = block.timestamp;

        assert(vesting.amountClaimed <= vesting.amount);
        assert(totalAmountClaimed <= totalAmountAllocated);

        vestedToken.safeTransfer(msg.sender, claimableAmount);
        emit NewClaim(msg.sender, claimableAmount);
    }

    // return amount user can claim from locked tokens at the moment
    function claimable(address _user) external view returns (uint256 amount) {
        return _claimable(vestings[_user]);
    }

    function getDepositedAmount() public view returns (uint256 amount) {
        return vestedToken.balanceOf(address(this));
    }

        /**
     * @dev method which is used for user to request refund
     */
    function requestRefund() external nonReentrant {
        address user = _msgSender();
        UserVesting storage vesting = vestings[user];

        require(vesting.init, "user is not participating");
        require(vesting.amountClaimed == 0, "user already claimed");
        require(!vesting.requestedRefund, "already requested");
        require(block.timestamp <= (startDateAt + refundGracePeriodDuration), "refund period passed");

        vesting.requestedRefund = true;
        totalAmountRefundRequested += vesting.amount;
        totalAmountAllocated -= vesting.amount;
        refundRequestedUsersAtLeastOnce.push(user);
        
        emit RefundRequested(user);
    }

    /**
     * @dev method which is used for user to request refund
     */
    function pullBackRequestRefund() external nonReentrant {
        address user = _msgSender();
        UserVesting storage vesting = vestings[user];

        require(vesting.init, "user is not participating");
        require(vesting.amountClaimed == 0, "user already claimed");
        require(vesting.requestedRefund, "nothin to pull back");
        require(block.timestamp <= (startDateAt + refundGracePeriodDuration), "refund period passed");
        
        vesting.requestedRefund = false;
        totalAmountRefundRequested -= vesting.amount;
        totalAmountAllocated += vesting.amount;

        emit RefundRequestedPulledBack(user);
    }

    // create a vesting for an user
    function _createVesting(CreateVestingInput memory v) private {
        if (v.user == address(0)) {
            revert NoZeroAddress("user");
        }
        if (v.amount == 0) {
            revert MustNotBeZero("amount");
        }
        if (vestings[v.user].amount > 0) {
            revert OnlyOneVestingPerAddress();
        }

        totalAmountAllocated += v.amount;

        vestings[v.user] = UserVesting({
            init: true, 
            requestedRefund: false,
            amount: v.amount,
            amountClaimed: airdroptedAtStart
                ? (v.amount * claimableAtStart) / RATE_CONVERTER
                : 0,
            lastClaimAt: airdroptedAtStart ? startDateAt : 0
        });

        emit NewVestingCreated(v.user, v.amount);
    }

    function _claimable(UserVesting memory v)
        private
        view
        returns (uint256 amount)
    {
        if (block.timestamp < startDateAt) {
            // vesting has not started
            return 0;
        }

        uint256 amountLeft = v.amount - v.amountClaimed;
        // user already claimed everything
        if (amountLeft == 0) return 0;

        if (block.timestamp >= vestingEndAt) {
            // if vesting ended return everything left
            amount = amountLeft;
        } else {
            if (v.lastClaimAt == 0) {
                // if this is first claim also calculate amount available at start
                amount += (claimableAtStart * v.amount) / RATE_CONVERTER;
            }
            uint256 prevEndDate = startDateAt;
            for (uint256 i = 0; i < phases.length; i++) {
                Phase memory phase = phases[i];
                uint256 phaseLength = phase.endAt - prevEndDate;

                // if last claim time is larger than the end of phase then skip it, already calculated in previous claim
                if (v.lastClaimAt < phase.endAt) {
                    if (
                        block.timestamp >= phase.endAt &&
                        phase.minimumClaimablePeriod == 0
                    ) {
                        // if phase completely passed then calculate amount with every second in phase
                        amount += (v.amount * phase.rate) / RATE_CONVERTER;
                    } else if (phase.minimumClaimablePeriod != 0) {
                        uint256 start = Math.max(v.lastClaimAt, prevEndDate);
                        uint256 end = Math.min(block.timestamp, phase.endAt);
                        // only take full increments of minimumClaimablePeriod in calculation of amount
                        uint256 timePassed = end -
                            start -
                            ((end - start) % phase.minimumClaimablePeriod);

                        amount +=
                            (v.amount * phase.rate * timePassed) /
                            (phaseLength * RATE_CONVERTER);
                    }

                    if (block.timestamp < phase.endAt) {
                        // if current time is less than end of this phase then there is no need to calculate remaining phases
                        break;
                    }
                }
                prevEndDate = phase.endAt;
            }
        }

        amount = Math.min(amount, amountLeft);

        return Math.min(amount, getDepositedAmount());
    }

    /**
     * @dev Returns time until next vesting batch will be unlocked for vesting contract provided in arguments
     */
    function nextBatchAt() external view returns (uint256) {
        if (block.timestamp >= vestingEndAt) {
            return vestingEndAt;
        }

        // we assume all vesting contracts release at least some funds on start date/TGE
        if (block.timestamp < startDateAt) {
            return startDateAt;
        }

        uint256 nextBatchIn;
        uint256 prevEndDate = startDateAt;
        // iterate over phases until we find current phase contract does not returns phases length
        for (uint256 i = 0; block.timestamp > prevEndDate; i++) {
            Phase memory phase = phases[i];
            if (block.timestamp < phase.endAt) {
                // vesting per sec/block
                if (phase.minimumClaimablePeriod == 1) {
                    nextBatchIn = 1;
                } else if (phase.minimumClaimablePeriod == 0) {
                    // vested at the end of the phase
                    nextBatchIn = phase.endAt;
                } else {
                    // if the funds are released in batches in current phase every `minimumClaimablePeriod` time,
                    nextBatchIn =
                        block.timestamp +
                        phase.minimumClaimablePeriod -
                        ((block.timestamp - prevEndDate) %
                            phase.minimumClaimablePeriod);
                }
                break;
            }
            prevEndDate = phase.endAt;
        }

        return nextBatchIn;
    }

        /**
     * @dev withdraw toknes which requested refund. These tokens will be returned to the project and user will be enabled refund on fundraiseChain
     */
    function withdrawRequestRefundToken() external onlyOwner {
        require(!requestedRefundWithdrawn, "already withdrawn");
        require(block.timestamp > startDateAt + refundGracePeriodDuration, "refund period active");
        uint256 vestedbalance = vestedToken.balanceOf(address(this));
        require(vestedbalance >= totalAmountRefundRequested, "not enough tokens");

        requestedRefundWithdrawn = true;
        vestedToken.safeTransfer(msg.sender, totalAmountRefundRequested);

        emit RefundRequestedWithdrawn(msg.sender, totalAmountRefundRequested);
    }

    /**
     * @dev withdraw refund tokens. These tokens will be returned to project and user will be enabled refund on fundraiseChain
     */
    function withdrawRefundForAll() external onlyOwner {
        require(!refundWithdrawn, "already withdrawn");
        require(refundMode, "refund mode is off");

        refundWithdrawn = true;
        vestedToken.safeTransfer(msg.sender, vestedToken.balanceOf(address(this)));

        emit RefundForAllWithdrawn(msg.sender, totalAmountRefundRequested);
    }

    // @notice rescue any token accidentally sent to this contract
    function emergencyWithdrawToken(IERC20 token) external onlyOwner {
        token.safeTransfer(msg.sender, token.balanceOf(address(this)));
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Spend `amount` form the allowance of `owner` toward `spender`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a / b + (a % b == 0 ? 0 : 1);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

