
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/DataStore.sol
pragma solidity ^0.8.24;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/IDataStore.sol";

contract DataStore is IDataStore, Ownable {

	// Storage maps
	mapping(bytes => address) public addressStorage;
	mapping(bytes => bool) public booleanStorage;
	mapping(bytes => bytes32) public bytesStorage;
	mapping(bytes => int256) public intStorage;
	mapping(bytes => string) public stringStorage;
	mapping(bytes => uint256) public uintStorage;

	constructor(string[] memory addressKeys, address[] memory addressVals, string[] memory numberKeys, uint256[] memory numberVals) Ownable(msg.sender) {
		if(addressKeys.length != addressVals.length) revert();
		if(numberKeys.length != numberVals.length) revert();
		uint256 i;
		for( ; i < addressKeys.length; i++) {
			addressStorage[abi.encodePacked(addressKeys[i])] = addressVals[i];
		}
		for(i = 0; i < numberKeys.length; i++) {
			uintStorage[abi.encodePacked(numberKeys[i])] = numberVals[i];
		}
    }

    function getPlatformAddresses() external view returns (DataStoreAddressResponse memory addresses) {
        addresses = DataStoreAddressResponse({
            locker: addressStorage[abi.encodePacked("locker")],
            proofWallet: payable(addressStorage[abi.encodePacked("proofFeeAddress")]),
            proofStaking: payable(addressStorage[abi.encodePacked("proofStaking")]),
            proofPassNFT: addressStorage[abi.encodePacked("proofPassNFT")],
            router: addressStorage[abi.encodePacked("router")]
        });
    }

    function getLimits() external view returns (DataStoreLimitsResponse memory limits) {
        limits = DataStoreLimitsResponse({
            initMaxTx: uintStorage[abi.encodePacked("initMaxTx")],
            swapTokensAtAmount: uintStorage[abi.encodePacked("swapTokensAtAmount")],
            maxTxUpper: uintStorage[abi.encodePacked("maxTxUpper")],
            maxTxLower: uintStorage[abi.encodePacked("maxTxLower")],
            maxWalletUpper: uintStorage[abi.encodePacked("maxWalletUpper")],
            maxWalletLower: uintStorage[abi.encodePacked("maxWalletLower")],
            maxBuyFee: uintStorage[abi.encodePacked("maxBuyFee")],
            maxSellFee: uintStorage[abi.encodePacked("maxSellFee")],
            denominator: uintStorage[abi.encodePacked("denominator")]
        });
    }

	function getAddress(string calldata key) external view returns (address) {
		return addressStorage[abi.encodePacked(key)];
	}

    function getAddresses(string[] calldata keys) external view returns (address[] memory values) {
        values = new address[](keys.length);
        for(uint256 i; i < keys.length; i++) {
            values[i] = addressStorage[abi.encodePacked(keys[i])];
        }
	}

	function getBool(string calldata key) external view returns (bool) {
		return booleanStorage[abi.encodePacked(key)];
	}

    function getBools(string[] calldata keys) external view returns (bool[] memory values) {
        values = new bool[](keys.length);
        for(uint256 i; i < keys.length; i++) {
            values[i] = booleanStorage[abi.encodePacked(keys[i])];
        }
	}

	function getBytes(string calldata key) external view returns (bytes32) {
		return bytesStorage[abi.encodePacked(key)];
	}

    function getBytesMany(string[] calldata keys) external view returns (bytes32[] memory values) {
        values = new bytes32[](keys.length);
        for(uint256 i; i < keys.length; i++) {
            values[i] = bytesStorage[abi.encodePacked(keys[i])];
        }
	}

	function getInt(string calldata key) external view returns (int256) {
		return intStorage[abi.encodePacked(key)];
	}

    function getInts(string[] calldata keys) external view returns (int256[] memory values) {
        values = new int256[](keys.length);
        for(uint256 i; i < keys.length; i++) {
            values[i] = intStorage[abi.encodePacked(keys[i])];
        }
	}

	function getString(string calldata key) external view returns (string memory) {
		return stringStorage[abi.encodePacked(key)];
	}

    function getStrings(string[] calldata keys) external view returns (string[] memory values) {
        values = new string[](keys.length);
        for(uint256 i; i < keys.length; i++) {
            values[i] = stringStorage[abi.encodePacked(keys[i])];
        }
	}

	function getUint(string memory key) external view returns (uint256) {
		return uintStorage[abi.encodePacked(key)];
	}

    function getUints(string[] calldata keys) external view returns (uint256[] memory values) {
        values = new uint256[](keys.length);
        for(uint256 i; i < keys.length; i++) {
            values[i] = uintStorage[abi.encodePacked(keys[i])];
        }
	}

	function setAddress(string calldata key, address value) external onlyOwner {
		addressStorage[abi.encodePacked(key)] = value;
	}

	function setBool(string calldata key, bool value) external onlyOwner {
		booleanStorage[abi.encodePacked(key)] = value;
	}

	function setbytes(string calldata key, bytes32 value) external onlyOwner {
		bytesStorage[abi.encodePacked(key)] = value;
	}

	function setInt(string calldata key, int256 value) external onlyOwner {
		intStorage[abi.encodePacked(key)] = value;
	}

	function setString(string calldata key, string calldata value) external onlyOwner {
		stringStorage[abi.encodePacked(key)] = value;
	}

	function setUint(string calldata key, uint256 value) external onlyOwner {
		uintStorage[abi.encodePacked(key)] = value;
	}

	function deleteAddress(string calldata key) external onlyOwner {
		delete addressStorage[abi.encodePacked(key)];
	}

	function deleteBool(string calldata key) external onlyOwner {
		delete booleanStorage[abi.encodePacked(key)];
	}

	function deletebytes(string calldata key) external onlyOwner {
		delete bytesStorage[abi.encodePacked(key)];
	}

	function deleteInt(string calldata key) external onlyOwner {
		delete intStorage[abi.encodePacked(key)];
	}

	function deleteString(string calldata key) external onlyOwner {
		delete stringStorage[abi.encodePacked(key)];
	}

	function deleteUint(string calldata key) external onlyOwner {
		delete uintStorage[abi.encodePacked(key)];
	}

}

// File: contracts/interfaces/IDataStore.sol
// SPDX-License-Identifier: None

pragma solidity ^0.8.24;

interface IDataStoreResponse {
    struct DataStoreAddressResponse {
        address locker;
        address payable proofWallet;
        address payable proofStaking;
        address proofPassNFT;
        address router;
    }

    struct DataStoreLimitsResponse {
        uint initMaxTx;
        uint swapTokensAtAmount;
        uint maxTxUpper;
        uint maxTxLower;
        uint maxWalletUpper;
        uint maxWalletLower;
        uint maxBuyFee;
        uint maxSellFee;
        uint denominator;
    }
}

interface IDataStore is IDataStoreResponse {
    function getAddresses(string[] memory addrKeys) external view returns (address[] memory);
    function getUints(string[] memory uintKeys) external view returns (uint256[] memory);
    function getPlatformAddresses() external view returns (DataStoreAddressResponse memory);
    function getLimits() external view returns (DataStoreLimitsResponse memory);
}
