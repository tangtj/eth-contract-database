{"Address.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.0 \u003c0.9.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.0 \u003c0.9.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.0 \u003c0.9.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC721.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.0 \u003c0.9.0;\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.0 \u003c0.9.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"},"Mutex.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.0 \u003c0.9.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `Mutex` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\n\ncontract Mutex {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"Mutex: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity \u003e=0.8.0 \u003c0.9.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"staking.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\n/* \n    All Rights to this contract code is reserved by Wrinkle Werx Inc.\n    Reuse or redistribution of this contract code without explicit authorization and/or permission by Wrinkle Werx Inc. is strictly forbidden.\n    Requests for contract use permission can be submitted in writing to info@wrinklewerx.com\n*/\n\npragma solidity \u003e=0.8.0 \u003c0.9.0;\n\nimport \"./Ownable.sol\";\nimport \"./Mutex.sol\";\nimport \"./IERC20.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./Address.sol\";\n\ncontract ParaStaking is Ownable, Mutex, IERC721Receiver {\n    using Address for address;\n\n    // ----- STRUCTS ----- //\n    struct TokenInfo {\n        address collection;\n        uint256 tokenId;\n    }\n\n    struct StakeInfo {\n        uint256 id;\n        bool state;\n        uint256 amount;\n        uint256 startTime;\n        uint256 lockPeriod;\n        address staker;\n    }\n\n    struct RewardInfo {\n        uint256 amount;\n        uint256 updateTime;\n    }\n\n    struct UserInfo {\n        uint256 amount;\n        uint256 tokenCnt;\n        uint256 reward;\n        uint256[] stakes;\n    }\n\n    // ----- STATE VARIABLES ----- //\n    StakeInfo[] _stakes;  // array of all stakes\n    mapping(uint256 =\u003e TokenInfo[]) _tokens;  // indexing token id to array of token infos\n    mapping(uint256 =\u003e RewardInfo) _rewards;  // indexing token id to reward info\n    mapping(address =\u003e UserInfo) _users;  // indexing address to user info\n    mapping(address =\u003e uint256) _multipliers;  // indexing collection address to multiplier value\n\n    IERC20 _token;\n    uint256 _totalStake;\n    uint256 _totalToken;\n    uint256 _baseReward = 5000000 * (10 ** 18);\n    uint256 constant _denominator = 100;\n    bool public isUnlocked;\n    address public rewardPool;\n\n    // ----- CONSTRUCTOR ----- //\n    constructor(address token) {\n        _token = IERC20(token);\n        rewardPool = _msgSender();\n    }\n\n    // ----- EVENTS ----- //\n    event Stake(uint256 indexed id, address indexed account, uint256 amount, uint8 lockDays, TokenInfo[] tokens);\n    event Unstake(uint256 indexed id);\n    event LockedRewards(uint256 indexed updatedStakes);\n    event Claim(uint256 indexed id, uint256 amount);\n    event Update(uint256 indexed id, uint256 amount, uint256 updateTime);\n    \n    // ----- VIEWS ----- //\n\n    function stakeOf(address account) external view returns (uint256) {\n        return _users[account].amount;\n    }\n\n    function numOfToken(address account) external view returns (uint256) {\n        return _users[account].tokenCnt;\n    }\n\n    function rewardOf(address account) external view returns (uint256) {\n        return _users[account].reward;\n    }\n\n    function totalStake() external view returns (uint256) {\n        return _totalStake;\n    }\n\n    function totalToken() external view returns (uint256) {\n        return _totalToken;\n    }\n\n    function multiplierOf(address collection) external view returns (uint256) {\n        return _multipliers[collection];\n    }\n\n    function baseReward() external view returns (uint256) {\n        return _baseReward;\n    }\n\n    function getReward(uint256 id) external view returns (uint256) {\n        uint dayCnt = (block.timestamp - _rewards[id].updateTime) / 1 days;\n        uint256 reward = _rewards[id].amount + dayCnt * _calculateReward(id);\n        return reward;\n    }\n    // ----- MUTATION FUNCTIONS ----- //\n    function stake(uint256 amount, uint8 lockDays, address[] memory collections, uint256[] memory tokenIds) external {\n        require(amount \u003e 0, \"Stake: deposit zero\");\n        require(lockDays == 0 || lockDays == 30 || lockDays == 60 || lockDays == 90 || lockDays == 120, \"Stake: invalid lock option\");\n        require(collections.length == tokenIds.length, \"Stake: array length mismatch\");\n        require(tokenIds.length \u003c 21, \"Stake: token limit exceeds\");\n        require(_token.transferFrom(_msgSender(), address(this), amount), \"Stake: failed to transfer deposit\");\n\n        StakeInfo memory newStake;\n        newStake.id = _stakes.length;\n        newStake.state = true;\n        newStake.amount = amount;\n        newStake.startTime = block.timestamp;\n        newStake.lockPeriod = lockDays * 1 days;\n        newStake.staker = _msgSender();\n        \n        for(uint8 i; i \u003c collections.length; i++) {\n            require(IERC721(collections[i]).isApprovedForAll(_msgSender(), address(this)), \"Stake: unapproved collection\");\n            IERC721(collections[i]).safeTransferFrom(_msgSender(), address(this), tokenIds[i]);\n            _tokens[newStake.id].push(TokenInfo(collections[i], tokenIds[i]));\n        }\n\n        _stakes.push(newStake);\n        _rewards[newStake.id].updateTime = block.timestamp;\n        _totalStake += amount;\n        _totalToken += collections.length;\n        _users[_msgSender()].amount += amount;\n        _users[_msgSender()].tokenCnt += collections.length;\n        _users[_msgSender()].stakes.push(newStake.id);\n\n        emit Stake(newStake.id, _msgSender(), amount, lockDays, _tokens[newStake.id]);\n    }\n\n    function unstake(uint256 id) external nonReentrant {\n        require(_stakes[id].state, \"Unstake: invalid stake\");\n        require(_msgSender() == _stakes[id].staker, \"Unstake: caller is not staker\");\n        if(!isUnlocked)\n            require(block.timestamp \u003e _stakes[id].startTime + _stakes[id].lockPeriod, \"Unstake: lock is not expired\");\n        require(_token.transfer(_msgSender(), _stakes[id].amount), \"Unstake: failed to transfer tokens\");\n\n        if(block.timestamp \u003e _rewards[id].updateTime + 1 days)\n            _updateReward(id);\n\n        if(_rewards[id].amount \u003e 0) {\n            require(_token.transferFrom(rewardPool, _msgSender(), _rewards[id].amount), \"Claim: failed to transfer tokens\");\n            emit Claim(id, _rewards[id].amount);\n            _users[_msgSender()].reward -= _rewards[id].amount;\n            _rewards[id].amount = 0;\n        }\n\n        for(uint8 i; i \u003c _tokens[id].length; i++) {\n            IERC721(_tokens[id][i].collection).safeTransferFrom(address(this), _msgSender(), _tokens[id][i].tokenId);\n            delete _tokens[id][i];\n        }\n\n        _users[_msgSender()].amount -= _stakes[id].amount;\n        _users[_msgSender()].tokenCnt -= _tokens[id].length;\n        _totalStake -= _stakes[id].amount;\n        _totalToken -= _tokens[id].length;\n\n        _stakes[id].state = false;\n        _stakes[id].amount = 0;\n\n        emit Unstake(id);\n    }\n\n    function updateReward(uint256 id) external {\n        require(_msgSender() == _stakes[id].staker, \"Unstake: caller is not staker\");\n        require(_stakes[id].state, \"Update: invalid stake\");\n        require(block.timestamp \u003e _rewards[id].updateTime + 1 days, \"Update: early time for update\");\n\n        _updateReward(id);\n    }\n\n    function claimReward(uint256 id) external nonReentrant {\n        require(_msgSender() == _stakes[id].staker, \"Unstake: caller is not staker\");\n        require(_stakes[id].state, \"Claim: invalid stake\");\n        _updateReward(id);\n\n        require(_rewards[id].amount \u003e 0, \"Claim: no reward\");\n        require(_token.transferFrom(rewardPool, _msgSender(), _rewards[id].amount), \"Claim: failed to transfer token\");\n\n        emit Claim(id, _rewards[id].amount);\n        _users[_msgSender()].reward -= _rewards[id].amount;\n        _rewards[id].amount = 0;\n    }\n\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    // ----- INTERNAL FUNCTIONS ----- //\n    function _updateReward(uint256 id) internal {\n        require(_msgSender() == _stakes[id].staker, \"Unstake: caller is not staker\");\n        uint dayCnt = (block.timestamp - _rewards[id].updateTime) / 1 days;\n        uint256 reward = dayCnt * _calculateReward(id);\n        _rewards[id].amount += reward;\n        _rewards[id].updateTime += dayCnt * 1 days;\n        _users[_msgSender()].reward += reward;\n\n        \n\n        emit Update(id, reward, _rewards[id].updateTime);\n    }\n\n    function _lockReward(uint256 id) internal {\n        uint dayCnt = (block.timestamp - _rewards[id].updateTime) / 1 days;\n        uint256 reward = dayCnt * _calculateReward(id);\n        _rewards[id].amount += reward;\n        _rewards[id].updateTime += dayCnt * 1 days;\n        _users[_stakes[id].staker].reward += reward;\n\n        \n\n        emit Update(id, reward, _rewards[id].updateTime);\n    }\n\n    function _calculateReward(uint256 id) internal view returns (uint256) {\n        uint lockMultiplier = (_stakes[id].lockPeriod / 30 days) * 25;\n        uint tokenMultiplier;\n        for(uint8 i; i \u003c _tokens[id].length; i++) {\n            tokenMultiplier += _multipliers[_tokens[id][i].collection];\n        }\n        uint256 bonus = _stakes[id].amount * (lockMultiplier + tokenMultiplier) / _denominator;\n        return _baseReward * (_stakes[id].amount + bonus) / (_totalStake + bonus);\n    }\n\n    // ----- RESTRICTED FUNCTIONS ----- //\n    function lockRewards() external onlyOwner{\n        uint updatedStakes;\n        for(uint8 i; i \u003c _stakes.length; i++) {\n            if (_stakes[i].state) {\n                _lockReward(i);\n                updatedStakes++;\n\n            }\n            \n        }\n        emit LockedRewards(updatedStakes);\n\n        \n    }\n\n    function setBaseReward(uint256 value) external onlyOwner {\n        _baseReward = value;\n    }\n\n    function setMultiplier(address collection, uint256 value) external onlyOwner {\n        require(collection.isContract(), \"invalid address\");\n        _multipliers[collection] = value;\n    }\n\n    function unlock(bool flag) external onlyOwner {\n        isUnlocked = flag;\n    }\n\n    function setRewardPool(address account) external onlyOwner {\n        rewardPool = account;\n    }\n    \n    \n\n}\n"}}