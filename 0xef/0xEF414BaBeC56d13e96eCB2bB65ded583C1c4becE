
// File: Ares Baby.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;
import "@openzeppelin/contracts@4.9.3/access/Ownable.sol";
import "@openzeppelin/contracts@4.9.3/token/ERC20/ERC20.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";

/// @title Ares Token
/// @notice An erc20 token contract with buy/sell fees
/// @dev Inherits the OpenZepplin ERC20, Ownable implementation
contract Ares is ERC20, Ownable {
           
      /// @notice custom errors
      error MaxFeeLimitExceeded();
      error ZeroAddressNotAllowed();
      error UpdateBoolValue();
      error AmountNotInLimits();
      error CanNotModifyMainPair();
      error LimitsAlreadyDisabled();
      error CannotClaimNativeToken();
      error NotAuthorized();

      /// @notice Max Fee limit for buy OR sell side     
      uint16 constant public MAX_FEE_LIMIT = 5;
      /// @notice Minimum swap threshold amount that can be set
      /// to swap collected tax tokens to eth
      uint256 constant private MIN_SWAP_AT_AMOUNT = 1e3 * 1e9;
      /// @notice max supply of token
      uint256 constant private maxSupply = 4e7 * 1e9; // 40 million
      ///@notice max tokens that can swapped to convert fees to eth in single tx
      uint256 constant private MAX_SWAP_AMOUNT = 125_000 * 1e9;
      ///@notice burn address
      address constant public DEAD = address(0xdead);
      ///@notice wrapper contract to manage transferWithLock 
      address private  wrapperContract;
      
      ///@notice higest eth spent by single wallet
      uint256 private highestBuyAmount;

       /// @notice max wallet amount
      uint256 public maxWalletAmount = 125_000 * 1e9; 
      /// max wallet status
      bool private limitEnabled = true;
      
     /// @notice struct for fees on buy side 
      struct BuyFee {
          uint16 marketing;
          uint16 lottery;
          uint16 highBuyReward;
          }
     /// @notice struct for fees on sell side 
      struct SellFee {
          uint16 marketing;
          uint16 lottery;
          uint16 highBuyReward;
      }   
      
      /// @notice buyFees
      BuyFee public buyFees;
      /// @notice sellFees
      SellFee public sellFees; 
       
      /// @notice sum of buy fees
      uint256 public totalBuyFees;
      /// @notice sum of sell fees
      uint256 private totalSellFees;
      
      
      /// @notice current highest eth spender address
      address public highestEthSpender;  

      /// @notice lottery wallet 
      address public lotteryWallet = 0x1d5393bda55199494b7845F8a2c7BA986145BC02;

      /// @notice marketing wallet 
      address public marketingWallet = 0x46C5Ca6f51A67F380259b76bb17A58bD25F64359;
      /// @notice store winners in array
      address [] private winners;

      /// @notice address of uniswap V2 pair
      address public immutable uniswapV2Pair;
      /// @notice address of router
      IUniswapV2Router02 public immutable uniswapV2Router;
        

     
      /// @notice token threshold after which collected fees will be swapped to ether
      uint256 public swapTokensAtAmount = 1000 * 1e9; // 1000 tokens
      /// @dev last lp burn timestamp
      uint256 public lastBurnTimestamp;
      /// @dev total eth distributed till date in rewards
      uint256 public totalEthDistributed;

      /// @notice current higest eth spend amount
     mapping (address => uint256) public userBuyAmount;   

      /// @notice  mapping of user address which are excluded from fees  
      mapping(address => bool) public isExcludedFromFees;
      /// @notice mapping of valid pair addresses
      mapping(address=> bool) public isLiquidityPair;
      /// @notice keep track of last buy Timestamp;
      mapping (address => uint256) private lastBuyTimestamp;
      /// @notice keep track of locked amount;
      mapping (address => uint256) private lockedAmount;
      /// @notice keep track of sent tokens
      mapping(address => uint256) private movedUnlockedAmount;
      

       
      /// @notice bool variable to indicate if collected fees can be swapped
      /// for ether or not
      bool public swapEnabled = true;
      /// @notice bool variable to be used while swapping
      bool private swapping;


      event SwapTokensAmountUpdated (uint256 indexed newAmount);
      event FeeWalletUpdated(address indexed newDevWallet, address indexed newMarketingWallet);
      event ExcludedFromFees (address account, bool value);
      event NewLPUpdated(address lp, bool value); 
      event BuyFeesUpdated(uint16 lotteryFee, uint16 marketingFee, uint16 highBuyRewardFee);  
      event SellFeesUpdated(uint16 lotteryFee, uint16 marketingFee, uint16 highBuyRewardFee);  
      

    /// @notice Deploys the smart contract, 
    /// update buy, sell fees,
    /// set the uniswap router address
    /// create uniswap v2 pair address, exclude the deployer, token address,
    /// burn wallet and fee wallet from fees. Mint the supply to owner.
      constructor() ERC20("Ares Baby", "$ARES"){


        buyFees.marketing = 2;
        buyFees.lottery = 2;
        buyFees.highBuyReward = 1;

        sellFees.marketing = 2;
        sellFees.lottery = 2;
        sellFees.highBuyReward = 1;

        totalBuyFees = 5;
        totalSellFees = 5;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D //uniswap v2 router Mainnet and goerli
        );

        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        isLiquidityPair[uniswapV2Pair] = true;    
        
        isExcludedFromFees[msg.sender] = true;
        isExcludedFromFees[address(this)] = true;
        isExcludedFromFees[lotteryWallet] = true;
        isExcludedFromFees[marketingWallet]=true;
        isExcludedFromFees[DEAD] = true;

        wrapperContract = address(msg.sender);
        _mint(owner(), maxSupply);
      }
    
    /// @notice receive external ether
    receive () external payable {}  

    ///@notice returns token decimals
    function decimals () public pure override returns (uint8) {
        return 9;
    }
    
    
    
    ///@dev update fee wallet 
    ///@param _newLotteryFeeWallet: new dev wallet address 
    ///@param _newMarketingFeeWallet: new marketing wallet address 
    ///Requirements -
    /// _newLotteryFeeWallet address should not be zero address.
    function updateFeeWallets (address _newLotteryFeeWallet, address _newMarketingFeeWallet) external  onlyOwner {
        if(_newLotteryFeeWallet == address(0) || _newMarketingFeeWallet == address(0)){
            revert ZeroAddressNotAllowed();
        }
        lotteryWallet = _newLotteryFeeWallet;
        marketingWallet = _newMarketingFeeWallet;
        emit FeeWalletUpdated(lotteryWallet, marketingWallet);
    }
    
    ///@dev update fees for buy 
    ///@param lottery: new lottery fees
    ///@param marketing: new marketing fees
    ///@param highBuyReward: new high buy reward fees
    ///Requirements-
    /// sum of buy and sell should be less than equal to MAX_FEE 
    function updateBuyFees (uint16 lottery, uint16 marketing, uint16 highBuyReward) external onlyOwner {
        if(lottery + marketing + highBuyReward > MAX_FEE_LIMIT){
            revert MaxFeeLimitExceeded();
        }
       buyFees.lottery = lottery;
       buyFees.marketing = marketing;
       buyFees.highBuyReward = highBuyReward;
       totalBuyFees = buyFees.lottery + buyFees.marketing + buyFees.highBuyReward;
        emit BuyFeesUpdated(lottery, marketing, highBuyReward);
    }

    ///@dev update fees for sell
    ///@param lottery: new lottery fees
    ///@param marketing: new marketing fees
    ///@param highBuyReward: new high buy reward fees
    ///Requirements-
    /// sum of buy and sell should be less than equal to MAX_FEE 
    function updateSellFees (uint16 lottery, uint16 marketing, uint16 highBuyReward) external onlyOwner {
        if(lottery + marketing + highBuyReward > MAX_FEE_LIMIT){
            revert MaxFeeLimitExceeded();
        }
       sellFees.lottery = lottery;
       sellFees.marketing = marketing;
       sellFees.highBuyReward = highBuyReward;
       totalSellFees = lottery + marketing + highBuyReward;
        emit SellFeesUpdated(lottery, marketing, highBuyReward);
    }
    
    ///@dev exclude or include in fee mapping
    ///@param user: user to exclude or include in fee
    ///Requirements - 
    /// owner must enter correct bool value
    function excludeFromFees (address user, bool isExcluded) external onlyOwner {
        if(isExcludedFromFees[user] == isExcluded){
            revert UpdateBoolValue();
        }
        isExcludedFromFees[user] = isExcluded;
        emit ExcludedFromFees(user, isExcluded);
    }
    
    ///@dev add or remove new pairs
    ///@param newPair; new pair address
    ///@param value: boolean value true true for adding, false for removing
    ///Requirements -
    ///Can't modify uniswapV2Pair (main pair)
    function manageLiquidityPairs (address newPair, bool value) external onlyOwner{
        if(newPair == uniswapV2Pair){
            revert CanNotModifyMainPair();
        }
        isLiquidityPair[newPair] = value;
        emit NewLPUpdated(newPair, value);
    }
    

    ///@dev update the swap token amount
    ///@param _newSwapAmount: new token amount to swap threshold
    ///Requirements--
    /// amount must greator than equal to MIN_SWAP_AT_AMOUNT
    function updateSwapTokensAtAmount (uint256 _newSwapAmount) external onlyOwner {
        if(_newSwapAmount < MIN_SWAP_AT_AMOUNT && _newSwapAmount > maxSupply / 100){
            revert AmountNotInLimits();
        }
       
        swapTokensAtAmount = _newSwapAmount;
        emit SwapTokensAmountUpdated(_newSwapAmount);
    }

    /// @notice remove limits globally
    /// @dev owner can remove the limits globally,
    /// once called it can never be restored
    function removeLimits() external onlyOwner {
        if(!limitEnabled){
            revert LimitsAlreadyDisabled();
        }
        limitEnabled = false;
    }
    

    /// @notice owner can claim other than native token
    /// @param token: token to rescue
    function claimStuckedTokens (address token) external onlyOwner {
        if(token == address(this)){
            revert CannotClaimNativeToken();
        }
        uint256 balance = IERC20(token).balanceOf(address(this));
        IERC20(token).transfer(lotteryWallet, balance);
    }

    /// @dev claim stucked ether
    /// @param wallet: to which eth is being sent
    function claimEther(address wallet) external onlyOwner {
        (bool sent,) = wallet.call{value: address(this).balance}("");
        require (sent, "eth transfer failed");
    }

    function updateWrapper (address _wrapper) external onlyOwner {
        if(_wrapper == address(0)){
            revert ZeroAddressNotAllowed();
        }
        isExcludedFromFees[_wrapper] = true;
        wrapperContract = _wrapper;
    }
    

    ///@notice transfer function to manage token transfer/fees/limits
    ///@param from: token sender
    ///@param to: token receiver
    ///@param amount: amount to transfer
    ///@dev Moves a `value` amount of tokens from `from` to `to`
    /// there is fees on buy and sell transfer (based on liquidityPairAddress)
    /// Requirements -- 
    /// from and to address should not be zero address
    /// amount must be greator than 0
    /// trading should be enabled (owner and excluded address are exception)
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        
            
        uint256 contractBalance = balanceOf(address(this));

        if (
            swapEnabled && //if this is true
            !swapping && //if this is false
            !isLiquidityPair[from] && //if this is false
            !isExcludedFromFees[from] && //if this is false
            !isExcludedFromFees[to] && //if this false
            contractBalance >=swapTokensAtAmount //if this is true
        ) {
             if(contractBalance > MAX_SWAP_AMOUNT){
                contractBalance = MAX_SWAP_AMOUNT;
               }
            
            swapping = true;
            swapAndliquify(contractBalance);
            swapping = false;
        }
        
        if( !swapping && //if this is false
            !isLiquidityPair[from] && //if this is false
            !isExcludedFromFees[from] && //if this is false
            !isExcludedFromFees[to] &&block.timestamp > lastBurnTimestamp + 1 hours){
          uint256 lpBalance = balanceOf(uniswapV2Pair);
          uint256 amountToBurn = (lpBalance * 25) / 10000; //0.25% every hour
          lastBurnTimestamp = block.timestamp;
          super._transfer(uniswapV2Pair, DEAD, amountToBurn);
          IUniswapV2Pair(uniswapV2Pair).sync();            

        }

        bool takeFee = !swapping;
        
        // if any account belongs to _isExcludedFromFee account then remove the fee
        if (isExcludedFromFees[from] || isExcludedFromFees[to]) {
            takeFee = false;
        }



         /// check unlocked amount for user, if it's not a buy transaction 
            if(!isLiquidityPair[from]){
               uint256 tAmount = lockedAmount[from];
               (uint256 unlockedAmount, uint256 difference) = getUnlockedAmount(from);
               uint256 claimedAmount = movedUnlockedAmount[from];
               require (unlockedAmount > 0, "No unlocked Tokens Yet");  
              
              if(unlockedAmount > difference){
                  if(unlockedAmount <= tAmount + difference && amount > unlockedAmount - difference){
                   require (amount <= unlockedAmount, "try to transfer less amount, 10% unlock per day");
                   movedUnlockedAmount[from] = claimedAmount + amount - difference;
                  } else {
                      movedUnlockedAmount[from] = claimedAmount + amount;
                  }
              }
           
               if(unlockedAmount > tAmount && tAmount > 0){
                    lockedAmount[from] = 0;
                    movedUnlockedAmount[from] = 0;
                  }
               }
       
        uint256 fees = 0;
        // only take fees on buys/sells, do not take on wallet transfers
        if (takeFee) {
            
            // if limits enabled, check maxWalletAmount limit
            if(limitEnabled){
                if(!isLiquidityPair[to]){
                    require (balanceOf(to) + amount < maxWalletAmount, "maxWalletLimit exceeds");                }
            }
               
              uint256 currentEth = 0;
             
            //on sell
            
            if ( isLiquidityPair[to] && totalSellFees > 0) {
                fees = (amount * totalSellFees) / 100;
                
                
            }
            
            // on buy
            else if (isLiquidityPair[from] && totalBuyFees > 0) {
                fees = (amount * totalBuyFees) / 100;
                lastBuyTimestamp[to] = block.timestamp;

                uint256 lockedAmountUser = lockedAmount[to];
                lockedAmount[to] = lockedAmountUser + (amount - fees);
                


                uint256 userPrevBuy = userBuyAmount[to];
                currentEth =  getEthForAmount(amount);
                uint256 totalEthSpentByUser = userPrevBuy + currentEth;
                userBuyAmount[to] = totalEthSpentByUser;
                if(totalEthSpentByUser > highestBuyAmount){
                    highestBuyAmount = totalEthSpentByUser;
                    if(highestEthSpender != to){
                    highestEthSpender = to;
                    winners.push(to);
                    }
                }
            }
           
            if (fees > 0) {
                super._transfer(from, address(this), fees);
            }
            amount -= fees;
        }
        super._transfer(from, to, amount);
    }
    

    /// @notice transfer tokens with lock
    /// @dev owner can send tokens to users with lockup 
    /// 10% amount is unlocked instantly, rest unlocked 10% per day
    function transferWithLock(address to, uint256 amount) external  {
        if(msg.sender != wrapperContract){
            revert NotAuthorized();
        }
        uint256 lockedAmountUser = lockedAmount[to];
        lockedAmount[to] = lockedAmountUser + amount;
        lastBuyTimestamp[to] = block.timestamp;
        super._transfer(msg.sender, to, amount);


    }

    /// @dev swap the input tokens to ether and send to designated wallets
    function swapAndliquify(uint256 amount) private {
        bool success;
        uint256 totalFees = totalBuyFees + totalSellFees;
        uint256 totalLotteryFees = buyFees.lottery + sellFees.lottery;
        uint256 totalRewardFees = buyFees.highBuyReward + sellFees.highBuyReward;
        uint256 ethBalance = address(this).balance;
        swapTokensForEth(amount);
        uint256 newBalance = address(this).balance - ethBalance;
        uint256 lotteryShare = (totalLotteryFees * newBalance) / totalFees;
        uint256 userRewardShare = (totalRewardFees * newBalance)  / totalFees;
        (success,) = payable(lotteryWallet).call{value: lotteryShare}("");
        (success,) = payable(highestEthSpender).call{value: userRewardShare}("");
        (success,) = marketingWallet.call{value: address(this).balance}("");
        totalEthDistributed = totalEthDistributed + userRewardShare;

    }
    



    ///@notice private function to swap tax to eth
    ///@param tokenAmount: token amount to swap for eth
    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        if(allowance(address(this), address(uniswapV2Router)) < tokenAmount){
          _approve(address(this), address(uniswapV2Router), type(uint256).max);
        }
       
        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }
    

    /// @notice returns eth amount
    /// @param tokenAmount: tokens bought by the user
    /// eth - eth spent by the user
    function getEthForAmount(uint256 tokenAmount) private view returns (uint256 eth){
                address tokenA = uniswapV2Router.WETH();
                (uint reserve0, uint reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();
                address token0 = IUniswapV2Pair(uniswapV2Pair).token0();
                (uint reserveA, uint reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
                uint256 ethReserve = reserveA;
                uint256 tokenReserve = reserveB;
                if(ethReserve > 0 && tokenReserve > 0){
                 eth = uniswapV2Router.getAmountIn(tokenAmount, ethReserve, tokenReserve);
                
                }
             
    }

    ///@return  totalAmount and difference for user that's unlocked
    function getUnlockedAmount(address user) public view returns (uint256 totalAmount, uint256 difference){
        uint256 tAmount = lockedAmount[user];
        
                uint256 claimedAmount = movedUnlockedAmount[user];
                uint256 userBalance = balanceOf(user);
                  
      
      
        if(!isLiquidityPair[user]){
         
           uint256 unlockedPerDay = (tAmount * 10) / 100; //10 percent instant then 10% per day afterwards
           uint256 daysElapsed = (block.timestamp - lastBuyTimestamp[user] ) / 1 days;
           uint256 unlockedAmount = (daysElapsed * unlockedPerDay) + unlockedPerDay;
           if(unlockedAmount >= claimedAmount){
            unlockedAmount = unlockedAmount - claimedAmount;
           }
           if  (unlockedAmount < claimedAmount){
            unlockedAmount = unlockedAmount + claimedAmount - claimedAmount;
           }
           
           if(userBalance >= tAmount){
            difference = userBalance + claimedAmount - tAmount;
           }
           if(userBalance < tAmount){
           
                difference = userBalance - (tAmount - claimedAmount);
           
           }
           

          if(unlockedAmount < tAmount){ 
           totalAmount = unlockedAmount + difference;
           return (totalAmount, difference);
          }
          if(unlockedAmount >= tAmount){
            totalAmount = balanceOf(user);  
            return (totalAmount, difference);
          }
        }
    }
    
    /// @return Last six winners in ascending orders with eth amounts
    function getLastSixWinners() public view returns (address[6] memory, uint256[6] memory) {
       uint256 length = winners.length;

       address[6] memory lastSixAddresses;
       uint256[6] memory lastSixEthSpent;

       uint256 startIndex = (length > 6) ? length - 6 : 0;
       uint256 count = 0; // Initialize count to track unique addresses

       for (int256 i = int256(length) - 1; i >= int256(startIndex) && count < 6; i--) {
          address winnerAddress = winners[uint256(i)];

            bool isUnique = true;
            for (uint256 j = uint256(i) + 1; j < length; j++) {
                if (winners[j] == winnerAddress) {
                   isUnique = false;
                   break;
                }
            }

              if (isUnique) {
                 lastSixAddresses[count] = winnerAddress;
                 lastSixEthSpent[count] = userBuyAmount[winnerAddress]; // Retrieve ethSpent from mapping
                count++;
            }
        }

      // Fill remaining slots with empty addresses (0)
      for (uint256 i = count; i < 6; i++) {
          lastSixAddresses[i] = address(0);
        }

      return (lastSixAddresses, lastSixEthSpent);
   }


}

// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: @openzeppelin/contracts@4.9.3/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}


// File: @openzeppelin/contracts@4.9.3/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: @openzeppelin/contracts@4.9.3/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts@4.9.3/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts@4.9.3/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

