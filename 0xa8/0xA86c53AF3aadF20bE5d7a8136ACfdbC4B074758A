
// File: src/Staker.sol
//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗
//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║
//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║
//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║
//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║
//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝

pragma solidity 0.8.16;
//SPDX-License-Identifier: BUSL-1.1

import {IFarmer} from "interfaces/IFarmer.sol";
import {Owner} from "utils/Owner.sol";
import {IERC20} from "openzeppelin/token/ERC20/IERC20.sol";
import {SafeERC20} from "openzeppelin/token/ERC20/utils/SafeERC20.sol";
import {ERC20} from "openzeppelin/token/ERC20/ERC20.sol";
import {Pausable} from "openzeppelin/security/Pausable.sol";
import {ReentrancyGuard} from "openzeppelin/security/ReentrancyGuard.sol";
import {Errors} from "utils/Errors.sol";

/**
 * @title Warlord Staking contract
 * @author Paladin
 * @notice Staking system for Warlord to distribute yield & rewards,
 *         mints an ERC20 token representing user staked amounts.
 */
contract WarStaker is ERC20, ReentrancyGuard, Pausable, Owner {
  using SafeERC20 for IERC20;

  // Constants

  /**
   * @notice 1e18 scale
   */
  uint256 private constant UNIT = 1e18;
  /**
   * @notice Max value for BPS - 100%
   */
  uint256 private constant MAX_BPS = 10_000;
  /**
   * @notice Max value possible for an uint256
   */
  uint256 private constant MAX_UINT256 = 2 ** 256 - 1;

  /**
   * @notice Duration in second of a reward distribution
   */
  uint256 private constant DISTRIBUTION_DURATION = 604_800; // 1 week
  /**
   * @notice Ratio of the total reward amount to be in the queue before moving it to distribution
   */
  uint256 private constant UPDATE_REWARD_RATIO = 8500; // 85 %

  // Structs

  /**
   * @notice UserRewardState struct
   *   lastRewardPerToken: last update reward per token value
   *   accruedRewards: total amount of rewards accrued
   */
  struct UserRewardState {
    uint256 lastRewardPerToken;
    uint256 accruedRewards;
  }

  /**
   * @notice RewardState struct
   *   rewardPerToken: current reward per token value
   *   lastUpdate: last state update timestamp
   *   distributionEndTimestamp: timestamp of the end of the current distribution
   *   ratePerSecond: current distribution rate per second
   *   currentRewardAmount: current amount of rewards in the distribution
   *   queuedRewardAmount: current amount of reward queued for the distribution
   *   userStates: users reward state for the reward token
   */
  struct RewardState {
    uint256 rewardPerToken;
    uint128 lastUpdate;
    uint128 distributionEndTimestamp;
    uint256 ratePerSecond;
    uint256 currentRewardAmount;
    uint256 queuedRewardAmount;
    // user address => user reward state
    mapping(address => UserRewardState) userStates;
  }

  /**
   * @notice UserClaimableRewards struct
   *   reward: address of the reward token
   *   claimableAmount: amount of rewards accrued by the user
   */
  struct UserClaimableRewards {
    address reward;
    uint256 claimableAmount;
  }

  /**
   * @notice UserClaimedRewards struct
   *   reward: address of the reward token
   *   amount: amount of rewards claimed by the user
   */
  struct UserClaimedRewards {
    address reward;
    uint256 amount;
  }

  // Storage

  /**
   * @notice Address of the Warlord token
   */
  address public immutable warToken;

  /**
   * @notice List of reward token distributed by this contract (past & current)
   */
  address[] public rewardTokens;
  /**
   * @notice Reward state for each reward token
   */
  mapping(address => RewardState) public rewardStates;
  /**
   * @notice Address of Farmer contract for specific reward tokens
   */
  mapping(address => address) public rewardFarmers;
  /**
   * @notice Last indexes for reward token from Farmer contracts
   */
  mapping(address => uint256) public farmerLastIndex;

  /**
   * @notice Address allowed to deposit reward tokens
   */
  mapping(address => bool) public rewardDepositors;

  // Events

  /**
   * @notice Event emitted when staking
   */
  event Staked(address indexed caller, address indexed receiver, uint256 amount);
  /**
   * @notice Event emitted when unstaking
   */
  event Unstaked(address indexed owner, address indexed receiver, uint256 amount);

  /**
   * @notice Event emitted when rewards are claimed
   */
  event ClaimedRewards(address indexed reward, address indexed user, address indexed receiver, uint256 amount);

  /**
   * @notice Event emitted when a new Claimer is set for an user
   */
  event SetUserAllowedClaimer(address indexed user, address indexed claimer);

  /**
   * @notice Event emitted when a new reward is added
   */
  event NewRewards(address indexed rewardToken, uint256 amount, uint256 endTimestamp);

  /**
   * @notice Event emitted when a new reward depositor is added
   */
  event AddedRewardDepositor(address indexed depositor);
  /**
   * @notice Event emitted when a reward depositor is removed
   */
  event RemovedRewardDepositor(address indexed depositor);

  event SetRewardFarmer(address indexed rewardToken, address indexed farmer);

  // Modifiers

  /**
   * @notice Check that the caller is allowed to deposit rewards
   */
  modifier onlyRewardDepositors() {
    if (!rewardDepositors[msg.sender]) revert Errors.CallerNotAllowed();
    _;
  }

  // Constructor

  constructor(address _warToken) ERC20("Staked Warlord token", "stkWAR") {
    if (_warToken == address(0)) revert Errors.ZeroAddress();
    warToken = _warToken;
  }

  // View functions

  /**
   * @notice Get the last update timestamp for a reward token
   * @param reward Address of the reward token
   * @return uint256 : Last update timestamp
   */
  function lastRewardUpdateTimestamp(address reward) public view returns (uint256) {
    uint256 rewardEndTimestamp = rewardStates[reward].distributionEndTimestamp;
    // If the distribution is already over, return the timestamp of the end of distribution
    // to prevent from accruing rewards that do not exist
    return block.timestamp > rewardEndTimestamp ? rewardEndTimestamp : block.timestamp;
  }

  /**
   * @notice Get the list of all reward tokens
   * @return address[] : List of reward tokens
   */
  function getRewardTokens() external view returns (address[] memory) {
    return rewardTokens;
  }

  /**
   * @notice Get the current reward state of an user for a given reward token
   * @param reward Address of the reward token
   * @param user Address of the user
   * @return UserRewardState : User reward state
   */
  function getUserRewardState(address reward, address user) external view returns (UserRewardState memory) {
    return rewardStates[reward].userStates[user];
  }

  /**
   * @notice Get the current amount of rewards accrued by an user for a given reward token
   * @param reward Address of the reward token
   * @param user Address of the user
   * @return uint256 : amount of rewards accrued
   */
  function getUserAccruedRewards(address reward, address user) external view returns (uint256) {
    return rewardStates[reward].userStates[user].accruedRewards
      + _getUserEarnedRewards(reward, user, _getNewRewardPerToken(reward));
  }

  /**
   * @notice Get all current claimable amount of rewards for all reward tokens for a given user
   * @param user Address of the user
   * @return UserClaimableRewards[] : Amounts of rewards claimable by reward token
   */
  function getUserTotalClaimableRewards(address user) external view returns (UserClaimableRewards[] memory) {
    address[] memory rewards = rewardTokens;
    uint256 rewardsLength = rewards.length;
    UserClaimableRewards[] memory rewardAmounts = new UserClaimableRewards[](rewardsLength);

    // For each listed reward
    for (uint256 i; i < rewardsLength;) {
      // Add the reward token to the list
      rewardAmounts[i].reward = rewards[i];
      // And add the calculated claimable amount of the given reward
      // Accrued rewards from previous stakes + accrued rewards from current stake
      rewardAmounts[i].claimableAmount = rewardStates[rewards[i]].userStates[user].accruedRewards
        + _getUserEarnedRewards(rewards[i], user, _getNewRewardPerToken(rewards[i]));

      unchecked {
        ++i;
      }
    }
    return rewardAmounts;
  }

  // State-changing functions

  // Can give MAX_UINT256 to stake full balance
  /**
   * @notice Stake WAR tokens
   * @param amount Amount to stake
   * @param receiver Address of the address to stake for
   * @return uint256 : scaled amount for the deposit
   */
  function stake(uint256 amount, address receiver) external nonReentrant whenNotPaused returns (uint256) {
    // If given MAX_UINT256, we want to deposit the full user balance
    if (amount == MAX_UINT256) amount = IERC20(warToken).balanceOf(msg.sender);

    if (amount == 0) revert Errors.ZeroValue();
    if (receiver == address(0)) revert Errors.ZeroAddress();

    // Pull the tokens from the user
    IERC20(warToken).safeTransferFrom(msg.sender, address(this), amount);

    // Mint the staked tokens
    // It will also update the reward states for the user who's balance gonna change
    _mint(receiver, amount);

    emit Staked(msg.sender, receiver, amount);

    return amount;
  }

  // Can give MAX_UINT256 to unstake full balance
  /**
   * @notice Unstake WAR tokens
   * @param amount Amount to unstake
   * @param receiver Address to receive the tokens
   * @return uint256 : amount unstaked
   */
  function unstake(uint256 amount, address receiver) external nonReentrant returns (uint256) {
    // If given MAX_UINT256, we want to withdraw the full user balance
    if (amount == MAX_UINT256) amount = balanceOf(msg.sender);

    if (amount == 0) revert Errors.ZeroValue();
    if (receiver == address(0)) revert Errors.ZeroAddress();

    // Burn the staked tokens
    // It will also update the reward states for the user who's balance gonna change
    _burn(msg.sender, amount);

    // And send the tokens to the given receiver
    IERC20(warToken).safeTransfer(receiver, amount);

    emit Unstaked(msg.sender, receiver, amount);

    return amount;
  }

  /**
   * @notice Claim the accrued rewards for a given reward token
   * @param reward Address of the reward token
   * @param receiver Address to receive the rewards
   * @return uint256 : Amount of rewards claimed
   */
  function claimRewards(address reward, address receiver) external nonReentrant whenNotPaused returns (uint256) {
    if (reward == address(0)) revert Errors.ZeroAddress();
    if (receiver == address(0)) revert Errors.ZeroAddress();

    return _claimRewards(reward, msg.sender, receiver);
  }

  /**
   * @notice Claim all accrued rewards for all reward tokens
   * @param receiver Address to receive the rewards
   * @return UserClaimedRewards[] : Amounts of reward claimed
   */
  function claimAllRewards(address receiver) external nonReentrant whenNotPaused returns (UserClaimedRewards[] memory) {
    if (receiver == address(0)) revert Errors.ZeroAddress();

    return _claimAllRewards(msg.sender, receiver);
  }

  /**
   * @notice Update the reward state for a given reward token
   * @param reward Address of the reward token
   */
  function updateRewardState(address reward) external nonReentrant whenNotPaused {
    if (reward == address(0)) revert Errors.ZeroAddress();
    _updateRewardState(reward);
  }

  /**
   * @notice Update the reward state for all reward tokens
   */
  function updateAllRewardStates() external nonReentrant whenNotPaused {
    address[] memory _rewards = rewardTokens;
    uint256 length = _rewards.length;

    // For all reward token in the list, update the reward state
    for (uint256 i; i < length;) {
      _updateRewardState(_rewards[i]);

      unchecked {
        ++i;
      }
    }
  }

  // Reward Managers functions

  /**
   * @notice Add rewards to the distribution queue
   * @dev Set the amount of reward in the queue & push it to distribution if reaching the ratio
   * @param rewardToken Address of the reward token
   * @param amount Amount to queue
   * @return bool : success
   */
  function queueRewards(address rewardToken, uint256 amount)
    external
    nonReentrant
    whenNotPaused
    onlyRewardDepositors
    returns (bool)
  {
    if (amount == 0) revert Errors.ZeroValue();
    if (rewardToken == address(0)) revert Errors.ZeroAddress();

    RewardState storage state = rewardStates[rewardToken];

    // If the given reward token is new (no previous distribution),
    // add it to the reward list
    if (state.lastUpdate == 0) {
      rewardTokens.push(rewardToken);
    }

    // Update the reward token state before queueing new rewards
    _updateRewardState(rewardToken);

    // Get the total queued amount (previous queued amount + new amount)
    uint256 totalQueued = amount + state.queuedRewardAmount;

    // If there is no current distribution (previous is over or new reward token):
    // Start the new distribution directly without queueing the rewards
    if (block.timestamp >= state.distributionEndTimestamp) {
      _updateRewardDistribution(rewardToken, state, totalQueued);
      state.queuedRewardAmount = 0;

      return true;
    }

    // Calculate the remaining duration for the current distribution
    // and the ratio of queued rewards compared to total rewards (queued + remaining in current distribution)
    // state.distributionEndTimestamp - block.timestamp => remaining time in the current distribution
    uint256 currentRemainingAmount = state.ratePerSecond * (state.distributionEndTimestamp - block.timestamp);
    uint256 queuedAmountRatio = (totalQueued * MAX_BPS) / (totalQueued + currentRemainingAmount);

    // If 85% or more of the total rewards are queued, move them to distribution
    if (queuedAmountRatio >= UPDATE_REWARD_RATIO) {
      _updateRewardDistribution(rewardToken, state, totalQueued);
      state.queuedRewardAmount = 0;
    } else {
      state.queuedRewardAmount = totalQueued;
    }

    return true;
  }

  /**
   * @dev Update the distribution parameters for a given reward token
   * @param rewardToken Address of the reward token
   * @param state State of the reward token
   * @param rewardAmount Total amount ot distribute
   */
  function _updateRewardDistribution(address rewardToken, RewardState storage state, uint256 rewardAmount) internal {
    // Calculate the remaining duration of the current distribution (if not already over)
    // to calculate the amount fo rewards not yet distributed, and add them to the new amount to distribute
    if (block.timestamp < state.distributionEndTimestamp) {
      uint256 remainingRewards = state.ratePerSecond * (state.distributionEndTimestamp - block.timestamp);
      rewardAmount += remainingRewards;
    }
    // Calculate the new rate per second
    // & update the storage for the new distribution state
    state.ratePerSecond = rewardAmount / DISTRIBUTION_DURATION;
    state.currentRewardAmount = rewardAmount;
    state.lastUpdate = safe128(block.timestamp);
    uint256 distributionEnd = block.timestamp + DISTRIBUTION_DURATION;
    state.distributionEndTimestamp = safe128(distributionEnd);

    emit NewRewards(rewardToken, rewardAmount, distributionEnd);
  }

  // Internal functions

  function _beforeTokenTransfer(address from, address to, uint256 /*amount*/ ) internal override {
    if (from != address(0)) {
      _updateAllUserRewardStates(from);
    }
    if (to != address(0)) {
      _updateAllUserRewardStates(to);
    }
  }

  /**
   * @dev Calculate the new rewardPerToken value for a reward token distribution
   * @param reward Address of the reward token
   * @return uint256 : new rewardPerToken value
   */
  function _getNewRewardPerToken(address reward) internal view returns (uint256) {
    RewardState storage state = rewardStates[reward];

    // If no funds are deposited, we don't want to distribute rewards
    uint256 totalStakedAmount = totalSupply();
    if (totalStakedAmount == 0) return state.rewardPerToken;

    uint256 totalAccruedAmount;
    if (rewardFarmers[reward] == address(0)) {
      // Get the last update timestamp
      uint256 lastRewardTimestamp = lastRewardUpdateTimestamp(reward);
      if (state.lastUpdate == lastRewardTimestamp) return state.rewardPerToken;
      totalAccruedAmount = (lastRewardTimestamp - state.lastUpdate) * state.ratePerSecond;
    } else {
      uint256 currentFarmerIndex = IFarmer(rewardFarmers[reward]).getCurrentIndex();
      totalAccruedAmount = currentFarmerIndex - farmerLastIndex[reward];
    }

    // Calculate the increase since the last update
    return state.rewardPerToken + ((totalAccruedAmount * UNIT) / totalStakedAmount);
  }

  /**
   * @dev Calculate the amount of rewards accrued by an user since last update for a reward token
   * @param reward Address of the reward token
   * @param user Address of the user
   * @return uint256 : Accrued rewards amount for the user
   */
  function _getUserEarnedRewards(address reward, address user, uint256 currentRewardPerToken)
    internal
    view
    returns (uint256)
  {
    UserRewardState storage userState = rewardStates[reward].userStates[user];

    // Get the user staked balance
    uint256 userStakedAmount = balanceOf(user);

    if (userStakedAmount == 0) return 0;

    // If the user has a previous deposit (scaled balance is not null), calculate the
    // earned rewards based on the increase of the rewardPerToken value
    return (userStakedAmount * (currentRewardPerToken - userState.lastRewardPerToken)) / UNIT;
  }

  /**
   * @dev Update the reward token distribution state
   * @param reward Address of the reward token
   */
  function _updateRewardState(address reward) internal {
    RewardState storage state = rewardStates[reward];

    // Update the storage with the new reward state
    state.rewardPerToken = _getNewRewardPerToken(reward);
    state.lastUpdate = safe128(lastRewardUpdateTimestamp(reward));

    if (rewardFarmers[reward] != address(0)) {
      farmerLastIndex[reward] = IFarmer(rewardFarmers[reward]).getCurrentIndex();
    }
  }

  /**
   * @dev Update the user reward state for a given reward token
   * @param reward Address of the reward token
   * @param user Address of the user
   */
  function _updateUserRewardState(address reward, address user) internal {
    // Update the reward token state before the user's state
    _updateRewardState(reward);

    UserRewardState storage userState = rewardStates[reward].userStates[user];

    // Update the storage with the new reward state
    uint256 currentRewardPerToken = rewardStates[reward].rewardPerToken;
    userState.accruedRewards += _getUserEarnedRewards(reward, user, currentRewardPerToken);
    userState.lastRewardPerToken = currentRewardPerToken;
  }

  /**
   * @dev Update the reward state of the given user for all the reward tokens
   * @param user Address of the user
   */
  function _updateAllUserRewardStates(address user) internal {
    address[] memory _rewards = rewardTokens;
    uint256 length = _rewards.length;

    // For all reward token in the list, update the user's reward state
    for (uint256 i; i < length;) {
      _updateUserRewardState(_rewards[i], user);

      unchecked {
        ++i;
      }
    }
  }

  /**
   * @dev Claims rewards of an user for a given reward token and sends them to the receiver address
   * @param reward Address of reward token
   * @param user Address of the user
   * @param receiver Address to receive the rewards
   * @return uint256 : claimed amount
   */
  function _claimRewards(address reward, address user, address receiver) internal returns (uint256) {
    // Update all user states to get all current claimable rewards
    _updateUserRewardState(reward, user);

    UserRewardState storage userState = rewardStates[reward].userStates[user];

    // Fetch the amount of rewards accrued by the user
    uint256 rewardAmount = userState.accruedRewards;

    if (rewardAmount == 0) return 0;

    // Reset user's accrued rewards
    userState.accruedRewards = 0;

    // If the user accrued rewards, send them to the given receiver
    _sendRewards(reward, receiver, rewardAmount);

    emit ClaimedRewards(reward, user, receiver, rewardAmount);

    return rewardAmount;
  }

  /**
   * @dev Claims all rewards of an user and sends them to the receiver address
   * @param user Address of the user
   * @param receiver Address to receive the rewards
   * @return UserClaimedRewards[] : list of claimed rewards
   */
  function _claimAllRewards(address user, address receiver) internal returns (UserClaimedRewards[] memory) {
    address[] memory rewards = rewardTokens;
    uint256 rewardsLength = rewards.length;

    UserClaimedRewards[] memory rewardAmounts = new UserClaimedRewards[](rewardsLength);

    // Update all user states to get all current claimable rewards
    _updateAllUserRewardStates(user);

    // For each reward token in the reward list
    for (uint256 i; i < rewardsLength;) {
      UserRewardState storage userState = rewardStates[rewards[i]].userStates[user];

      // Fetch the amount of rewards accrued by the user
      uint256 rewardAmount = userState.accruedRewards;

      // Track the claimed amount for the reward token
      rewardAmounts[i].reward = rewards[i];
      rewardAmounts[i].amount = rewardAmount;

      // If the user accrued no rewards, skip
      if (rewardAmount == 0) {
        unchecked {
          ++i;
        }
        continue;
      }

      // Reset user's accrued rewards
      userState.accruedRewards = 0;

      // For each reward token, send the accrued rewards to the given receiver
      _sendRewards(rewards[i], receiver, rewardAmount);

      emit ClaimedRewards(rewards[i], user, receiver, rewardAmounts[i].amount);

      unchecked {
        ++i;
      }
    }

    return rewardAmounts;
  }

  /**
   * @dev Sends reward token to the given receiver. Send them from the Farmer for tokens listed with a Farmer contract
   * @param token Address of the token
   * @param receiver Address to receive the rewards
   * @param amount Amount to send
   */
  function _sendRewards(address token, address receiver, uint256 amount) internal {
    if (rewardFarmers[token] == address(0)) {
      IERC20(token).safeTransfer(receiver, amount);
    } else {
      IFarmer(rewardFarmers[token]).sendTokens(receiver, amount);
    }
  }

  // Admin functions

  /**
   * @notice Pause the contract
   */
  function pause() external onlyOwner {
    _pause();
  }

  /**
   * @notice Unpause the contract
   */
  function unpause() external onlyOwner {
    _unpause();
  }

  /**
   * @notice Add an address to the list of allowed reward depositors
   * @param depositor Address to deposit rewards
   */
  function addRewardDepositor(address depositor) external onlyOwner {
    if (depositor == address(0)) revert Errors.ZeroAddress();
    if (rewardDepositors[depositor]) revert Errors.AlreadyListedDepositor();

    rewardDepositors[depositor] = true;

    emit AddedRewardDepositor(depositor);
  }

  /**
   * @notice Remove an address from the list of allowed reward depositors
   * @param depositor Address to deposit rewards
   */
  function removeRewardDepositor(address depositor) external onlyOwner {
    if (depositor == address(0)) revert Errors.ZeroAddress();
    if (!rewardDepositors[depositor]) revert Errors.NotListedDepositor();

    rewardDepositors[depositor] = false;

    emit RemovedRewardDepositor(depositor);
  }

  /**
   * @notice Add an Farmer contract for a reward token
   * @param rewardToken Address of the reward token
   * @param farmer Address of the Farmer contract
   */
  function setRewardFarmer(address rewardToken, address farmer) external onlyOwner {
    if (rewardToken == address(0) || farmer == address(0)) revert Errors.ZeroAddress();
    address expectedToken = IFarmer(farmer).token();
    if (rewardToken != expectedToken) revert Errors.MismatchingFarmer();

    rewardFarmers[rewardToken] = farmer;
    rewardTokens.push(rewardToken);

    emit SetRewardFarmer(rewardToken, farmer);
  }

  // Maths

  function safe128(uint256 n) internal pure returns (uint128) {
    if (n > type(uint128).max) revert Errors.NumberExceed128Bits();
    return uint128(n);
  }
}


// File: src/interfaces/IFarmer.sol
// SPDX-License-Identifier: Unlicensed
pragma solidity 0.8.16;

interface IFarmer {
  // the index stored by the farmer represents all the recevied tokens
  function getCurrentIndex() external view returns (uint256);
  function sendTokens(address receiver, uint256 amount) external;
  function stake(address token, uint256 amount) external;
  function token() external view returns (address);
}


// File: src/utils/Owner.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

import "openzeppelin/access/Ownable.sol";

/**
 * @title Extend OZ Ownable contract
 */
/// @author Paladin

contract Owner is Ownable {
  address public pendingOwner;

  event NewPendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);

  error CannotBeOwner();
  error CallerNotPendingOwner();
  error OwnerAddressZero();

  function transferOwnership(address newOwner) public virtual override onlyOwner {
    if (newOwner == address(0)) revert OwnerAddressZero();
    if (newOwner == owner()) revert CannotBeOwner();
    address oldPendingOwner = pendingOwner;

    pendingOwner = newOwner;

    emit NewPendingOwner(oldPendingOwner, newOwner);
  }

  function acceptOwnership() public virtual {
    if (msg.sender != pendingOwner) revert CallerNotPendingOwner();
    address newOwner = pendingOwner;
    _transferOwnership(pendingOwner);
    pendingOwner = address(0);

    emit NewPendingOwner(newOwner, address(0));
  }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: lib/openzeppelin-contracts/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: src/utils/Errors.sol
pragma solidity 0.8.16;
//SPDX-License-Identifier: Unlicensed

library Errors {
  // Argument validation
  error ZeroAddress();
  error ZeroValue();
  error DifferentSizeArrays(uint256 size1, uint256 size2);
  error EmptyArray();
  error AlreadySet();
  error SameAddress();
  error InvalidParameter();

  // Ownership
  error CannotBeOwner();
  error CallerNotPendingOwner();
  error CallerNotAllowed();

  // Token
  error AllowanceUnderflow();

  // Controller
  error ListedLocker();
  error ListedFarmer();
  error InvalidFeeRatio();
  error HarvestNotAllowed();

  // Locker
  error NoWarLocker(); // _locker[token] == 0x0
  error LockerShutdown();
  error MismatchingLocker(address expected, address actual);

  // Minter
  error MintAmountBiggerThanSupply();

  // Redeemer
  error NotListedLocker();
  error InvalidIndex();
  error CannotRedeemYet();
  error AlreadyRedeemed();
  error InvalidWeightSum();

  // Staker
  error AlreadyListedDepositor();
  error NotListedDepositor();
  error MismatchingFarmer();

  // MintRatio
  error ZeroMintAmount();
  error SupplyAlreadySet();
  error RatioAlreadySet();

  // Harvestable
  error NotRewardToken();

  // IFarmer
  error IncorrectToken();
  error UnstakingMoreThanBalance();

  // Maths
  error NumberExceed128Bits();

  // AuraBalFarmer
  error SlippageTooHigh();

  // Admin
  error RecoverForbidden();

  // AuraLocker
  error DelegationRequiresLock();
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

