
// File: src/starknet/HypernativeModule.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

interface IStarkgateRegistry {
    function getBridge(address token) external view returns (address);
}

contract HypernativeModule is Ownable {
    address public updater;
    address[] public protectedTokens;
    IStarkgateRegistry internal registry;

    event WithrawalLimitSuccess(address bridgeAddress);
    event WithrawalLimitFailed(address bridgeAddress);   

    constructor(address[] memory _protectedTokens, address _registry, address _updater) Ownable(msg.sender) {
        registry = IStarkgateRegistry(_registry);
        updater = _updater;
        for (uint i = 0; i < _protectedTokens.length; ++i) {
            protectedTokens.push(_protectedTokens[i]);
        }
    }

    modifier onlyUpdater() {
        require(msg.sender == updater, "HypernativeModule: Only Updater");
        _;
    }

    modifier onlyOwnerOrUpdater() {
        require(msg.sender == updater || msg.sender == owner(), "HypernativeModule: Only Updater or Owner");
        _;
    }

    function applyWithrawalLimitForAll(uint256 minGas) public onlyOwner {
        uint256 protectedTokensLength = protectedTokens.length;
        for (uint256 i; i < protectedTokensLength; ++i) {
            if (gasleft() < minGas) {
                return;
            }
            address bridge = registry.getBridge(protectedTokens[i]);
            bytes memory callData = abi.encodeWithSignature("enableWithdrawalLimit(address)", protectedTokens[i]);
            (bool success, ) = bridge.call(callData);
            if (success) {
                emit WithrawalLimitSuccess(protectedTokens[i]);
            } else {
                emit WithrawalLimitFailed(protectedTokens[i]);
            }
        }
    }

    function addProtectedTokens(address[] memory _protectedTokens) public onlyUpdater {
        uint256 _protectedContractsLength = _protectedTokens.length;
        for (uint i = 0; i < _protectedContractsLength; ++i) {
            protectedTokens.push(_protectedTokens[i]);
        }
    }
    
    function replaceProtectedContracts(address[] memory _protectedTokens) public onlyUpdater {
        uint256 newProtectedTokensLength = _protectedTokens.length;
        assembly {
            sstore(protectedTokens.slot, newProtectedTokensLength)
        }
        for (uint i = 0; i < newProtectedTokensLength; ++i) {
            protectedTokens[i] = _protectedTokens[i];
        }
    }

    function changeRegistryAddress(address newRegistry) public onlyOwner {
        registry = IStarkgateRegistry(newRegistry);
    }

    function changeUpdater(address _updater) public onlyOwnerOrUpdater {
        updater = _updater;
    }

    function getRegistryAddress() public view returns (address) {
        return address(registry);
    }   
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

