
// File: src/TokenRouter.sol
pragma solidity 0.8.18;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "./BurnTokens.sol";
import "./FeeCalculator.sol";
import "./FeeOperator.sol";
import "./SafeERC20TransferFrom.sol";
import "./interfaces/ICircleTokenMessenger.sol";
import "./roles/Admin.sol";

/**
 * @title TokenRouter
 * @notice Calls Circle's TokenMessenger contract to burn tokens on source chain
 */
contract TokenRouter is FeeCalculator, FeeOperator, BurnTokens, Pausable {
    using SafeERC20 for IERC20;

    ICircleTokenMessenger public immutable circleTokenMessenger;
    address public immutable circleTokenMessengerAddress;

    // ============ Events ============
    /**
     * @notice Emitted when a DepositToken message is sent. Similar as DepositForBurn event in TokenMessenger contract
     * https://github.com/circlefin/evm-cctp-contracts/blob/master/src/TokenMessenger.sol
     * @param nonce unique nonce reserved by message
     * @param burnToken address of token burnt on source domain
     * @param amount deposit amount
     * @param depositor address where deposit is transferred from
     * @param mintRecipient address receiving minted tokens on destination domain as bytes32
     * @param destinationDomain destination domain
     * @param totalFee fee amount
     */
    event TransferTokens(
        uint64 nonce, 
        address burnToken, 
        uint256 amount, 
        address depositor, 
        address mintRecipient, 
        uint32 destinationDomain,
        uint256 totalFee
    );

    // Errors
    error InvalidTokenMessengerAddress();
    error InvalidMintRecipientAddress();
    error AmountLessThanFee();

    // ============ Constructor ============
    /**
     * @param circleTokenMessenger_ Cirle's TokenMessenger contract address
     * @param burnToken_ address of burnToken.
     */
    constructor (address circleTokenMessenger_, address burnToken_) BurnTokens(burnToken_) {
        if (circleTokenMessenger_ == address(0)) {
            revert InvalidTokenMessengerAddress();
        }

        circleTokenMessenger = ICircleTokenMessenger(circleTokenMessenger_);
        circleTokenMessengerAddress = circleTokenMessenger_;
    }

    // ============ External Functions  ============
    /**
     * @notice Collects fee from sender and calls Circle's TokenMessenger contract to burn tokens.
     * Emits a `TransferTokens` event.
     * @dev It defines same input parameters as depositForBurn in TokenMessenger contract
     * https://github.com/circlefin/evm-cctp-contracts/blob/master/src/TokenMessenger.sol
     * Modifications:
     * mintRecipient is address instead of bytes32
     * @param amount amount of tokens to burn
     * @param destinationDomain destination domain
     * @param mintRecipient address of mint recipient on destination domain
     * @param burnToken address of contract to burn deposited tokens, on local domain
     * @return nonce unique nonce reserved by message
     */
    function transferTokens(
        uint256 amount, 
        uint32 destinationDomain,
        address mintRecipient,
        address burnToken
    )
        external 
        nonReentrant 
        whenNotPaused 
        returns (uint64 nonce) 
    {
        if (mintRecipient == address(0)) {
            revert InvalidMintRecipientAddress();
        }
        if (!isSupportedBurnToken(burnToken)) {
            revert BurnTokens.UnSupportedBurnToken();
        }

        uint256 fee = calculateFee(amount, destinationDomain);
        if (amount <= fee) {
            revert AmountLessThanFee();
        }

        IERC20 token = IERC20(burnToken);

        uint256 transferredAmount = SafeERC20TransferFrom.safeTransferFrom(token, amount);

        uint256 bridgeAmt = transferredAmount - fee;
        token.safeIncreaseAllowance(circleTokenMessengerAddress, bridgeAmt);

        bytes32 mintRecipientBytes32 = bytes32(uint256(uint160(mintRecipient)));

        nonce = circleTokenMessenger.depositForBurn(bridgeAmt, destinationDomain, mintRecipientBytes32, burnToken);

        emit TransferTokens(nonce, burnToken, amount, msg.sender, mintRecipient, destinationDomain, fee);
    }

    /**
     * @notice pause the contract
     */
    function pause() public onlyAdmin {
        _pause();
    }

    /**
     * @notice unpause the contract 
     */
    function unpause() public onlyAdmin {
        _unpause();
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to
     * 0 before setting it to a non-zero value.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File: lib/openzeppelin-contracts/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: src/BurnTokens.sol
pragma solidity 0.8.18;

import "./roles/Admin.sol";

/**
 * @title BurnTokens
 * @notice BurnTokens contract keeps track of supported burn tokens
 */
contract BurnTokens is Admin {
    // ============ Storage ============
    // Mapping of burn token to whether it is a supported burn token
    mapping(address => bool) public supportedBurnTokens;

    // ============ Events ============
    /**
     * @notice Emitted when a burn token is added
     * @param token address of the burn token
     */
    event BurnTokenAdded(address token);
    /**
     * @notice Emitted when a burn token is removed
     * @param token address of the burn token
     */
    event BurnTokenRemoved(address token);

    // Errors
    error AlreadySupportedBurnToken();
    error InvalidTokenAddress();
    error UnSupportedBurnToken();
   
    // ============ Constructor ============
    /**
     * @notice Initializes the contract
     * @param burnToken contract address of the initial burn token
     */
    constructor(address burnToken) {
        addSupportedBurnToken(burnToken);
    }

    // ============ External Functions ============
    /**
     * @notice Adds a supported burn token
     * @param token address of the token contract
     */
    function addSupportedBurnToken(address token) public onlyAdmin {
        if (isSupportedBurnToken(token)) {
            revert AlreadySupportedBurnToken();
        }

        if (token == address(0)) {
            revert InvalidTokenAddress();
        }

        supportedBurnTokens[token] = true;
        
        emit BurnTokenAdded(token);
    }

    /**
     * @notice Removes a supported burn token
     * @param token address of the token contract
     */
    function removeSupportedBurnToken(address token) public onlyAdmin {
        if (!isSupportedBurnToken(token)) {
            revert UnSupportedBurnToken();
        }
        supportedBurnTokens[token] = false;

        emit BurnTokenRemoved(token);
    }

    /**
     * @notice Returns whether a token is a supported burn token
     * @param token address of the token contract
     * @return bool true if token is a supported burn token
     */
    function isSupportedBurnToken(address token) public view returns (bool) {
        return supportedBurnTokens[token];
    }
}

// File: src/FeeCalculator.sol
pragma solidity 0.8.18;

import "./roles/Admin.sol";

/**
 * @title FeeCalculator
 * @notice Calculates fee for transactions using fee configuration
 */
contract FeeCalculator is Admin {
    /**
     * @notice Fee configuration for a domain
     * @param maxFee maximum fee in USDC
     * @param minFee minimum fee in USDC
     * @param feePercentage fee percentage in basis point
     * @param txnFee transaction fee in USDC for broadcasting transaction on destination domain
     * @param supported if the domain is supported
     */
    struct FeeConfiguration {
        // maximum fee in USDC
        uint256 maxFee;
        // minimum fee in USDC
        uint256 minFee;
        // fee percentage in basis point
        // e.g. 1% is stored as 100
        uint32 feePercentage;
        // transaction fee is in USDC
        uint256 txnFee;
        // if the domain is supported
        bool supported;
    }

    // domain ID -> fee configuration
    mapping(uint32 => FeeConfiguration) private _feeConfigurations;

    // ============ Events ============
    /**
     * @notice Emitted when fee configuration is updated
     * @param domain domain ID
     * @param feeConfiguration fee configuration
     */
    event FeeConfigurationUpdated(uint32 domain, FeeConfiguration feeConfiguration);

    // Errors
    error UnsupportedDomain();
    error MaxFeeLessThanMinFee();
    error FeePercentageGreaterThanMax();

    // ============ Functions  ============
    /**
     * @notice Sets fee configurations for domains
     * @param domain domain ID
     * @param feeConfiguration fee configuration
     */
    function setFeeConfiguration(
        uint32 domain, 
        FeeConfiguration calldata feeConfiguration
    ) 
        public 
        onlyAdmin 
    {
        if (feeConfiguration.maxFee < feeConfiguration.minFee) {
            revert MaxFeeLessThanMinFee();
        }

        if (feeConfiguration.feePercentage > 1000) {
            revert FeePercentageGreaterThanMax();
        }

        _feeConfigurations[domain] = feeConfiguration;

        emit FeeConfigurationUpdated(domain, feeConfiguration);
    }

     /**
     * @notice Checks if a domain is supported
     * @param domain domain ID
     * @return true if the domain is supported
     */
    function isSupportedDomain(uint32 domain) public view returns (bool) {
        return _feeConfigurations[domain].supported;
    }

    /**
     * @notice Sets fee configuration for a domain
     * @param domain domain ID
     * @return FeeConfiguration fee configuration
     */
    function getFeeConfiguration(uint32 domain) public view returns (FeeConfiguration memory) {
        if (!isSupportedDomain(domain)) {
            revert UnsupportedDomain();
        }
        return _feeConfigurations[domain];
    }

    /**
     * @notice Get max fee for a domain
     * @param domain domain ID
     * @return uint256 maximum fee in USDC
     */
    function getMaxFee(uint32 domain) public view returns (uint256) {
        if (!isSupportedDomain(domain)) {
            revert UnsupportedDomain();
        }
        return _feeConfigurations[domain].maxFee;
    }

    /**
     * @notice Get min fee for a domain
     * @param domain domain ID
     * @return uint256 minimum fee in USDC
     */
    function getMinFee(uint32 domain) public view returns (uint256) {
        if (!isSupportedDomain(domain)) {
            revert UnsupportedDomain();
        }
        return _feeConfigurations[domain].minFee;
    }

    /**
     * @notice Get fee percentage for a domain
     * @param domain domain ID
     * @return uint32 fee percentage in basis point
     */
    function getFeePercentage(uint32 domain) public view returns (uint32) {
        if (!isSupportedDomain(domain)) {
            revert UnsupportedDomain();
        }
        return _feeConfigurations[domain].feePercentage;
    }

    /**
     * @notice Get transaction fee for a domain
     * @param domain domain ID
     * @return uint256 transaction fee in USDC
     */
    function getTxnFee(uint32 domain) public view returns (uint256) {
        if (!isSupportedDomain(domain)) {
            revert UnsupportedDomain();
        }
        return _feeConfigurations[domain].txnFee;
    }

    /**
     * @notice Calculates fee for a transaction
     * @param amount amount of USDC
     * @param destinationDomain destination domain ID
     * @return uint256 fee in USDC
     */
    function calculateFee(uint256 amount, uint32 destinationDomain) public view returns (uint256) {
        if (!isSupportedDomain(destinationDomain)) {
            revert UnsupportedDomain();
        }

        FeeConfiguration memory config = _feeConfigurations[destinationDomain];

        // percentage of the amount
        uint256 pctFee = amount * config.feePercentage;

        // round up if necessary
        pctFee = pctFee / 10_000 + (pctFee % 10_000 > 0 ? 1 : 0);

        uint256 maxFee = config.maxFee + config.txnFee;
        uint256 minFee = config.minFee + config.txnFee;

        // check if the percentage fee is within the range of maxFee and minFee
        if (pctFee < minFee) {
            return minFee;
        } else if (pctFee > maxFee) {
            return maxFee;
        }

        return pctFee;
    }
}


// File: src/FeeOperator.sol
pragma solidity 0.8.18;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "./roles/Admin.sol";

/**
 * @title FeeOperator
 * @notice Fee collectors collects fees from contract
 */
abstract contract FeeOperator is Admin, ReentrancyGuard {
    using SafeERC20 for IERC20;

    // Mapping of fee collector to whether it is a fee collector
    mapping(address => bool) private _feeCollectors;

    // ============ Events ============
    /**
     * @notice Emitted when a fee collector is added
     * @param feeCollector address of the fee collector
     */
    event FeeCollectorAdded(address feeCollector);
    /**
     * @notice Emitted when a fee collector is removed
     * @param feeCollector address of the fee collector
     */
    event FeeCollectorRemoved(address feeCollector);

    // Errors
    error NotFeeCollector();
    error InvalidFeeCollector();
    error AlreadyFeeCollector();

    // ============ Modifiers ============
    /**
     * @dev Throws if called by any account other than the fee collector
     */
    modifier onlyFeeCollector() {
        if (!isFeeCollector(msg.sender)) {
            revert NotFeeCollector();
        }
        _;
    }

    // ============ Constructor ============
    /**
     * @notice Initializes the contract
     * set the deployer as the first fee collector
     */
    constructor() {
        _feeCollectors[msg.sender] = true;
    }

    // ============ External Functions ============
    /**
     * @notice Collects fees from contract
     * @param token token address
     * @return bool true if success
     */
    function collectFees(address token) external nonReentrant onlyFeeCollector returns (bool) {
        uint256 balance = IERC20(token).balanceOf(address(this));
        IERC20(token).safeTransfer(msg.sender, balance);
        return true;
    }

    /**
     * @notice Adds a fee collector
     * @param feeCollector address of the fee collector
     */
    function addFeeCollector(address feeCollector) external onlyAdmin {
        if (feeCollector == address(0)) {
            revert InvalidFeeCollector();
        }
        if (isFeeCollector(feeCollector)) {
            revert AlreadyFeeCollector();
        }
        _feeCollectors[feeCollector] = true;
        emit FeeCollectorAdded(feeCollector);
    }

    /**
     * @notice Removes a fee collector
     * @param feeCollector address of the fee collector
     */
    function removeFeeCollector(address feeCollector) external onlyAdmin {
        if (!isFeeCollector(feeCollector)) {
            revert NotFeeCollector();
        }
        _feeCollectors[feeCollector] = false;
        emit FeeCollectorRemoved(feeCollector);
    }

     /**
     * @notice Returns the fee amount of each token
     * @param token token address
     * @return uint256 token balance
     */
    function getFeeAmounts(address token) external view returns (uint256) {
        return IERC20(token).balanceOf(address(this));
    }

    /**
     * @notice Returns whether an account is a fee collector
     * @param account address of the account
     * @return bool true if account is a fee collector
     */
    function isFeeCollector(address account) public view returns (bool) {
        return _feeCollectors[account];
    }
}

// File: src/SafeERC20TransferFrom.sol
pragma solidity 0.8.18;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

/**
 * @dev Provides a wrapper used for calling an ERC20 transferFrom method
 * to receive tokens to a contract from msg.sender.
 *
 * Checks the balance of the recipient before and after the call to transferFrom, and
 * returns balance increase. Designed for safely handling ERC20 "fee on transfer" and "burn on transfer" implementations.
 *
 * Note: A reentrancy guard must always be used when calling token.safeTransferFrom in order to
 * prevent against possible "before-after" pattern vulnerabilities.
 */
library SafeERC20TransferFrom {
    using SafeERC20 for IERC20;

    error BalanceNotIncreased();

    function safeTransferFrom(
        IERC20 erc20,
        uint256 amount
    ) internal returns (uint256) {
        uint256 balanceBefore = erc20.balanceOf(address(this));
        erc20.safeTransferFrom(msg.sender, address(this), amount);
        uint256 balanceAfter = erc20.balanceOf(address(this));

        if (balanceAfter <= balanceBefore) {
            revert BalanceNotIncreased();
        }

        return balanceAfter - balanceBefore;
    }
}

// File: src/interfaces/ICircleTokenMessenger.sol
pragma solidity 0.8.18;

// This is from Circle's TokenMessenger contract
// https://github.com/circlefin/evm-cctp-contracts/blob/master/src/TokenMessenger.sol
interface ICircleTokenMessenger {
    /**
    * @notice Deposits and burns tokens from sender to be minted on destination domain.
    * Emits a `DepositForBurn` event.
    * @dev reverts if:
    * - given burnToken is not supported
    * - given destinationDomain has no CircleBridge registered
    * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance
    * to this contract is less than `amount`.
    * - burn() reverts. For example, if `amount` is 0.
    * - MessageTransmitter returns false or reverts.
    * @param amount amount of tokens to burn
    * @param destinationDomain destination domain (ETH = 0, AVAX = 1)
    * @param mintRecipient address of mint recipient on destination domain
    * @param burnToken address of contract to burn deposited tokens, on local domain
    * @return nonce unique nonce reserved by message
    */
    function depositForBurn(
        uint256 amount,
        uint32 destinationDomain,
        bytes32 mintRecipient,
        address burnToken
    ) external returns (uint64 nonce);
}

// File: src/roles/Admin.sol
pragma solidity 0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title Admin
 * @notice Allows contract owner to add/remove admins
 */
contract Admin is Ownable {
    // Mapping of admin to whether it is an admin
    mapping(address => bool) private _admins;
    // Number of admins
    uint32 private _adminCount;

    // ============ Events ============
    /**
     * @notice Emitted when an admin is added
     * @param admin address of the admin
     */
    event AdminAdded(address admin);
    /**
     * @notice Emitted when an admin is removed
     * @param admin address of the admin
     */
    event AdminRemoved(address admin);

    // Errors
    error NotAdmin();
    error InvalidAdminAddress();
    error AlreadyAdmin();
    error CannotRemoveLastAdmin();

    // ============ Modifiers ============
    /**
     * @dev Throws if called by any account other than the admin
     */
    modifier onlyAdmin() {
        if (!isAdmin(msg.sender)) {
            revert NotAdmin();
        }
        _;
    }

    // ============ Constructor ============
    /**
     * @notice Initializes the contract
     * set the deployer as the first admin
     */
    constructor() {
        addAdmin(msg.sender);
    }

    // ============ Functions ============
    /**
     * @notice Adds an admin
     */
    function addAdmin(address account) public onlyOwner {
        if (account == address(0)) {
            revert InvalidAdminAddress();
        }
        if (isAdmin(account)) {
            revert AlreadyAdmin();
        }
        _admins[account] = true;
        _adminCount += 1;
        emit AdminAdded(account);
    }

    /**
     * @notice Removes an admin when there is more than one admin
     */
    function removeAdmin(address account) public onlyOwner {
        if (_adminCount == 1) {
            revert CannotRemoveLastAdmin();
        }

        if (!isAdmin(account)) {
            revert NotAdmin();
        }

        _admins[account] = false;
        _adminCount -= 1;
        emit AdminRemoved(account);
    }

    /**
     * @notice Returns whether an account is an admin
     * @param account address of the account
     * @return bool true if account is an admin
     */
    function isAdmin(address account) public view returns (bool) {
        return _admins[account];
    }
} 

// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

