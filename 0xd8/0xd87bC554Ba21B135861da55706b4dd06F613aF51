
// File: src/Router.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import { UniswapV2Library } from "src/libraries/UniswapV2Library.sol";

import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { ReentrancyGuard } from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

import { IWETH } from "src/interfaces/IWETH.sol";
import { IRouter } from "src/interfaces/IRouter.sol";
import { IPonzioTheCat } from "src/interfaces/IPonzioTheCat.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { IUniswapV2Pair } from "src/interfaces/UniswapV2/IUniswapV2Pair.sol";
import { IUniswapV2Router02 } from "src/interfaces/UniswapV2/IUniswapV2Router02.sol";

/**
 * @title Router
 * @dev This contract is responsible for handling token swaps and liquidity provisions on a UniswapV2 pair.
 */
contract Router is IRouter, ReentrancyGuard {
    using SafeERC20 for IPonzioTheCat;
    using SafeERC20 for IERC20;

    /// @inheritdoc IRouter
    IERC20 public immutable LP_TOKEN;
    /// @inheritdoc IRouter
    IPonzioTheCat public immutable PONZIO;
    /// @notice the address of the Uniswap V2 Router
    address internal constant UNISWAPV2_ROUTER_ADDR = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    /// @notice the address of the WETH token
    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

    constructor(address lpToken, address ponzioTheCatAddress) {
        LP_TOKEN = IERC20(lpToken);
        PONZIO = IPonzioTheCat(ponzioTheCatAddress);
    }

    /* -------------------------------------------------------------------------- */
    /*                             external functions                             */
    /* -------------------------------------------------------------------------- */

    /// @inheritdoc IRouter
    function updateSupplyAndAddLiquidity(
        uint256 amountWETHDesired,
        uint256 amountPonzioDesired,
        uint256 amountETHMin,
        uint256 amountPonzioMin,
        address to
    ) external payable nonReentrant returns (uint256 amountPonzio_, uint256 amountETH_, uint256 liquidity_) {
        PONZIO.updateTotalSupply();

        (amountPonzio_, amountETH_, liquidity_) = _handlePairAndAddLiquidity(
            amountWETHDesired, amountPonzioDesired, amountETHMin, amountPonzioMin, to, msg.sender
        );
    }

    /// @inheritdoc IRouter
    function swap(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline)
        external
        payable
        nonReentrant
    {
        if (path.length < 2) {
            revert Router_invalidPath(path);
        }

        PONZIO.updateTotalSupply();

        if (path[0] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
            if (msg.value == 0) {
                revert Router_valueNeeded();
            }

            path[0] = WETH_ADDR;
            IUniswapV2Router02(UNISWAPV2_ROUTER_ADDR).swapExactETHForTokensSupportingFeeOnTransferTokens{
                value: msg.value
            }(amountOutMin, path, to, deadline);
        } else {
            if (msg.value != 0) {
                revert Router_valueNotNeeded();
            }

            IERC20(path[0]).safeTransferFrom(msg.sender, address(this), amountIn);
            IERC20(path[0]).forceApprove(UNISWAPV2_ROUTER_ADDR, amountIn);

            if (path[path.length - 1] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
                path[path.length - 1] = WETH_ADDR;
                IUniswapV2Router02(UNISWAPV2_ROUTER_ADDR).swapExactTokensForETHSupportingFeeOnTransferTokens(
                    amountIn, amountOutMin, path, to, deadline
                );
            } else {
                IUniswapV2Router02(UNISWAPV2_ROUTER_ADDR).swapExactTokensForTokensSupportingFeeOnTransferTokens(
                    amountIn, amountOutMin, path, to, deadline
                );
            }
        }
    }

    /* -------------------------------------------------------------------------- */
    /*                             internal functions                             */
    /* -------------------------------------------------------------------------- */

    /**
     * @notice Calculates liquidity to add to the Uniswap pair for Ponzio and WETH.
     * @param amountPonzioDesired The amount of Ponzio the user wants to add as liquidity.
     * @param amountWETHDesired The amount of WETH the user wants to add as liquidity.
     * @param amountPonzioMin The minimum amount of Ponzio the user wants to add as liquidity.
     * @param amountWETHMin The minimum amount of WETH the user wants to add as liquidity.
     * @return amountPonzio_ The actual amount of Ponzio added as liquidity.
     * @return amountWETH_ The actual amount of WETH added as liquidity.
     */
    function _calcLiquidityToAdd(
        uint256 amountPonzioDesired,
        uint256 amountWETHDesired,
        uint256 amountPonzioMin,
        uint256 amountWETHMin
    ) internal view returns (uint256 amountPonzio_, uint256 amountWETH_) {
        address token0 = WETH_ADDR < address(PONZIO) ? WETH_ADDR : address(PONZIO);

        // slither-disable-next-line unused-return
        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(address(LP_TOKEN)).getReserves();
        (uint256 reservePonzio, uint256 reserveWETH) =
            address(PONZIO) == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

        uint256 amountWETHOptimal = UniswapV2Library.quote(amountPonzioDesired, reservePonzio, reserveWETH);

        if (amountWETHOptimal <= amountWETHDesired) {
            if (amountWETHMin > amountWETHOptimal) {
                revert Router_insufficientAmount();
            }

            (amountPonzio_, amountWETH_) = (amountPonzioDesired, amountWETHOptimal);
        } else {
            uint256 amountPonzioOptimal = UniswapV2Library.quote(amountWETHDesired, reserveWETH, reservePonzio);

            if (amountPonzioOptimal > amountPonzioDesired) {
                revert Router_liquidityError();
            }
            if (amountPonzioMin > amountPonzioOptimal) {
                revert Router_insufficientAmount();
            }

            (amountPonzio_, amountWETH_) = (amountPonzioOptimal, amountWETHDesired);
        }
    }

    /**
     * @notice Handle the pair address and add liquidity to it.
     * @param amountWETHDesired The amount of WETH the user wants to add as liquidity.
     * @param amountPonzioDesired The amount of Ponzio token the user wants to add as liquidity.
     * @param amountETHMin The minimum amount of ETH/WETH the user wants to add as liquidity.
     * @param amountPonzioMin The minimum amount of Ponzio token the user wants to add as liquidity.
     * @param to The address to which the liquidity tokens will be minted.
     * @param from The address from which the tokens will be transferred.
     * @return amountPonzio_ The actual amount of Ponzio token added as liquidity.
     * @return amountETH_ The actual amount of token A added as liquidity.
     * @return liquidity_ The amount of liquidity tokens minted.
     */
    function _handlePairAndAddLiquidity(
        uint256 amountWETHDesired,
        uint256 amountPonzioDesired,
        uint256 amountETHMin,
        uint256 amountPonzioMin,
        address to,
        address from
    ) internal returns (uint256 amountPonzio_, uint256 amountETH_, uint256 liquidity_) {
        if (msg.value == 0) {
            (amountPonzio_, amountETH_) =
                _calcLiquidityToAdd(amountPonzioDesired, amountWETHDesired, amountPonzioMin, amountETHMin);

            IERC20(WETH_ADDR).safeTransferFrom(from, address(LP_TOKEN), amountETH_);
            PONZIO.safeTransferFrom(from, address(LP_TOKEN), amountPonzio_);

            liquidity_ = IUniswapV2Pair(address(LP_TOKEN)).mint(to);
        } else {
            (amountPonzio_, amountETH_) = _calcLiquidityToAdd(amountPonzioDesired, msg.value, amountPonzioMin, amountETHMin);

            IWETH(WETH_ADDR).deposit{ value: amountETH_ }();
            IERC20(WETH_ADDR).safeTransfer(address(LP_TOKEN), amountETH_);
            PONZIO.safeTransferFrom(from, address(LP_TOKEN), amountPonzio_);

            liquidity_ = IUniswapV2Pair(address(LP_TOKEN)).mint(to);

            // refund dust eth, if any
            if (msg.value > amountETH_) {
                (bool success,) = msg.sender.call{ value: msg.value - amountETH_ }("");
                if (!success) {
                    revert Router_refundFailed();
                }
            }
        }
    }
}


// File: src/libraries/UniswapV2Library.sol
pragma solidity >=0.5.0;

import { IUniswapV2Pair } from "src/interfaces/UniswapV2/IUniswapV2Pair.sol";

library SafeMath {
    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require((z = x + y) >= x, "ds-math-add-overflow");
    }

    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require((z = x - y) <= x, "ds-math-sub-underflow");
    }

    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");
    }
}

library UniswapV2Library {
    using SafeMath for uint256;

    // returns sorted token addresses, used to handle return values from pairs sorted in this order
    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");
        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");
    }

    // calculates the CREATE2 address for a pair without making any external calls
    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
        (address token0, address token1) = sortTokens(tokenA, tokenB);
        pair = address(
            uint160(
                uint256(
                    keccak256(
                        abi.encodePacked(
                            hex"ff",
                            factory,
                            keccak256(abi.encodePacked(token0, token1)),
                            hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" // init code hash
                        )
                    )
                )
            )
        );
    }

    // fetches and sorts the reserves for a pair
    function getReserves(address factory, address tokenA, address tokenB)
        internal
        view
        returns (uint256 reserveA, uint256 reserveB)
    {
        (address token0,) = sortTokens(tokenA, tokenB);
        // slither-disable-next-line unused-return
        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
    }

    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset
    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {
        require(amountA > 0, "UniswapV2Library: INSUFFICIENT_AMOUNT");
        require(reserveA > 0 && reserveB > 0, "UniswapV2Library: INSUFFICIENT_LIQUIDITY");
        amountB = amountA.mul(reserveB) / reserveA;
    }
}


// File: node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: src/interfaces/IWETH.sol
pragma solidity >=0.5.0;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IWETH is IERC20 {
    function deposit() external payable;
    function transfer(address to, uint256 value) external returns (bool);
    function withdraw(uint256) external;
    function approve(address guy, uint256 wad) external returns (bool);
}


// File: src/interfaces/IRouter.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import { IPonzioTheCat } from "src/interfaces/IPonzioTheCat.sol";
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IRouter {
    /// @notice Revert when the user sent a value but it wasn't needed
    error Router_valueNotNeeded();

    /// @notice Revert when no value was added to the transaction but it was needed
    error Router_valueNeeded();

    /**
     * @notice Revert when the user passes an invalid path (length < 2).
     * @param path the invalid array of addresses
     */
    error Router_invalidPath(address[] path);

    /// @notice Revert when the refund in addLiquidity fails.
    error Router_refundFailed();

    /// @notice Revert when the amount isn't enough in addLiquidity.
    error Router_insufficientAmount();

    /// @notice Revert when the calculation of liquidity to add fails.
    error Router_liquidityError();

    /**
     * @notice Returns the address of the staking token.
     * @return IERC20 address of the staking token
     */
    function LP_TOKEN() external view returns (IERC20);

    /**
     * @notice Returns the address of the Ponzio.
     * @return IPonzioTheCat address of the Ponzio
     */
    function PONZIO() external view returns (IPonzioTheCat);

    /**
     * @notice Update the supply of Ponzio and add liquidity to the pair.
     * @param amountWETHDesired The amount of WETH the user wants to add as liquidity.
     * @param amountPonzioDesired The amount of Ponzio token the user wants to add as liquidity.
     * @param amountETHMin The minimum amount of ETH/WETH the user wants to add as liquidity.
     * @param amountPonzioMin The minimum amount of Ponzio token the user wants to add as liquidity.
     * @param to The address to which the liquidity tokens will be minted.
     * @return amountPonzio_ The actual amount of Ponzio token added as liquidity.
     * @return amountETH_ The actual amount of ETH (or equivalent) added as liquidity.
     * @return liquidity_ The amount of liquidity tokens minted.
     * @dev amountWETHDesired = 0 when adding liquidity with ETH
     */
    function updateSupplyAndAddLiquidity(
        uint256 amountWETHDesired,
        uint256 amountPonzioDesired,
        uint256 amountETHMin,
        uint256 amountPonzioMin,
        address to
    ) external payable returns (uint256 amountPonzio_, uint256 amountETH_, uint256 liquidity_);

    /**
     * @notice Swaps a certain `amountIn` of a token for another token, ensuring a minimum output `amountOutMin`.
     * @param amountIn The amount of input tokens to be sent.
     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.
     * @param path An array of token addresses. The path[0] address is the input token and the last address is the
     * output token.
     * @param to The address to send the output tokens to.
     * @param deadline The time after which the swap is invalid.
     *
     * @dev :
     * This function supports both ETH and ERC20 tokens as input and output. The address
     * 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE is used as a placeholder for ETH.
     * If the input token is ETH, it is replaced with the actual WETH address and
     * `swapExactETHForTokensSupportingFeeOnTransferTokens` is called.
     * If the output token is ETH, it is replaced with the actual WETH address and
     * `swapExactTokensForETHSupportingFeeOnTransferTokens` is called.
     * Otherwise, `swapExactTokensForTokensSupportingFeeOnTransferTokens` is called.
     *
     * If there is any ETH balance left in the contract, it is sent back to the caller.
     *
     * Requirements:
     * - The `path` must have at least two addresses.
     * - The sender must have approved this contract to spend the input tokens.
     */
    function swap(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline)
        external
        payable;
}


// File: src/interfaces/IPonzioTheCat.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.25;

import { IERC20Rebasable } from "src/interfaces/IERC20Rebasable.sol";
import { IUniswapV2Pair } from "src/interfaces/UniswapV2/IUniswapV2Pair.sol";

interface IPonzioTheCat is IERC20Rebasable {
    /// @notice Error code is thrown when the contract is being initialized a 2nd time.
    error PONZIO_alreadyInitialized();

    /// @notice Error code thrown in setFeesCollector when the contract has not been initialized yet.
    error PONZIO_notInitialized();

    /// @notice Error code thrown in setFeesCollector when the new feesCollector is the zero address.
    error PONZIO_feeCollectorZeroAddress();

    /**
     * @notice Emitted when the max shares are reached.
     * @param timestamp The timestamp at which the maximum is reached.
     */
    event MaxSharesReached(uint256 timestamp);

    /**
     * @notice Emitted FeesCollector changes.
     * @param feesCollector The new feesCollector.
     * It's ok to set the feesCollector to the zero address, in which case no fees will be collected.
     */
    event FeesCollectorSet(address indexed feesCollector);

    /**
     * @notice Emitted when the Uniswap V2 pair address is set.
     * @param uniV2PoolPair The new uniV2PoolPair.
     */
    event UniV2PoolPairSet(address indexed uniV2PoolPair);

    /**
     * @notice Emitted when an account is blacklisted for UpdateTotalSupply.
     * @param account The account that is blacklisted.
     * @param value The new value of the blacklist.
     */
    event BlacklistForUpdateSupplySet(address indexed account, bool indexed value);

    /**
     * @notice Emitted when the total supply is updated.
     * @param oldTotalSupply The old total supply.
     * @param newTotalSupply The new total supply.
     * @param oldTotalShare The old total share.
     * @param newTotalShare The new total share.
     * @param fees The fees collected.
     */
    event TotalSupplyUpdated(
        uint256 oldTotalSupply, uint256 newTotalSupply, uint256 oldTotalShare, uint256 newTotalShare, uint256 fees
    );

    /**
     * @notice Initial supply of the token.
     * @return The initial supply of the token.
     */
    function INITIAL_SUPPLY() external view returns (uint256);

    /**
     * @notice Time between each halving.
     * @return The time between each halving.
     */
    function HALVING_EVERY() external view returns (uint256);

    /**
     * @notice Time between each debasing.
     * @return The time between each debasing.
     */
    function DEBASE_EVERY() external view returns (uint256);

    /**
     * @notice Number of debasing per halving.
     * @return The number of debasing per halving.
     */
    function NB_DEBASE_PER_HALVING() external view returns (uint256);

    /**
     * @notice Minimum total supply. When the total supply reaches this value, it can't go lower.
     * @return The minimum total supply.
     */
    function MINIMUM_TOTAL_SUPPLY() external view returns (uint256);

    /**
     * @notice The time at which the contract was deployed.
     * @return The time at which the contract was deployed.
     */
    function DEPLOYED_TIME() external view returns (uint256);

    /**
     * @notice Fees collected on each debasing, in FEES_BASE percent.
     * @return The fees collected on each debasing.
     */
    function FEES_STAKING() external view returns (uint256);

    /**
     * @notice The fee base used for FEES_STAKING
     * @return The fee base
     */
    function FEES_BASE() external view returns (uint256);

    /**
     * @notice The address that collects the fees (the staking contract)
     * @return The address that collects the fees
     */
    function feesCollector() external view returns (address);

    /**
     * @notice returns if the max shares are reached.
     * @return True if the max shares are reached, false otherwise.
     * @dev The max shares are reached when the total of shares is about to overflow.
     * When reached, fees are not collected anymore.
     */
    function maxSharesReached() external view returns (bool);

    /**
     * @notice The Uniswap V2 pair to sync when debasing.
     * @return The Uniswap V2 pair.
     */
    function uniswapV2Pair() external view returns (IUniswapV2Pair);

    /**
     * @notice Changes the Uniswap V2 pair address.
     * @param uniV2PoolAddr_ The new Uniswap V2 pair address.
     * @dev Set the Uniswap V2 pair address to zero address to disable syncing.
     */
    function setUniswapV2Pair(address uniV2PoolAddr_) external;

    /**
     * @notice Changes the fees collector.
     * @param feesCollector_ The new fees collector.
     */
    function setFeesCollector(address feesCollector_) external;

    /**
     * @notice Blacklist an address for UpdateTotalSupply.
     * @param addrToBlacklist The address to blacklist.
     * @param value The new value of the blacklist.
     */
    function setBlacklistForUpdateSupply(address addrToBlacklist, bool value) external;

    /**
     * @notice Initialize the contract by setting the fees collector and staking the first amount of tokens.
     * @param feesCollector_ The address that will collect the fees.
     * @param uniV2PoolAddr_ The address of the uniswap V2 pool.
     */
    function initialize(address feesCollector_, address uniV2PoolAddr_) external;

    /**
     * @notice Return the real-time balance of an account after an UpdateTotalSupply() call.
     * @param account_ The account to check the balance of.
     * @return balance_ The real-time balance of the account.
     * @dev This function will only return the right balance if the feesCollector is set.
     */
    function realBalanceOf(address account_) external view returns (uint256 balance_);

    /**
     * @notice Compute the total supply and the fees to collect.
     * @return totalSupply_ The new total supply.
     * @return fees_ The fees to collect.
     */
    function computeSupply() external view returns (uint256 totalSupply_, uint256 fees_);

    /**
     * @notice Compute the total shares, supply and the fees to collect.
     * @return totalShares_ The new total shares.
     * @return totalSupply_ The new total supply.
     * @return fees_ The fees to collect.
     */
    function computeNewState() external view returns (uint256 totalShares_, uint256 totalSupply_, uint256 fees_);
}


// File: node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: src/interfaces/UniswapV2/IUniswapV2Pair.sol
// SPDX-License-Identifier: Unlicense
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint256);

    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
        external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint256);
    function price1CumulativeLast() external view returns (uint256);
    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);
    function burn(address to) external returns (uint256 amount0, uint256 amount1);
    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: src/interfaces/UniswapV2/IUniswapV2Router02.sol
// SPDX-License-Identifier: Unlicense
pragma solidity >=0.6.2;

import "src/interfaces/UniswapV2/IUniswapV2Router01.sol";

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}


// File: node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: node_modules/@openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: src/interfaces/IERC20Rebasable.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.25;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { IERC20Permit } from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol";

interface IERC20Rebasable is IERC20, IERC20Permit {
    /**
     * @notice returns the precision factor for shares.
     * @return The precision factor for shares.
     */
    function SHARES_PRECISION_FACTOR() external view returns (uint256);

    /**
     * @notice returns the total shares.
     * @return The total shares.
     */
    function totalShares() external view returns (uint256);

    /**
     * @notice returns the share of the user.
     * @param user The address of the user to get the share of.
     * @return The share of the user.
     */
    function sharesOf(address user) external view returns (uint256);

    /**
     * @notice Transfer tokens to a specified address by specifying the share amount.
     * @param to The address to transfer the tokens to.
     * @param shares The amount of shares to be transferred.
     * @return True if the transfer was successful, revert otherwise.
     */
    function transferShares(address to, uint256 shares) external returns (bool);

    /**
     * @notice Transfer shares from a specified address to another specified address.
     * @param from The address to transfer the shares from.
     * @param to The address to transfer the shares to.
     * @param shares The amount of shares to be transferred.
     * @return True if the transfer was successful, revert otherwise.
     * @dev This function tries to update the total supply by calling `updateTotalSupply()`
     */
    function transferSharesFrom(address from, address to, uint256 shares) external returns (bool);

    /**
     * @notice update the total supply, compute the debase accordingly and transfer the fees to the feesCollector.
     * @dev This function is already called at each approval and transfer. It needs to be implemented by a child
     * contract
     */
    function updateTotalSupply() external;

    /**
     * @notice Convert tokens to shares.
     * @param amount The amount of tokens to convert to shares.
     * @return shares_ The number of shares corresponding to the tokens.
     */
    function tokenToShares(uint256 amount) external view returns (uint256 shares_);

    /**
     * @notice Convert tokens to shares given the new total shares and total supply.
     * @param amount The amount of tokens to convert to shares.
     * @param newTotalShares The new total shares.
     * @param newTotalSupply The new total supply.
     * @return shares_ The number of shares corresponding to the tokens.
     */
    function tokenToShares(uint256 amount, uint256 newTotalShares, uint256 newTotalSupply)
        external
        view
        returns (uint256 shares_);

    /**
     * @notice Convert shares to tokens.
     * @param shares The amount of shares to convert to tokens.
     * @return tokenAmount_ The amount of tokens corresponding to the shares.
     */
    function sharesToToken(uint256 shares) external view returns (uint256 tokenAmount_);

    /**
     * @notice Convert shares to tokens given the new total shares and total supply.
     * @param shares The amount of shares to convert to tokens.
     * @param newTotalShares The new total shares.
     * @param newTotalSupply The new total supply.
     * @return tokenAmount_ The amount of tokens corresponding to the shares.
     */
    function sharesToToken(uint256 shares, uint256 newTotalShares, uint256 newTotalSupply)
        external
        view
        returns (uint256 tokenAmount_);
}


// File: src/interfaces/UniswapV2/IUniswapV2Router01.sol
// SPDX-License-Identifier: Unlicense
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);
    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);
    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);
    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)
        external
        payable
        returns (uint256[] memory amounts);
    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)
        external
        payable
        returns (uint256[] memory amounts);

    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);
    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)
        external
        pure
        returns (uint256 amountOut);
    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)
        external
        pure
        returns (uint256 amountIn);
    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

