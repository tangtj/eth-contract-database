
// File: contracts/FSX.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.8;
/*
______ _       _____           _
|  ___(_)     /  ___|         | |
| |_   _ _ __ \ `--.  ___ __ _| | ___ _ __
|  _| | | '_ \ `--. \/ __/ _` | |/ _ \ '__|
| |   | | | | /\__/ / (_| (_| | |  __/ |
\_|   |_|_| |_\____/ \___\__,_|_|\___|_|

At FinScaler, our mission is to revolutionize the DeFi landscape by providing secure,
scalable, and efficient financial services.

FinScaler integrates zk-Rollups, homomorphic encryption,
and artificial intelligence (AI) to create a scalable, secure,
and efficient decentralized financial ecosystem.

Website: http://finscaler.xyz/
WhitePaper: https://jumpshare.com/s/ysJlNdlfAw5GDlofBiJA
X/Twitter: https://x.com/FinScaler
*/

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this;
        return msg.data;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    unchecked {
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
    }

        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
    unchecked {
        _balances[sender] = senderBalance - amount;
    }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _createInitialSupply(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() external virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IDexRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
    external
    payable
    returns (
        uint256 amountToken,
        uint256 amountETH,
        uint256 liquidity
    );
}

interface IDexFactory {
    function createPair(address tokenA, address tokenB)
    external
    returns (address pair);
}

contract FSX is ERC20, Ownable {
    bool private swapping;
    uint256 public swapTokensAtAmount;
    address public treasuryAddress;

    uint256 public constant buyFee = 5;
    uint256 public constant sellFee = 5;

    mapping (address => bool) private _isExcludedFromFees;

    IDexRouter public immutable uniswapV2Router;
    IDexFactory public immutable uniswapV2Factory;
    address public immutable WETH;
    address public uniswapV2Pair;
    mapping (address => bool) public automatedMarketMakerPairs;

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event ExcludeFromFees(address indexed account, bool isExcluded);
    event UpdatedTreasuryAddress(address indexed newWallet);

    event FeesSwapped(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 ethSent,
        address to
    );

    event TransferForeignToken(address token, uint256 amount);
    event SwapTokensAtAmountSet(uint256 swapTokensAtAmount);

    constructor(
        address uniswapV2RouterAddress
    ) ERC20("FinScaler", "FSX") {
        uint256 totalSupply = 100_000_000 * 1e18;
        swapTokensAtAmount = totalSupply * 50 / 100_000;

        uniswapV2Router = IDexRouter(uniswapV2RouterAddress);
        uniswapV2Factory = IDexFactory(uniswapV2Router.factory());
        WETH = uniswapV2Router.WETH();

        treasuryAddress = msg.sender;
        excludeFromFees(msg.sender, true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);
        excludeFromFees(treasuryAddress, true);

        _createInitialSupply(msg.sender, totalSupply);
    }

    function createPool() public onlyOwner {
        uniswapV2Pair = uniswapV2Factory.createPair(address(this), WETH);
        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);
    }

    function updateSwapThreshold(uint256 newAmount) public onlyOwnerOrTreasury {
        swapTokensAtAmount = newAmount * (10**18);
        emit SwapTokensAtAmountSet(swapTokensAtAmount);
    }

    function transferForeignToken(address _token, address _to) public onlyOwnerOrTreasury returns (bool _sent) {
        require(_token != address(0), "_token address cannot be 0");
        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));
        _sent = IERC20(_token).transfer(_to, _contractBalance);
        emit TransferForeignToken(_token, _contractBalance);
    }

    modifier onlyOwnerOrTreasury {
        require(msg.sender==treasuryAddress || msg.sender == owner(), "Access denied");
        _;
    }

    function withdrawStuckETH() public onlyOwnerOrTreasury {
        bool success;
        (success,) = address(msg.sender).call{value: address(this).balance}("");
        require(success, "transfer eth failed");
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }

    function _transfer(address from, address to, uint256 amount) internal override {

        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "amount must be greater than 0");

        if(
            balanceOf(address(this)) >= swapTokensAtAmount &&
            !swapping &&
            !automatedMarketMakerPairs[from] &&
            !_isExcludedFromFees[from] &&
            !_isExcludedFromFees[to]
        ) {
            swapping = true;
            _swapFees();
            swapping = false;
        }

        bool takeFee = true;
        // if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        // only take fees on Trades, not on wallet transfers
        if(takeFee) {
            uint256 fees = 0;

            // on sell
            if (automatedMarketMakerPairs[to] && sellFee > 0) {
                fees = amount * sellFee / 100;
            }
            // on buy
            else if(automatedMarketMakerPairs[from] && buyFee > 0) {
                fees = amount * buyFee / 100;
            }

            if(fees > 0){
                super._transfer(from, address(this), fees);
                amount -= fees;
            }
        }

        super._transfer(from, to, amount);
    }

    function _swapTokensForEth(uint256 tokenAmount) private returns(uint256) {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = WETH;
        uint256 ethBalanceBefore = address(this).balance;
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
        return address(this).balance - ethBalanceBefore;
    }

    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {
        require(pair != uniswapV2Pair, "The pair cannot be removed from automatedMarketMakerPairs");
        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;
        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function addLP(uint256 amount) public onlyOwner payable {
        super._transfer(msg.sender, address(this), amount);
        _approve(address(this), address(uniswapV2Router), type(uint256).max);
        uniswapV2Router.addLiquidityETH{value: msg.value}({
            token: address(this),
            amountTokenDesired: amount,
            amountTokenMin: 0,
            amountETHMin: 0,
            to: msg.sender,
            deadline: block.timestamp
        });
    }

    function setTreasuryAddress(address _TreasuryAddress) external onlyOwnerOrTreasury {
        require(_TreasuryAddress != address(0), "_TreasuryAddress address cannot be 0");
        treasuryAddress = payable(_TreasuryAddress);
        emit UpdatedTreasuryAddress(_TreasuryAddress);
    }

    function _swapFees() private {
        uint256 contractBalance = balanceOf(address(this));
        if(contractBalance == 0) {return;}

        if(contractBalance > swapTokensAtAmount * 5){
            contractBalance = swapTokensAtAmount * 5;
        }

        uint256 receivedETHAmount = _swapTokensForEth(contractBalance);
        uint256 sendETHBalance = address(this).balance;
        if(sendETHBalance > 0){
            treasuryAddress.call{value: sendETHBalance}("");
        }
        emit FeesSwapped(
            contractBalance,
            receivedETHAmount,
            sendETHBalance,
            treasuryAddress
        );
    }

    function manualSwap() external onlyOwnerOrTreasury {
        swapping = true;
        _swapFees();
        swapping = false;
    }
}
