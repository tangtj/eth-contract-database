
// File: src/LiquidityMining.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "./interfaces/IAggregatorV3Interface.sol";
import "./interfaces/IUniswapV2Factory.sol";
import "./interfaces/IUniswapV2Router02.sol";
import "./interfaces/IUniswapV2Pair.sol";
import "./interfaces/IClaiming.sol";

contract LiquidityMining is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    struct UserDeposit {
        uint256 amount;
        uint256 depositOn;
        uint256 liquidity;
        bool removed;
    }

    struct Checkpoint {
        uint256 amount;
        uint256 prev;
        uint256 next;
    }

    // address of sale token
    IERC20 public token;
    // address of claiming contract
    address public claiming;

    // status for liquidity is added
    uint256 public listedTime;
    // liquidity amount to be listed
    uint256 public listedLiquidity;

    // deposit start time, i.e the time presale is over
    uint256 public depositStart;
    
    // minimum ETH amount to deposit
    uint256 public ALLOWED_MINIMUM_DEPOSIT;
    // WETH token address
    address public WETH;
    // total deposit ETH until list the liquidity
    uint256 public totalDeposits;
    // user's deposit ETH
    mapping(address => UserDeposit[]) public userDeposits;
    // total deposited amount of each user
    mapping(address => uint256) public userTotalDeposits;

    // states for reward
    uint256 public startDay;
    uint256 public rewardPeriod;
    uint256 public totalReward;
    mapping(address => mapping(uint256 => Checkpoint)) public userDailyHistory; // user => day => amount
    mapping(address => uint256) public userLastUpdateDay; // user => day (last day that daily history was updated)
    mapping(address => uint256) public lastRewardClaimDay; // user => day (last day that claimed reward)
    mapping(address => uint256) public lastCheckpointDay; // user => day (last day that was considered in reward calculation for user deposit)
    mapping(address => uint256) public lastTotalCheckpointDay; // user => day (last day that was considered in reward calculation for total deposit)
    mapping(uint256 => Checkpoint) public dailyTotalHistory; // day => amount
    uint256 public lastUpdateDay;

    IUniswapV2Pair public pair;
    IUniswapV2Factory public uniswapV2Factory;
    IUniswapV2Router02 public uniswapV2Router;

    AggregatorV3Interface internal chainlinkETHUSDContract;

    /* ========== EVENTS ========== */
    // Event emitted when a presale buyer deposits ETH
    event Deposited(address indexed user, uint256 amount, uint256 time);
    // Event emitted when an owner updates the time to start deposit
    event DepositStartTimeUpdated(address indexed user, uint256 depositStartTime);
    // Event emitted when allowed minimum deposit amount is updated
    event AllowedMinimumDepositUpdated(address indexed user, uint256 previousAmount, uint256 amount, uint256 time);
    // Event emitted when claiming contract address was updated by the owner
    event ClaimingContractAddressUpdated(address indexed user, address claiming, uint256 time);
    // Event emitted when liquidity added by the owner
    event LiquidityAdded(address indexed user, uint256 liquidity, uint256 time);
    // Event emitted when liquidity removed by the depositor
    event LiquidityRemoved(address indexed user, uint256 ownLiquidity, uint256 amountToken, uint256 amountETH, uint256 time);
    // Event emitted when reward token is transferred
    event RewardTransferred(address indexed user, uint256 amount, uint256 time);
    // Event emitted when reward token is deposited by the owner
    event TokenDepositedForReward(address indexed user, uint256 amount, uint256 time);
    // Event emitted when the owner updates the reward program states
    event RewardProgramPlanUpdated(address indexed user, uint256 startDay, uint256 period, uint256 totalReward, uint256 time);

    modifier onlyWhenNotListed() {
        require(listedTime == 0, "Liquidity was already listed");
        _;
    }

    modifier onlyWhenListed() {
        require(listedTime != 0, "Liquidity wasn't listed yet");
        _;
    }

    constructor(
        address _token,
        address _chainlinkETHUSDAddress,
        address _uniswapV2Factory, // 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f
        address _uniswapV2Router // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
    ) Ownable(msg.sender) {
        // verify input argument
        require(_token != address(0), "Sale token address cannot be zero");

        token = IERC20(_token);

        chainlinkETHUSDContract = AggregatorV3Interface(_chainlinkETHUSDAddress);

        // set uniswap factory and router02
        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Factory);
        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);

        // set the WETH token address
        WETH = uniswapV2Router.WETH();
    }

    /******************************************************
                            Setter
    ******************************************************/

    /**
     * @notice Set the time to start claiming
     *
     * @param _depositStart The time to start claiming
     */
    function setDepositStart(uint256 _depositStart) external onlyOwner {
        // verify input argument
        require(_depositStart >= block.timestamp, "Invalid time for start deposit.");

        depositStart = _depositStart;

        emit DepositStartTimeUpdated(msg.sender, _depositStart);
    }

    /**
     * @notice Set the address of claiming contract
     * 
     * @dev Only owner can call this function; should check non-zero address
     * 
     * @param _claiming address of the claiming contract
     */
    function setClaimingContract(address _claiming) external onlyOwner {
        // verify input argument
        require(_claiming != address(0), "Contract address cannot be zero address");

        claiming = _claiming;

        emit ClaimingContractAddressUpdated(msg.sender, claiming, block.timestamp);
    }

    /**
     * @notice Set the minimum allowed to deposit ETH
     *
     * @dev amount can be zero value
     *
     * @param amount allowed minimum amount to deposit ETH
     */
    function setAllowedMinimumDeposit(uint256 amount) external onlyOwner {
        uint256 previousAmount = ALLOWED_MINIMUM_DEPOSIT;
        ALLOWED_MINIMUM_DEPOSIT = amount;

        emit AllowedMinimumDepositUpdated(msg.sender, previousAmount, amount, block.timestamp);
    }

    /**
     * @notice Set the states for reward program
     *
     * @param _period reward program period in days
     * @param _start reward program start time in timestamp
     * @param _total total reward token amount
     */
    function setRewardStates(uint256 _start, uint256 _period, uint256 _total) external onlyOwner {
        // verify setting of deposit start date
        require(depositStart != 0, "Deposit start time should be set");

        // verify input argument
        require(_start != 0, "Invalid reward start time");
        require(_start >= depositStart, "Cannot be before deposit start time");
        require(_period != 0, "Invalid reward period");
        require(_total != 0, "Invalid reward token amount");

        // set the start day at the 00h:00min of the start day
        startDay = _start / 1 days;

        uint256 day = depositStart / 1 days;
        Checkpoint storage startDayCp = dailyTotalHistory[startDay];
        while (day <= startDay) {
            Checkpoint memory dayCp = dailyTotalHistory[day];
            if (dailyTotalHistory[day].amount != 0) {
                startDayCp.amount = dayCp.amount;
                startDayCp.prev = dayCp.prev;
                startDayCp.next = dayCp.next;
            }

            ++day;
        }

        rewardPeriod = _period;
        totalReward = _total;

        emit RewardProgramPlanUpdated(msg.sender, startDay, rewardPeriod, totalReward, block.timestamp);
    }

    /******************************************************
                           External
    ******************************************************/

    /**
     * @notice deposit ETH for liquidity mining
     */
    function depositETH() external payable nonReentrant onlyWhenNotListed {
        require(msg.value > 0, "Cannot deposit 0 ETH");
        // verify if deposit is allowed
        require(depositStart != 0 && block.timestamp >= depositStart, "Deposit is not allowed for now");

        if (ALLOWED_MINIMUM_DEPOSIT > 0) {
            require(msg.value >= ALLOWED_MINIMUM_DEPOSIT, "Insufficient deposit amount for minimum allowed");
        }

        (
            bool depositable,
            uint256 claimableAmount,
            uint256 ethValue
        ) = _checkClaimableAmountForDepositETH(msg.sender, msg.value);
        
        // only presale buyer can deposit ETH
        require(depositable, "You don't have sufficient claimable token amount to deposit ETH");

        // decrease the user's claimable token amount by deposited ETH market value
        IClaiming(claiming).setClaim(msg.sender, claimableAmount - ethValue);

        userDeposits[msg.sender].push(UserDeposit({
            amount: msg.value,
            depositOn: block.timestamp,
            liquidity: 0,
            removed: false
        }));

        userTotalDeposits[msg.sender] += msg.value;

        // increase total deposit amount
        totalDeposits += msg.value;

        _updateHistoryForReward(msg.sender, msg.value, false);

        emit Deposited(msg.sender, msg.value, block.timestamp);
    }

    function _updateHistoryForReward(address user, uint256 amount, bool isRemove) private {
        // get the today number
        uint256 today = block.timestamp / 1 days;

        Checkpoint storage todayCp = userDailyHistory[user][today];
        if (today != userLastUpdateDay[user]) {
            // if it is the first updating for today, update with last update day's amount
            uint256 userLastDay = userLastUpdateDay[user];
            Checkpoint storage lastCp = userDailyHistory[user][userLastDay];
            todayCp.amount = lastCp.amount;
            // update today's previous checkpoint day
            todayCp.prev = userLastDay;
            // update last checkpoint day's next checkpoint day
            lastCp.next = today;
        }

        Checkpoint storage todayTotalCp = dailyTotalHistory[today];
        if (today != lastUpdateDay) {
            Checkpoint storage lastTotalCp = dailyTotalHistory[lastUpdateDay];
            todayTotalCp.amount = lastTotalCp.amount;
            todayTotalCp.prev = lastUpdateDay;
            lastTotalCp.next = today;
        }

        if (isRemove) {
            todayCp.amount -= amount;
            todayTotalCp.amount -= amount;
        } else {
            todayCp.amount += amount;
            todayTotalCp.amount += amount;
        }
        userLastUpdateDay[user] = today;
        lastUpdateDay = today;
        // udpate the first checkpoint for reward
        if (today <= startDay) {
            Checkpoint storage startDayCp = userDailyHistory[user][startDay];
            startDayCp.amount = todayCp.amount;
            startDayCp.prev = todayCp.prev;
            startDayCp.next = 0;

            Checkpoint storage startDayTotalCp = dailyTotalHistory[startDay];
            startDayTotalCp.amount = todayTotalCp.amount;
            startDayTotalCp.prev = todayTotalCp.prev;
            startDayTotalCp.next = todayTotalCp.next;
        }
    }

    /**
     * @notice List liquidity of deposited ETH and some Token to UniV2
     *
     * @param _pair the address of pair pool on Uni v2
     */
    function listLiquidity(address _pair) external onlyOwner onlyWhenNotListed {
        require(address(token) != address(0), "Sale token address cannot be zero");

        // verify passed pair address with sale token and WETH 
        // require(uniswapV2Factory.getPair(address(token), WETH) == _pair, "The pair address is invalid");
        
        // verify sufficient ETH balance to add liquidity
        require(totalDeposits != 0, "Insufficient ETH balance to mint LP");

        pair = IUniswapV2Pair(_pair);
        require(pair.token0() == address(token) || pair.token1() == address(token), "Invalid pair address");

        listedTime = block.timestamp;

        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
        uint256 amount;
        if (address(token) < WETH) {
            amount = uniswapV2Router.quote(totalDeposits, reserve1, reserve0);
        } else {
            amount = uniswapV2Router.quote(totalDeposits, reserve0, reserve1);
        }

        // get the sale token from the claiming contract for adding liquidity
        IClaiming(claiming).transferTokenToLiquidityMining(amount);
        // update claim start time as 7 days later from listed time
        IClaiming(claiming).setClaimStart(listedTime + 7 days);

        // Approve router to mint LP
        bool success = token.approve(address(uniswapV2Router), amount);
        require(success, "Approve failed");

        try uniswapV2Router.addLiquidityETH{value: totalDeposits} ( // Amount of ETH to send for LP on univ2
            address(token),
            2 * amount, // to calc as WETH desired quote
            100, // Infinite slippage basically since it's in wei
            totalDeposits, // should add liquidity this amount exactly
            address(this), // Transfer LP token to this contract
            block.timestamp
        ) returns (uint256 , uint256 , uint256 liquidity) {
            listedLiquidity = liquidity;

            emit LiquidityAdded(msg.sender, listedLiquidity, block.timestamp);
        } catch {
            revert(string("Adding liquidity was failed"));
        }
    }

    /**
     * @notice cancel liquidity mining to receive back funds
     *
     * @dev able to only after 7 days later from listing
     *
     * @param index index of the deposit array to get reward
     */
    function removeLiquidity(uint256 index) external nonReentrant onlyWhenListed returns(
        uint256 amountToken,
        uint256 amountETH
    ){
        // verify 1 week after listed
        require(block.timestamp >= listedTime + 7 days, "Cannot remove liquidity until 7 days after listing");
        // verify input argument
        require(index < userDeposits[msg.sender].length, "Invalid index value");
        
        UserDeposit storage userDeposit = userDeposits[msg.sender][index];
        require(!userDeposit.removed, "This liquidity was already removed");
        
        // update the removed flag as true
        userDeposit.removed = true;

        userTotalDeposits[msg.sender] -= userDeposit.amount;

        uint256 ownLiquidity;
        if (userDeposit.liquidity != 0) {
            // if liquidity after listing
            ownLiquidity = userDeposit.liquidity;
        } else {
            // if liquidity before listing
            // valid if liquidity exists
            require(listedLiquidity != 0, "There is no liquidity in the contract");
            
            ownLiquidity = listedLiquidity * userDeposit.amount / totalDeposits;
        }

        bool success = pair.approve(address(uniswapV2Router), ownLiquidity);
        require(success, "Approve failed");
        
        // remove liquidity and transfer tokens to caller
        (amountToken, amountETH) = uniswapV2Router.removeLiquidityETH(
            address(token),
            ownLiquidity,
            100,
            100,
            msg.sender,
            block.timestamp
        );

        _updateHistoryForReward(msg.sender, userDeposit.amount, true);

        emit LiquidityRemoved(msg.sender, ownLiquidity, amountToken, amountETH, block.timestamp);
    }

    /**
     * @notice add liquidity after presale buyers' liquidity was listed
     *
     * @param amount sale token amount to add liquidity
     */
    function addLiquidity(uint256 amount)external payable nonReentrant onlyWhenListed returns(
        uint256 aToken,
        uint256 aETH,
        uint256 aLiquidity
    ) {
        require(msg.value != 0, "Invalid ETH deposit");
        require(amount != 0 , "Invalid token deposit");

        // transfer token from user to mining contract here
        token.safeTransferFrom(msg.sender, address(this), amount);
        // approve router to transfer token from mining to pair
        bool success = token.approve(address(uniswapV2Router), amount);
        require(success, "Approve failed");

        // add liquidity by depositing both of token and ETH
        try uniswapV2Router.addLiquidityETH{value: msg.value} (
            address(token),
            amount, // to calc as WETH desired quote
            100, // Infinite slippage basically since it's in wei
            100, // Infinite slippage basically since it's in wei
            address(this), // Transfer LP token to this contract
            block.timestamp
        ) returns (uint256 amountToken, uint256 amountETH, uint256 liquidity) {
            if (amount > amountToken) {
                // refund left token to the user back
                token.safeTransfer(msg.sender, amount - amountToken);
            }

            if (msg.value > amountETH) { // no need, but for security
                // refund left ETH to the user back
                ( success, ) = address(msg.sender).call{
                    value: msg.value - amountETH,
                    gas: 35000 // limit gas fee to prevent hook operation
                }("");
                require(success, "Failed to refund Ether");
            }

            userDeposits[msg.sender].push(UserDeposit({
                amount: amountETH,
                depositOn: block.timestamp,
                liquidity: liquidity,
                removed: false
            }));

            userTotalDeposits[msg.sender] += amountETH;

            _updateHistoryForReward(msg.sender, amountETH, false);

            aToken = amountToken;
            aETH = amountETH;
            aLiquidity = liquidity;

            emit LiquidityAdded(msg.sender, liquidity, block.timestamp);
        } catch {
            revert(string("Adding liquidity was failed"));
        }
    }

    /**
     * @notice claim reward based on the daily reward program
     */
    function claimReward() external {
        // verify deposit and reward start time
        require(depositStart > 0, "Invalid deposit start time");
        require(startDay > 0, "Invalid reward start time");
        require(block.timestamp / 1 days > startDay, "Invalid date to claim reward");

        // if it is first claiming, update checkpoint for reward start day
        updateCheckpointStartDay(msg.sender);

        (
            uint256 rewardAmount,
            uint256 lastCpDay, 
            uint256 lastTotalCpDay
        ) = getRewardTokenAmount(msg.sender);

        if (rewardAmount > 0)
            token.safeTransfer(msg.sender, rewardAmount);

        // update last claim day as today
        lastRewardClaimDay[msg.sender] = block.timestamp / 1 days;
        lastCheckpointDay[msg.sender] = lastCpDay;
        lastTotalCheckpointDay[msg.sender] = lastTotalCpDay;
    }

    /**
     * @notice update start day's checkpoint info for particular user
     */
    function updateCheckpointStartDay(address user) public {
        // if it is first claiming, update checkpoint for reward start day
        Checkpoint storage startDayCp = userDailyHistory[user][startDay];
        if (
            lastRewardClaimDay[user] == 0 &&
            startDayCp.amount == 0
        ) {
            uint256 day = 0;
            while (day <= startDay) {
                Checkpoint memory dayCp = userDailyHistory[user][day];
                startDayCp.amount = dayCp.amount;
                startDayCp.prev = dayCp.prev;
                startDayCp.next = dayCp.next;

                if (dayCp.next != 0) {
                    day = dayCp.next;
                } else {
                    break;
                }
            }
        }
    }

    /**
     * @notice deposit tokens for reward program of liquidity mining
     */
    function depositRewardTokens(uint256 amount) external onlyOwner {
        // verity input argument
        require(amount != 0, "Invalid token amount");

        // transfer token for reward from caller to this contract
        token.safeTransferFrom(msg.sender, address(this), amount);

        emit TokenDepositedForReward(msg.sender, amount, block.timestamp);
    }

    /*****************************************************
                            Getter
    *****************************************************/

    /**
     * @notice How many deposits a particular address has done
     *
     * @param user an address to query number of times deposited
     * @return number of times a particular address has deposited
     */
    function numDepoists(address user) public view returns(uint256) {
        return userDeposits[user].length;
    }

    /**
     * @notice Get the reward token amount based on the reward program
     *
     * @param user address of user to get the reward
     */
    function getRewardTokenAmount(address user) public view returns(
        uint256 rewardAmount,
        uint256 lastCpDay,
        uint256 lastTotalCpDay
    ) {
        // verify input argument
        require(user != address(0), "Invalid user address");
        if (startDay == 0) { // in the case that start day is not defined yet
            rewardAmount = 0;
            lastCpDay = 0;
            lastTotalCpDay = 0;
        } else {
            // get the daily rewardable amount
            uint256 dailyReward = totalReward / rewardPeriod;

            // get the today
            uint256 today = block.timestamp / 1 days;
            // get the reward end day (the next day of end day, indeed)
            uint256 rewardEndDay = startDay + rewardPeriod;
            // get the last day when user claimed reward
            uint256 lastClaimDay = lastRewardClaimDay[user] == 0 ? startDay : lastRewardClaimDay[user];

            lastCpDay = lastCheckpointDay[user];
            lastTotalCpDay = lastTotalCheckpointDay[user];
            uint256 endDay = today > rewardEndDay ?  rewardEndDay : today;
            for (uint256 day = lastClaimDay; day < endDay; ++day) {
                uint256 totalCpAmount;
                Checkpoint memory dayTotalCp = dailyTotalHistory[day];
                if (dayTotalCp.amount != 0 || dayTotalCp.prev != 0) {
                    totalCpAmount = dayTotalCp.amount;
                    lastTotalCpDay = day;
                } else {
                    totalCpAmount = dailyTotalHistory[lastTotalCpDay].amount;
                }

                if (totalCpAmount == 0) continue;

                Checkpoint memory dayCp = userDailyHistory[user][day];

                if (dayCp.amount != 0 || dayCp.prev != 0) {
                    rewardAmount += dailyReward * dayCp.amount / totalCpAmount;
                    lastCpDay = day;
                } else {
                    // continue if user deposit ETH is zero
                    Checkpoint memory userLastDayCp = userDailyHistory[user][lastCpDay];
                    if (userLastDayCp.amount == 0) continue;

                    rewardAmount += dailyReward * userLastDayCp.amount / totalCpAmount;
                }
            }
        }
    }

    /**
     * @notice Get the info of a particular deposits
     * 
     * @param user address of user to get the deposits info
     */
    function getUserDepositsArray(address user) public view returns(UserDeposit[] memory) {
        uint256 length = numDepoists(user);
        UserDeposit[] memory userDepositArray = new UserDeposit[](length);

        for (uint256 i = 0; i < length;) {
            userDepositArray[i] = userDeposits[user][i];

            unchecked {
                ++i;
            }
        }

        return userDepositArray;
    }

    /**
     * @notice get user's deposit info at particular index
     *
     * @param user address of the user to get the info
     * @param index index of the deposit array of user
     */
    function getUserDepositInfo(
        address user,
        uint256 index
    ) public view returns (
        uint256,
        uint256,
        bool
    ) {
        UserDeposit storage userDeposit = userDeposits[user][index];

        return (
            userDeposit.amount,
            userDeposit.depositOn,
            userDeposit.removed
        );
    }

    /**
     * @notice get user's total deposited ETH amount
     */
    function getUserTotalDeposit(address user) public view returns(uint256) {
        return userTotalDeposits[user];
    }

    /**
     * @notice get user's daily checkpoint history
     */
    function getUserDailyCheckpoint(
        address user,
        uint256 day
    ) public view returns (
        uint256 amount,
        uint256 prev, 
        uint256 next
    ) {
        Checkpoint memory cp = userDailyHistory[user][day];
        amount = cp.amount;
        prev = cp.prev;
        next = cp.next;
    }

    /**
     * @notice get total daily checkpoint history
     */
    function getTotalDailyCheckpoint(uint256 day) public view returns(
        uint256 amount,
        uint256 prev,
        uint256 next
    ) {
        Checkpoint memory cp = dailyTotalHistory[day];
        amount = cp.amount;
        prev = cp.prev;
        next = cp.next;
    }

    /**
     * @notice get the lates ETH/USD price from chainlink price feed
     */
    function fetchETHUSDPrice() public view returns (uint256 price, uint256 decimals) {
        (, int256 priceInt, , , ) = chainlinkETHUSDContract.latestRoundData();
        decimals = chainlinkETHUSDContract.decimals();
        price = uint256(priceInt);
        return (price, decimals);
    }

    function _checkClaimableAmountForDepositETH(
        address user,
        uint256 ethAmount
    ) private view returns (
        bool depositable,
        uint256 claimableAmount,
        uint256 ethValue
    ) {
        // verify claiming contract address
        require(claiming != address(0), "The address of claiming contract cannot be zero");
        
        // get the latest ETH price and decimals
        (uint256 price, uint256 decimals) = fetchETHUSDPrice();

        // calculate deposited ETH market value
        // @note (not divide with 10^18, because the sale token's decimals is also 18)
        ethValue = ethAmount * price / (10 ** decimals);

        // get current claimable token amount for user
        ( , , claimableAmount) = IClaiming(claiming).getClaimInfo(user);
        
        depositable = claimableAmount >= ethValue;
    }
}



// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC-20 standard as defined in the ERC.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC1363} from "../../../interfaces/IERC1363.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC-20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC-20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no
     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
     * targeting contracts.
     *
     * Reverts if the returned value is other than `true`.
     */
    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {
        if (to.code.length == 0) {
            safeTransfer(token, to, value);
        } else if (!token.transferAndCall(to, value, data)) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target
     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
     * targeting contracts.
     *
     * Reverts if the returned value is other than `true`.
     */
    function transferFromAndCallRelaxed(
        IERC1363 token,
        address from,
        address to,
        uint256 value,
        bytes memory data
    ) internal {
        if (to.code.length == 0) {
            safeTransferFrom(token, from, to, value);
        } else if (!token.transferFromAndCall(from, to, value, data)) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no
     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
     * targeting contracts.
     *
     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.
     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}
     * once without retrying, and relies on the returned value to be true.
     *
     * Reverts if the returned value is other than `true`.
     */
    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {
        if (to.code.length == 0) {
            forceApprove(token, to, value);
        } else if (!token.approveAndCall(to, value, data)) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,
 * consider using {ReentrancyGuardTransient} instead.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: src/interfaces/IAggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(
    uint80 _roundId
  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);

  function latestRoundData()
    external
    view
    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}


// File: src/interfaces/IUniswapV2Factory.sol
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

// File: src/interfaces/IUniswapV2Router02.sol
// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// File: src/interfaces/IUniswapV2Pair.sol
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// File: src/interfaces/IClaiming.sol
pragma solidity ^0.8.20;

interface IClaiming {
    function setClaimStart(uint256) external;

    function setClaim(address, uint256) external;

    function getClaimInfoIndex(address) external view returns(uint256);

    function getClaimableAmount(address) external view returns(uint256);

    function getClaimInfo(address) external view returns(uint256, uint256, uint256);

    function transferTokenToLiquidityMining(uint256) external;
}


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)

pragma solidity ^0.8.20;

import {IERC20} from "./IERC20.sol";
import {IERC165} from "./IERC165.sol";

/**
 * @title IERC1363
 * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].
 *
 * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract
 * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.
 */
interface IERC1363 is IERC20, IERC165 {
    /*
     * Note: the ERC-165 identifier for this interface is 0xb0202a11.
     * 0xb0202a11 ===
     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^
     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^
     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^
     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^
     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^
     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))
     */

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`
     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function transferAndCall(address to, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`
     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     * @param data Additional data with no specified format, sent in call to `to`.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism
     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
     * @param from The address which you want to send tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism
     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
     * @param from The address which you want to send tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     * @param data Additional data with no specified format, sent in call to `to`.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function approveAndCall(address spender, uint256 value) external returns (bool);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     * @param data Additional data with no specified format, sent in call to `spender`.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

import {Errors} from "./Errors.sol";

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert Errors.InsufficientBalance(address(this).balance, amount);
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert Errors.FailedCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {Errors.FailedCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert Errors.InsufficientBalance(address(this).balance, value);
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case
     * of an unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {Errors.FailedCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert Errors.FailedCall();
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: src/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// File: lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../token/ERC20/IERC20.sol";


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)

pragma solidity ^0.8.20;

import {IERC165} from "../utils/introspection/IERC165.sol";


// File: lib/openzeppelin-contracts/contracts/utils/Errors.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;

/**
 * @dev Collection of common custom errors used in multiple contracts
 *
 * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.
 * It is recommended to avoid relying on the error API for critical functionality.
 */
library Errors {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error InsufficientBalance(uint256 balance, uint256 needed);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedCall();

    /**
     * @dev The deployment failed.
     */
    error FailedDeployment();
}


// File: lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC-165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[ERC].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

