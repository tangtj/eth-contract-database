
// File: src/Staking.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

contract Staking is Ownable {
    using SafeERC20 for IERC20;
    struct UserStake {
        uint256 amount;
        uint256 lockOn;
        uint256 lockEnd;
        uint256 rewards;
    }

    // Token being staked
    IERC20 public token;
    // Claiming contract address
    address public claiming;

    // Total supply of staked tokens
    uint256 public totalSupply;

    // Value that represents whether staking is possible or not
    bool public stakingEnabled;

    // Reward limit for restrict staking
    uint256 public rewardLimit;
    // Current reward amount which claimed or will claim
    uint256 public rewardAmount;

    uint256 public REWARD_RATE_1Q = 1_000;
    uint256 public REWARD_RATE_2Q = 2_500;
    uint256 public REWARD_RATE_3Q = 3_500;
    uint256 public REWARD_RATE_4Q = 5_000;
    uint256 public DENOMINATOR = 10_000;

    // Mapping to track user balances
    mapping(address => UserStake[]) private userStakes;

    modifier onlyWhenStakingEnabled() {
        // verify the staking enabled
        require(stakingEnabled, "Staking is not enabled.");

        // execute the rest of the function
        _;
    }

    /* ========== EVENTS ========== */
    // Event emitted when a user stakes token
    event Staked(address indexed user, uint256 amount, uint256 time);
    // Event emitted when a user stakes token fron claiming directly
    event StakedDirectly(address indexed user, uint256 amount, uint256 time);
    // Event emitted when a user withdraws token
    event Withdrawed(address indexed user, uint256 amount, uint256 time);
    // Event emitted when a user claims reward token
    event Claimed(address indexed user, uint256 amount, uint256 time);
    // Event emitted when tokens are recovered
    event Recovered(address indexed sender, address token, uint256 amount);
    // Event emitted when claiming contract address was updated by the owner
    event ClaimingContractAddressUpdated(address indexed user, address claiming, uint256 time);
    // Event emitted when staking is enabled by the owner
    event StakingEnabled(address indexed user, uint256 time);
    // Event emitted when owner updates the reward limit
    event RewardLimitUpdated(address indexed user, uint256 amount, uint256 time);

    /**
     * @dev Set the staking & reward token contract and owner of this smart contract.
     * 
     * @param _token token address to be staked
     */
    constructor(address _token) Ownable(msg.sender) {
        token = IERC20(_token);
    }

    /**
     * @notice Stakes the token; the token is transferred from staker's wallet to this contract,
     * and the staking duration is calculated in months.
     * 
     * @param amount amount of token to be staked
     * @param durationInMonths duration of staking in months 
     */
    function stake(uint256 amount, uint256 durationInMonths) external onlyWhenStakingEnabled {
        // verify input argument
        require(amount > 0, "cannot stake 0");
        // validate duration in months
        require(
            durationInMonths == 3 ||
            durationInMonths == 6 ||
            durationInMonths == 9 ||
            durationInMonths == 12,
            "Invalid duration for staking."
        );

        // transfer token from staker's wallet
        token.safeTransferFrom(msg.sender, address(this), amount);

        uint256 rewards = calculateRewards(amount, durationInMonths);
        // update the cumulative reward amount
        rewardAmount += rewards;
        // verify if reward amount is not over limit
        require(rewardAmount <= rewardLimit, "Overflow of reward limit");

        uint256 lockEnd = block.timestamp + (durationInMonths * 30 days);
        userStakes[msg.sender].push(UserStake({
            amount: amount,
            lockOn: block.timestamp,
            lockEnd: lockEnd,
            rewards: rewards
        }));

        // update total stake amount
        totalSupply += amount;

        // emit an event
        emit Staked(msg.sender, amount, block.timestamp);
    }

    /**
     * @notice presale buyers can stake their claimable tokens before staking is enabled
     * only callable from claiming contract
     *
     * @param staker address of staker who has claimable token
     * @param amount amount of token to stake
     * @param durationInMonths duration of staking in months
     */
    function stakeFromClaiming(address staker, uint256 amount, uint256 durationInMonths) external {
        // verify caller is claiming contract
        require(msg.sender == claiming, "Only claiming contract can call this function");

        // validate duration in months
        require(
            durationInMonths == 3 ||
            durationInMonths == 6 ||
            durationInMonths == 9 ||
            durationInMonths == 12,
            "Invalid duration for staking."
        );

        // transfer token from staker's wallet
        token.safeTransferFrom(msg.sender, address(this), amount);

        uint256 rewards = calculateRewards(amount, durationInMonths);
        // update the cumulative reward amount
        rewardAmount += rewards;
        // verify if reward amount is not over limit
        require(rewardAmount <= rewardLimit, "Overflow of reward limit");

        uint256 lockEnd = block.timestamp + (durationInMonths * 30 days);
        userStakes[staker].push(UserStake({
            amount: amount,
            lockOn: block.timestamp,
            lockEnd: lockEnd,
            rewards: rewards
        }));

        // update total stake amount
        totalSupply += amount;

        // emit an event
        emit StakedDirectly(staker, amount, block.timestamp);
    }
    
    /**
     * @notice Withdraw staked token
     * 
     * @dev when break the staking before time is up, the rewards will be removed
     *
     * @param index index of staking to withdraw
     */
    function withdraw(uint256 index) external onlyWhenStakingEnabled {
        // verify input argument
        require(index < userStakes[msg.sender].length, "Invalid index of staking");
        
        _withdraw(msg.sender, index);
    }

    /**
     * @notice withdraw all staked token;
     * it is recommended to use withdrawBatch function than this.
     * 
     * @param onlyClaimable bool value that represents whether will withdraw only claimable staking or not
     */
    function withdrawAll(bool onlyClaimable) external onlyWhenStakingEnabled {
        uint256 length = numStakes(msg.sender);
        require(length > 0, "You didn't stake anything");

        _withdrawBatch(msg.sender, 0, length-1, onlyClaimable);
    }

    /**
     * @notice withdraw staked token between pointed indexes.
     * 
     * @param onlyClaimable bool value that represents whether will withdraw only claimable staking or not
     */
    function withdrawBatch(uint256 fromIndex, uint256 toIndex, bool onlyClaimable) external onlyWhenStakingEnabled {
        uint256 length = numStakes(msg.sender);
        require(length > 0, "You didn't stake anything");
        require(fromIndex <= toIndex, "Invalid indexes.");
        require(toIndex < length, "Index cannot be over the length of staking");

        _withdrawBatch(msg.sender, fromIndex, toIndex, onlyClaimable);
    }

    function _withdrawBatch(address staker, uint256 _fromIndex, uint256 _toIndex, bool _onlyClaimable) private {
        for (uint256 i = _fromIndex; i <= _toIndex; ) {
            if (_onlyClaimable && isStaked(staker, i)) {
                unchecked {
                    ++i;
                }
                continue;
            }

            if (userStakes[staker][i].amount > 0) {
                _withdraw(staker, i);
            }

            unchecked {
                ++i;
            }
        }
    }

    function _withdraw(address staker, uint256 index) private returns(uint256) {
        UserStake storage userStake = userStakes[staker][index];
        require(userStake.amount > 0, "There is no staked token");

        // remove rewards if it breaks the staking before time is up
        // if (block.timestamp < userStake.lockEnd) {
        //     // decrease the cumulative reward amount
        //     rewardAmount -= userStake.rewards;
        //     // remove rewards of staker
        //     userStake.rewards = 0;
        // }
        require(block.timestamp >= userStake.lockEnd, "Unable to withdraw before locking is over");

        uint256 amount = userStake.amount;
        userStake.amount = 0;

        // update the total stake amount
        totalSupply -= amount;

        // transfer token from here to staker's wallet
        token.safeTransfer(staker, amount);

        // emit an event
        emit Withdrawed(staker, amount, block.timestamp);

        return amount;
    }

    /**
     * @notice Claim the rewards about the staked token
     * 
     * @dev cannot claim the rewards for the not matured staking
     * 
     * @param index index of staking to claim rewards 
     */
    function claimRewards(uint256 index) external {
        // verify input argument
        require(index < userStakes[msg.sender].length, "Invalid index of staking");
        // cannot claim before the stake fully matures
        require(!isStaked(msg.sender, index), "Cannot claim rewards before locking is over.");
        UserStake storage userStake = userStakes[msg.sender][index];
        // validate amount for reward token
        require(userStake.rewards > 0, "There is no claimable reward token.");

        uint256 rewards = userStake.rewards;
        userStake.rewards = 0;

        token.safeTransfer(msg.sender, rewards); // transfer rewards

        // emit an event
        emit Claimed(msg.sender, rewards, block.timestamp);
    }

    /**
     * @notice Calculate the amount of reward token based on the staking amount
     * 
     * @param _principal amount to be staked
     * @param _durationInMonths duration to be staked in months
     *
     * @return amount of reward token
     */
    function calculateRewards(uint256 _principal, uint256 _durationInMonths) private view returns (uint256) {
        if (_durationInMonths <= 3) {
            return _principal * REWARD_RATE_1Q * _durationInMonths / (12 * DENOMINATOR);
        } else if (_durationInMonths <= 6) {
            return _principal * REWARD_RATE_2Q * _durationInMonths / (12 * DENOMINATOR);
        } else if (_durationInMonths <= 9) {
            return _principal * REWARD_RATE_3Q * _durationInMonths / (12 * DENOMINATOR);
        } else {
            return _principal * REWARD_RATE_4Q * _durationInMonths / (12 * DENOMINATOR);
        }
    }

    /**
     * @notice Check a particular stake is still on the state of staking or not
     * 
     * @param staker address of staker
     * @param index index of staking to be checked
     */
    function isStaked(address staker, uint256 index) public view returns(bool) {
        // verify input argument
        require(index <  userStakes[staker].length, "Invalid index for staked records.");

        return userStakes[staker][index].lockEnd > block.timestamp;
    }

    /**
     * @dev Recovers ERC20 tokens accidentally sent to the contract
     *
     * @param _token Address of the ERC20 token to recover
     * @param amount Amount of tokens to recover
     */
    function recoverERC20(address _token, uint256 amount) external onlyOwner {
        // make sure owner won't withdraw stake token
        require(address(_token) != address(token), "cannot withdraw the staking token");

        // transfer token to owner account
        IERC20(_token).safeTransfer(owner(), amount);

        // emit an event
        emit Recovered(msg.sender, address(_token), amount);
    }

    /*****************************************************
                            Getter
    *****************************************************/

    /**
     * @notice How many stakes a particular address has done
     *
     * @param staker an address to query number of times it staked
     * @return number of times a particular address has staked
     */
    function numStakes(address staker) public view returns(uint256) {
        return userStakes[staker].length;
    }

    /**
     * @notice Get the info of a particular staking
     * 
     * @param staker address of user to get the staking info
     * @param index index of staking to get the detail
     */
    function getStakeInfo(address staker, uint256 index) public view returns(uint256, uint256, uint256, uint256) {
        // verify input argument
        require(index < userStakes[staker].length, "Invalid index for staked records.");

        UserStake storage userStake = userStakes[staker][index];
        return (
            userStake.amount,
            userStake.lockOn,
            userStake.lockEnd,
            userStake.rewards
        );
    }

    /**
     * @notice Get the info of a particular staking
     * 
     * @param staker address of user to get the staking info
     */
    function getStakeInfoArray(address staker) public view returns(UserStake[] memory) {
        uint256 length = numStakes(staker);
        UserStake[] memory userStakeArray = new UserStake[](length);

        for (uint256 i = 0; i < length;) {
            userStakeArray[i] = userStakes[staker][i];

            unchecked {
                ++i;
            }
        }

        return userStakeArray;
    }

    function getStakeInfoArray(address staker, uint256 fromIndex, uint256 toIndex) public view returns(UserStake[] memory) {
        require(toIndex >= fromIndex, "Invalid order of indexes");

        uint256 length = numStakes(staker);
        if (fromIndex >= length) return new UserStake[](0);
        
        toIndex = toIndex >= length ? length - 1 : toIndex;
        
        UserStake[] memory userStakeArray = new UserStake[](toIndex - fromIndex + 1);
        for (uint256 i = fromIndex; i <= toIndex;) {
            userStakeArray[i - fromIndex] = userStakes[staker][i];

            unchecked {
                ++i;
            }
        }

        return userStakeArray;
    }

    /*****************************************************
                            Setter
    *****************************************************/
    /**
     * @notice Set the address of claiming contract
     * 
     * @dev Only owner can call this function; should check non-zero address
     * 
     * @param _claiming address of the claiming contract
     */
    function setClaimingContract(address _claiming) external onlyOwner {
        // verify input argument
        require(_claiming != address(0), "Reward token address cannot be zero address");

        claiming = _claiming;

        emit ClaimingContractAddressUpdated(msg.sender, claiming, block.timestamp);
    }

    /**
     * @notice Enable staking; this is called by only owner.
     * Owner will enable staking as soon as presale is over.
     * 
     * @dev Once staking become enable, cannot disable it back again.
     */
    function setStakingEnabled() external onlyOwner {
        require(!stakingEnabled, "Staking is already enabled");

        stakingEnabled = true;

        emit StakingEnabled(msg.sender, block.timestamp);
    }

    /**
     * @notice Set the reward limit amount to restrict staking
     *
     * @dev only owner can call this function; able to set zero value
     *
     * @param _rewardLimit amount of reward limit to be set
     */
    function setRewardLimit(uint256 _rewardLimit) external onlyOwner {
        rewardLimit = _rewardLimit;

        emit RewardLimitUpdated(msg.sender, rewardLimit, block.timestamp);
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC-20 standard as defined in the ERC.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC1363} from "../../../interfaces/IERC1363.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC-20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC-20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no
     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
     * targeting contracts.
     *
     * Reverts if the returned value is other than `true`.
     */
    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {
        if (to.code.length == 0) {
            safeTransfer(token, to, value);
        } else if (!token.transferAndCall(to, value, data)) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target
     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
     * targeting contracts.
     *
     * Reverts if the returned value is other than `true`.
     */
    function transferFromAndCallRelaxed(
        IERC1363 token,
        address from,
        address to,
        uint256 value,
        bytes memory data
    ) internal {
        if (to.code.length == 0) {
            safeTransferFrom(token, from, to, value);
        } else if (!token.transferFromAndCall(from, to, value, data)) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no
     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
     * targeting contracts.
     *
     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.
     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}
     * once without retrying, and relies on the returned value to be true.
     *
     * Reverts if the returned value is other than `true`.
     */
    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {
        if (to.code.length == 0) {
            forceApprove(token, to, value);
        } else if (!token.approveAndCall(to, value, data)) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)

pragma solidity ^0.8.20;

import {IERC20} from "./IERC20.sol";
import {IERC165} from "./IERC165.sol";

/**
 * @title IERC1363
 * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].
 *
 * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract
 * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.
 */
interface IERC1363 is IERC20, IERC165 {
    /*
     * Note: the ERC-165 identifier for this interface is 0xb0202a11.
     * 0xb0202a11 ===
     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^
     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^
     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^
     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^
     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^
     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))
     */

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`
     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function transferAndCall(address to, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`
     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     * @param data Additional data with no specified format, sent in call to `to`.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism
     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
     * @param from The address which you want to send tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism
     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
     * @param from The address which you want to send tokens from.
     * @param to The address which you want to transfer to.
     * @param value The amount of tokens to be transferred.
     * @param data Additional data with no specified format, sent in call to `to`.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function approveAndCall(address spender, uint256 value) external returns (bool);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     * @param data Additional data with no specified format, sent in call to `spender`.
     * @return A boolean value indicating whether the operation succeeded unless throwing.
     */
    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

import {Errors} from "./Errors.sol";

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert Errors.InsufficientBalance(address(this).balance, amount);
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert Errors.FailedCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {Errors.FailedCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert Errors.InsufficientBalance(address(this).balance, value);
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case
     * of an unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {Errors.FailedCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert Errors.FailedCall();
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../token/ERC20/IERC20.sol";


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)

pragma solidity ^0.8.20;

import {IERC165} from "../utils/introspection/IERC165.sol";


// File: lib/openzeppelin-contracts/contracts/utils/Errors.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;

/**
 * @dev Collection of common custom errors used in multiple contracts
 *
 * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.
 * It is recommended to avoid relying on the error API for critical functionality.
 */
library Errors {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error InsufficientBalance(uint256 balance, uint256 needed);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedCall();

    /**
     * @dev The deployment failed.
     */
    error FailedDeployment();
}


// File: lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC-165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[ERC].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

