
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/interfaces/IERC1271.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC1271 standard signature validation method for
 * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].
 */
interface IERC1271 {
    /**
     * @dev Should return whether the signature provided is valid for the provided data
     * @param hash      Hash of the data to be signed
     * @param signature Signature byte array associated with _data
     */
    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);
}


// File: @openzeppelin/contracts/interfaces/IERC5267.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)

pragma solidity ^0.8.20;

interface IERC5267 {
    /**
     * @dev MAY be emitted to signal that the domain could have changed.
     */
    event EIP712DomainChanged();

    /**
     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712
     * signature.
     */
    function eip712Domain()
        external
        view
        returns (
            bytes1 fields,
            string memory name,
            string memory version,
            uint256 chainId,
            address verifyingContract,
            bytes32 salt,
            uint256[] memory extensions
        );
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.20;

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS
    }

    /**
     * @dev The signature derives the `address(0)`.
     */
    error ECDSAInvalidSignature();

    /**
     * @dev The signature has an invalid length.
     */
    error ECDSAInvalidSignatureLength(uint256 length);

    /**
     * @dev The signature has an S value that is in the upper half order.
     */
    error ECDSAInvalidSignatureS(bytes32 s);

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not
     * return address(0) without also returning an error description. Errors are documented using an enum (error type)
     * and a bytes32 providing additional information about the error.
     *
     * If no error is returned, then the address can be used for verification purposes.
     *
     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);
        _throwError(error, errorArg);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     */
    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {
        unchecked {
            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
            // We do not check for an overflow here since the shift operation results in 0 or 1.
            uint8 v = uint8((uint256(vs) >> 255) + 27);
            return tryRecover(hash, v, r, s);
        }
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     */
    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);
        _throwError(error, errorArg);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError, bytes32) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS, s);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature, bytes32(0));
        }

        return (signer, RecoverError.NoError, bytes32(0));
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);
        _throwError(error, errorArg);
        return recovered;
    }

    /**
     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.
     */
    function _throwError(RecoverError error, bytes32 errorArg) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert ECDSAInvalidSignature();
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert ECDSAInvalidSignatureLength(uint256(errorArg));
        } else if (error == RecoverError.InvalidSignatureS) {
            revert ECDSAInvalidSignatureS(errorArg);
        }
    }
}


// File: @openzeppelin/contracts/utils/cryptography/EIP712.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)

pragma solidity ^0.8.20;

import {MessageHashUtils} from "./MessageHashUtils.sol";
import {ShortStrings, ShortString} from "../ShortStrings.sol";
import {IERC5267} from "../../interfaces/IERC5267.sol";

/**
 * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.
 *
 * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose
 * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract
 * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to
 * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.
 *
 * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding
 * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA
 * ({_hashTypedDataV4}).
 *
 * The implementation of the domain separator was designed to be as efficient as possible while still properly updating
 * the chain id to protect against replay attacks on an eventual fork of the chain.
 *
 * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method
 * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].
 *
 * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain
 * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the
 * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.
 *
 * @custom:oz-upgrades-unsafe-allow state-variable-immutable
 */
abstract contract EIP712 is IERC5267 {
    using ShortStrings for *;

    bytes32 private constant TYPE_HASH =
        keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");

    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to
    // invalidate the cached domain separator if the chain id changes.
    bytes32 private immutable _cachedDomainSeparator;
    uint256 private immutable _cachedChainId;
    address private immutable _cachedThis;

    bytes32 private immutable _hashedName;
    bytes32 private immutable _hashedVersion;

    ShortString private immutable _name;
    ShortString private immutable _version;
    string private _nameFallback;
    string private _versionFallback;

    /**
     * @dev Initializes the domain separator and parameter caches.
     *
     * The meaning of `name` and `version` is specified in
     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:
     *
     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.
     * - `version`: the current major version of the signing domain.
     *
     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart
     * contract upgrade].
     */
    constructor(string memory name, string memory version) {
        _name = name.toShortStringWithFallback(_nameFallback);
        _version = version.toShortStringWithFallback(_versionFallback);
        _hashedName = keccak256(bytes(name));
        _hashedVersion = keccak256(bytes(version));

        _cachedChainId = block.chainid;
        _cachedDomainSeparator = _buildDomainSeparator();
        _cachedThis = address(this);
    }

    /**
     * @dev Returns the domain separator for the current chain.
     */
    function _domainSeparatorV4() internal view returns (bytes32) {
        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {
            return _cachedDomainSeparator;
        } else {
            return _buildDomainSeparator();
        }
    }

    function _buildDomainSeparator() private view returns (bytes32) {
        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));
    }

    /**
     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this
     * function returns the hash of the fully encoded EIP712 message for this domain.
     *
     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:
     *
     * ```solidity
     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
     *     keccak256("Mail(address to,string contents)"),
     *     mailTo,
     *     keccak256(bytes(mailContents))
     * )));
     * address signer = ECDSA.recover(digest, signature);
     * ```
     */
    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);
    }

    /**
     * @dev See {IERC-5267}.
     */
    function eip712Domain()
        public
        view
        virtual
        returns (
            bytes1 fields,
            string memory name,
            string memory version,
            uint256 chainId,
            address verifyingContract,
            bytes32 salt,
            uint256[] memory extensions
        )
    {
        return (
            hex"0f", // 01111
            _EIP712Name(),
            _EIP712Version(),
            block.chainid,
            address(this),
            bytes32(0),
            new uint256[](0)
        );
    }

    /**
     * @dev The name parameter for the EIP712 domain.
     *
     * NOTE: By default this function reads _name which is an immutable value.
     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
     */
    // solhint-disable-next-line func-name-mixedcase
    function _EIP712Name() internal view returns (string memory) {
        return _name.toStringWithFallback(_nameFallback);
    }

    /**
     * @dev The version parameter for the EIP712 domain.
     *
     * NOTE: By default this function reads _version which is an immutable value.
     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
     */
    // solhint-disable-next-line func-name-mixedcase
    function _EIP712Version() internal view returns (string memory) {
        return _version.toStringWithFallback(_versionFallback);
    }
}


// File: @openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)

pragma solidity ^0.8.20;

import {Strings} from "../Strings.sol";

/**
 * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.
 *
 * The library provides methods for generating a hash of a message that conforms to the
 * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]
 * specifications.
 */
library MessageHashUtils {
    /**
     * @dev Returns the keccak256 digest of an EIP-191 signed data with version
     * `0x45` (`personal_sign` messages).
     *
     * The digest is calculated by prefixing a bytes32 `messageHash` with
     * `"\x19Ethereum Signed Message:\n32"` and hashing the result. It corresponds with the
     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.
     *
     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with
     * keccak256, although any bytes32 value can be safely used because the final digest will
     * be re-hashed.
     *
     * See {ECDSA-recover}.
     */
    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, "\x19Ethereum Signed Message:\n32") // 32 is the bytes-length of messageHash
            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix
            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)
        }
    }

    /**
     * @dev Returns the keccak256 digest of an EIP-191 signed data with version
     * `0x45` (`personal_sign` messages).
     *
     * The digest is calculated by prefixing an arbitrary `message` with
     * `"\x19Ethereum Signed Message:\n" + len(message)` and hashing the result. It corresponds with the
     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.
     *
     * See {ECDSA-recover}.
     */
    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {
        return
            keccak256(bytes.concat("\x19Ethereum Signed Message:\n", bytes(Strings.toString(message.length)), message));
    }

    /**
     * @dev Returns the keccak256 digest of an EIP-191 signed data with version
     * `0x00` (data with intended validator).
     *
     * The digest is calculated by prefixing an arbitrary `data` with `"\x19\x00"` and the intended
     * `validator` address. Then hashing the result.
     *
     * See {ECDSA-recover}.
     */
    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(hex"19_00", validator, data));
    }

    /**
     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).
     *
     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with
     * `\x19\x01` and hashing the result. It corresponds to the hash signed by the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.
     *
     * See {ECDSA-recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {
        /// @solidity memory-safe-assembly
        assembly {
            let ptr := mload(0x40)
            mstore(ptr, hex"19_01")
            mstore(add(ptr, 0x02), domainSeparator)
            mstore(add(ptr, 0x22), structHash)
            digest := keccak256(ptr, 0x42)
        }
    }
}


// File: @openzeppelin/contracts/utils/cryptography/SignatureChecker.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)

pragma solidity ^0.8.20;

import {ECDSA} from "./ECDSA.sol";
import {IERC1271} from "../../interfaces/IERC1271.sol";

/**
 * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA
 * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like
 * Argent and Safe Wallet (previously Gnosis Safe).
 */
library SignatureChecker {
    /**
     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the
     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.
     *
     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus
     * change through time. It could return true at block N and false at block N+1 (or the opposite).
     */
    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {
        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);
        return
            (error == ECDSA.RecoverError.NoError && recovered == signer) ||
            isValidERC1271SignatureNow(signer, hash, signature);
    }

    /**
     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated
     * against the signer smart contract using ERC1271.
     *
     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus
     * change through time. It could return true at block N and false at block N+1 (or the opposite).
     */
    function isValidERC1271SignatureNow(
        address signer,
        bytes32 hash,
        bytes memory signature
    ) internal view returns (bool) {
        (bool success, bytes memory result) = signer.staticcall(
            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))
        );
        return (success &&
            result.length >= 32 &&
            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));
    }
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Muldiv operation overflow.
     */
    error MathOverflowedMulDiv();

    enum Rounding {
        Floor, // Toward negative infinity
        Ceil, // Toward positive infinity
        Trunc, // Toward zero
        Expand // Away from zero
    }

    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds towards infinity instead
     * of rounding towards zero.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        if (b == 0) {
            // Guarantee the same behavior as in a regular Solidity division.
            return a / b;
        }

        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
     * denominator == 0.
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
     * Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0 = x * y; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            if (denominator <= prod1) {
                revert MathOverflowedMulDiv();
            }

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.

            uint256 twos = denominator & (0 - denominator);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
            // works in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
     * towards zero.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);
        }
    }

    /**
     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
     */
    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
        return uint8(rounding) % 2 == 1;
    }
}


// File: @openzeppelin/contracts/utils/math/SignedMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard signed math utilities missing in the Solidity language.
 */
library SignedMath {
    /**
     * @dev Returns the largest of two signed numbers.
     */
    function max(int256 a, int256 b) internal pure returns (int256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two signed numbers.
     */
    function min(int256 a, int256 b) internal pure returns (int256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two signed numbers without overflow.
     * The result is rounded towards zero.
     */
    function average(int256 a, int256 b) internal pure returns (int256) {
        // Formula from the book "Hacker's Delight"
        int256 x = (a & b) + ((a ^ b) >> 1);
        return x + (int256(uint256(x) >> 255) & (a ^ b));
    }

    /**
     * @dev Returns the absolute unsigned value of a signed value.
     */
    function abs(int256 n) internal pure returns (uint256) {
        unchecked {
            // must be unchecked in order to support `n = type(int256).min`
            return uint256(n >= 0 ? n : -n);
        }
    }
}


// File: @openzeppelin/contracts/utils/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    bool private _paused;

    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    /**
     * @dev The operation failed because the contract is paused.
     */
    error EnforcedPause();

    /**
     * @dev The operation failed because the contract is not paused.
     */
    error ExpectedPause();

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        if (paused()) {
            revert EnforcedPause();
        }
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        if (!paused()) {
            revert ExpectedPause();
        }
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: @openzeppelin/contracts/utils/ShortStrings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)

pragma solidity ^0.8.20;

import {StorageSlot} from "./StorageSlot.sol";

// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |
// | length  | 0x                                                              BB |
type ShortString is bytes32;

/**
 * @dev This library provides functions to convert short memory strings
 * into a `ShortString` type that can be used as an immutable variable.
 *
 * Strings of arbitrary length can be optimized using this library if
 * they are short enough (up to 31 bytes) by packing them with their
 * length (1 byte) in a single EVM word (32 bytes). Additionally, a
 * fallback mechanism can be used for every other case.
 *
 * Usage example:
 *
 * ```solidity
 * contract Named {
 *     using ShortStrings for *;
 *
 *     ShortString private immutable _name;
 *     string private _nameFallback;
 *
 *     constructor(string memory contractName) {
 *         _name = contractName.toShortStringWithFallback(_nameFallback);
 *     }
 *
 *     function name() external view returns (string memory) {
 *         return _name.toStringWithFallback(_nameFallback);
 *     }
 * }
 * ```
 */
library ShortStrings {
    // Used as an identifier for strings longer than 31 bytes.
    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;

    error StringTooLong(string str);
    error InvalidShortString();

    /**
     * @dev Encode a string of at most 31 chars into a `ShortString`.
     *
     * This will trigger a `StringTooLong` error is the input string is too long.
     */
    function toShortString(string memory str) internal pure returns (ShortString) {
        bytes memory bstr = bytes(str);
        if (bstr.length > 31) {
            revert StringTooLong(str);
        }
        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));
    }

    /**
     * @dev Decode a `ShortString` back to a "normal" string.
     */
    function toString(ShortString sstr) internal pure returns (string memory) {
        uint256 len = byteLength(sstr);
        // using `new string(len)` would work locally but is not memory safe.
        string memory str = new string(32);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(str, len)
            mstore(add(str, 0x20), sstr)
        }
        return str;
    }

    /**
     * @dev Return the length of a `ShortString`.
     */
    function byteLength(ShortString sstr) internal pure returns (uint256) {
        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;
        if (result > 31) {
            revert InvalidShortString();
        }
        return result;
    }

    /**
     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.
     */
    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {
        if (bytes(value).length < 32) {
            return toShortString(value);
        } else {
            StorageSlot.getStringSlot(store).value = value;
            return ShortString.wrap(FALLBACK_SENTINEL);
        }
    }

    /**
     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.
     */
    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {
        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {
            return toString(value);
        } else {
            return store;
        }
    }

    /**
     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using
     * {setWithFallback}.
     *
     * WARNING: This will return the "byte length" of the string. This may not reflect the actual length in terms of
     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.
     */
    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {
        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {
            return byteLength(value);
        } else {
            return bytes(store).length;
        }
    }
}


// File: @openzeppelin/contracts/utils/StorageSlot.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)
// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.

pragma solidity ^0.8.20;

/**
 * @dev Library for reading and writing primitive types to specific storage slots.
 *
 * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
 * This library helps with reading and writing to such slots without the need for inline assembly.
 *
 * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.
 *
 * Example usage to set ERC1967 implementation slot:
 * ```solidity
 * contract ERC1967 {
 *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
 *
 *     function _getImplementation() internal view returns (address) {
 *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
 *     }
 *
 *     function _setImplementation(address newImplementation) internal {
 *         require(newImplementation.code.length > 0);
 *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
 *     }
 * }
 * ```
 */
library StorageSlot {
    struct AddressSlot {
        address value;
    }

    struct BooleanSlot {
        bool value;
    }

    struct Bytes32Slot {
        bytes32 value;
    }

    struct Uint256Slot {
        uint256 value;
    }

    struct StringSlot {
        string value;
    }

    struct BytesSlot {
        bytes value;
    }

    /**
     * @dev Returns an `AddressSlot` with member `value` located at `slot`.
     */
    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.
     */
    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.
     */
    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.
     */
    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `StringSlot` with member `value` located at `slot`.
     */
    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.
     */
    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := store.slot
        }
    }

    /**
     * @dev Returns an `BytesSlot` with member `value` located at `slot`.
     */
    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.
     */
    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := store.slot
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)

pragma solidity ^0.8.20;

import {Math} from "./math/Math.sol";
import {SignedMath} from "./math/SignedMath.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant HEX_DIGITS = "0123456789abcdef";
    uint8 private constant ADDRESS_LENGTH = 20;

    /**
     * @dev The `value` string doesn't fit in the specified `length`.
     */
    error StringsInsufficientHexLength(uint256 value, uint256 length);

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `int256` to its ASCII `string` decimal representation.
     */
    function toStringSigned(int256 value) internal pure returns (string memory) {
        return string.concat(value < 0 ? "-" : "", toString(SignedMath.abs(value)));
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        uint256 localValue = value;
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = HEX_DIGITS[localValue & 0xf];
            localValue >>= 4;
        }
        if (localValue != 0) {
            revert StringsInsufficientHexLength(value, length);
        }
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal
     * representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);
    }

    /**
     * @dev Returns true if the two strings are equal.
     */
    function equal(string memory a, string memory b) internal pure returns (bool) {
        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));
    }
}


// File: contracts/helpers/ListHelper.sol
/*
        [....     [... [......  [.. ..
      [..    [..       [..    [..    [..
    [..        [..     [..     [..         [..       [..
    [..        [..     [..       [..     [.   [..  [..  [..
    [..        [..     [..          [.. [..... [..[..   [..
      [..     [..      [..    [..    [..[.        [..   [..
        [....          [..      [.. ..    [....     [.. [...

    https://otsea.io
    https://t.me/OTSeaPortal
    https://twitter.com/OTSeaERC20
*/

// SPDX-License-Identifier: MIT
pragma solidity =0.8.20;

import "contracts/libraries/OTSeaErrors.sol";

/// @title A list helper contract
abstract contract ListHelper {
    uint16 internal constant LOOP_LIMIT = 500;
    bool internal constant ALLOW_ZERO = true;
    bool internal constant DISALLOW_ZERO = false;

    error InvalidStart();
    error InvalidEnd();
    error InvalidSequence();

    /**
     * @param _start Start
     * @param _end End
     * @param _total List total
     * @param _allowZero true - zero is a valid start or end, false - zero is an invalid start or end
     */
    modifier onlyValidSequence(
        uint256 _start,
        uint256 _end,
        uint256 _total,
        bool _allowZero
    ) {
        _checkSequence(_start, _end, _total, _allowZero);
        _;
    }

    /**
     * @param _start Start
     * @param _end End
     * @param _total Total
     * @param _allowZero true - zero is a valid start or end, false - zero is an invalid start or end
     * @dev check that a range of indexes is valid.
     */
    function _checkSequence(
        uint256 _start,
        uint256 _end,
        uint256 _total,
        bool _allowZero
    ) private pure {
        if (_allowZero) {
            if (_start >= _total) revert InvalidStart();
            if (_end >= _total) revert InvalidEnd();
        } else {
            if (_start == 0 || _start > _total) revert InvalidStart();
            if (_end == 0 || _end > _total) revert InvalidEnd();
        }
        if (_start > _end) revert InvalidStart();
        if (_end - _start + 1 > LOOP_LIMIT) revert InvalidSequence();
    }

    /// @dev _length List length
    function _validateListLength(uint256 _length) internal pure {
        if (_length == 0 || LOOP_LIMIT < _length) revert OTSeaErrors.InvalidArrayLength();
    }
}


// File: contracts/helpers/SignatureHelper.sol
/*
        [....     [... [......  [.. ..
      [..    [..       [..    [..    [..
    [..        [..     [..     [..         [..       [..
    [..        [..     [..       [..     [.   [..  [..  [..
    [..        [..     [..          [.. [..... [..[..   [..
      [..     [..      [..    [..    [..[.        [..   [..
        [....          [..      [.. ..    [....     [.. [...

    https://otsea.io
    https://t.me/OTSeaPortal
    https://twitter.com/OTSeaERC20
*/

// SPDX-License-Identifier: MIT
pragma solidity =0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/EIP712.sol";
import "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol";
import "contracts/libraries/OTSeaErrors.sol";

/// @title Abstract signature helper contract
abstract contract SignatureHelper is EIP712, Ownable {
    address public signer;

    error ExpiredSignature();
    error InvalidSignature();
    error SignatureRequired();

    event SignerUpdated(address signer);

    /**
     * @param _name Name of contract
     * @param _version Version of contract
     * @param _signer Address of signer
     */
    constructor(
        string memory _name,
        string memory _version,
        address _signer
    ) EIP712(_name, _version) {
        if (_signer == address(0)) revert OTSeaErrors.InvalidAddress();
        signer = _signer;
    }

    /**
     * @notice Set the signer
     * @param _signer New signer address
     */
    function setSigner(address _signer) external onlyOwner {
        if (_signer == address(0)) revert OTSeaErrors.InvalidAddress();
        signer = _signer;
        emit SignerUpdated(_signer);
    }

    /**
     * @param _data Reconstructed message
     * @param _signature Signature
     * @dev reverts if signature is invalid
     */
    function _checkSignature(
        bytes memory _data,
        bytes calldata _signature,
        uint256 _expiration
    ) internal view {
        if (_expiration < block.number) revert ExpiredSignature();
        if (
            !SignatureChecker.isValidSignatureNow(
                signer,
                _hashTypedDataV4(keccak256(_data)),
                _signature
            )
        ) revert InvalidSignature();
    }
}


// File: contracts/helpers/TransferHelper.sol
/*
        [....     [... [......  [.. ..
      [..    [..       [..    [..    [..
    [..        [..     [..     [..         [..       [..
    [..        [..     [..       [..     [.   [..  [..  [..
    [..        [..     [..          [.. [..... [..[..   [..
      [..     [..      [..    [..    [..[.        [..   [..
        [....          [..      [.. ..    [....     [.. [...

    https://otsea.io
    https://t.me/OTSeaPortal
    https://twitter.com/OTSeaERC20
*/

// SPDX-License-Identifier: MIT
pragma solidity =0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "contracts/libraries/OTSeaErrors.sol";

/// @title A transfer helper contract for ETH and tokens
contract TransferHelper is Context {
    using SafeERC20 for IERC20;

    /// @dev account -> Amount of ETH that failed to transfer
    mapping(address => uint256) private _maroonedETH;

    error NativeTransferFailed();

    event MaroonedETH(address account, uint256 amount);
    event MaroonedETHClaimed(address account, address receiver, uint256 amount);

    /**
     * @notice Claim marooned ETH
     * @param _receiver Address to receive the marooned ETH
     */
    function claimMaroonedETH(address _receiver) external {
        if (_receiver == address(0)) revert OTSeaErrors.InvalidAddress();
        uint256 amount = _maroonedETH[_msgSender()];
        if (amount == 0) revert OTSeaErrors.NotAvailable();
        _maroonedETH[_msgSender()] = 0;
        _transferETHOrRevert(_receiver, amount);
        emit MaroonedETHClaimed(_msgSender(), _receiver, amount);
    }

    /**
     * @notice Get the amount of marooned ETH for an account
     * @param _account Account to check
     * @return uint256 Marooned ETH
     */
    function getMaroonedETH(address _account) external view returns (uint256) {
        if (_account == address(0)) revert OTSeaErrors.InvalidAddress();
        return _maroonedETH[_account];
    }

    /**
     * @param _account Account to transfer ETH to
     * @param _amount Amount of ETH to transfer to _account
     * @dev Rather than reverting if the transfer fails, the _amount is stored for the _account to later claim
     */
    function _safeETHTransfer(address _account, uint256 _amount) internal {
        (bool success, ) = _account.call{value: _amount}("");
        if (!success) {
            _maroonedETH[_account] += _amount;
            emit MaroonedETH(_account, _amount);
        }
    }

    /**
     * @param _account Account to transfer ETH to
     * @param _amount Amount of ETH to transfer to _account
     * @dev The following will revert if the transfer fails
     */
    function _transferETHOrRevert(address _account, uint256 _amount) internal {
        (bool success, ) = _account.call{value: _amount}("");
        if (!success) revert NativeTransferFailed();
    }

    /**
     * @param _token Token to transfer into the contract from msg.sender
     * @param _amount Amount of _token to transfer
     * @return uint256 Actual amount transferred into the contract
     * @dev This function exists due to _token potentially having taxes
     */
    function _transferInTokens(IERC20 _token, uint256 _amount) internal returns (uint256) {
        uint256 balanceBefore = _token.balanceOf(address(this));
        _token.safeTransferFrom(_msgSender(), address(this), _amount);
        return _token.balanceOf(address(this)) - balanceBefore;
    }
}


// File: contracts/helpers/WhitelistHelper.sol
/*
        [....     [... [......  [.. ..
      [..    [..       [..    [..    [..
    [..        [..     [..     [..         [..       [..
    [..        [..     [..       [..     [.   [..  [..  [..
    [..        [..     [..          [.. [..... [..[..   [..
      [..     [..      [..    [..    [..[.        [..   [..
        [....          [..      [.. ..    [....     [.. [...

    https://otsea.io
    https://t.me/OTSeaPortal
    https://twitter.com/OTSeaERC20
*/

// SPDX-License-Identifier: MIT
pragma solidity =0.8.20;

import "contracts/helpers/ListHelper.sol";
import "contracts/libraries/OTSeaErrors.sol";

/**
 * @title Abstract whitelist helper contract
 * @dev Up to 500 addresses can be added or removed to/from the whitelist within a single TX.
 * This is to prevent the TX reverting due to running out of gas. If a user wishes to add or remove more than 500
 * addresses, they must do so by performing multiple transactions.
 */
abstract contract WhitelistHelper is ListHelper {
    struct WhitelistUpdate {
        address account;
        /// @dev "operation" represents whether or not to add (true) or remove (false) "account" to/from an order's whitelist.
        bool operation;
    }
    /**
     * @dev associated ID => wallet => whitelist ID
     * if whitelist ID > 0, then the wallet is whitelisted for the associated ID.
     */
    mapping(uint72 => mapping(address => uint256)) private _whitelistIDs;
    /// @dev associated ID => whitelist
    mapping(uint72 => address[]) private _whitelists;

    event WhitelistUpdated(uint72 indexed id, uint256 totalWhitelist);

    /**
     * @notice Update a whitelist associated with an ID
     * @param _id ID
     * @param _updates Updates to make to the whitelist associated with _id
     */
    function updateWhitelist(uint72 _id, WhitelistUpdate[] calldata _updates) external virtual;

    /**
     * @notice Get the total whitelisted accounts associated with an ID
     * @param _id ID
     * @return uint256 Total whitelisted
     */
    function getTotalWhitelisted(uint72 _id) external view returns (uint256) {
        _checkIDExists(_id);
        return _getTotalWhitelisted(_id);
    }

    /**
     * @notice Get a whitelist associated with an ID
     * @param _id ID
     * @param _start Start whitelist ID
     * @param _end End whitelist ID
     * @return whitelist An array of whitelisted accounts for _id within the range of _start and _end (inclusive)
     */
    function getWhitelist(
        uint72 _id,
        uint256 _start,
        uint256 _end
    )
        external
        view
        onlyValidSequence(_start, _end, _getTotalWhitelisted(_id), DISALLOW_ZERO)
        returns (address[] memory whitelist)
    {
        whitelist = new address[](_end - _start + 1);
        uint256 index;
        uint256 whitelistIndex = _start - 1;
        /// @dev whitelistIndex < _end is the same as whitelistIndex <= _end - 1
        for (whitelistIndex; whitelistIndex < _end; ) {
            whitelist[index] = _whitelists[_id][whitelistIndex];
            unchecked {
                index++;
                whitelistIndex++;
            }
        }
        return whitelist;
    }

    /**
     * @notice Check if an account is whitelisted for an associated ID
     * @param _account Account to check
     * @param _id ID
     * @return bool true if whitelisted, false if not
     */
    function checkIsWhitelisted(address _account, uint72 _id) external view returns (bool) {
        if (_account == address(0)) revert OTSeaErrors.InvalidAddress();
        _checkIDExists(_id);
        return _checkIsWhitelisted(_account, _id);
    }

    /**
     * @notice Check if an account is whitelisted for against many IDs
     * @param _account Account to check
     * @param _ids A list of IDs
     * @return isWhitelisted A list of booleans containing true if whitelisted, false if not, each index related to the index in _ids
     */
    function checkMultipleIsWhitelisted(
        address _account,
        uint72[] calldata _ids
    ) external view returns (bool[] memory isWhitelisted) {
        uint256 total = _ids.length;
        _validateListLength(total);
        if (_account == address(0)) revert OTSeaErrors.InvalidAddress();
        isWhitelisted = new bool[](total);
        uint256 i;
        for (i; i < total; ) {
            _checkIDExists(_ids[i]);
            isWhitelisted[i] = _checkIsWhitelisted(_account, _ids[i]);
            unchecked {
                i++;
            }
        }
        return isWhitelisted;
    }

    /**
     * @param _id ID
     * @param _whitelist A list of accounts to whitelist for the associated _id
     */
    function _initializeWhitelist(uint72 _id, address[] calldata _whitelist) internal {
        uint256 total = _whitelist.length;
        if (LOOP_LIMIT < total) revert OTSeaErrors.InvalidArrayLength();
        uint256 i;
        for (i; i < total; ) {
            if (_whitelist[i] == address(0)) revert OTSeaErrors.InvalidAddressAtIndex(i);
            if (_whitelistIDs[_id][_whitelist[i]] != 0)
                revert OTSeaErrors.DuplicateAddressAtIndex(i);
            _whitelistIDs[_id][_whitelist[i]] = i + 1;
            unchecked {
                i++;
            }
        }
        _whitelists[_id] = _whitelist;
        emit WhitelistUpdated(_id, total);
    }

    /**
     * @param _id ID
     * @param _updates A list of updates to make to the whitelist for the associated _id
     */
    function _updateWhitelist(uint72 _id, WhitelistUpdate[] calldata _updates) internal {
        uint256 total = _updates.length;
        _validateListLength(total);
        address[] storage orderWhitelist = _whitelists[_id];
        uint256 totalWhitelisted = _whitelists[_id].length;
        uint256 i;
        for (i; i < total; ) {
            if (_updates[i].account == address(0)) revert OTSeaErrors.InvalidAddressAtIndex(i);
            if (_updates[i].operation) {
                /// @dev add to whitelist, revert if there is a duplicate.
                if (_whitelistIDs[_id][_updates[i].account] != 0)
                    revert OTSeaErrors.DuplicateAddressAtIndex(i);
                _whitelistIDs[_id][_updates[i].account] = ++totalWhitelisted;
                orderWhitelist.push(_updates[i].account);
            } else {
                /// @dev remove from whitelist, revert if it doesn't exist.
                uint256 id = _whitelistIDs[_id][_updates[i].account];
                if (id == 0) revert OTSeaErrors.AddressNotFoundAtIndex(i);
                address lastAddress = orderWhitelist[totalWhitelisted - 1];
                if (_updates[i].account != lastAddress) {
                    /// @dev reshuffle array and mapping so that the last address is moved in to the current position.
                    orderWhitelist[id - 1] = lastAddress;
                    _whitelistIDs[_id][lastAddress] = id;
                }
                _whitelistIDs[_id][_updates[i].account] = 0;
                orderWhitelist.pop();
                totalWhitelisted--;
            }
            unchecked {
                i++;
            }
        }
        emit WhitelistUpdated(_id, totalWhitelisted);
    }

    /**
     * @param _id ID
     * @return uint256 Total whitelisted for _id
     */
    function _getTotalWhitelisted(uint72 _id) internal view returns (uint256) {
        return _whitelists[_id].length;
    }

    /**
     * @param _account Account to check
     * @param _id ID
     * @return bool true if whitelisted, false if not
     */
    function _checkIsWhitelisted(address _account, uint72 _id) internal view returns (bool) {
        return _whitelistIDs[_id][_account] != 0;
    }

    /**
     * @param _id ID
     * @dev _checkIDExists reverts if _id does not exist
     */
    function _checkIDExists(uint72 _id) internal view virtual;
}


// File: contracts/libraries/OTSeaErrors.sol
/*
        [....     [... [......  [.. ..
      [..    [..       [..    [..    [..
    [..        [..     [..     [..         [..       [..
    [..        [..     [..       [..     [.   [..  [..  [..
    [..        [..     [..          [.. [..... [..[..   [..
      [..     [..      [..    [..    [..[.        [..   [..
        [....          [..      [.. ..    [....     [.. [...

    https://otsea.io
    https://t.me/OTSeaPortal
    https://twitter.com/OTSeaERC20
*/

// SPDX-License-Identifier: MIT
pragma solidity =0.8.20;

/// @title Common OTSea errors
library OTSeaErrors {
    error InvalidAmount();
    error InvalidAddress();
    error InvalidIndex(uint256 index);
    error InvalidAmountAtIndex(uint256 index);
    error InvalidAddressAtIndex(uint256 index);
    error DuplicateAddressAtIndex(uint256 index);
    error AddressNotFoundAtIndex(uint256 index);
    error Unauthorized();
    error ExpectationMismatch();
    error InvalidArrayLength();
    error InvalidFee();
    error NotAvailable();
    error InvalidPurchase();
    error InvalidETH(uint256 expected);
    error Unchanged();
}


// File: contracts/libraries/OTSeaLibrary.sol
/*
        [....     [... [......  [.. ..
      [..    [..       [..    [..    [..
    [..        [..     [..     [..         [..       [..
    [..        [..     [..       [..     [.   [..  [..  [..
    [..        [..     [..          [.. [..... [..[..   [..
      [..     [..      [..    [..    [..[.        [..   [..
        [....          [..      [.. ..    [....     [.. [...

    https://otsea.io
    https://t.me/OTSeaPortal
    https://twitter.com/OTSeaERC20
*/

// SPDX-License-Identifier: MIT
pragma solidity =0.8.20;

/// @title Common OTSea variables
library OTSeaLibrary {
    enum FeeType {
        Fish,
        Whale
    }

    uint16 internal constant PERCENT_DENOMINATOR = 10000;
    address internal constant DEAD_ADDRESS = address(0xdead);
}


// File: contracts/otc/OTSea.sol
/*
        [....     [... [......  [.. ..
      [..    [..       [..    [..    [..
    [..        [..     [..     [..         [..       [..
    [..        [..     [..       [..     [.   [..  [..  [..
    [..        [..     [..          [.. [..... [..[..   [..
      [..     [..      [..    [..    [..[.        [..   [..
        [....          [..      [.. ..    [....     [.. [...

    OTSea Platform.

    https://otsea.io
    https://t.me/OTSeaPortal
    https://twitter.com/OTSeaERC20
*/

// SPDX-License-Identifier: MIT
pragma solidity =0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "contracts/helpers/ListHelper.sol";
import "contracts/helpers/SignatureHelper.sol";
import "contracts/helpers/TransferHelper.sol";
import "contracts/helpers/WhitelistHelper.sol";
import "contracts/libraries/OTSeaErrors.sol";
import "contracts/libraries/OTSeaLibrary.sol";

/**
 * @title OTSea Over-the-Counter (OTC) Contract
 * @dev This contract facilitates the creation and execution of buy and sell orders for tokens using ETH.
 *
 * Key definitions:
 *   - Order: An instruction given by a user to buy or sell tokens for a certain amount of ETH.
 *   - Trade/Swap: The partial or complete execution of an order.
 *   - Input:
 *       - For buy orders: The amount of ETH that will be used to purchase tokens.
 *       - For sell orders: The amount of tokens that will be up for sale.
 *   - Output:
 *       - For buy orders: The amount of tokens desired for the ETH input.
 *       - For sell orders: The amount of ETH desired for the token input.
 *
 * Transfer tax tokens:
 *   - When creating a sell order, if upon transferring tokens into the contract there are fewer tokens than expected. It
 *     is assumed the token has a transfer tax therefore, the total input and total output are reduced.
 *
 * Order features:
 *   - All-or-Nothing (AON): If enabled, an order must be filled in a single trade. If disabled, orders can be partially filled.
 *   - Whitelisting: Restricts trading to only whitelisted addresses.
 *   - Lock-up (for sell orders only): If enabled, when swapping ETH for tokens, the tokens are locked for a duration
 *     set by the contract with the aim of reducing arbitraging. Traders can claim their tokens after the lockup
 *     period.
 *   - Hide on Frontend: Hide an order on the frontend interface.
 *
 * Platform fees:
 *   - The fee is a percentage of the ETH traded.
 *   - The percentage charged depends on what fee type (fish or whale) the seller is. This is determined by the sellers
 *     OTSeaERC20 balance off-chain.
 *   - Initially the fish fee will be 1% and the whale fee will be 0.3%.
 *   - Fees cannot be increased, only reduced.
 *
 * EIP712 is used to sign typed data when creating a sell order or when swapping tokens for ETH. By using a signature,
 * the contract can reliably know a user's fee type. If this were to be calculated on-chain it could be subject to
 * flash loan attacks and also would limit this contract to only be deployable on Ethereum mainnet.
 *
 * Partners:
 *   - Partners of OTSea receive a portion of the platform fee (initially 30%).
 *   - Partners have the ability to toggle on a lock-up for their project's token. If set, all swaps from ETH to their
 *     project's token will be locked for a duration set by the contract with the aim of reducing arbitraging.
 *     Traders can claim their tokens after the lockup period ends for a specific lock-up.
 *
 * Blacklisting:
 *   - The owner of the contract has the ability to blacklist user addresses. Doing so results in the blacklisted user
 *     not being able to create new orders, trade, update the order, on top of this other other users cannot trade with
 *     orders belonging to blacklisted accounts. Blacklisted users can only cancel orders and claim their
 *     locked-up tokens.
 */
contract OTSea is
    ListHelper,
    Ownable,
    Pausable,
    ReentrancyGuard,
    TransferHelper,
    SignatureHelper,
    WhitelistHelper
{
    using SafeERC20 for IERC20;

    struct NewOrder {
        IERC20 token;
        bool isAON;
        /**
         * @dev withLockUp is a boolean only applicable to sell orders. If true, when swapping ETH for the order's tokens,
         * the amount the user should receive will instead be locked up for the duration set by _lockupPeriod.
         * After the lockup period has passed, the user is then able to claim their tokens.
         */
        bool withLockUp;
        bool isHidden;
        uint256 totalInput;
        uint256 totalOutput;
    }

    struct Order {
        address creator;
        OrderType orderType;
        State state;
        OTSeaLibrary.FeeType feeType;
        bool isAON;
        bool isHidden;
        bool withLockUp;
        IERC20 token;
        uint256 totalInput;
        uint256 inputTransacted;
        uint256 totalOutput;
        uint256 outputTransacted;
    }

    struct FeeDetailsSignature {
        bytes signature;
        uint256 expiresAt;
        OTSeaLibrary.FeeType feeType;
    }

    /**
     * @dev the Trade struct represents a trade a user wants to perform.
     * - If a user wants to swap ETH for tokens, it is a buy trade that interacts with sell orders (BuyTrade struct is used).
     * - If a user wants to swap tokens for ETH, it is a sell trade that interacts with buy orders (Trade struct is used).
     */
    struct Trade {
        /// @dev valid orders will always have an orderID greater than 0 and less than or equal to the total orders.
        uint72 orderID;
        /**
         * @dev Definition of amountToSwap:
         * Buy trade:
         *  - amount of ETH to swap for tokens.
         * Sell trade:
         *  - amount of tokens to swap for ETH.
         */
        uint256 amountToSwap;
        /**
         * @dev "totalOutput" is used to calculate the amount to receive from a trade.
         * - Trade.totalOutput must exactly match Order.totalOutput.
         * - Any discrepancy between these values causes the TX to revert.
         * - This strict equality check prevents the manipulation of order outputs (e.g., front-running) by the order creators.
         */
        uint256 totalOutput;
    }

    /**
     * @dev The partner struct refers to partners of OTSea. account is set to an address owned by the project for the
     * purpose of:
     * - Receiving the referral fees
     * - Being able to manually enforce lock-ups on orders that exchange the project's token
     */
    struct Partner {
        address account;
        bool isLockUpOverrideEnabled;
    }

    struct LockUp {
        address token;
        uint88 unlockAt;
        uint256 amount;
        uint256 withdrawn;
    }

    struct ClaimLockUp {
        uint256 index;
        uint256 amount;
    }

    enum State {
        Open,
        Fulfilled,
        Cancelled
    }

    enum OrderType {
        Buy,
        Sell
    }

    /// @dev Partner referral fees can be set to be between 10-50% (to 2 d.p.) of the platform revenue
    uint16 private constant MIN_PARTNER_FEE = 1000;
    uint16 private constant MAX_PARTNER_FEE = 5000;
    uint8 private constant MAX_TRADES_UPPER_LIMIT = 100;
    uint8 private constant MAX_CANCELLATIONS = 100;
    uint8 private constant MIN_LOCKUP_TIME = 1 minutes;
    uint16 private constant MAX_LOCKUP_TIME = 1 hours;
    bytes32 private constant FEE_DETAILS_SIGNATURE_TYPE =
        keccak256("FeeDetails(address account,uint256 expiresAt,uint8 feeType)");
    address private _revenueDistributor;
    uint72 private _totalOrders;
    /// @dev _fishFee = 1% of the ETH traded
    uint8 private _fishFee = 100;
    /// @dev _whaleFee = 0.3% of the ETH traded
    uint8 private _whaleFee = 30;
    uint8 private _maxTrades = 10;
    uint16 private _partnerFee = 3000;
    uint16 private _lockupPeriod = 5 minutes;
    mapping(uint72 => Order) private _orders;
    /// @dev token => partner
    mapping(address => Partner) private _partners;
    /// @dev user address => lock-up list
    mapping(address => LockUp[]) private _lockUps;
    mapping(address => bool) private _blacklist;

    /// @dev errors
    error UnlockDateNotReached(uint256 index);
    error LockUpNotAllowed();
    error OrderBlacklisted();
    error InvalidTradeOrderType();
    error OrderNotFound(uint72 orderID);

    /// @dev events
    event FeesUpdated(uint8 fishFee, uint8 whaleFee, uint16 partnerFee);
    event MaxTradesUpdated(uint8 maxSwaps);
    event PartnerUpdated(address indexed token, Partner partner);
    event LockUpOverrideUpdated(address indexed account, address indexed token, bool enforced);
    event LockupPeriodUpdated(uint16 time);
    event BlacklistUpdated(address indexed account, bool operation);
    event BuyOrderCreated(
        uint72 indexed orderID,
        address indexed creator,
        NewOrder newOrder,
        uint8 decimals
    );
    event SellOrderCreated(
        uint72 indexed orderID,
        address indexed creator,
        NewOrder newOrder,
        uint256 actualTotalInput,
        uint256 actualTotalOutput,
        OTSeaLibrary.FeeType feeType,
        uint8 decimals
    );
    event SwappedETHForTokens(
        address indexed account,
        address indexed token,
        Trade[] trades,
        uint256 swapped,
        uint256 received,
        uint256 claimable
    );
    event SwappedTokensForETH(
        address indexed account,
        address indexed token,
        Trade[] trades,
        uint256 swapped,
        uint256 received,
        OTSeaLibrary.FeeType feeType
    );
    event Traded(
        uint72 indexed orderID,
        address indexed account,
        uint256 swapped,
        uint256 received
    );
    event LockUpsClaimed(address indexed account, address indexed receiver, ClaimLockUp[] claims);
    event OrderPriceUpdated(uint72 indexed orderID, uint256 newTotalOutput);
    event OrderLockUpUpdated(uint72 indexed orderID, bool enforced);
    event CancelledOrders(uint72[] orderIDs);
    event RevenueTransferred(uint256 eth);
    event PartnerFeePaid(address indexed token, address indexed partner, uint256 eth);

    /// @param _orderID Order ID
    modifier onlyOrderCreator(uint72 _orderID) {
        _checkCallerIsOrderCreator(_orderID);
        _;
    }

    modifier whenNotBlacklisted() {
        _checkCallerIsNotBlacklisted();
        _;
    }

    /**
     * @param _multiSigAdmin Multi-sig admin
     * @param revenueDistributor_ Revenue distributor contract
     * @param _signer Signer address
     */
    constructor(
        address _multiSigAdmin,
        address revenueDistributor_,
        address _signer
    ) Ownable(_multiSigAdmin) SignatureHelper("OTSea", "v1.0.0", _signer) {
        if (address(revenueDistributor_) == address(0)) revert OTSeaErrors.InvalidAddress();
        _revenueDistributor = revenueDistributor_;
    }

    /// @notice Update the Revenue Distributor
    function setRevenueDistributor(address revenueDistributor_) external onlyOwner {
        if (address(_revenueDistributor) == address(0)) revert OTSeaErrors.InvalidAddress();
        _revenueDistributor = revenueDistributor_;
    }

    /// @notice Pause the contract
    function pauseContract() external onlyOwner {
        _pause();
    }

    /// @notice Unpause the contract
    function unpauseContract() external onlyOwner {
        _unpause();
    }

    /**
     * @notice Set the fish and whale fees
     * @param _newFishFee Fish fee
     * @param _newWhaleFee Whale fee
     * @param _newPartnerFee Partner fee relative to the revenue
     */
    function setFees(
        uint8 _newFishFee,
        uint8 _newWhaleFee,
        uint16 _newPartnerFee
    ) external onlyOwner {
        if (
            _fishFee < _newFishFee ||
            _whaleFee < _newWhaleFee ||
            _newFishFee < _newWhaleFee ||
            _newPartnerFee < MIN_PARTNER_FEE ||
            MAX_PARTNER_FEE < _newPartnerFee
        ) revert OTSeaErrors.InvalidFee();
        _fishFee = _newFishFee;
        _whaleFee = _newWhaleFee;
        _partnerFee = _newPartnerFee;
        emit FeesUpdated(_newFishFee, _newWhaleFee, _newPartnerFee);
    }

    /**
     * @notice Set the maximum number of trades that can occur in a single TX
     * @param maxTrades_ Max trades
     */
    function setMaxTrades(uint8 maxTrades_) external onlyOwner {
        if (maxTrades_ == 0 || MAX_TRADES_UPPER_LIMIT < maxTrades_)
            revert OTSeaErrors.InvalidAmount();
        _maxTrades = maxTrades_;
        emit MaxTradesUpdated(maxTrades_);
    }

    /**
     * @notice Add, remove or update a partner's details
     * @param _token Token address
     * @param _partner Partner details
     */
    function updatePartner(address _token, Partner calldata _partner) external onlyOwner {
        if (_token == address(0)) revert OTSeaErrors.InvalidAddress();
        if (
            _partners[_token].account == _partner.account &&
            _partners[_token].isLockUpOverrideEnabled == _partner.isLockUpOverrideEnabled
        ) revert OTSeaErrors.Unchanged();
        if (_partner.account == address(0) && _partner.isLockUpOverrideEnabled)
            revert OTSeaErrors.NotAvailable();
        _partners[_token] = Partner(_partner.account, _partner.isLockUpOverrideEnabled);
        emit PartnerUpdated(_token, _partner);
    }

    /**
     * @notice Add/remove a lock-up override for a token, only the partner and the owner can make this change
     * @param _token Token address
     * @param _enforce enable (true) or disable (false)
     * @dev If token lock-up override is enabled, when swapping ETH for tokens, the tokens will be held in the contract
     * for the trader to claim after the _lockupPeriod has passed. If disabled, it will fallback to the Order.withLockUp
     * boolean when swapping ETH for tokens.
     */
    function updateLockUpOverride(address _token, bool _enforce) external {
        Partner storage partner = _partners[_token];
        /// @dev no need to check if _token is the zero address because partner.account would equal the zero address
        if (partner.account == address(0)) revert OTSeaErrors.NotAvailable();
        if (partner.account != _msgSender() && owner() != _msgSender())
            revert OTSeaErrors.Unauthorized();
        if (partner.isLockUpOverrideEnabled == _enforce) revert OTSeaErrors.Unchanged();
        partner.isLockUpOverrideEnabled = _enforce;
        emit LockUpOverrideUpdated(_token, _msgSender(), _enforce);
    }

    /**
     * @notice Set the lockup period for orders using a lock-up or for tokens that have enforced a lock-up override
     * @param _time Time (in seconds)
     */
    function setLockupPeriod(uint16 _time) external onlyOwner {
        if (_time < MIN_LOCKUP_TIME || MAX_LOCKUP_TIME < _time) revert OTSeaErrors.InvalidAmount();
        _lockupPeriod = _time;
        emit LockupPeriodUpdated(_time);
    }

    /**
     * @notice Add/remove an account from the blacklist
     * @param _account Account
     * @param _operation add (true) or remove (false) "account" to/from the blacklist
     * @dev Blacklisting an account prevents them from creating orders, trading, updating an order,
     * and other users interacting with their orders. Blacklisted users can only cancel orders and claim
     * their locked-up tokens.
     */
    function blacklistAccount(address _account, bool _operation) external onlyOwner {
        if (_account == address(0)) revert OTSeaErrors.InvalidAddress();
        if (_blacklist[_account] == _operation) revert OTSeaErrors.Unchanged();
        _blacklist[_account] = _operation;
        emit BlacklistUpdated(_account, _operation);
    }

    /**
     * @notice Initiate the creation of a buy order
     * @param _newOrder Core new order details
     * @param _whitelist List of exclusive users allowed to trade the order (optional)
     * @dev no need for nonReentrant modifier because no external calls are made
     */
    function createBuyOrder(
        NewOrder calldata _newOrder,
        address[] calldata _whitelist
    ) external payable whenNotPaused whenNotBlacklisted {
        if (address(_newOrder.token) == address(0)) revert OTSeaErrors.InvalidAddress();
        if (msg.value != _newOrder.totalInput) revert OTSeaErrors.InvalidETH(_newOrder.totalInput);
        uint72 orderID = _createBuyOrder(_newOrder);
        if (_whitelist.length != 0) {
            _initializeWhitelist(orderID, _whitelist);
        }
    }

    /**
     * @notice Initiate the creation of a sell order
     * @param _newOrder Core new order details
     * @param _whitelist List of exclusive users allowed to trade the order (optional)
     * @param _feeDetailsSignature Fee details signature (optional)
     */
    function createSellOrder(
        NewOrder calldata _newOrder,
        address[] calldata _whitelist,
        FeeDetailsSignature calldata _feeDetailsSignature
    ) external nonReentrant whenNotPaused whenNotBlacklisted {
        if (address(_newOrder.token) == address(0)) revert OTSeaErrors.InvalidAddress();
        /// @dev retrieve the fee type to be stored against the order
        OTSeaLibrary.FeeType feeType = _retrieveFeeDetails(_feeDetailsSignature);
        uint72 orderID = _createSellOrder(_newOrder, feeType);
        if (_whitelist.length != 0) {
            _initializeWhitelist(orderID, _whitelist);
        }
    }

    /**
     * @notice Swap ETH for tokens (interacts with sell orders)
     * @param _token Token address
     * @param _trades Trades
     * @param _newOrder Core new order details
     * @param _allowLockUps Allow trades to have lock-ups (true), disallow trades to have lock-ups (false)
     * @param _expectedLockupPeriod The current lockupPeriod defined by _lockupPeriod
     * @dev _allowLockups act as a safety measure to ensure the user is comfortable with some or all trades resulting
     * in tokens being locked. _expectedLockupPeriod should match the current _lockupPeriod, this is in case the owner
     * changes the _lockupPeriod.
     */
    function swapETHForTokens(
        IERC20 _token,
        Trade[] calldata _trades,
        NewOrder calldata _newOrder,
        bool _allowLockUps,
        uint16 _expectedLockupPeriod
    ) external payable nonReentrant whenNotPaused whenNotBlacklisted {
        if (_allowLockUps && _expectedLockupPeriod != _lockupPeriod)
            revert OTSeaErrors.ExpectationMismatch();
        (
            uint256 totalAmountToSwap,
            uint256 totalAmountToReceive,
            uint256 totalAmountToClaim,
            uint256 totalRevenue
        ) = _executeBuy(_token, _trades, _allowLockUps);
        if (_newOrder.token == _token) {
            /// @dev create a buy order
            if (totalAmountToSwap + _newOrder.totalInput != msg.value)
                revert OTSeaErrors.InvalidETH(totalAmountToSwap + _newOrder.totalInput);
            /// @dev _newOrder.totalInput (ETH) is left in the contract for users to sell tokens for
            _createBuyOrder(_newOrder);
        } else if (totalAmountToSwap != msg.value) {
            /**
             * @dev if _newOrder.token != _token then the user does not wish to place a new order therefore if
             * msg.value is not equal to totalAmountToSwap, then the incorrect amount of ETH has been paid
             */
            revert OTSeaErrors.InvalidETH(totalAmountToSwap);
        }
        _transferRevenue(totalRevenue, address(_token));
        /// @dev a swap results in tokens either being locked, directly transferred to the user, or both
        if (totalAmountToClaim != 0) {
            /// @dev lock-up the (totalAmountToClaim) tokens for the user to claim after the lockup period has passed
            _lockUps[_msgSender()].push(
                LockUp(
                    address(_token),
                    uint88(block.timestamp + _lockupPeriod),
                    totalAmountToClaim,
                    0
                )
            );
        }
        if (totalAmountToReceive != 0) {
            /// @dev transfer the purchased tokens to the caller
            _token.safeTransfer(_msgSender(), totalAmountToReceive);
        }
        emit SwappedETHForTokens(
            _msgSender(),
            address(_token),
            _trades,
            totalAmountToSwap,
            totalAmountToReceive,
            totalAmountToClaim
        );
    }

    /**
     * @notice Swap tokens for ETH (interacts with buy orders)
     * @param _token Token address
     * @param _trades Trades
     * @param _newOrder Core new order details
     * @param _feeDetailsSignature Signature containing data about msg.sender's fee type
     */
    function swapTokensForETH(
        IERC20 _token,
        Trade[] calldata _trades,
        NewOrder calldata _newOrder,
        FeeDetailsSignature calldata _feeDetailsSignature
    ) external nonReentrant whenNotPaused whenNotBlacklisted {
        OTSeaLibrary.FeeType feeType = _retrieveFeeDetails(_feeDetailsSignature);
        (uint256 totalAmountToSwap, uint256 totalAmountToReceive) = _executeSell(_token, _trades);
        if (_newOrder.token == _token) {
            /// @dev create a sell order.
            _createSellOrder(_newOrder, feeType);
        }
        /// @dev transfer out ETH.
        uint256 revenue = _handleETHPayment(_msgSender(), totalAmountToReceive, feeType);
        _transferRevenue(revenue, address(_token));
        emit SwappedTokensForETH(
            _msgSender(),
            address(_token),
            _trades,
            totalAmountToSwap,
            totalAmountToReceive,
            feeType
        );
    }

    /**
     * @notice Claim multiple lock-ups (supports lock-ups with different tokens)
     * @param _receiver Address to receive tokens
     * @param _claims A list of claims
     * @dev The purpose of the _receiver is in case the transfer were to fail (e.g. max wallet reached). ClaimLockUp
     * includes an amount, this is essential because a token may have a max tx limit in place wish could result
     * in a transfer failing. Therefore the user simply needs to claim in small chunks.
     * Blacklisted users can claim their lock-ups.
     */
    function claimLockUps(address _receiver, ClaimLockUp[] calldata _claims) external {
        uint256 total = _lockUps[_msgSender()].length;
        if (total == 0) revert OTSeaErrors.NotAvailable();
        uint256 length = _claims.length;
        _validateListLength(length);
        for (uint256 i; i < length; ) {
            ClaimLockUp calldata _claim = _claims[i];
            if (total <= _claim.index) revert OTSeaErrors.InvalidIndex(i);
            LockUp memory lockUp = _lockUps[_msgSender()][_claim.index];
            if (block.timestamp < lockUp.unlockAt) revert UnlockDateNotReached(i);
            uint256 remaining = lockUp.amount - lockUp.withdrawn;
            if (_claim.amount == 0 || remaining < _claim.amount)
                revert OTSeaErrors.InvalidAmountAtIndex(i);
            _lockUps[_msgSender()][_claim.index].withdrawn += _claim.amount;
            IERC20(lockUp.token).safeTransfer(_receiver, _claim.amount);
            unchecked {
                i++;
            }
        }
        emit LockUpsClaimed(_msgSender(), _receiver, _claims);
    }

    /**
     * @notice Claim multiple lock-ups (supports only lock-ups with the same tokens)
     * @param _token Token address
     * @param _receiver Address to receive tokens
     * @param _claims A list of claims
     * @dev use this function if claiming lock-ups for the same token as it is more gas efficient. The purpose of
     * the _receiver is in case the transfer were to fail (e.g. max wallet reached). ClaimLockUp
     * includes an amount, this is essential because a token may have a max tx limit in place wish could result
     * in a transfer failing. Therefore the user simply needs to claim in small chunks over multiple txs.
     * Blacklisted users can claim their lock-ups.
     */
    function claimLockUpByToken(
        IERC20 _token,
        address _receiver,
        ClaimLockUp[] calldata _claims
    ) external {
        if (address(_token) == address(0)) revert OTSeaErrors.InvalidAddress();
        uint256 total = _lockUps[_msgSender()].length;
        if (total == 0) revert OTSeaErrors.NotAvailable();
        uint256 length = _claims.length;
        _validateListLength(length);
        uint256 totalToClaim;
        for (uint256 i; i < length; ) {
            ClaimLockUp calldata _claim = _claims[i];
            if (total <= _claim.index) revert OTSeaErrors.InvalidIndex(i);
            LockUp memory lockUp = _lockUps[_msgSender()][_claim.index];
            if (lockUp.token != address(_token)) revert OTSeaErrors.InvalidAddressAtIndex(i);
            if (block.timestamp < lockUp.unlockAt) revert UnlockDateNotReached(i);
            uint256 remaining = lockUp.amount - lockUp.withdrawn;
            if (_claim.amount == 0 || remaining < _claim.amount)
                revert OTSeaErrors.InvalidAmountAtIndex(i);
            _lockUps[_msgSender()][_claim.index].withdrawn += _claim.amount;
            totalToClaim += _claim.amount;
            unchecked {
                i++;
            }
        }
        _token.safeTransfer(_receiver, totalToClaim);
        emit LockUpsClaimed(_msgSender(), _receiver, _claims);
    }

    /**
     * @notice Update the price of an order
     * @param _orderID Order ID
     * @param _expectedRemainingInput Expected remaining input
     * @param _newRemainingOutput New output value for the remaining input
     */
    function updatePrice(
        uint72 _orderID,
        uint256 _expectedRemainingInput,
        uint256 _newRemainingOutput
    ) external onlyOrderCreator(_orderID) whenNotPaused whenNotBlacklisted {
        Order storage order = _orders[_orderID];
        if (order.state != State.Open) revert OTSeaErrors.NotAvailable();
        if (_newRemainingOutput == 0) revert OTSeaErrors.InvalidAmount();
        if (order.totalInput - order.inputTransacted != _expectedRemainingInput)
            revert OTSeaErrors.ExpectationMismatch();
        uint256 newTotalOutput = order.outputTransacted + _newRemainingOutput;
        order.totalOutput = newTotalOutput;
        emit OrderPriceUpdated(_orderID, newTotalOutput);
    }

    /**
     * @notice Update an order's whitelist
     * @param _orderID Order ID
     * @param _updates Whitelist updates
     */
    function updateWhitelist(
        uint72 _orderID,
        WhitelistUpdate[] calldata _updates
    ) external override onlyOrderCreator(_orderID) whenNotPaused whenNotBlacklisted {
        if (_orders[_orderID].state != State.Open) revert OTSeaErrors.NotAvailable();
        _updateWhitelist(_orderID, _updates);
    }

    /**
     * @notice Update a sell order to enforce or remove a lock-up when traded with
     * @param _orderID Order ID
     * @param _enforce enable (true) or disable (false)
     */
    function updateOrderLockUp(
        uint72 _orderID,
        bool _enforce
    ) external onlyOrderCreator(_orderID) whenNotPaused whenNotBlacklisted {
        Order storage order = _orders[_orderID];
        if (order.state != State.Open || order.orderType == OrderType.Buy)
            revert OTSeaErrors.NotAvailable();
        if (order.withLockUp == _enforce) revert OTSeaErrors.Unchanged();
        order.withLockUp = _enforce;
        emit OrderLockUpUpdated(_orderID, _enforce);
    }

    /**
     * @notice Cancel multiple orders (supports orders with different tokens)
     * @param _orderIDs A list of order IDs to cancel
     * @dev Blacklisted users can cancel orders
     */
    function cancelOrders(uint72[] calldata _orderIDs) external nonReentrant {
        uint256 total = _orderIDs.length;
        if (total == 0 || MAX_CANCELLATIONS < total) revert OTSeaErrors.InvalidArrayLength();
        uint256 totalETHOwed;
        uint256 i;
        for (i; i < total; ) {
            Order storage order = _orders[_orderIDs[i]];
            if (order.creator != _msgSender()) revert OTSeaErrors.Unauthorized();
            if (order.state != State.Open) revert OTSeaErrors.NotAvailable();
            order.state = State.Cancelled;
            uint256 outstanding = order.totalInput - order.inputTransacted;
            if (order.orderType == OrderType.Buy) {
                /// @dev transfer unsold ETH.
                totalETHOwed += outstanding;
            } else {
                /// @dev transfer unsold tokens.
                order.token.safeTransfer(order.creator, outstanding);
            }
            unchecked {
                i++;
            }
        }
        if (totalETHOwed != 0) {
            _safeETHTransfer(_msgSender(), totalETHOwed);
        }
        emit CancelledOrders(_orderIDs);
    }

    /**
     * @notice Cancel multiple orders (supports only orders with the same tokens)
     * @param _token Token address
     * @param _orderIDs A list of order IDs to cancel
     * @dev use this function if cancelling orders with the same token as it is more gas efficient.
     * Blacklisted users can cancel orders
     */
    function cancelTokenOrders(IERC20 _token, uint72[] calldata _orderIDs) external nonReentrant {
        uint256 total = _orderIDs.length;
        if (total == 0 || MAX_CANCELLATIONS < total) revert OTSeaErrors.InvalidArrayLength();
        uint256 totalETHOwed;
        uint256 totalTokensOwed;
        uint256 i;
        for (i; i < total; ) {
            Order storage order = _orders[_orderIDs[i]];
            if (order.creator != _msgSender()) revert OTSeaErrors.Unauthorized();
            if (order.state != State.Open || order.token != _token)
                revert OTSeaErrors.NotAvailable();
            order.state = State.Cancelled;
            uint256 outstanding = order.totalInput - order.inputTransacted;
            if (order.orderType == OrderType.Buy) {
                /// @dev transfer unsold ETH.
                totalETHOwed += outstanding;
            } else {
                /// @dev transfer unsold tokens.
                totalTokensOwed += outstanding;
            }
            unchecked {
                i++;
            }
        }
        if (totalETHOwed != 0) {
            _safeETHTransfer(_msgSender(), totalETHOwed);
        }
        if (totalTokensOwed != 0) {
            _token.safeTransfer(_msgSender(), totalTokensOwed);
        }
        emit CancelledOrders(_orderIDs);
    }

    /**
     * @notice Get the total number of orders
     * @return uint72 Total orders
     */
    function getTotalOrders() external view returns (uint72) {
        return _totalOrders;
    }

    /**
     * @notice Get an order by ID
     * @param _orderID Order ID
     * @return order Order details
     */
    function getOrder(uint72 _orderID) external view returns (Order memory order) {
        _checkIDExists(_orderID);
        return _orders[_orderID];
    }

    /**
     * @notice Get a list of orders in a sequence from an order ID to another order ID
     * @param _start Start order ID
     * @param _end End order ID
     * @return orders A list of orders starting and _start and ending at _end
     */
    function getOrdersInSequence(
        uint256 _start,
        uint256 _end
    )
        external
        view
        onlyValidSequence(_start, _end, _totalOrders, DISALLOW_ZERO)
        returns (Order[] memory orders)
    {
        orders = new Order[](_end - _start + 1);
        uint256 index;
        uint256 orderId = _start;
        for (orderId; orderId <= _end; ) {
            orders[index++] = _orders[uint72(orderId)];
            unchecked {
                orderId++;
            }
        }
        return orders;
    }

    /**
     * @notice Get a list of orders by a list of order IDs
     * @param _orderIDs Order IDs
     * @return orders A list of orders with each index corresponding to _orderIDs
     */
    function getOrdersByIDs(
        uint72[] calldata _orderIDs
    ) external view returns (Order[] memory orders) {
        uint256 length = _orderIDs.length;
        _validateListLength(length);
        orders = new Order[](length);
        uint256 i;
        for (i; i < length; ) {
            _checkIDExists(_orderIDs[i]);
            orders[i] = _orders[_orderIDs[i]];
            unchecked {
                i++;
            }
        }
        return orders;
    }

    /**
     * @notice Get the lockup period
     * @return uint16 Lockup period
     */
    function getLockupPeriod() public view returns (uint16) {
        return _lockupPeriod;
    }

    /**
     * @notice Get the total lock-ups for a user
     * @param _account Account
     * @return uint256 Total lock-ups for _account
     */
    function getTotalLockUps(address _account) public view returns (uint256) {
        if (_account == address(0)) revert OTSeaErrors.InvalidAddress();
        return _lockUps[_account].length;
    }

    /**
     * @notice Get lock-ups for a user
     * @param _account Account
     * @param _indexes Indexes
     * @return lockUps Lock-up list
     */
    function getLockUps(
        address _account,
        uint256[] calldata _indexes
    ) external view returns (LockUp[] memory lockUps) {
        uint256 total = getTotalLockUps(_account);
        uint256 length = _indexes.length;
        _validateListLength(length);
        lockUps = new LockUp[](length);
        uint256 i;
        for (i; i < length; ) {
            if (total <= _indexes[i]) revert OTSeaErrors.InvalidIndex(i);
            lockUps[i] = _lockUps[_account][_indexes[i]];
            unchecked {
                i++;
            }
        }
        return lockUps;
    }

    /**
     * @notice Get fee percents
     * @return fishFee Fish fee percent
     * @return whaleFee Whale fee percent
     * @return partnerFee Partner fee percent
     */
    function getFees() external view returns (uint8 fishFee, uint8 whaleFee, uint16 partnerFee) {
        return (_fishFee, _whaleFee, _partnerFee);
    }

    /**
     * @notice Get the maximum number of trades that can be executed in a single TX
     * @return uint8 Maximum number of trades
     */
    function getMaxTrades() external view returns (uint8) {
        return _maxTrades;
    }

    /**
     * @notice Get partner details for a token
     * @param _token Token address
     * @return Partner Partner details
     */
    function getPartner(address _token) external view returns (Partner memory) {
        if (_token == address(0)) revert OTSeaErrors.InvalidAddress();
        return _partners[_token];
    }

    /**
     * @notice Check if an account is blacklisted
     * @param _account Account
     * @return bool true if blacklisted, false if not
     */
    function isAccountBlacklisted(address _account) external view returns (bool) {
        if (_account == address(0)) revert OTSeaErrors.InvalidAddress();
        return _blacklist[_account];
    }

    /**
     * @notice Check if an order is blacklisted
     * @param _orderID Order ID
     * @return bool true if blacklisted, false if not
     */
    function isOrderBlacklisted(uint72 _orderID) external view returns (bool) {
        _checkIDExists(_orderID);
        return _blacklist[_orders[_orderID].creator];
    }

    /**
     * @param _newOrder Core new order details
     * @return orderID Order ID
     */
    function _createBuyOrder(NewOrder calldata _newOrder) private returns (uint72 orderID) {
        /// @dev lock-ups can only be used on sell orders
        if (_newOrder.withLockUp) revert LockUpNotAllowed();
        if (_newOrder.totalInput == 0 || _newOrder.totalOutput == 0)
            revert OTSeaErrors.InvalidAmount();
        orderID = ++_totalOrders;
        _orders[orderID] = Order({
            creator: _msgSender(),
            orderType: OrderType.Buy,
            state: State.Open,
            /// @dev feeType is set to the default FeeType (fish) because it is ignored for buy orders
            feeType: OTSeaLibrary.FeeType.Fish,
            isAON: _newOrder.isAON,
            isHidden: _newOrder.isHidden,
            withLockUp: false,
            token: _newOrder.token,
            totalInput: _newOrder.totalInput,
            inputTransacted: 0,
            totalOutput: _newOrder.totalOutput,
            outputTransacted: 0
        });
        emit BuyOrderCreated(
            orderID,
            _msgSender(),
            _newOrder,
            IERC20Metadata(address(_newOrder.token)).decimals()
        );
    }

    /**
     * @param _newOrder Core new order details
     * @param _feeType Fee type
     * @return orderID Order ID
     */
    function _createSellOrder(
        NewOrder calldata _newOrder,
        OTSeaLibrary.FeeType _feeType
    ) private returns (uint72 orderID) {
        if (_newOrder.totalInput == 0 || _newOrder.totalOutput == 0)
            revert OTSeaErrors.InvalidAmount();
        orderID = ++_totalOrders;
        uint256 totalInput = _transferInTokens(_newOrder.token, _newOrder.totalInput);
        /// @dev if the tokens transferred does not match the amount, then the total ETH should be adjusted to account for taxes.
        uint256 totalOutput = totalInput == _newOrder.totalInput
            ? _newOrder.totalOutput
            : (_newOrder.totalOutput * totalInput) / _newOrder.totalInput;
        _orders[orderID] = Order({
            creator: _msgSender(),
            orderType: OrderType.Sell,
            state: State.Open,
            feeType: _feeType,
            isAON: _newOrder.isAON,
            isHidden: _newOrder.isHidden,
            withLockUp: _newOrder.withLockUp,
            token: _newOrder.token,
            totalInput: totalInput,
            inputTransacted: 0,
            totalOutput: totalOutput,
            outputTransacted: 0
        });
        emit SellOrderCreated(
            orderID,
            _msgSender(),
            _newOrder,
            totalInput,
            totalOutput,
            _feeType,
            IERC20Metadata(address(_newOrder.token)).decimals()
        );
    }

    /**
     * @param _token Token to buy
     * @param _trades Trades to execute
     * @param _allowLockUps Allow trades to have lock-ups (true), disallow trades to have lock-ups (false)
     * @return totalAmountToSwap Total ETH to swap
     * @return totalAmountToReceive Total tokens to receive
     * @return totalAmountToClaim Total tokens to claim after the _lockupPeriod
     * @return totalRevenue Total revenue
     */
    function _executeBuy(
        IERC20 _token,
        Trade[] calldata _trades,
        bool _allowLockUps
    )
        private
        returns (
            uint256 totalAmountToSwap,
            uint256 totalAmountToReceive,
            uint256 totalAmountToClaim,
            uint256 totalRevenue
        )
    {
        uint256 total = _trades.length;
        if (total == 0 || _maxTrades < total) revert OTSeaErrors.InvalidArrayLength();
        bool isLockUpOverrideEnabled = _partners[address(_token)].isLockUpOverrideEnabled;
        if (isLockUpOverrideEnabled && !_allowLockUps) revert OTSeaErrors.ExpectationMismatch();
        uint256 i;
        for (i; i < total; ) {
            Trade calldata trade = _trades[i];
            Order storage order = _orders[trade.orderID];
            if (_blacklist[order.creator]) revert OrderBlacklisted();
            /// @dev orders should only be sell orders (which means there is no need to check if the order ID exists).
            if (order.orderType == OrderType.Buy) revert InvalidTradeOrderType();
            uint256 amountToReceive = _executeTrade(_token, trade);
            totalRevenue += _handleETHPayment(order.creator, trade.amountToSwap, order.feeType);
            /// @dev total tokens to send to msg.sender.
            totalAmountToSwap += trade.amountToSwap;
            if (isLockUpOverrideEnabled || order.withLockUp) {
                if (!_allowLockUps) revert OTSeaErrors.ExpectationMismatch();
                totalAmountToClaim += amountToReceive;
            } else {
                totalAmountToReceive += amountToReceive;
            }
            unchecked {
                i++;
            }
        }
        return (totalAmountToSwap, totalAmountToReceive, totalAmountToClaim, totalRevenue);
    }

    /**
     * @param _token Token to sell
     * @param _trades Trades to execute
     * @return totalAmountToSwap Total tokens to swap
     * @return totalAmountToReceive Total ETH to receive
     */
    function _executeSell(
        IERC20 _token,
        Trade[] calldata _trades
    ) private returns (uint256 totalAmountToSwap, uint256 totalAmountToReceive) {
        uint256 total = _trades.length;
        if (total == 0 || _maxTrades < total) revert OTSeaErrors.InvalidArrayLength();
        uint256 i;
        for (i; i < total; ) {
            Trade calldata trade = _trades[i];
            _checkIDExists(trade.orderID);
            Order storage order = _orders[trade.orderID];
            if (_blacklist[order.creator]) revert OrderBlacklisted();
            /// @dev orders should only be buy orders.
            if (order.orderType == OrderType.Sell) revert InvalidTradeOrderType();
            uint256 amountToReceive = _executeTrade(_token, trade);
            _token.safeTransferFrom(_msgSender(), order.creator, trade.amountToSwap);
            /// @dev total ETH swapped.
            totalAmountToSwap += trade.amountToSwap;
            /// @dev total tokens to send to msg.sender.
            totalAmountToReceive += amountToReceive;
            unchecked {
                i++;
            }
        }
        return (totalAmountToSwap, totalAmountToReceive);
    }

    /**
     * @param _token Token to trade
     * @param _trade Trade to execute
     * @return amountToReceive Amount to receive
     * @dev a generic function used both when buying and selling
     */
    function _executeTrade(
        IERC20 _token,
        Trade calldata _trade
    ) private returns (uint256 amountToReceive) {
        Order storage order = _orders[_trade.orderID];
        if (order.state != State.Open || order.token != _token) revert OTSeaErrors.NotAvailable();
        if (
            _getTotalWhitelisted(_trade.orderID) != 0 &&
            !_checkIsWhitelisted(_msgSender(), _trade.orderID)
        ) revert OTSeaErrors.Unauthorized();
        if (_trade.amountToSwap == 0) revert OTSeaErrors.InvalidAmount();
        /// @dev owner of order can change price therefore we much check the trade totalOutput matches the on-chain value
        if (order.totalOutput != _trade.totalOutput) revert OTSeaErrors.ExpectationMismatch();
        uint256 remainingInput = order.totalInput - order.inputTransacted;
        uint256 remainingOutput = order.totalOutput - order.outputTransacted;
        if (
            order.isAON
                ? _trade.amountToSwap != remainingOutput
                : remainingOutput < _trade.amountToSwap
        ) revert OTSeaErrors.InvalidPurchase();
        if (_trade.amountToSwap == remainingOutput) {
            amountToReceive = remainingInput;
            order.state = State.Fulfilled;
        } else {
            amountToReceive = (remainingInput * _trade.amountToSwap) / remainingOutput;
        }
        order.inputTransacted += amountToReceive;
        order.outputTransacted += _trade.amountToSwap;
        emit Traded(_trade.orderID, _msgSender(), _trade.amountToSwap, amountToReceive);
    }

    /**
     * @param _account Account to send ETH to
     * @param _amount Amount of ETH to send to _account
     * @param _feeType Fee type of _account
     * @return revenue Amount of ETH revenue
     * @dev a function to calculate the revenue and transfer the remaining ETH to an account
     */
    function _handleETHPayment(
        address _account,
        uint256 _amount,
        OTSeaLibrary.FeeType _feeType
    ) private returns (uint256 revenue) {
        revenue =
            (_amount * (_feeType == OTSeaLibrary.FeeType.Fish ? _fishFee : _whaleFee)) /
            OTSeaLibrary.PERCENT_DENOMINATOR;
        _safeETHTransfer(_account, _amount - revenue);
    }

    /**
     * @param _revenue Revenue
     * @param _token Token
     * @dev Pays partner fee (if applicable) and transfers the remaining revenue to the revenue distributor
     */
    function _transferRevenue(uint256 _revenue, address _token) private {
        address partner = _partners[_token].account;
        if (partner != address(0)) {
            uint256 fee = (_revenue * _partnerFee) / OTSeaLibrary.PERCENT_DENOMINATOR;
            _revenue -= fee;
            _safeETHTransfer(partner, fee);
            emit PartnerFeePaid(_token, partner, fee);
        }
        /// @dev no need to safely transfer ETH because revenueDistributor has a receive() function
        _transferETHOrRevert(_revenueDistributor, _revenue);
        emit RevenueTransferred(_revenue);
    }

    /// @param _orderID Order ID
    function _checkIDExists(uint72 _orderID) internal view override {
        if (_orderID == 0 || _totalOrders < _orderID) revert OrderNotFound(_orderID);
    }

    /**
     * @param _feeDetailsSignature Fee details signature
     * @return feeType Fee type
     * @dev verifies the signature (if present) and returns the fee type
     */
    function _retrieveFeeDetails(
        FeeDetailsSignature calldata _feeDetailsSignature
    ) private view returns (OTSeaLibrary.FeeType feeType) {
        /// @dev if no signature is present then the user is a fish
        if (_feeDetailsSignature.signature.length == 0) {
            return feeType;
        }
        /// @dev reconstruct data that was signed off-chain
        bytes memory data = abi.encode(
            FEE_DETAILS_SIGNATURE_TYPE,
            _msgSender(),
            _feeDetailsSignature.expiresAt,
            _feeDetailsSignature.feeType
        );
        /// @dev check the signature was signed by the signer
        _checkSignature(data, _feeDetailsSignature.signature, _feeDetailsSignature.expiresAt);
        return _feeDetailsSignature.feeType;
    }

    /// @param _orderID Order ID
    function _checkCallerIsOrderCreator(uint72 _orderID) private view {
        /**
         * @dev it is more efficient calling _checkIDExists(_orderID) here than in the modifier because using it
         * in a modifier would duplicate the same code across all functions where it is used.
         */
        _checkIDExists(_orderID);
        if (_orders[_orderID].creator != _msgSender()) revert OTSeaErrors.Unauthorized();
    }

    function _checkCallerIsNotBlacklisted() private view {
        if (_blacklist[_msgSender()]) revert OTSeaErrors.Unauthorized();
    }
}

