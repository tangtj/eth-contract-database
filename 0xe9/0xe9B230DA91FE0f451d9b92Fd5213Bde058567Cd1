
// File: EEFI_Furnace.sol
// SPDX-License-Identifier: GPL-3.0-only

/* ========== Requirements and Imports ========== 
================================================
*/

pragma solidity 0.8.9;

import {IWETH} from "IERCWETHInterfaces.sol";
import {IEEFIToken} from "IERCWETHInterfaces.sol";
import {ITokenRewards} from "ITokenRewards.sol";
import {IPodToken} from "IPodToken.sol";
import "Ownable.sol";
import "TransferHelper.sol";

/* ========== Contract ========== 
=================================
*/

contract EEFIFurnace is Ownable {
    // State Variables //

    //Addresses
    address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address private constant _EEFI = 0x857FfC55B1Aa61A7fF847C82072790cAE73cd883;
    address private constant _USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
    address private constant _PEAS = 0x02f92800F57BCD74066F5709F1Daa1A4302Df875;

    //New partner address (receives fees)
    address public newPartnerAddress;

    //Treasury address
    address payable immutable TREASURY =
        payable(0xf950a86013bAA227009771181a885E369e158da3);

    //Interfaces //
    IWETH public constant weth = IWETH(_WETH);
    IEEFIToken public constant eefi = IEEFIToken(_EEFI);
    ITokenRewards public podTokenRewardsContract;
    IPodToken public podTokenContract;

    //PTokens/PEAS in contract are retained by default
    bool public sendToTreasury = false;

    //Events //
    event EEFIBurn(address source, uint256 amount);
    event PEASRewardsClaimed(address destination, uint256 amount);
    event PEASRewardsTransferred(address destination, uint256 amount);
    event PTokenUnwrapped(address asset, uint256 amount);
    event PartnerAddressChanged(address newAddress);
    event PodRewardsAndTokenContractsChanged(
        ITokenRewards newpodTokenRewardsContract,
        IPodToken newpodTokenContract
    );

    constructor(
        ITokenRewards _podTokenRewardsContract, // pToken LP Pool Rewards Contract
        IPodToken _podTokenContract // pToken Contract
    ) {
        require(
            address(_podTokenRewardsContract) != address(0),
            "EEFIFurnance: Invalid pod token rewards contract address."
        );

        require(
            address(_podTokenContract) != address(0),
            "EEFIFurnance: Invalid pod token contract address."
        );

        podTokenRewardsContract = _podTokenRewardsContract;

        podTokenContract = _podTokenContract;
    }

    /**
     * @notice Modifier to restrict certain functions to multisig only (Treasury) calls
     * @dev Reverts if the caller is not the Treasury.
     */
    modifier multiSigOnly() {
        require(msg.sender == TREASURY, "EEFIFurnance: Multisig not caller");
        _;
    }

    /**
     * @notice Re-set rewards and pod token addresses
     * @dev Only owner can initiate token and rewards address changes
     */
    function resetRewardsAndTokenAddresses(
        ITokenRewards _newRewardsContract,
        IPodToken _newPodTokenContract
    ) external onlyOwner {
        podTokenRewardsContract = _newRewardsContract;

        podTokenContract = _newPodTokenContract;

        emit PodRewardsAndTokenContractsChanged(
            _newRewardsContract,
            _newPodTokenContract
        );
    }

    //Transfer ERC20s from contract //
    /**
     * @notice Transfer deposited assets from contract
     * @dev Reverts if caller is not the Treasury (multisig)
     */
    function transferAssetsFromFurnance(
        IERC20 token,
        address to,
        uint256 amount
    ) public multiSigOnly {
        uint256 erc20balance = token.balanceOf(address(this));
        require(
            amount <= erc20balance,
            "EEFIFurnance: Balance too low to transfer token"
        );
        TransferHelper.safeTransfer(address(token), to, amount);
    }

    //Convert Assets sent to Furnance to WETH Using 0x //

    /**
     * @notice Convert non-WETH asset to WETH using 0x.
     */
    function _convertAssetToWETH(
        bytes calldata swapCallData,
        address spender,
        address payable swapTarget,
        IERC20 sellToken,
        IWETH buyToken,
        uint256 sellAmount
    ) internal {
        // Give `spender` an allowance to spend this contract's `sellToken`.
        // Note that for some tokens (e.g., USDT, KNC), any existing
        // allowance must be set to 0, before being able to update it.

        require(buyToken == weth, "EEFIFurnance: Buy token not WETH.");

        if (address(sellToken) == _USDT) {
            //Reset approval to 0
            uint256 initialUSDTApprovalAmount = 0;

            TransferHelper.safeApprove(
                address(sellToken),
                address(spender),
                initialUSDTApprovalAmount
            );
        }

        //Approve WETH for intermediate step swaps
        TransferHelper.safeApprove(
            address(weth),
            address(spender),
            type(uint256).max
        );

        //Approve sell token for sell amount
        TransferHelper.safeApprove(
            address(sellToken),
            address(spender),
            sellAmount
        );

        // Call the encoded swap function at `swapTarget`,
        (bool success, ) = swapTarget.call{value: msg.value}(swapCallData);
        require(success, "EEFIFurnance: Swap failed. Low balance / error.");
    }

    /**
     * @notice Convert non-WETH asset sent to Furnace to WETH.
     * @dev Only owner can initiate swap. Owner does not have access to swapped assets.
     */
    function convertAssetToWETH(
        bytes calldata swapCallData,
        address spender,
        address payable swapTarget,
        IERC20 sellToken,
        IWETH buyToken,
        uint256 sellAmount
    ) external payable onlyOwner {
        _convertAssetToWETH(
            swapCallData,
            spender,
            swapTarget,
            sellToken,
            buyToken,
            sellAmount
        );
    }

    //Sell contract WETH for EEFI and Burn //

    /**
     * @notice Purchase EEFI using contract WETH and burn asset.
     * @dev Only owner can initiate swap and burn. Requires that contract has WETH and permission to burn EEFI.
     */
    function buyAndBurnEEFI(
        bytes calldata swapCallData,
        address spender,
        address payable swapTarget,
        IWETH sellToken,
        IEEFIToken buyToken
    ) external payable onlyOwner {
        //Trade WETH for EEFI //

        require(sellToken == weth, "EEFIFurnance: Sell token not WETH.");
        require(buyToken == eefi, "EEFIFurnance: Buy token not EEFI.");
        require(
            weth.balanceOf(address(this)) > 0,
            "EEFIFurnance: No WETH available to trade"
        );

        //Approve WETH for trade
        TransferHelper.safeApprove(
            address(weth),
            address(spender),
            type(uint256).max
        );

        // Call the encoded swap function at `swapTarget`,
        (bool success, ) = swapTarget.call{value: msg.value}(swapCallData);
        require(success, "EEFIFurnance: Swap failed. Low balance / error.");

        //Burn Swapped EEFI //
        uint256 _contractEEFIAmount = eefi.balanceOf(address(this));

        require(
            _contractEEFIAmount > 0,
            "EEFIFurnance: Insufficient EEFI in contract to burn"
        );

        eefi.burn(_contractEEFIAmount);
        emit EEFIBurn(address(this), _contractEEFIAmount);
    }

    //Claim Peapods LP Rewards and Convert to WETH //

    /**
     * @notice Claim PEAS LP token rewards and Convert to WETH
     * @dev Only owner can initiate claim. Owner does not have access to claimed PEAS
     */

    function claimPEASAndConvertToWETH(
        address claimAddress,
        uint256 claimableReward,
        bytes calldata swapCallData,
        address spender,
        address payable swapTarget,
        IERC20 sellToken,
        IWETH buyToken,
        uint256 sellAmount,
        uint256 buyAmount,
        bool sendWETHToTreasury
    ) external payable onlyOwner {
        //Claim PEAS rewards

        require(claimableReward > 0, "EEFIFurnance: No rewards to claim");
        require(buyToken == weth, "EEFIFurnance: Buy token not WETH");

        podTokenRewardsContract.claimReward(claimAddress);

        emit PEASRewardsClaimed(claimAddress, claimableReward);

        uint256 peasTokenBalance = IERC20(_PEAS).balanceOf(address(this));

        require(
            peasTokenBalance > 0,
            "EEFIFurnance: No rewards to convert" //
        );

        //Convert PEAS to WETH //
        _convertAssetToWETH(
            swapCallData,
            spender,
            swapTarget,
            sellToken,
            buyToken,
            sellAmount
        );

        if (sendWETHToTreasury == true) {
            TransferHelper.safeTransfer(_WETH, TREASURY, buyAmount);
        }
    }

    // Claim Peapods Rewards and Send to Treasury //

    /**
     * @notice Claim PEAS LP token rewards (if rewards are deposited to contract, send to Treasury)
     * @dev Only owner can initiate claim.
     */
    function claimLPRewardsAndSendToTreasury(
        address claimAddress,
        uint256 claimableReward
    ) external payable onlyOwner {
        //Claim PEAS rewards //

        require(claimableReward > 0, "EEFIFurnance: No rewards to claim");

        podTokenRewardsContract.claimReward(claimAddress);

        emit PEASRewardsClaimed(claimAddress, claimableReward);

        //If any PEAS rewards are in contract, transfer to Treasury
        uint256 peasTokenBalance = IERC20(_PEAS).balanceOf(address(this));

        if (peasTokenBalance > 0) {
            TransferHelper.safeTransfer(_PEAS, TREASURY, peasTokenBalance);
            emit PEASRewardsTransferred(TREASURY, peasTokenBalance);
        }
    }

    // Unwrap pToken and optionally burn EEFI //

    /**
     * @notice Unwrap pToken; If token is EEFI burn it; Optionally send pAsset to Treasury
     * @dev Only owner can initiate unwrap.
     */
    function unWrapAndBurnPToken(
        address pTokenToUnwrap,
        uint8 tokenIndex,
        bool sendPTokenToTreasury
    ) external onlyOwner {
        //Unwrap PToken //

        uint256 pTokenAmount = podTokenContract.balanceOf(address(this));
        address[] memory unwrappedPToken = new address[](1);
        uint8[] memory unwrapPercentage = new uint8[](1);

        unwrappedPToken[0] = pTokenToUnwrap;
        unwrapPercentage[0] = 100;

        require(
            pTokenAmount > 0,
            "EEFIFurnance: Not enough pToken in contract to unwrap"
        );

        podTokenContract.debond(
            pTokenAmount,
            unwrappedPToken,
            unwrapPercentage
        );

        if (sendPTokenToTreasury == true) {
            //Retrive token address associated with pod asset index
            (address podTokenAddress, , , , ) = podTokenContract.indexTokens(
                tokenIndex
            );

            uint256 unwrappedTokenAmount = IERC20(podTokenAddress).balanceOf(
                address(this)
            );

            TransferHelper.safeTransfer(
                podTokenAddress,
                TREASURY,
                unwrappedTokenAmount
            );
        }

        //Burn unwrapped EEFI (or EEFI in contract) //

        uint256 _contractEEFIAmount = eefi.balanceOf(address(this));

        if (_contractEEFIAmount > 0) {
            eefi.burn(_contractEEFIAmount);
            emit EEFIBurn(address(this), _contractEEFIAmount);
        }
    }

    /**
     * @notice Re-set partner address (receives fees)
     * @dev Only owner can initiate partner address change
     */
    function resetPartnerAddress(address _newPartner) external onlyOwner {
        newPartnerAddress = _newPartner;

        podTokenContract.setPartner(newPartnerAddress);
        emit PartnerAddressChanged(_newPartner);
    }
}


// File: IERCWETHInterfaces.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.4.23 <0.9.0;

interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

interface IWETH is IERC20 {
    function deposit() external payable;
    function withdraw(uint amount) external;
}

interface IEEFIToken is IERC20 {
    function mint(address to, uint256 amount) external;
    function burn(uint256 amount) external;
}


// File: ITokenRewards.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.23 <0.9.0;

interface ITokenRewards {
    
    function getUnpaid(address _wallet) external returns (uint256);
    function claimReward(address wallet) external;
}


// File: IPodToken.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.4.23 <0.9.0;

interface IPodToken {
    function balanceOf(address account) external view returns (uint);
    function approve(address spender, uint256 amount) external returns (bool);
    function debond(uint256 _amount, address[] memory, uint8[] memory) external;
    function indexTokens(uint256) external view returns (address _address, uint256 _weight, uint256 _basePrice, address _c1, uint256 _q1);
    function transfer(address recipient, uint amount) external returns (bool);
    function setPartner(address _partner) external;
}


// File: Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: TransferHelper.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.6.0;

import "IERC20.sol";

library TransferHelper {
    /// @notice Transfers tokens from the targeted address to the given destination
    /// @notice Errors with 'STF' if transfer fails
    /// @param token The contract address of the token to be transferred
    /// @param from The originating address from which the tokens will be transferred
    /// @param to The destination address of the transfer
    /// @param value The amount to be transferred
    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) =
            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');
    }

    /// @notice Transfers tokens from msg.sender to a recipient
    /// @dev Errors with ST if transfer fails
    /// @param token The contract address of the token which will be transferred
    /// @param to The recipient of the transfer
    /// @param value The value of the transfer
    function safeTransfer(
        address token,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');
    }

    /// @notice Approves the stipulated contract to spend the given allowance in the given token
    /// @dev Errors with 'SA' if transfer fails
    /// @param token The contract address of the token to be approved
    /// @param to The target of the approval
    /// @param value The amount of the given token the target will be allowed to spend
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');
    }

    /// @notice Transfers ETH to the recipient address
    /// @dev Fails with `STE`
    /// @param to The destination of the transfer
    /// @param value The value to be transferred
    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, 'STE');
    }
}

// File: IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

