
// File: ClaimNFT.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";

// Interface of Payout Pursuit NFT cars
interface IPayoutPursuitCars {
    function mint(
        address account,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) external;

    function balanceOf(address account, uint256 id) external view returns (uint256);

    function uri(uint256 _tokenId) external view returns (string memory);
}

contract ClaimPayoutPursuitNFT is Ownable, ReentrancyGuard {
    IPayoutPursuitCars public payoutPursuitNft;

    struct ClaimDetail {
        uint256 nftId;
        uint256 price;
        uint256 openingTimestamp;
        uint256 closingTimestamp;
    }

    mapping(uint256 => ClaimDetail) public nftClaimData;

    mapping(address => bool) public addressBanned;
    mapping(address => bool) public whitelistAddress;

    modifier isOpen(uint256 _nftId) {
        require(nftClaimData[_nftId].openingTimestamp != 0, "NFT claim not created");
        require(nftClaimData[_nftId].closingTimestamp >= block.timestamp, "NFT claim closed");
        _;
    }

    event NewNFTClaimCreated(
        uint256 indexed nftId,
        uint256 priceInWei,
        uint256 openingTimestamp,
        uint256 closingTimestamp
    );
    event NFTClaimClosed(uint256 indexed nftId);
    event NFTClaimTimeExtended(uint256 indexed nftId, uint256 newClosingTimestamp);
    event NFTClaimPriceUpdated(uint256 indexed nftId, uint256 priceInWei);
    event NFTAddressUpdated(address newNFTAddress);

    constructor(address _payoutPursuitNft) Ownable(msg.sender) {
        payoutPursuitNft = IPayoutPursuitCars(_payoutPursuitNft);
    }

    function createNewNFTClaim(
        uint256 _nftId,
        uint256 _priceInWei,
        uint256 _openingTimestamp,
        uint256 _closingTimestamp
    ) external onlyOwner {
        require(
            !compareStrings(payoutPursuitNft.uri(_nftId), ""),
            "NFT uri not exists. Please add uri first in NFT contract"
        );
        require(nftClaimData[_nftId].closingTimestamp < block.timestamp, "NFT claim already open");
        require(
            _openingTimestamp >= block.timestamp,
            "opening time is before current time"
        );
        require(
            _closingTimestamp > _openingTimestamp,
            "closing time is before opening time"
        );
        nftClaimData[_nftId] = ClaimDetail({
            nftId: _nftId,
            price: _priceInWei,
            openingTimestamp: _openingTimestamp,
            closingTimestamp: _closingTimestamp
        });
        emit NewNFTClaimCreated(_nftId, _priceInWei, _openingTimestamp, _closingTimestamp);
    }

    function closeNFTClaim(uint256 _nftId) external isOpen(_nftId) onlyOwner {
        nftClaimData[_nftId].closingTimestamp = block.timestamp;
        emit NFTClaimClosed(_nftId);
    }

    function extendTimeOfNFTClaim(uint256 _nftId, uint256 _newClosingTimestamp)
        external
        isOpen(_nftId)
        onlyOwner
    {
        require(
            _newClosingTimestamp > nftClaimData[_nftId].closingTimestamp,
            "new closing time is before current closing time"
        );
        nftClaimData[_nftId].closingTimestamp = _newClosingTimestamp;
        emit NFTClaimTimeExtended(_nftId, _newClosingTimestamp);
    }

    function updatePriceOfNFTClaim(uint256 _nftId, uint256 _priceInWei)
        external
        isOpen(_nftId)
        onlyOwner
    {
        nftClaimData[_nftId].price = _priceInWei;
        emit NFTClaimPriceUpdated(_nftId, _priceInWei);
    }

    function updatePayoutPursuitNftAddress(address _payoutPursuitNft) external onlyOwner {
        require(_payoutPursuitNft != address(0), "_payoutPursuitNft is a zero address");
        payoutPursuitNft = IPayoutPursuitCars(_payoutPursuitNft);
        emit NFTAddressUpdated(_payoutPursuitNft);
    }

    function whitelistAddresses(address[] memory _addresses, bool _isWhitelist) external onlyOwner {
        require(_addresses.length > 0, "Addresses is empty");
        for (uint256 i = 0; i < _addresses.length; i++) {
            whitelistAddress[_addresses[i]] = _isWhitelist;
        }
    }

    function banAddresses(address[] memory _addresses, bool _ban) external onlyOwner {
        require(_addresses.length > 0, "Addresses is empty");
        for (uint256 i = 0; i < _addresses.length; i++) {
            addressBanned[_addresses[i]] = _ban;
        }
    }

    function claimNFT(uint256 _nftId, address _user) public payable nonReentrant isOpen(_nftId) {
        require(addressBanned[_user] == false, "Address banned");
        require(payoutPursuitNft.balanceOf(_user, _nftId) == 0, "Already have this NFT");
        if (nftClaimData[_nftId].price > 0 && whitelistAddress[_user] == false) {
            require(msg.value >= nftClaimData[_nftId].price, "Insufficient amount for NFT");
        }
        payoutPursuitNft.mint(_user, _nftId, 1, "");
    }

    function withdrawFunds() public onlyOwner {
        if (address(this).balance > 0) {
            (bool os, ) = payable(owner()).call{value: address(this).balance}("");
            require(os);
        } else {
            revert("no funds");
        }
    }

    function withdrawTokenFunds(address _tokenAddress) public onlyOwner {
        if (IERC20(_tokenAddress).balanceOf(address(this)) > 0) {
            IERC20(_tokenAddress).transfer(owner(), IERC20(_tokenAddress).balanceOf(address(this)));
        } else {
            revert("no funds");
        }
    }

    /**
     * @notice Implementation of comparision of strings.
     * @param s1    String 1
     * @param s2    String 2
     * @return {True or False}
     */
    function compareStrings(string memory s1, string memory s2) internal pure returns (bool) {
        return keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

