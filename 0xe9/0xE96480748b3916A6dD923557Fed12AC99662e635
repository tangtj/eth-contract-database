{"ERC20Lib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"./IERC20Lib.sol\";\n\ncontract ERC20Lib is IERC20Lib {\n\n  mapping (address =\u003e uint256) private _balances;\n  mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n  uint256 public totalSupply;\n\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  bool public initialized = false;\n\n  constructor () {\n    initialized = true;\n  }\n\n  function init(address owner_, string memory name_, string memory symbol_, uint256 totalSupply_) external override {\n    require(initialized == false, \"Contract already initialized\");\n    name = name_;\n    symbol = symbol_;\n    decimals = 18;\n    _balances[owner_] = totalSupply_;\n    totalSupply = totalSupply_;\n\n    initialized = true;\n  }\n\n  function balanceOf(address account) public view override returns (uint256) {\n    return _balances[account];\n  }\n\n  function allowance(address owner, address spender) public view override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  function approve(address spender, uint256 amount) public override returns (bool) {\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n\n    _allowances[msg.sender][spender] = amount;\n    emit Approval(msg.sender, spender, amount);\n    return true;\n  }\n\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\n    _transfer(msg.sender, recipient, amount);\n    return true;\n  }\n\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n    _transfer(sender, recipient, amount);\n    uint256 newAllowance = _allowances[sender][msg.sender] - amount;\n    _allowances[sender][msg.sender] = newAllowance;\n    emit Approval(sender, msg.sender, newAllowance);\n    return true;\n  }\n\n  function _transfer(address sender, address recipient, uint256 amount) internal {\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n    _balances[sender] = _balances[sender] - amount;\n    _balances[recipient] = _balances[recipient] + amount;\n    emit Transfer(sender, recipient, amount);\n  }\n}"},"IERC20Lib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\ninterface IERC20Lib {\n  function init(address owner_, string memory name_, string memory symbol_, uint256 totalSupply_) external;\n  function balanceOf(address account) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}"}}