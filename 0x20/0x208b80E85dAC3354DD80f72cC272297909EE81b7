
// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: contracts/ERC20Bridge.sol
// SPDX-License-Identifier: MIT License
/* yak tracks all over the place */

pragma solidity 0.8.23;

import "./interfaces/IPortalMessageReceiver.sol";
import "./interfaces/IPortal.sol";
import "./interfaces/IWETH.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol";
import "@openzeppelin/contracts/utils/Address.sol";

interface ERC20Decimals {
    function decimals() external returns (uint8);
}

/**
 * @title   ERC-20 Bridge for the warp.green protocol
 * @notice  Allows wrapping ERC-20 tokens on Chia and unwrapping them back to the original network using warp.green.
 * @dev     Not compatible with fee-on-transfer or rebasing tokens. The contract assumes 1 token now is 1 token in the future, and that transferring `a` tokens will result to exactly `a` tokens being granted to the recipient (not more, not less).
 */
contract ERC20Bridge is IPortalMessageReceiver {
    /**
     * @notice  When wrapping or unwrapping ERC-20s, a tip is sent to the warp.green protocol. The tip is expressed in basis points.
     * @dev     Tip is calculated as amount * tip / 10000; the remaining amount is sent to the recipient.
     */
    uint16 public immutable tip;

    /**
     * @notice  The address of the warp.green portal contract.
     * @dev     Used as an oracle. The portal usually sits behind a TransparentUpgradeableProxy.
     */
    address public immutable portal;

    /**
     * @notice  The address of the contract used to convert between ether and an equivalent ERC-20. Usually milliETH or WETH.
     * @dev     WETH uses a conversion rate of 1:1, while milliETH uses one of 1000 milliETH = 1 ETH.
     */
    address public immutable iweth;

    /**
     * @notice  How much wei the smallest unit of the wrapped ether ERC-20 translates to.
     * @dev     For example, 1000 milliETH = 1 ETH, so 10^(3+3) wei milliETH (milliETH has 3 decimals) translates to 10^18 wei. The ratio would be 10^12, as 0.001 milliETH (smallest denomination) translates to 10^12 wei = 0.000001 ETH.
     */
    uint64 public immutable wethToEthRatio;

    /**
     * @notice  The chain id of the other chain. Usually "xch", which indicates Chia.
     * @dev     Used to verify the source chain of messages.
     */
    bytes3 public immutable otherChain;

    /**
     * @notice  The hash of the puzzle used to burn CATs associated with an ERC-20 that was locked in this contract. Sender of messages from Chia.
     * @dev     Used to verify the source of messages when they're received.
     */
    bytes32 public burnPuzzleHash;

    /**
     * @notice  The hash of the puzzle used to mint CATs on Chia after they've been transferred to this contract. Message receiver on Chia.
     * @dev     Used as a destination for sent messages.
     */
    bytes32 public mintPuzzleHash;

    /**
     * @notice  ERC20Bridge constructor
     * @param   _tip The percentage (in basis points) used as a tip for the warp.green protocol (0.01 - 10%)
     * @param   _portal Address of the warp.green portal contract
     * @param   _iweth Address of the WETH contract or its equivalent
     * @param   _wethToEthRatio The conversion ratio from 1 'wei' of WETH to ETH, considering the difference in decimals
     * @param   _otherChain The chain ID of the destination chain, typically 'xch' for Chia
     * @dev     Initializes contract state with immutable values for gas efficiency
     */
    constructor(
        uint16 _tip,
        address _portal,
        address _iweth,
        uint64 _wethToEthRatio,
        bytes3 _otherChain
    ) {
        require(_tip > 0 && _tip <= 1000, "!tip");
        require(_iweth != address(0) && _portal != address(0), "!addrs");

        tip = _tip;
        portal = _portal;
        iweth = _iweth;
        wethToEthRatio = _wethToEthRatio;
        otherChain = _otherChain;
    }

    /**
     * @notice  Initialize the contract. Should be called in the same transaction as the deployment.
     * @dev     Allows the address of the contract to be determined using CREATE2, as the arguments below depend on the address of this contract. Can only be called once per contract lifetime.
     * @param   _burnPuzzleHash  Chia-side burn puzzle hash. Will be used to set the value of `burnPuzzleHash`.
     * @param   _mintPuzzleHash  Chia-side mint puzzle hash. Will be used to set the value of `mintPuzzleHash`.
     */
    function initializePuzzleHashes(
        bytes32 _burnPuzzleHash,
        bytes32 _mintPuzzleHash
    ) external {
        require(
            burnPuzzleHash == bytes32(0) && mintPuzzleHash == bytes32(0),
            "nope"
        );
        burnPuzzleHash = _burnPuzzleHash;
        mintPuzzleHash = _mintPuzzleHash;
    }

    /**
     * @notice  Receives and processes messages from the warp.green portal
     * @dev     Uses the warp.green Portal contract as an oracle; verifies message and handles the unwrapping process.
     * @param   _source_chain  Message source chain id (e.g., "xch").
     * @param   _source  Message source (puzzle hash).
     * @param   _contents  Message contents - asset contract, receiver, and mojo amount.
     */
    function receiveMessage(
        bytes32 /* _nonce */,
        bytes3 _source_chain,
        bytes32 _source,
        bytes32[] calldata _contents
    ) external {
        require(
            msg.sender == portal &&
                _source == burnPuzzleHash &&
                _source_chain == otherChain,
            "!msg"
        );

        address assetContract = address(uint160(uint256(_contents[0])));
        address receiver = address(uint160(uint256(_contents[1])));
        uint256 amount = uint256(_contents[2]);

        amount = (amount * 10 ** (ERC20Decimals(assetContract).decimals() - 3)); // transform from mojos to ETH wei

        uint256 transferTip = (amount * tip) / 10000;
        if (transferTip == 0) {
            transferTip = 1;
        }
        require(amount > transferTip, "!amnt");

        if (assetContract != iweth) {
            SafeERC20.safeTransfer(
                IERC20(assetContract),
                receiver,
                amount - transferTip
            );
            SafeERC20.safeTransfer(IERC20(assetContract), portal, transferTip);
        } else {
            IWETH(iweth).withdraw(amount);

            Address.sendValue(
                payable(receiver),
                (amount - transferTip) * wethToEthRatio
            );
            Address.sendValue(payable(portal), transferTip * wethToEthRatio);
        }
    }

    /**
     * @notice  Bridges ERC-20 tokens to Chia via the warp.green protocol
     * @dev     Transfers tokens to this contract, redirects portal tip, and send message for tokens to be minted on Chia.
     * @param   _assetContract  Address of the ERC-20 token to bridge.
     * @param   _receiver  Receiver of the wrapped tokens on Chia, given as a puzzle hash. Usually the decoded bech32m address taken from the wallet.
     * @param   _mojoAmount  Amount to bridge to Chia, in mojos (1 CAT = 10^3 mojos). For example, 1 would mean 0.001 CAT tokens, equivalent to 0.001 ERC-20 tokens.
     */
    function bridgeToChia(
        address _assetContract,
        bytes32 _receiver,
        uint256 _mojoAmount // on Chia
    ) external payable {
        require(msg.value == IPortal(portal).messageToll(), "!toll");

        _handleBridging(
            _assetContract,
            true,
            _receiver,
            _mojoAmount,
            msg.value,
            10 ** (ERC20Decimals(_assetContract).decimals() - 3)
        );
    }

    /**
     * @notice  Bridges native Ether to Chia by first wrapping it into milliETH (or WETH).
     * @dev     Wraps ether into an ERC-20, sends portal tip, and sends a message to mint tokens on Chia.
     * @param   _receiver  Receiver puzzle hash for the wrapped tokens.
     */
    function bridgeEtherToChia(
        bytes32 _receiver,
        uint256 _maxMessageToll
    ) external payable {
        uint256 messageToll = IPortal(portal).messageToll();
        require(messageToll <= _maxMessageToll, "!toll");

        uint256 amountAfterToll = msg.value - messageToll;
        require(
            amountAfterToll >= wethToEthRatio &&
                amountAfterToll % wethToEthRatio == 0,
            "!amnt"
        );

        IWETH(iweth).deposit{value: amountAfterToll}();

        uint256 wethToMojosFactor = 10 ** (ERC20Decimals(iweth).decimals() - 3);

        _handleBridging(
            iweth,
            false,
            _receiver,
            amountAfterToll / wethToEthRatio / wethToMojosFactor,
            messageToll,
            wethToMojosFactor
        );
    }

    /**
     * @notice  Bridges ERC-20 tokens to Chia with a permit allowing token spend
     * @dev     Uses ERC-20 permit for gas-efficient token approval and transfer in a single transaction.
     * @param   _assetContract  Address of the ERC-20 token to bridge.
     * @param   _receiver  Receiver puzzle hash for the wrapped tokens.
     * @param   _amount  Amount to bridge to Chia, in mojos. For example, 1 would mean 0.001 CAT tokens, equivalent to 0.001 ERC-20 tokens.
     * @param   _deadline  Permit deadline.
     * @param   _v  Permit signature v value.
     * @param   _r  Permit signature r value.
     * @param   _s  Permit signature s value.
     */
    function bridgeToChiaWithPermit(
        address _assetContract,
        bytes32 _receiver,
        uint256 _amount, // on Chia
        uint256 _deadline,
        uint8 _v,
        bytes32 _r,
        bytes32 _s
    ) external payable {
        require(msg.value == IPortal(portal).messageToll(), "!toll");
        uint256 factor = 10 ** (ERC20Decimals(_assetContract).decimals() - 3);

        IERC20Permit(_assetContract).permit(
            msg.sender,
            address(this),
            _amount * factor,
            _deadline,
            _v,
            _r,
            _s
        );

        _handleBridging(
            _assetContract,
            true,
            _receiver,
            _amount,
            msg.value,
            factor
        );
    }

    /**
     * @notice  Internal function used to craft and send message acknowledging tokens were locked on this chain.
     * @dev     Tip is also calculated and transferred to the portal in this function.
     * @param   _assetContract  Address of the ERC-20 token to bridge.
     * @param   _transferAsset  Whether to transfer the asset to this contract or not. If false, the tokens must already be owned by this contract.
     * @param   _receiver  Receiver puzzle hash for the wrapped tokens.
     * @param   _amount  Amount of CAT tokens to be minted on Chia (in mojos).
     * @param   _messageToll Message toll in wei required by the portal to relay the message.
     * @param   _mojoToTokenFactor  A power of 10 to convert from CAT amount (mojos) to the ERC-20 token's smallest unit.
     */
    function _handleBridging(
        address _assetContract,
        bool _transferAsset,
        bytes32 _receiver,
        uint256 _amount, // WARNING: in CAT mojos
        uint256 _messageToll,
        uint256 _mojoToTokenFactor
    ) internal {
        uint256 transferTip = (_amount * tip) / 10000;
        if (transferTip == 0) {
            transferTip = 1;
        }
        require(_amount > transferTip, "!amnt");

        bytes32[] memory message = new bytes32[](3);
        message[0] = bytes32(uint256(uint160(_assetContract)));
        message[1] = _receiver;
        message[2] = bytes32(_amount - transferTip);

        if (_transferAsset) {
            SafeERC20.safeTransferFrom(
                IERC20(_assetContract),
                msg.sender,
                address(this),
                _amount * _mojoToTokenFactor
            );
        }
        SafeERC20.safeTransfer(
            IERC20(_assetContract),
            portal,
            transferTip * _mojoToTokenFactor
        );

        IPortal(portal).sendMessage{value: _messageToll}(
            otherChain,
            mintPuzzleHash,
            message
        );
    }

    /**
     * @notice  Function that handles incoming ether transfers. Do not simply send ether to this contract.
     * @dev     The 'require' should prevent user errors.
     */
    receive() external payable {
        require(msg.sender == iweth, "!sender");
    }
}


// File: contracts/interfaces/IPortal.sol
// SPDX-License-Identifier: MIT License
/* yak tracks all over the place */

pragma solidity 0.8.23;

interface IPortal {
    event MessageSent(
        bytes32 indexed nonce,
        bytes3 destination_chain,
        bytes32 destination,
        bytes32[] contents
    );

    function ethNonce() external returns (uint256);

    function messageToll() external returns (uint256);

    function sendMessage(
        bytes3 _destination_chain,
        bytes32 _destination,
        bytes32[] calldata _contents
    ) external payable;

    function receiveMessage(
        bytes32 _nonce,
        bytes3 _source_chain,
        bytes32 _source,
        address _destination,
        bytes32[] calldata _contents
    ) external;
}


// File: contracts/interfaces/IPortalMessageReceiver.sol
// SPDX-License-Identifier: MIT License
/* yak tracks all over the place */

pragma solidity 0.8.23;

interface IPortalMessageReceiver {
    function receiveMessage(
        bytes32 _nonce,
        bytes3 _source_chain,
        bytes32 _source,
        bytes32[] calldata _contents
    ) external;
}


// File: contracts/interfaces/IWETH.sol
// SPDX-License-Identifier: MIT License
/* yak tracks all over the place */

pragma solidity 0.8.23;

interface IWETH {
    function deposit() external payable;

    function withdraw(uint) external;
}

