{"Minter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.4;\n\n// ERC20 interface\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function mint(address to, uint256 amount) external;\n    function transferOwnership(address newOwner) external;\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b \u003c= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c \u003e= a);\n    return c;\n  }\n}\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can\u0027t just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can\u0027t just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can\u0027t just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// BaseMinter\nabstract contract BaseMinter is Ownable, ReentrancyGuard {\n\n    using SafeMath for uint256;\n\n    uint256 public depositFee = 0; // possible fee to cover bridging costs\n    uint256 public constant MAX_DEPOSIT_FEE = 500; // max deposit fee 500bp (5%)\n    uint256 public constant FEE_DENOMINATOR = 10000; // fee denominator for basis points\n\n    // Staking token\n    IERC20 public stakingToken;\n\n    constructor(address _stakingToken) {\n        stakingToken = IERC20(_stakingToken);\n    }\n\n    event UpdateDepositFee(uint256 _depositFee);\n    event TransferStakingTokenOwnership(address indexed _newOwner);\n    event Mint(address indexed caller, address indexed receiver, uint256 amount);\n\n    function previewDeposit(uint256 amount) public view virtual returns (uint256) {\n        uint256 feeAmount = amount.mul(depositFee).div(FEE_DENOMINATOR);\n        uint256 netAmount = amount.sub(feeAmount);\n        return netAmount;\n    }\n\n    function updateDepositFee(uint256 newFee) public onlyOwner {\n        require(newFee \u003c= MAX_DEPOSIT_FEE, \"\u003eMaxFee\");\n        depositFee = newFee;\n        emit UpdateDepositFee(newFee);\n    }\n\n    function transferStakingTokenOwnership(address newOwner) public onlyOwner {\n        stakingToken.transferOwnership(newOwner);\n        emit TransferStakingTokenOwnership(newOwner);\n    }\n\n    function mint(uint256 amount, address receiver) public onlyOwner {\n        stakingToken.mint(receiver, amount);\n        emit Mint(address(msg.sender), receiver, amount);\n    }\n\n}\n\n// NativeMinter contract accepts network coin as a base token for liquid staking\ncontract NativeMinter is BaseMinter {\n\n    constructor(address _stakingToken) BaseMinter(_stakingToken) {\n    }\n\n    event Deposit(address indexed caller, address indexed receiver, uint256 amount);\n    event Withdraw(address indexed caller, address indexed receiver, uint256 amount);\n\n    function deposit(address receiver) public payable virtual nonReentrant {\n        require(msg.value \u003e 0, \"ZeroDeposit\");\n        uint256 mintAmount = previewDeposit(msg.value);\n        require(mintAmount \u003e 0, \"ZeroMintAmount\");\n        stakingToken.mint(receiver, mintAmount);\n        emit Deposit(address(msg.sender), receiver, msg.value);\n    }\n\n    function withdraw(address receiver) public onlyOwner {\n        uint256 availableBalance = address(this).balance;\n        require(availableBalance \u003e 0, \"ZeroWithdraw\");\n        SafeTransferLib.safeTransferETH(receiver, availableBalance);\n        emit Withdraw(address(msg.sender), receiver, availableBalance);\n    }\n\n}\n\n// ERC20Minter contract accepts ERC20 token as a base token for liduid staking\ncontract ERC20Minter is BaseMinter {\n\n    using SafeTransferLib for IERC20;\n\n    // Base token\n    IERC20 public baseToken;\n\n    constructor(address _baseToken, address _stakingToken) BaseMinter(_stakingToken) {\n        baseToken = IERC20(_baseToken);\n        // this contract can spend baseToken\n        baseToken.approve(address(this), type(uint256).max);\n    }\n\n    event Deposit(address indexed caller, address indexed receiver, uint256 amount);\n    event Withdraw(address indexed caller, address indexed receiver, uint256 amount);\n\n    function deposit(uint256 amount, address receiver) public virtual nonReentrant {\n        require(amount \u003e 0, \"ZeroDeposit\");\n        uint256 mintAmount = previewDeposit(amount);\n        require(mintAmount \u003e 0, \"ZeroMintAmount\");\n        baseToken.safeTransferFrom(address(msg.sender), address(this), amount);\n        stakingToken.mint(receiver, mintAmount);\n        emit Deposit(address(msg.sender), receiver, amount);\n    }\n\n    function withdraw(address receiver) public onlyOwner {\n        uint256 availableBalance = baseToken.balanceOf(address(this));\n        require(availableBalance \u003e 0, \"ZeroWithdraw\");\n        baseToken.safeTransferFrom(address(this), receiver, availableBalance);\n        emit Withdraw(address(msg.sender), receiver, availableBalance);\n    }\n\n}"},"stZETAMinterERC20.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.4;\n\nimport \"../Minter.sol\";\n\ninterface IZetaInterfaces {\n    /**\n     * @dev Use SendInput to interact with the Connector: connector.send(SendInput)\n     */\n    struct SendInput {\n        /// @dev Chain id of the destination chain. More about chain ids https://docs.zetachain.com/learn/glossary#chain-id\n        uint256 destinationChainId;\n        /// @dev Address receiving the message on the destination chain (expressed in bytes since it can be non-EVM)\n        bytes destinationAddress;\n        /// @dev Gas limit for the destination chain\u0027s transaction\n        uint256 destinationGasLimit;\n        /// @dev An encoded, arbitrary message to be parsed by the destination contract\n        bytes message;\n        /// @dev ZETA to be sent cross-chain + ZetaChain gas fees + destination chain gas fees (expressed in ZETA)\n        uint256 zetaValueAndGas;\n        /// @dev Optional parameters for the ZetaChain protocol\n        bytes zetaParams;\n    }\n}\n\ninterface IZetaConnector {\n    function send(IZetaInterfaces.SendInput calldata input) external;\n}\n\ncontract stZETAMinterERC20 is ERC20Minter {\n\n    using SafeTransferLib for IERC20;\n\n    // External connector contract\n    IZetaConnector public connector;\n\n    // Destination account for bridging\n    address public destination;\n\n    constructor(address _baseToken, address _stakingToken, address _connector, address _destination) ERC20Minter(_baseToken, _stakingToken) {\n        connector = IZetaConnector(_connector);\n        destination = _destination;\n        // connector can spend baseToken\n        baseToken.approve(_connector, type(uint256).max);\n    }\n\n    event UpdateDestination(address _destination);\n\n    function updateDestination(address newDestination) public onlyOwner {\n        destination = newDestination;\n        emit UpdateDestination(newDestination);\n    }\n\n    function deposit(uint256 amount, address receiver) public override nonReentrant {\n        require(amount \u003e 0, \"ZeroDeposit\");\n        uint256 mintAmount = previewDeposit(amount);\n        require(mintAmount \u003e 0, \"ZeroMintAmount\");\n        baseToken.safeTransferFrom(address(msg.sender), address(this), amount);\n        IZetaInterfaces.SendInput memory sendInput = IZetaInterfaces.SendInput({\n            destinationChainId: 7000,\n            destinationAddress: abi.encodePacked(destination),\n            destinationGasLimit: 5000000,\n            message: abi.encodePacked(\"\"),\n            zetaValueAndGas: amount,\n            zetaParams: abi.encodePacked(\"\")\n        });\n        connector.send(sendInput);\n        stakingToken.mint(receiver, mintAmount);\n        emit Deposit(address(msg.sender), receiver, amount);\n    }\n\n}"}}