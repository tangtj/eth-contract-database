
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/access/Ownable2Step.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)

pragma solidity ^0.8.0;

import "./Ownable.sol";

/**
 * @dev Contract module which provides access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership} and {acceptOwnership}.
 *
 * This module is used through inheritance. It will make available all functions
 * from parent (Ownable).
 */
abstract contract Ownable2Step is Ownable {
    address private _pendingOwner;

    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Returns the address of the pending owner.
     */
    function pendingOwner() public view virtual returns (address) {
        return _pendingOwner;
    }

    /**
     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual override onlyOwner {
        _pendingOwner = newOwner;
        emit OwnershipTransferStarted(owner(), newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual override {
        delete _pendingOwner;
        super._transferOwnership(newOwner);
    }

    /**
     * @dev The new owner accepts the ownership transfer.
     */
    function acceptOwnership() public virtual {
        address sender = _msgSender();
        require(pendingOwner() == sender, "Ownable2Step: caller is not the new owner");
        _transferOwnership(sender);
    }
}


// File: @openzeppelin/contracts/interfaces/IERC1271.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC1271 standard signature validation method for
 * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].
 *
 * _Available since v4.1._
 */
interface IERC1271 {
    /**
     * @dev Should return whether the signature provided is valid for the provided data
     * @param hash      Hash of the data to be signed
     * @param signature Signature byte array associated with _data
     */
    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to
     * 0 before setting it to a non-zero value.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interfaces/external/IWormhole.sol
// contracts/Messages.sol
// SPDX-License-Identifier: Apache 2

pragma solidity ^0.8.0;

import './WormholeStructs.sol';

interface IWormhole is WormholeStructs {
    event LogMessagePublished(
        address indexed sender,
        uint64 sequence,
        uint32 nonce,
        bytes payload,
        uint8 consistencyLevel
    );

    function publishMessage(
        uint32 nonce,
        bytes memory payload,
        uint8 consistencyLevel
    ) external payable returns (uint64 sequence);

    function parseAndVerifyVM(bytes calldata encodedVM)
        external
        view
        returns (
            WormholeStructs.VM memory vm,
            bool valid,
            string memory reason
        );

    function verifyVM(WormholeStructs.VM memory vm)
        external
        view
        returns (bool valid, string memory reason);

    function verifySignatures(
        bytes32 hash,
        WormholeStructs.Signature[] memory signatures,
        WormholeStructs.GuardianSet memory guardianSet
    ) external pure returns (bool valid, string memory reason);

    function parseVM(bytes memory encodedVM)
        external
        pure
        returns (WormholeStructs.VM memory vm);

    function getGuardianSet(uint32 index)
        external
        view
        returns (WormholeStructs.GuardianSet memory);

    function getCurrentGuardianSetIndex() external view returns (uint32);

    function getGuardianSetExpiry() external view returns (uint32);

    function governanceActionIsConsumed(bytes32 hash)
        external
        view
        returns (bool);

    function isInitialized(address impl) external view returns (bool);

    function chainId() external view returns (uint16);

    function governanceChainId() external view returns (uint16);

    function governanceContract() external view returns (bytes32);

    function messageFee() external view returns (uint256);
}


// File: contracts/interfaces/external/WormholeStructs.sol
// contracts/Structs.sol
// SPDX-License-Identifier: Apache 2

pragma solidity ^0.8.0;

interface WormholeStructs {
    struct Provider {
        uint16 chainId;
        uint16 governanceChainId;
        bytes32 governanceContract;
    }

    struct GuardianSet {
        address[] keys;
        uint32 expirationTime;
    }

    struct Signature {
        bytes32 r;
        bytes32 s;
        uint8 v;
        uint8 guardianIndex;
    }

    struct VM {
        uint8 version;
        uint32 timestamp;
        uint32 nonce;
        uint16 emitterChainId;
        bytes32 emitterAddress;
        uint64 sequence;
        uint8 consistencyLevel;
        bytes payload;
        uint32 guardianSetIndex;
        Signature[] signatures;
        bytes32 hash;
    }
}


// File: contracts/interfaces/IHashflowPool.sol
/**
 * SPDX-License-Identifier: UNLICENSED
 */
pragma solidity >=0.8.0;

import '@openzeppelin/contracts/interfaces/IERC1271.sol';

import './IQuote.sol';

/// @title IHashflowPool
/// @author Victor Ionescu
/**
 * Pool contract used for trading. The Pool can either hold funds or
 * rely on external accounts. External accounts are used in order to preserve
 * Capital Efficiency on the Market Maker side. This way, a Market Maker can
 * make markets using funds that are also used on other venues.
 */
interface IHashflowPool is IQuote, IERC1271 {
    /// @notice Specifies a HashflowPool on a foreign chain.
    struct AuthorizedXChainPool {
        uint16 chainId;
        bytes32 pool;
    }

    /// @notice Contains a signer verification address, and whether trading is enabled.
    struct SignerConfiguration {
        address signer;
        bool enabled;
    }

    /// @notice Emitted when the authorization status of a withdrawal account changes.
    /// @param account The account for which the status changes.
    /// @param authorized The new authorization status.
    event UpdateWithdrawalAccount(address account, bool authorized);

    /// @notice Emitted when the signer key used for the pool has changed.
    /// @param signer The new signer key.
    /// @param prevSigner The old signer key.
    event UpdateSigner(address signer, address prevSigner);

    /// @notice Emitted when liquidity is withdrawn from the pool.
    /// @param token Token being withdrawn.
    /// @param recipient Address receiving the token.
    /// @param withdrawAmount Amount being withdrawn.
    event RemoveLiquidity(
        address token,
        address recipient,
        uint256 withdrawAmount
    );

    /// @notice Emitted when an intra-chain trade happens.
    /// @param trader The trader.
    /// @param effectiveTrader The effective Trader.
    /// @param txid The txid of the quote.
    /// @param baseToken The token the trader sold.
    /// @param quoteToken The token the trader bought.
    /// @param baseTokenAmount The amount of baseToken sold.
    /// @param quoteTokenAmount The amount of quoteToken bought.
    event Trade(
        address trader,
        address effectiveTrader,
        bytes32 txid,
        address baseToken,
        address quoteToken,
        uint256 baseTokenAmount,
        uint256 quoteTokenAmount
    );

    /// @notice Emitted when a cross-chain trade happens.
    /// @param dstChainId The Hashflow Chain ID for the destination chain.
    /// @param dstPool The pool address on the destination chain.
    /// @param trader The trader address.
    /// @param txid The txid of the quote.
    /// @param baseToken The token the trader sold.
    /// @param quoteToken The token the trader bought.
    /// @param baseTokenAmount The amount of baseToken sold.
    /// @param quoteTokenAmount The amount of quoteToken bought.
    event XChainTrade(
        uint16 dstChainId,
        bytes32 dstPool,
        address trader,
        bytes32 dstTrader,
        bytes32 txid,
        address baseToken,
        bytes32 quoteToken,
        uint256 baseTokenAmount,
        uint256 quoteTokenAmount
    );

    /// @notice Emitted when a cross-chain trade is filled.
    /// @param txid The txid identified the quote that was filled.
    event XChainTradeFill(bytes32 txid);

    /// @notice Main initializer.
    /// @param name Name of the pool.
    /// @param signer Signer key used for quote / deposit verification.
    /// @param operations Operations key that governs the pool.
    /// @param router Address of the HashflowRouter contract.
    function initialize(
        string calldata name,
        address signer,
        address operations,
        address router
    ) external;

    /// @notice Returns the pool name.
    function name() external view returns (string memory);

    /// @notice Returns the signer address and whether the pool is enabled.
    function signerConfiguration() external view returns (address, bool);

    /// @notice Returns the Operations address of this pool.
    function operations() external view returns (address);

    /// @notice Returns the Router contract address.
    function router() external view returns (address);

    /// @notice Returns the current nonce for a trader.
    function nonces(address trader) external view returns (uint256);

    /// @notice Removes liquidity from the pool.
    /// @param token Token to withdraw.
    /// @param recipient Address to send token to.
    /// @param amount Amount to withdraw.
    function removeLiquidity(
        address token,
        address recipient,
        uint256 amount
    ) external;

    /// @notice Execute an RFQ-T trade.
    /// @param quote The quote to be executed.
    function tradeRFQT(RFQTQuote memory quote) external payable;

    /// @notice Execute an RFQ-M trade.
    /// @param quote The quote to be executed.
    function tradeRFQM(RFQMQuote memory quote) external;

    /// @notice Execute a cross-chain RFQ-T trade.
    /// @param quote The quote to be executed.
    /// @param trader The account that sends baseToken on this chain.
    function tradeXChainRFQT(XChainRFQTQuote memory quote, address trader)
        external
        payable;

    /// @notice Execute a cross-chain RFQ-M trade.
    /// @param quote The quote to be executed.
    function tradeXChainRFQM(XChainRFQMQuote memory quote) external;

    /// @notice Changes authorization for a set of pools to send X-Chain messages.
    /// @param pools The pools to change authorization status for.
    /// @param authorized The new authorization status.
    function updateXChainPoolAuthorization(
        AuthorizedXChainPool[] calldata pools,
        bool authorized
    ) external;

    /// @notice Changes authorization for an X-Chain Messenger app.
    /// @param xChainMessenger The address of the Messenger app.
    /// @param authorized The new authorization status.
    function updateXChainMessengerAuthorization(
        address xChainMessenger,
        bool authorized
    ) external;

    /// @notice Fills an x-chain order that completed on the source chain.
    /// @param externalAccount The external account to fill from, if any.
    /// @param txid The txid of the quote.
    /// @param trader The trader to receive the funds.
    /// @param quoteToken The token to be sent.
    /// @param quoteTokenAmount The amount of quoteToken to be sent.
    function fillXChain(
        address externalAccount,
        bytes32 txid,
        address trader,
        address quoteToken,
        uint256 quoteTokenAmount
    ) external;

    /// @notice Updates withdrawal account authorization.
    /// @param withdrawalAccounts the accounts for which to update authorization status.
    /// @param authorized The new authorization status.
    function updateWithdrawalAccount(
        address[] memory withdrawalAccounts,
        bool authorized
    ) external;

    /// @notice Updates the signer key.
    /// @param signer The new signer key.
    function updateSigner(address signer) external;

    /// @notice Used by the router to disable pool actions (Trade, Withdraw, Deposit)
    function killswitchOperations(bool enabled) external;

    /// @notice Returns the token reserves for this pool.
    /// @param token The token to check reserves for.
    function getReserves(address token) external view returns (uint256);

    /// @notice Approves a token for spend. Used for 1inch RFQ protocol.
    /// @param token The address of the ERC-20 token.
    /// @param spender The spender address (typically the 1inch RFQ order router)
    /// @param amount The approval amount.
    function approveToken(
        address token,
        address spender,
        uint256 amount
    ) external;

    /// @notice Increases allowance for a token. Used for 1inch RFQ protocol.
    /// @param token The address of the ERC-20 token.
    /// @param spender The spender address (typically the 1inch RFQ order router).
    /// @param amount The approval amount.
    function increaseTokenAllowance(
        address token,
        address spender,
        uint256 amount
    ) external;

    /// @notice Decreases allowance for a token. Used for 1inch RFQ protocol.
    /// @param token The address of the ERC-20 token.
    /// @param spender The spender address (typically the 1inch RFQ order router)
    /// @param amount The approval amount.
    function decreaseTokenAllowance(
        address token,
        address spender,
        uint256 amount
    ) external;
}


// File: contracts/interfaces/IHashflowRouter.sol
/**
 * SPDX-License-Identifier: UNLICENSED
 */
pragma solidity >=0.8.0;

import './IQuote.sol';

/// @title IHashflowRouter
/// @author Victor Ionescu
/**
 * @notice In terms of user-facing functionality, the Router is responsible for:
 * - orchestrating trades
 * - managing cross-chain permissions
 *
 * Every trade requires consent from two parties: the Trader and the Market Maker.
 * However, there are two models to establish consent:
 * - RFQ-T: in this model, the Market Maker provides an EIP-191 signature for the quote,
 *   while the Trader signs the transaction and submits it on-chain
 * - RFQ-M: in this model, the Trader provides an EIP-712 signature for the quote,
 *   the Market Maker provides an EIP-191 signature, and a 3rd party relays the trade.
 *   The 3rd party can be the Market Maker itself.
 *
 * In terms of Hashflow internals, the Router maintains a set of authorized pool
 * contracts that are allowed to be used for trading. This allowlist creates
 * guarantees against malicious behavior, as documented in specific places.
 *
 * The Router contract is not upgradeable. In order to change functionality, a new
 * Router has to be deployed, and new HashflowPool contracts have to be deployed
 * by the Market Makers.
 */
/// @dev Trade / liquidity events are emitted at the HashflowPool level, rather than the router.
interface IHashflowRouter is IQuote {
    /**
     * @notice X-Chain message received from an X-Chain Messenger. This is used by the
     * Router to communicate a fill to a HashflowPool.
     */
    struct XChainFillMessage {
        /// @notice The Hashflow Chain ID of the source chain.
        uint16 srcHashflowChainId;
        /// @notice The address of the HashflowPool on the source chain.
        bytes32 srcPool;
        /// @notice The HashflowPool to disburse funds on the destination chain.
        address dstPool;
        /**
         * @notice The external account linked to the HashflowPool on the destination chain.
         * If the HashflowPool holds funds, this should be bytes32(0).
         */
        address dstExternalAccount;
        /// @notice The recipient of the quoteToken on the destination chain.
        address dstTrader;
        /// @notice The token that the trader buys on the destination chain.
        address quoteToken;
        /// @notice The amount of quoteToken bought.
        uint256 quoteTokenAmount;
        /// @notice Unique identifier for the quote.
        /// @dev Generated off-chain via a distributed UUID generator.
        bytes32 txid;
        /// @notice The caller of the trade function on the source chain.
        bytes32 srcCaller;
        /// @notice The contract to call, if any.
        address dstContract;
        /// @notice The calldata for the contract.
        bytes dstContractCalldata;
    }

    /// @notice Emitted when the authorization status of a pool changes.
    /// @param pool The pool whose status changed.
    /// @param authorized The new auth status.
    event UpdatePoolAuthorizaton(address pool, bool authorized);

    /// @notice Emitted when a sender pool authorization changes.
    /// @param pool Pool address on this chain.
    /// @param otherHashflowChainId Hashflow Chain ID of the other chain.
    /// @param otherChainPool Pool address on the other chain.
    /// @param authorized Whether the pool is authorized.
    event UpdateXChainPoolAuthorization(
        address indexed pool,
        uint16 otherHashflowChainId,
        bytes32 otherChainPool,
        bool authorized
    );

    /// @notice Emitted when the authorization of an x-caller changes.
    /// @param pool Pool address on this chain.
    /// @param otherHashflowChainId Hashflow Chain ID of the other chain.
    /// @param caller Caller address on the other chain.
    /// @param authorized Whether the caller is authorized.
    event UpdateXChainCallerAuthorization(
        address indexed pool,
        uint16 otherHashflowChainId,
        bytes32 caller,
        bool authorized
    );

    /// @notice Emitted when the authorization status of an X-Chain Messenger changes for a pool.
    /// @param pool Pool address for which the Messenger authorization changes.
    /// @param xChainMessenger Address of the Messenger.
    /// @param authorized Whether the X-Chain Messenger is authorized.
    event UpdateXChainMessengerAuthorization(
        address indexed pool,
        address xChainMessenger,
        bool authorized
    );

    /// @notice Emitted when the authorized status of an X-Chain Messenger changes for a callee.
    /// @param callee Address of the callee.
    /// @param xChainMessenger Address of the Messenger.
    /// @param authorized Whether the X-Chain Messenger is authorized.
    event UpdateXChainMessengerCallerAuthorization(
        address indexed callee,
        address xChainMessenger,
        bool authorized
    );

    /// @notice Emitted when the Limit Order Guardian address is updated.
    /// @param guardian The new Guardian address.
    event UpdateLimitOrderGuardian(address guardian);

    /// @notice Initializes the Router. Called one time.
    /// @param factory The address of the HashflowFactory contract.
    function initialize(address factory) external;

    /// @notice Returns the address of the associated HashflowFactor contract.
    function factory() external view returns (address);

    function authorizedXChainPools(
        bytes32 dstPool,
        uint16 srcHChainId,
        bytes32 srcPool
    ) external view returns (bool);

    function authorizedXChainCallers(
        address dstContract,
        uint16 srcHashflowChainId,
        bytes32 caller
    ) external view returns (bool);

    function authorizedXChainMessengersByPool(address pool, address messenger)
        external
        view
        returns (bool);

    function authorizedXChainMessengersByCallee(
        address callee,
        address messenger
    ) external view returns (bool);

    /// @notice Executes an intra-chain RFQ-T trade.
    /// @param quote The quote data to be executed.
    function tradeRFQT(RFQTQuote memory quote) external payable;

    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.
    /// @param quote The quote data to be executed.
    /// @dev Does not support native tokens for the baseToken.
    function tradeRFQTWithPermit(
        RFQTQuote memory quote,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 amountToApprove
    ) external;

    /// @notice Executes an intra-chain RFQ-T trade.
    /// @param quote The quote to be executed.
    function tradeRFQM(RFQMQuote memory quote) external;

    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.
    /// @param quote The quote to be executed.
    /// @param deadline The deadline of the ERC-20 permit.
    /// @param v v-part of the signature.
    /// @param r r-part of the signature.
    /// @param s s-part of the signature.
    /// @param amountToApprove The amount being approved.
    function tradeRFQMWithPermit(
        RFQMQuote memory quote,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 amountToApprove
    ) external;

    /// @notice Executes an intra-chain RFQ-T trade.
    /// @param quote The quote to be executed.
    /// @param guardianSignature A signature issued by the Limit Order Guardian.
    function tradeRFQMLimitOrder(
        RFQMQuote memory quote,
        bytes memory guardianSignature
    ) external;

    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.
    /// @param quote The quote to be executed.
    /// @param guardianSignature A signature issued by the Limit Order Guardian.
    /// @param deadline The deadline of the ERC-20 permit.
    /// @param v v-part of the signature.
    /// @param r r-part of the signature.
    /// @param s s-part of the signature.
    /// @param amountToApprove The amount being approved.
    function tradeRFQMLimitOrderWithPermit(
        RFQMQuote memory quote,
        bytes memory guardianSignature,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 amountToApprove
    ) external;

    /// @notice Executes an RFQ-T cross-chain trade.
    /// @param quote The quote to be executed.
    /// @param dstContract The address of the contract to be called on the destination chain.
    /// @param dstCalldata The calldata for the smart contract call.
    function tradeXChainRFQT(
        XChainRFQTQuote memory quote,
        bytes32 dstContract,
        bytes memory dstCalldata
    ) external payable;

    /// @notice Executes an RFQ-T cross-chain trade, leveraging an ERC-20 permit.
    /// @param quote The quote to be executed.
    /// @param dstContract The address of the contract to be called on the destination chain.
    /// @param dstCalldata The calldata for the smart contract call.
    /// @param deadline The deadline of the ERC-20 permit.
    /// @param v v-part of the signature.
    /// @param r r-part of the signature.
    /// @param s s-part of the signature.
    /// @param amountToApprove The amount being approved.
    function tradeXChainRFQTWithPermit(
        XChainRFQTQuote memory quote,
        bytes32 dstContract,
        bytes memory dstCalldata,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 amountToApprove
    ) external payable;

    /// @notice Executes an RFQ-M cross-chain trade.
    /// @param quote The quote to be executed.
    /// @param dstContract The address of the contract to be called on the destination chain.
    /// @param dstCalldata The calldata for the smart contract call.
    function tradeXChainRFQM(
        XChainRFQMQuote memory quote,
        bytes32 dstContract,
        bytes memory dstCalldata
    ) external payable;

    /// @notice Similar to tradeXChainRFQm, but includes a spend permit for the baseToken.
    /// @param quote The quote to be executed.
    /// @param dstContract The address of the contract to be called on the destination chain.
    /// @param dstCalldata The calldata for the smart contract call.
    /// @param deadline The deadline of the ERC-20 permit.
    /// @param v v-part of the signature.
    /// @param r r-part of the signature.
    /// @param s s-part of the signature.
    /// @param amountToApprove The amount to approve.
    function tradeXChainRFQMWithPermit(
        XChainRFQMQuote memory quote,
        bytes32 dstContract,
        bytes memory dstCalldata,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 amountToApprove
    ) external payable;

    /// @notice Completes the second leg of a cross-chain trade.
    /// @param fillMessage Payload containing information necessary to complete the trade.
    function fillXChain(XChainFillMessage memory fillMessage) external;

    /// @notice Returns whether the pool is authorized for trading.
    /// @param pool The address of the HashflowPool.
    function authorizedPools(address pool) external view returns (bool);

    /// @notice Allows the owner to unauthorize a potentially compromised pool. Cannot be reverted.
    /// @param pool The address of the HashflowPool.
    function forceUnauthorizePool(address pool) external;

    /// @notice Authorizes a HashflowPool for trading.
    /// @dev Can only be called by the HashflowFactory or the admin.
    function updatePoolAuthorization(address pool, bool authorized) external;

    /// @notice Updates the authorization status of an X-Chain pool pair.
    /// @param otherHashflowChainId The Hashflow Chain ID of the peer chain.
    /// @param otherPool The 32-byte representation of the Pool address on the peer chain.
    /// @param authorized Whether the pool is authorized to communicate with the sender pool.
    function updateXChainPoolAuthorization(
        uint16 otherHashflowChainId,
        bytes32 otherPool,
        bool authorized
    ) external;

    /// @notice Updates the authorization status of an X-Chain caller.
    /// @param otherHashflowChainId The Hashflow Chain ID of the peer chain.
    /// @param caller The caller address.
    /// @param authorized Whether the caller is authorized to send an x-call to the sender pool.
    function updateXChainCallerAuthorization(
        uint16 otherHashflowChainId,
        bytes32 caller,
        bool authorized
    ) external;

    /// @notice Updates the authorization status of an X-Chain Messenger app.
    /// @param xChainMessenger The address of the Messenger App.
    /// @param authorized The new authorization status.
    function updateXChainMessengerAuthorization(
        address xChainMessenger,
        bool authorized
    ) external;

    /// @notice Updates the authorization status of an X-Chain Messenger app.
    /// @param xChainMessenger The address of the Messenger App.
    /// @param authorized The new authorization status.
    function updateXChainMessengerCallerAuthorization(
        address xChainMessenger,
        bool authorized
    ) external;

    /// @notice Used to stop all operations on a pool, in case of an emergency.
    /// @param pool The address of the HashflowPool.
    /// @param enabled Whether the pool is enabled.
    function killswitchPool(address pool, bool enabled) external;

    /// @notice Used to update the Limit Order Guardian.
    /// @param guardian The address of the new Guardian.
    function updateLimitOrderGuardian(address guardian) external;

    /// @notice Allows the owner to withdraw excess funds from the Router.
    /// @dev Under normal operations, the Router should not have excess funds.
    function withdrawFunds(address token) external;
}


// File: contracts/interfaces/IQuote.sol
/**
 * SPDX-License-Identifier: UNLICENSED
 */
pragma solidity >=0.8.0;

/// @title IQuote
/// @author Victor Ionescu
/**
 * @notice Interface for quote structs used for trading. There are two major types of trades:
 * - intra-chain: atomic transactions within one chain
 * - cross-chain: multi-leg transactions between two chains, which utilize interoperability protocols
 *                such as Wormhole.
 *
 * Separately, there are two trading modes:
 * - RFQ-T: the trader signs the transaction, the market maker signs the quote
 * - RFQ-M: both the trader and Market Maker sign the quote, any relayer can sign the transaction
 */
interface IQuote {
    /// @notice Used for intra-chain RFQ-T trades.
    struct RFQTQuote {
        /// @notice The address of the HashflowPool to trade against.
        address pool;
        /**
         * @notice The external account linked to the HashflowPool.
         * If the HashflowPool holds funds, this should be address(0).
         */
        address externalAccount;
        /// @notice The recipient of the quoteToken at the end of the trade.
        address trader;
        /**
         * @notice The account "effectively" making the trade (ultimately receiving the funds).
         * This is commonly used by aggregators, where a proxy contract (the 'trader')
         * receives the quoteToken, and the effective trader is the user initiating the call.
         *
         * This field DOES NOT influence movement of funds. However, it is used to check against
         * quote replay.
         */
        address effectiveTrader;
        /// @notice The token that the trader sells.
        address baseToken;
        /// @notice The token that the trader buys.
        address quoteToken;
        /**
         * @notice The amount of baseToken sold in this trade. The exchange rate
         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.
         *
         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.
         */
        uint256 effectiveBaseTokenAmount;
        /// @notice The max amount of baseToken sold.
        uint256 baseTokenAmount;
        /// @notice The amount of quoteToken bought when baseTokenAmount is sold.
        uint256 quoteTokenAmount;
        /// @notice The Unix timestamp (in seconds) when the quote expires.
        /// @dev This gets checked against block.timestamp.
        uint256 quoteExpiry;
        /// @notice The nonce used by this effectiveTrader. Nonces are used to protect against replay.
        uint256 nonce;
        /// @notice Unique identifier for the quote.
        /// @dev Generated off-chain via a distributed UUID generator.
        bytes32 txid;
        /// @notice Signature provided by the market maker (EIP-191).
        bytes signature;
    }

    /// @notice Used for intra-chain RFQ-M trades.
    struct RFQMQuote {
        /// @notice The address of the HashflowPool to trade against.
        address pool;
        /**
         * @notice The external account linked to the HashflowPool.
         * If the HashflowPool holds funds, this should be address(0).
         */
        address externalAccount;
        /// @notice The account that will be debited baseToken / credited quoteToken.
        address trader;
        /// @notice The token that the trader sells.
        address baseToken;
        /// @notice The token that the trader buys.
        address quoteToken;
        /// @notice The amount of baseToken sold.
        uint256 baseTokenAmount;
        /// @notice The amount of quoteToken bought.
        uint256 quoteTokenAmount;
        /// @notice The Unix timestamp (in seconds) when the quote expires.
        /// @dev This gets checked against block.timestamp.
        uint256 quoteExpiry;
        /// @notice Unique identifier for the quote.
        /// @dev Generated off-chain via a distributed UUID generator.
        bytes32 txid;
        /// @notice Signature provided by the trader (EIP-712).
        bytes takerSignature;
        /// @notice Signature provided by the market maker (EIP-191).
        bytes makerSignature;
    }

    /// @notice Used for cross-chain RFQ-T trades.
    struct XChainRFQTQuote {
        /// @notice The Hashflow Chain ID of the source chain.
        uint16 srcChainId;
        /// @notice The Hashflow Chain ID of the destination chain.
        uint16 dstChainId;
        /// @notice The address of the HashflowPool to trade against on the source chain.
        address srcPool;
        /// @notice The HashflowPool to disburse funds on the destination chain.
        /// @dev This is bytes32 in order to anticipate non-EVM chains.
        bytes32 dstPool;
        /**
         * @notice The external account linked to the HashflowPool on the source chain.
         * If the HashflowPool holds funds, this should be address(0).
         */
        address srcExternalAccount;
        /**
         * @notice The external account linked to the HashflowPool on the destination chain.
         * If the HashflowPool holds funds, this should be bytes32(0).
         */
        bytes32 dstExternalAccount;
        /// @notice The recipient of the quoteToken on the destination chain.
        bytes32 dstTrader;
        /// @notice The token that the trader sells on the source chain.
        address baseToken;
        /// @notice The token that the trader buys on the destination chain.
        bytes32 quoteToken;
        /**
         * @notice The amount of baseToken sold in this trade. The exchange rate
         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.
         *
         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.
         */
        uint256 effectiveBaseTokenAmount;
        /// @notice The amount of baseToken sold.
        uint256 baseTokenAmount;
        /// @notice The amount of quoteToken bought.
        uint256 quoteTokenAmount;
        /**
         * @notice The Unix timestamp (in seconds) when the quote expire. Only enforced
         * on the source chain.
         */
        /// @dev This gets checked against block.timestamp.
        uint256 quoteExpiry;
        /// @notice The nonce used by this trader.
        uint256 nonce;
        /// @notice Unique identifier for the quote.
        /// @dev Generated off-chain via a distributed UUID generator.
        bytes32 txid;
        /**
         * @notice The address of the IHashflowXChainMessenger contract used for
         * cross-chain communication.
         */
        address xChainMessenger;
        /// @notice Signature provided by the market maker (EIP-191).
        bytes signature;
    }

    /// @notice Used for Cross-Chain RFQ-M trades.
    struct XChainRFQMQuote {
        /// @notice The Hashflow Chain ID of the source chain.
        uint16 srcChainId;
        /// @notice The Hashflow Chain ID of the destination chain.
        uint16 dstChainId;
        /// @notice The address of the HashflowPool to trade against on the source chain.
        address srcPool;
        /// @notice The HashflowPool to disburse funds on the destination chain.
        /// @dev This is bytes32 in order to anticipate non-EVM chains.
        bytes32 dstPool;
        /**
         * @notice The external account linked to the HashflowPool on the source chain.
         * If the HashflowPool holds funds, this should be address(0).
         */
        address srcExternalAccount;
        /**
         * @notice The external account linked to the HashflowPool on the destination chain.
         * If the HashflowPool holds funds, this should be bytes32(0).
         */
        bytes32 dstExternalAccount;
        /// @notice The account that will be debited baseToken on the source chain.
        address trader;
        /// @notice The recipient of the quoteToken on the destination chain.
        bytes32 dstTrader;
        /// @notice The token that the trader sells on the source chain.
        address baseToken;
        /// @notice The token that the trader buys on the destination chain.
        bytes32 quoteToken;
        /// @notice The amount of baseToken sold.
        uint256 baseTokenAmount;
        /// @notice The amount of quoteToken bought.
        uint256 quoteTokenAmount;
        /**
         * @notice The Unix timestamp (in seconds) when the quote expire. Only enforced
         * on the source chain.
         */
        /// @dev This gets checked against block.timestamp.
        uint256 quoteExpiry;
        /// @notice Unique identifier for the quote.
        /// @dev Generated off-chain via a distributed UUID generator.
        bytes32 txid;
        /**
         * @notice The address of the IHashflowXChainMessenger contract used for
         * cross-chain communication.
         */
        address xChainMessenger;
        /// @notice Signature provided by the trader (EIP-712).
        bytes takerSignature;
        /// @notice Signature provided by the market maker (EIP-191).
        bytes makerSignature;
    }
}


// File: contracts/interfaces/xchain/IHashflowWormholeMessenger.sol
/**
 * SPDX-License-Identifier: UNLICENSED
 */
pragma solidity >=0.8.0;

import './IHashflowXChainMessenger.sol';

interface IHashflowWormholeMessenger is IHashflowXChainMessenger {
    /// @notice Emitted when the Wormhole endpoint is updated.
    /// @param wormholeEndpoint The new Wormhole endpoint.
    /// @param prevWormholeEndpoint The old Wormhole endpoint.
    event UpdateWormholeEndpoint(
        address wormholeEndpoint,
        address prevWormholeEndpoint
    );

    /// @notice Emitted when the Wormhole consistency level is updated.
    /// @param consistencyLevel The new consistencyLevel.
    event UpdateWormholeConsistencyLevel(uint256 consistencyLevel);

    /// @notice Emitted when the Wormhole fast consistency level is updated.
    /// @param consistencyLevel The new consistencyLevel.
    event UpdateWormholeConsistencyLevelFast(uint256 consistencyLevel);

    /// @notice Emitted when a Wormhole Chain ID is updated.
    /// @param hChainId The Hashflow Chain ID.
    /// @param wormholeChainId The Wormhole Chain ID.
    event UpdateWormholeChainId(uint256 hChainId, uint256 wormholeChainId);

    event UpdatePermissionedRelayer(uint16 hChainId, bytes32 relayer);

    /// @notice Emitted when a message is sent via Wormhole.
    /// @dev The sequence is used offline by the Relayer to fetch the VAA.
    event WormholeSend(bytes32 txid, uint256 value, uint256 sequence);

    /// @notice Emitted when a message is sent with fast consistency level.
    event WormholeSendFast(bytes32 txid, uint256 value, uint256 sequence);

    /// @notice Emitted when a Wormhole message is successfully received.
    event WormholeReceive(bytes32 txid);

    /// @notice Returns the currently set Wormhole endpoint.
    function wormholeEndpoint() external view returns (address);

    /// @notice Returns the currently set consistency level for Wormhole.
    function wormholeConsistencyLevel() external view returns (uint8);

    /// @notice Returns the currently set consistency level for Wormhole fast messages.
    function wormholeConsistencyLevelFast() external view returns (uint8);

    /// @notice Returns the associated Hashflow Chain ID to a Wormhole Chain ID.
    /// @param wormholeChainId The Wormhole Chain ID.
    function wormholeChainIdToHChainId(uint16 wormholeChainId)
        external
        view
        returns (uint16);

    /// @notice Returns the associated Wormhole Chain ID to a Hashflow Chain ID.
    /// @param hChainId The Hashflow Chain Id.
    function hChainIdToWormholeChainId(uint16 hChainId)
        external
        view
        returns (uint16);

    /// @notice Returns the currently set permissioned Relayer for a Hashflow Chain.
    /// @param hChainId The Hashflow Chain ID.
    function permissionedRelayers(uint16 hChainId)
        external
        view
        returns (bytes32);

    /// @notice Updates the Wormhole bridge endpoint.
    /// @param wormhole The new Wormhole bridge endpoint.
    function updateWormhole(address wormhole) external;

    /// @notice Updates the Wormhole consistency level.
    /// @param consistencyLevel The new consistency level.
    function updateWormholeConsistencyLevel(uint8 consistencyLevel) external;

    /// @notice Updates the Wormhole fast consistency level.
    /// @param consistencyLevel The new fast consistency level.
    function updateWormholeConsistencyLevelFast(uint8 consistencyLevel)
        external;

    /// @notice Updates the permissioned Relayer for a hashflow chain ID.
    /// @param hChainId The Hashflow Chain ID.
    /// @param relayer The permissioned Relayer.
    function updatePermissionedRelayer(uint16 hChainId, bytes32 relayer)
        external;

    /// @notice Receives a message sent via Wormhole.
    /// @param encodedVM the encoded Wormhole VAA.
    function wormholeReceive(bytes memory encodedVM) external;

    /// @notice Sets the Wormhole Chain ID for a Hashflow Chain ID.
    /// @param hChainId The Hashflow Chain ID.
    /// @param wormholeChainId The Wormhole Chain ID.
    function updateWormholeChainIdForHashflowChainId(
        uint16 hChainId,
        uint16 wormholeChainId
    ) external;
}


// File: contracts/interfaces/xchain/IHashflowXChainMessenger.sol
/**
 * SPDX-License-Identifier: UNLICENSED
 */
pragma solidity >=0.8.0;

/// @title IHashflowMessenger
/// @author Victor Ionescu
/**
 * @notice This interface should be implemented by any contract
 * that is to be used for X-Chain Message passing.
 */
interface IHashflowXChainMessenger {
    struct XChainQuote {
        uint16 srcChainId;
        uint16 dstChainId;
        address srcPool;
        bytes32 dstPool;
        address srcExternalAccount;
        bytes32 dstExternalAccount;
        address trader;
        bytes32 dstTrader;
        address baseToken;
        bytes32 quoteToken;
        uint256 baseTokenAmount;
        uint256 quoteTokenAmount;
        bytes32 txid;
    }

    struct XChainTradePayload {
        uint16 dstChainId;
        bytes32 txid;
        bytes32 srcPool;
        bytes32 dstPool;
        bytes32 dstExternalAccount;
        bytes32 quoteToken;
        bytes32 dstTrader;
        uint256 quoteTokenAmount;
        bytes32 permissionedRelayer;
        bytes32 srcCaller;
        bytes32 dstContract;
        bytes dstContractCalldata;
    }

    /// @notice Emitted when an associated IHashflowMessenger on a source chain changes.
    /// @param chainId The Hashflow Chain ID.
    /// @param remoteAddress The address of the remote, pre-padded to 32 bytes.
    event UpdateXChainRemoteAddress(uint16 chainId, bytes remoteAddress);

    /// @notice The Hashflow Chain ID for this chain.
    function hChainId() external view returns (uint16);

    /// @notice Returns the Hashflow Router.
    function router() external view returns (address);

    /// @notice Returns the registered remote for a Hashflow Chain ID.
    /// @param hChainId The foreign Hashflow Chain ID.
    function xChainRemotes(uint16 hChainId)
        external
        view
        returns (bytes memory);

    /// @notice Send X-Chain trade fill message.
    /// @param xChainQuote Quote object.
    /// @param caller The caller of the X-Chain trade.
    /// @param dstContract The contract to call on the destination chain.
    /// @param dstCalldata The calldata to pass to the contract.
    function tradeXChain(
        XChainQuote memory xChainQuote,
        address caller,
        bytes32 dstContract,
        bytes memory dstCalldata
    ) external payable;

    /// @notice Updates the associated IHashflowMessenger address on a different chain.
    /// @param hChainId The Hashflow Chain ID of the peer chain.
    /// @param remoteAddress The address of the IHashflowMessenger on the peer chain.
    function updateXChainRemoteAddress(
        uint16 hChainId,
        bytes calldata remoteAddress
    ) external;

    /// @notice Withdraws excess fees to the owner.
    function withdrawFunds() external;
}


// File: contracts/xchain/HashflowWormholeMessenger.sol
/**
 * SPDX-License-Identifier: UNLICENSED
 */
pragma solidity 0.8.18;

import '@openzeppelin/contracts/security/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';

import '../interfaces/external/IWormhole.sol';
import '../interfaces/xchain/IHashflowWormholeMessenger.sol';
import '../interfaces/IHashflowPool.sol';
import '../interfaces/IHashflowRouter.sol';

import './HashflowXChainMessengerBase.sol';

contract HashflowWormholeMessenger is
    HashflowXChainMessengerBase,
    IHashflowWormholeMessenger,
    ReentrancyGuard
{
    using SafeERC20 for IERC20;
    using Address for address;

    address public wormholeEndpoint;

    uint8 public wormholeConsistencyLevel;
    uint8 public wormholeConsistencyLevelFast;

    // These mappings manage H-Chain ID <-> Wormhole Chain ID links.
    mapping(uint16 => uint16) public hChainIdToWormholeChainId;
    mapping(uint16 => uint16) public wormholeChainIdToHChainId;

    mapping(uint16 => bytes32) public permissionedRelayers;

    receive() external payable {}

    constructor(uint16 _hChainId, address _router)
        HashflowXChainMessengerBase(_hChainId, _router)
    {}

    /// @inheritdoc IHashflowWormholeMessenger
    function updateWormhole(address wormhole) external override onlyOwner {
        require(
            wormhole.isContract(),
            'HashflowWormholeMessenger::updateWormhole Wormhole endpoint must be a contract.'
        );
        emit UpdateWormholeEndpoint(wormhole, wormholeEndpoint);
        wormholeEndpoint = wormhole;
    }

    /// @inheritdoc IHashflowWormholeMessenger
    function updateWormholeConsistencyLevel(uint8 consistencyLevel)
        external
        override
        onlyOwner
    {
        require(
            consistencyLevel != 0,
            'HashflowWormholeMessenger::updateWormholeConsistencyLevel Consistency level cannot be 0.'
        );
        wormholeConsistencyLevel = consistencyLevel;
        emit UpdateWormholeConsistencyLevel(wormholeConsistencyLevel);
    }

    /// @inheritdoc IHashflowWormholeMessenger
    function updateWormholeConsistencyLevelFast(uint8 consistencyLevel)
        external
        override
        onlyOwner
    {
        require(
            consistencyLevel != 0,
            'HashflowWormholeMessenger::updateWormholeConsistencyLevelFast Consistency level cannot be 0.'
        );
        wormholeConsistencyLevelFast = consistencyLevel;
        emit UpdateWormholeConsistencyLevelFast(wormholeConsistencyLevelFast);
    }

    /// @inheritdoc IHashflowWormholeMessenger
    function updatePermissionedRelayer(uint16 _hChainId, bytes32 relayer)
        external
        override
        onlyOwner
    {
        require(
            _hChainId != hChainId,
            'HashflowWormholeMessenger::updatePermissionedRelayer Cannot update relayer for same chain.'
        );
        require(
            relayer != bytes32(0),
            'HashflowWormholeMessenger::updatePermissionedRelayer Relayer address cannot be 0.'
        );

        permissionedRelayers[_hChainId] = relayer;
        emit UpdatePermissionedRelayer(_hChainId, relayer);
    }

    /// @inheritdoc IHashflowXChainMessenger
    function tradeXChain(
        XChainQuote memory quote,
        address caller,
        bytes32 dstContract,
        bytes memory dstCalldata
    ) external payable {
        require(
            _msgSender() == router,
            'HashflowWormholeMessenger::tradeXChain Sender must be router.'
        );
        require(
            quote.srcChainId == hChainId,
            'HashflowWormholeMessenger::tradeXChain Incorrect srcChainId.'
        );

        _wormholeSend(quote, caller, dstContract, dstCalldata);
    }

    /// @dev Send message via Wormhole.
    function _wormholeSend(
        XChainQuote memory quote,
        address caller,
        bytes32 dstContract,
        bytes memory dstCalldata
    ) private {
        uint256 wormholeMessageFee = IWormhole(wormholeEndpoint).messageFee();
        uint256 totalWormholeMessageFee = wormholeMessageFee;

        // We double the fee for fast relays.
        if (
            wormholeConsistencyLevelFast != 0 &&
            permissionedRelayers[quote.dstChainId] != bytes32(0)
        ) {
            totalWormholeMessageFee = totalWormholeMessageFee * 2;
        }

        require(
            msg.value >= totalWormholeMessageFee,
            'HashflowWormholeMessenger::_wormholeSend Insufficient Wormhole fees.'
        );
        uint16 wormholeDstChainId = hChainIdToWormholeChainId[quote.dstChainId];
        require(
            wormholeDstChainId != 0 &&
                xChainRemotes[quote.dstChainId].length > 0,
            'HashflowWormholeMessenger::_wormholeSend Wormhole destination chain ID not configured'
        );
        require(
            wormholeConsistencyLevel != 0,
            'HashflowWormholeMessenger::_wormholeSend Consistency level not set.'
        );

        {
            bytes memory payload = _generateTradePayload(
                quote,
                caller,
                bytes32(0),
                dstContract,
                dstCalldata
            );
            uint256 sequence = IWormhole(wormholeEndpoint).publishMessage{
                value: wormholeMessageFee
            }(
                0, // Nonce.
                payload,
                wormholeConsistencyLevel
            );
            emit WormholeSend(
                quote.txid,
                msg.value - totalWormholeMessageFee,
                sequence
            );
        }

        if (
            wormholeConsistencyLevelFast != 0 &&
            permissionedRelayers[quote.dstChainId] != bytes32(0)
        ) {
            bytes memory payload = _generateTradePayload(
                quote,
                caller,
                permissionedRelayers[quote.dstChainId],
                dstContract,
                dstCalldata
            );
            uint256 sequence = IWormhole(wormholeEndpoint).publishMessage{
                value: wormholeMessageFee
            }(
                0, // Nonce.
                payload,
                wormholeConsistencyLevelFast
            );
            emit WormholeSendFast(
                quote.txid,
                msg.value - totalWormholeMessageFee,
                sequence
            );
        }
    }

    /// @inheritdoc IHashflowWormholeMessenger
    function wormholeReceive(bytes memory encodedVM)
        external
        override
        nonReentrant
    {
        (
            WormholeStructs.VM memory vm,
            bool valid,
            string memory reason
        ) = IWormhole(wormholeEndpoint).parseAndVerifyVM(encodedVM);

        // We make sure the message is valid and has been signed by
        // Guardians.
        require(valid, reason);

        // We check that the emitter chain has been properly configured.
        // It is OK to revert if not -- the message can be retried later on.
        // Wormhole VAAs are non-blocking.
        uint16 srcHChainId = wormholeChainIdToHChainId[vm.emitterChainId];
        require(
            srcHChainId != 0,
            'HashflowWormholeMessenger::wormholeReceive Invalid source chain.'
        );

        // We ensure that the sender of the message is a valid Hashflow contract.
        bytes32 authorizedRemote = bytes32(
            uint256(bytes32(xChainRemotes[srcHChainId])) >>
                ((32 - xChainRemotes[srcHChainId].length) * 8)
        );
        require(
            authorizedRemote == vm.emitterAddress,
            'HashflowWormholeMessenger::wormholeReceive Unauthorized remote.'
        );

        XChainTradePayload memory tradePayload = abi.decode(
            vm.payload,
            (XChainTradePayload)
        );

        IHashflowRouter.XChainFillMessage memory fillMessage;
        // We need to check that this is the intended receiving chain.
        require(
            tradePayload.dstChainId == hChainId,
            'HashflowWormholeMessenger::wormholeReceive Incorrect destination chain.'
        );
        if (tradePayload.permissionedRelayer != bytes32(0)) {
            require(
                bytes32(
                    uint256(uint160(uint256(tradePayload.permissionedRelayer)))
                ) == tradePayload.permissionedRelayer,
                'HashflowWormholeMessenger::wormholeReceive permissionedRelayer is not EVM address.'
            );
            require(
                address(uint160(uint256(tradePayload.permissionedRelayer))) ==
                    _msgSender(),
                'HashflowWormholeMessenger::wormholeReceive Relayer not authorized.'
            );
        }

        require(
            bytes32(uint256(uint160(uint256(tradePayload.dstPool)))) ==
                tradePayload.dstPool,
            'HashflowWormholeMessenger::wormholeReceive dstPool is not EVM address.'
        );
        require(
            bytes32(
                uint256(uint160(uint256(tradePayload.dstExternalAccount)))
            ) == tradePayload.dstExternalAccount,
            'HashflowWormholeMessenger::wormholeReceive dstExternalAccount is not EVM address.'
        );
        require(
            bytes32(uint256(uint160(uint256(tradePayload.dstTrader)))) ==
                tradePayload.dstTrader,
            'HashflowWormholeMessenger::wormholeReceive dstTrader is not EVM address.'
        );
        require(
            bytes32(uint256(uint160(uint256(tradePayload.quoteToken)))) ==
                tradePayload.quoteToken,
            'HashflowWormholeMessenger::wormholeReceive quoteToken is not EVM address.'
        );

        fillMessage.srcHashflowChainId = srcHChainId;
        fillMessage.srcPool = tradePayload.srcPool;
        fillMessage.dstPool = address(uint160(uint256(tradePayload.dstPool)));
        fillMessage.dstExternalAccount = address(
            uint160(uint256(tradePayload.dstExternalAccount))
        );
        fillMessage.dstTrader = address(
            uint160(uint256(tradePayload.dstTrader))
        );
        fillMessage.quoteToken = address(
            uint160(uint256(tradePayload.quoteToken))
        );
        fillMessage.quoteTokenAmount = tradePayload.quoteTokenAmount;
        fillMessage.txid = tradePayload.txid;
        fillMessage.srcCaller = tradePayload.srcCaller;

        if (tradePayload.dstContract != bytes32(0)) {
            require(
                bytes32(uint256(uint160(uint256(tradePayload.dstContract)))) ==
                    tradePayload.dstContract,
                'HashflowWormholeMessenger::wormholeReceive dstContract is not EVM address.'
            );
            fillMessage.dstContract = address(
                uint160(uint256(tradePayload.dstContract))
            );
            fillMessage.dstContractCalldata = tradePayload.dstContractCalldata;
        }

        IHashflowRouter(router).fillXChain(fillMessage);

        emit WormholeReceive(fillMessage.txid);
    }

    /// @inheritdoc IHashflowWormholeMessenger
    function updateWormholeChainIdForHashflowChainId(
        uint16 hashflowChainId,
        uint16 wormholeChainId
    ) external override onlyOwner {
        require(
            hashflowChainId != 0 && wormholeChainId != 0,
            'HashflowWormholeMessenger::updateWormholeChainIdForHashflowChainId chainId cannot be 0.'
        );

        // If this wormhole Chain ID is already assigned, we need to unassign it first.
        require(
            wormholeChainIdToHChainId[wormholeChainId] == 0,
            'HashflowWormholeMessenger::updateWormholeChainIdForHashflowChainId Wormhole Chain ID already assigned.'
        );

        uint16 previouslyAssignedWormholeChainId = hChainIdToWormholeChainId[
            hashflowChainId
        ];

        // We free up the previously assigned ID.
        if (previouslyAssignedWormholeChainId != 0) {
            wormholeChainIdToHChainId[previouslyAssignedWormholeChainId] = 0;
        }

        hChainIdToWormholeChainId[hashflowChainId] = wormholeChainId;
        wormholeChainIdToHChainId[wormholeChainId] = hashflowChainId;

        emit UpdateWormholeChainId(hashflowChainId, wormholeChainId);
    }

    /// @dev We do not allow the owner to renounce ownership.
    function renounceOwnership() public view override onlyOwner {
        revert(
            'HashflowWormholeMessenger::renounceOwnership Renouncing ownership not allowed.'
        );
    }
}


// File: contracts/xchain/HashflowXChainMessengerBase.sol
/**
 * SPDX-License-Identifier: UNLICENSED
 */
pragma solidity 0.8.18;

import '@openzeppelin/contracts/access/Ownable2Step.sol';
import '@openzeppelin/contracts/utils/Address.sol';

import '../interfaces/xchain/IHashflowXChainMessenger.sol';

abstract contract HashflowXChainMessengerBase is
    IHashflowXChainMessenger,
    Ownable2Step
{
    using Address for address payable;

    uint16 public immutable hChainId;

    address public immutable router;

    mapping(uint16 => bytes) public xChainRemotes;

    constructor(uint16 _hChainId, address _router) {
        require(
            _hChainId != 0,
            'HashflowXChainMessengerBase::constructor Hashflow Chain ID cannot be 0.'
        );

        require(
            _router != address(0),
            'HashflowXChainMessengerBase::constructor Router cannot be 0 address.'
        );

        hChainId = _hChainId;
        router = _router;
    }

    /// @inheritdoc IHashflowXChainMessenger
    function updateXChainRemoteAddress(
        uint16 _hChainId,
        bytes calldata remoteAddress
    ) external override onlyOwner {
        xChainRemotes[_hChainId] = remoteAddress;

        emit UpdateXChainRemoteAddress(_hChainId, remoteAddress);
    }

    /// @inheritdoc IHashflowXChainMessenger
    function withdrawFunds() external onlyOwner {
        payable(_msgSender()).sendValue(address(this).balance);
    }

    function _generateTradePayload(
        XChainQuote memory quote,
        address caller,
        bytes32 permissionedRelayer,
        bytes32 dstContract,
        bytes memory dstContractCalldata
    ) internal pure returns (bytes memory) {
        XChainTradePayload memory pld;
        pld.dstChainId = quote.dstChainId;
        pld.txid = quote.txid;
        pld.srcPool = bytes32(uint256(uint160(quote.srcPool)));
        pld.dstPool = quote.dstPool;
        pld.dstExternalAccount = quote.dstExternalAccount;
        pld.quoteToken = quote.quoteToken;
        pld.dstTrader = quote.dstTrader;
        pld.quoteTokenAmount = quote.quoteTokenAmount;
        pld.permissionedRelayer = permissionedRelayer;
        pld.srcCaller = bytes32(uint256(uint160(caller)));
        pld.dstContract = dstContract;
        pld.dstContractCalldata = dstContractCalldata;

        return abi.encode(pld);
    }
}

