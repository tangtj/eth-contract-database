{"CitizenAirdropPool.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./ICitizenAirdropPool.sol\";\r\nimport \"./IERC20.sol\";\r\nimport {MerkleProof} from \"./MerkleProof.sol\";\r\n\r\ncontract CitizenAirdropPool is ICitizenAirdropPool{\r\n    uint256 public override startTime = 1719144000;\r\n    uint256 public override endTime = 1720008000;\r\n    address public immutable TOKEN;\r\n    bytes32 public immutable MERKLEROOT;\r\n    mapping(address =\u003e bool) public override isExtract;\r\n\r\n    constructor(address token, bytes32 merkleRoot) {\r\n        TOKEN = token;\r\n        MERKLEROOT = merkleRoot;\r\n    }\r\n\r\n    function extract(\r\n        address account, \r\n        uint256 daoNum, \r\n        uint256 citizenNFTsNum, \r\n        uint256 fountdingCitizenNum, \r\n        uint256 firstCitizens, \r\n        bytes32[] calldata merkleProof\r\n    ) external override returns(bool) {\r\n        require(msg.sender == account, \"Only sender self\");\r\n        require(block.timestamp \u003e startTime \u0026\u0026 block.timestamp \u003c endTime, \"Not within the validity period\");\r\n        require(!isExtract[account], \"Extracted\");\r\n        uint amount = quotaOf(account, daoNum, citizenNFTsNum, fountdingCitizenNum, firstCitizens, merkleProof);\r\n        require(amount \u003e 0, \"Not eligible\");\r\n\r\n        isExtract[account] = true;\r\n        IERC20(TOKEN).transfer(account, amount);\r\n        emit Draw(account, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function quotaOf(\r\n        address account, \r\n        uint256 daoNum, \r\n        uint256 citizenNFTsNum, \r\n        uint256 fountdingCitizenNum, \r\n        uint256 firstCitizens, \r\n        bytes32[] calldata merkleProof\r\n    ) view public override returns(uint256) {\r\n        if (isExtract[account]) {\r\n            return 0;\r\n        }\r\n\r\n        bytes32 node = keccak256(\r\n            abi.encodePacked(account, daoNum, citizenNFTsNum, fountdingCitizenNum, firstCitizens)\r\n        );\r\n\r\n        bool isValidProof = MerkleProof.verifyCalldata(\r\n            merkleProof,\r\n            MERKLEROOT,\r\n            node\r\n        );\r\n\r\n        uint256 balances = 0;\r\n\r\n        if (isValidProof) {\r\n            balances = daoNum * 50000;\r\n            balances += citizenNFTsNum * 100000;\r\n            balances += fountdingCitizenNum * 300000;\r\n            balances += firstCitizens * 1000000;\r\n            balances = balances * 10 ** 18;\r\n        }\r\n        return balances;\r\n    }\r\n}"},"Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library of standard hash functions.\r\n */\r\nlibrary Hashes {\r\n    /**\r\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\r\n     *\r\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\r\n     */\r\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\r\n        return a \u003c b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn\u0027t allocate or expand memory.\r\n     */\r\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}"},"ICitizenAirdropPool.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\ninterface ICitizenAirdropPool {\r\n    /**\r\n    * @dev Token claim event\r\n    *\r\n    * @param account Received account address\r\n    * @param amount Quantity claimed\r\n    */\r\n    event Draw(address indexed account, uint256 amount);\r\n\r\n    /**\r\n    * @dev Query the amount that can be claimed\r\n    *\r\n    * @param account Received account address\r\n    * @param daoNum Donation status\r\n    * @param citizenNFTsNum Number of NFTs\r\n    * @param fountdingCitizenNum Number of NFTs\r\n    * @param firstCitizens Number of NFTs\r\n    * @param merkleProof Merkel Tree Hash Proof\r\n\r\n    * @return Claimable limit\r\n    */\r\n    function quotaOf(\r\n        address account, \r\n        uint256 daoNum, \r\n        uint256 citizenNFTsNum, \r\n        uint256 fountdingCitizenNum, \r\n        uint256 firstCitizens, \r\n        bytes32[] calldata merkleProof\r\n    ) view external returns(uint256);\r\n\r\n    /**\r\n    * @dev Check if the account has been claimed\r\n    *\r\n    * @param account Designated query account\r\n    *\r\n    * @return Claim status\r\n    */\r\n    function isExtract(address account) view external returns(bool);\r\n\r\n    /**\r\n    * @dev Query the start time of claim collection\r\n    *\r\n    * @return The timestamp of the opening time\r\n    */\r\n    function startTime() view external returns(uint256);\r\n\r\n    /**\r\n    * @dev Query the end time of claim collection\r\n    *\r\n    * @return The timestamp of the close time\r\n    */\r\n    function endTime() view external returns(uint256);\r\n\r\n    /**\r\n    * @dev receive\r\n    *\r\n    * @param account Received account address\r\n    * @param daoNum Donation status\r\n    * @param citizenNFTsNum Number of NFTs\r\n    * @param fountdingCitizenNum Number of NFTs\r\n    * @param firstCitizens Number of NFTs\r\n    * @param merkleProof Merkel Tree Hash Proof\r\n\r\n    * @return success?\r\n    */\r\n    function extract(\r\n        address account, \r\n        uint256 daoNum, \r\n        uint256 citizenNFTsNum, \r\n        uint256 fountdingCitizenNum, \r\n        uint256 firstCitizens, \r\n        bytes32[] calldata merkleProof\r\n    ) external returns(bool);\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {Hashes} from \"./Hashes.sol\";\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The tree and the proofs can be generated using our\r\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\r\n * You will find a quickstart guide in the readme.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the Merkle tree could be reinterpreted as a leaf value.\r\n * OpenZeppelin\u0027s JavaScript library generates Merkle trees that are safe\r\n * against this attack out of the box.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     *@dev The multiproof provided is not valid.\r\n     */\r\n    error MerkleProofInvalidMultiproof();\r\n\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     */\r\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs \u0026 pre-images are assumed to be sorted.\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i \u003c proof.length; i++) {\r\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     */\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i \u003c proof.length; i++) {\r\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\r\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\r\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\r\n     * respectively.\r\n     *\r\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\r\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\r\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the Merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 proofLen = proof.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        if (leavesLen + proofLen != totalHashes + 1) {\r\n            revert MerkleProofInvalidMultiproof();\r\n        }\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\u0027s \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i \u003c totalHashes; i++) {\r\n            bytes32 a = leafPos \u003c leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos \u003c leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\r\n        }\r\n\r\n        if (totalHashes \u003e 0) {\r\n            if (proofPos != proofLen) {\r\n                revert MerkleProofInvalidMultiproof();\r\n            }\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen \u003e 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the Merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 proofLen = proof.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        if (leavesLen + proofLen != totalHashes + 1) {\r\n            revert MerkleProofInvalidMultiproof();\r\n        }\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue\u0027s \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i \u003c totalHashes; i++) {\r\n            bytes32 a = leafPos \u003c leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos \u003c leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\r\n        }\r\n\r\n        if (totalHashes \u003e 0) {\r\n            if (proofPos != proofLen) {\r\n                revert MerkleProofInvalidMultiproof();\r\n            }\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen \u003e 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n}"}}