
// File: /contracts/PCRM.sol
//SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.4;

// @openzeppelin/contracts": "^4.8.0", @openzeppelin/contracts/utils/Context.sol
abstract contract Context {

    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

}

//@openzeppelin/contracts": "^4.8.0", @openzeppelin/contracts/access/Ownable.sol
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface EIP1132Interface {
    function lock(bytes32 _reason, uint256 _amount, uint256 _time) external returns (bool);
    function tokensLocked(address _of, bytes32 _reason) external view returns (uint256 amount);
    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time) external view returns (uint256 amount);
    function totalBalanceOf(address _of)  external view returns (uint256 amount);
    function extendLock(bytes32 _reason, uint256 _time)  external returns (bool);
    function increaseLockAmount(bytes32 _reason, uint256 _amount) external returns (bool);
    function tokensUnlockable(address _of, bytes32 _reason) external view returns (uint256 amount);
    function getUnlockableTokens(address _of) external view returns (uint256 unlockableTokens);
    function unlock(address _of) external returns (uint256 unlockableTokens);
    event Locked(address indexed _of, uint256 indexed _reason, uint256 _amount, uint256 _validity);
    event Unlocked(address indexed _of, uint256 indexed _reason, uint256 _amount);
}

interface ITOKENLOCK {
    event    UpdateTokenBolt(address tokenHolder, uint256 amountLocked);
    function boltUnlocked(address tokenHolder) external view returns (uint256 amount);
    function boltLocked(address tokenHolder) external view returns (uint256 amount);
}

//@openzeppelin/contracts": "^4.8.0", @openzeppelin/contracts/interfaces/IERC20.sol
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event    Transfer(address indexed from, address indexed to, uint256 value);
    event    Approval(address indexed owner, address indexed spender, uint256 value);
}


//@openzeppelin/contracts": "^4.8.0", @openzeppelin/contracts/interfaces/IERC20Metadata.sol
//interface IERC20Metadata is IERC20 {
interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

//@openzeppelin/contracts": "^4.8.0", @openzeppelin/contracts/token/ERC20/ERC20.sol
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor (string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, _msgSender(), currentAllowance - amount);

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);

        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}

contract PCRM is ERC20, Ownable, ITOKENLOCK {

    string private  constant ERROR_INSUFFICIENT_UNLOCKED = "Not enough unlocked(locked) tokens for transfer";
    string private  constant ERROR_LOCK_EXISTS           = "Token lock already exists";
    string private  constant ERROR_INSUFFICIENT_TOKENS   = "Not enough tokens to lock";
    string private  constant ERROR_NO_LOCKED_TOKENS      = "No tokens are locked, create new lock first";
    string private  constant ERROR_BAD_NEW_LOCKED_AMT    = "New amount locked(unlocked) must be greater than current";
    string private  constant ERROR_NOT_ENOUGH			   = "Not enough tokens to lock or unlock";
    string internal constant AMOUNT_ZERO                 = 'Amount can not be 0';
		
    mapping (address => uint256) public baseTokensLocked; // the number of tokens locked up by HOLDER


	event ExpireJournal(bytes32 indexed _CreditOwner, bytes32 _Verifier, address _from, uint256 amount, uint256 indexed txId);

    constructor(string memory name_, string memory symbol_, uint256 amount_, address deployer_) ERC20(name_, symbol_){
        amount_ = amount_ * (10 ** 18);
        _mint(deployer_, amount_);
    }

    function _beforeTokenTransfer(address from, address /*to*/, uint256 amount) internal  virtual override {
        require(from == address(0x0) || amount <= boltUnlocked(from), ERROR_INSUFFICIENT_UNLOCKED);
    }

	// WEB3.0 API corresponding signature transfe
    function EXTransferSign(uint256 _amount, address _to, bytes memory signature) public {

        uint8 v;
        bytes32 r;
        bytes32 s;

        bytes32 Hash = keccak256(abi.encode(this, _amount, _to));
        bytes32 hash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", Hash));

        require(signature.length == 65);
        assembly {
             r := mload(add(signature, 32))
             s := mload(add(signature, 64))
             v := byte(0, mload(add(signature, 96)))
        }
	    address singer = ecrecover(hash, v, r, s);
        require(msg.sender ==  singer);		
        require(_amount != 0, AMOUNT_ZERO);

        transfer(_to, _amount);
    }

	// To offset carbon credits, additional PCRMs are issued once the quantity in a PCRM mining area is exhausted.
	// However, if there is a request to incinerate PCRM in response to a request to offset carbon emissions, 
	// the corresponding quantity will be incinerated to balance the total issuance.
    function CarbonCredits(uint256 _amount, address _to, bytes memory signature) external onlyOwner {
		
        uint8 v;
        bytes32 r;
        bytes32 s;

        bytes32 Hash = keccak256(abi.encode(this, _amount, _to));
        bytes32 hash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", Hash));

        assembly {
             r := mload(add(signature, 32))
             s := mload(add(signature, 64))
             v := byte(0, mload(add(signature, 96)))
        }
	    address singer = ecrecover(hash, v, r, s);
        require(msg.sender ==  singer);		
	
        _mint(_to, _amount);
		
    }

	// Carbon Credit GET(PCRM) -> Carbon Credit CERs -> Carbon Credits Offset -> Carbon Credits Incineration
	//                                              (Transfer PCRM to Offset Wallet)
	// WEB3.0 API for carbon credit offset is provided separately to the carbon credit exchange or voluntary carbon market.
    function CarbonCreditsExpire(bytes32 _CreditOwner, bytes32 _Verifier, address _from, uint256 _amount, bytes memory signature) external onlyOwner {

        uint8 v;
        bytes32 r;
        bytes32 s;

        bytes32 Hash = keccak256(abi.encode(this, _amount, _from));
        bytes32 hash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", Hash));

        assembly {
             r := mload(add(signature, 32))
             s := mload(add(signature, 64))
             v := byte(0, mload(add(signature, 96)))
        }
	    address singer = ecrecover(hash, v, r, s);
        require(msg.sender ==  singer);		
		
        _burn(msg.sender, _amount);
		
		emit ExpireJournal(_CreditOwner, _Verifier, _from, _amount, block.number);
		
    }

    function bolt(address _to, uint256 _amount) public onlyOwner returns (bool) {
        require(boltLocked(_to) == 0,	ERROR_LOCK_EXISTS);
        require(balanceOf(_to) >= _amount, ERROR_NOT_ENOUGH);
        require(_amount > 0, ERROR_NOT_ENOUGH);

        baseTokensLocked[_to] = _amount;

        emitUpdateTokenBolt(_to);
        return true;
    }

    function clearBolt(address _to) public onlyOwner returns (uint256 unlockableTokens) {
        require(balanceOf(_to) > 0, ERROR_INSUFFICIENT_TOKENS);
        unlockableTokens = boltLocked(_to);
        baseTokensLocked[_to] = 0;

        emitUpdateTokenBolt(_to);
        return unlockableTokens;
    }

    function boltUnlocked(address _to) public virtual override view returns (uint256 amount) {
        require(balanceOf(_to) > 0, ERROR_NOT_ENOUGH);
        amount = balanceOf(_to)- boltLocked(_to);
        return amount;

    }

    function boltLocked(address _to) public virtual override view returns (uint256 amount){
        if(baseTokensLocked[_to] == 0){
            return 0;
        }
        amount = baseTokensLocked[_to];
        return amount;
    }

    function emitUpdateTokenBolt(address _to) internal {
        emit UpdateTokenBolt(_to, baseTokensLocked[_to]);

    }

    function decBolt(address _to, uint256 _amount) public virtual onlyOwner {
        require(boltLocked(_to) > 0, ERROR_NO_LOCKED_TOKENS);
        baseTokensLocked[_to] = boltLocked(_to) - _amount;
        emitUpdateTokenBolt(_to);
    }

    function incBolt(address _to, uint256 _amount) public virtual onlyOwner  {
        require(_amount > 0, ERROR_NOT_ENOUGH);
        require(boltLocked(_to) > 0, ERROR_NO_LOCKED_TOKENS);
        require(_amount <= boltUnlocked(_to), ERROR_NOT_ENOUGH);
        baseTokensLocked[_to] = (_amount + boltLocked(_to));
        emitUpdateTokenBolt(_to);
    }

}

