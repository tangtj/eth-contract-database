
// File: contracts/EnEGrrEToken.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

/*
######     ##    ##   ######      ########    ######      #####    ######
##        ####   ##   ##          ##          ##    ##    ##   ##   ##
######    ## ##  ##   ######      ##   ####   ######     #######   ######
##        ##  ## ##   ##          ##      ##  ##    ##   ##   ##   ##
######    ##   ####   ######      ########   ##    ##   ##   ##   ######
*/

contract EnEGrrEToken {
    string public name = "EnE Grre"; // Name of the token
    string public symbol = "EEG"; // Symbol of the token
    uint8 public decimals = 18; // Decimals for token precision
    uint256 public totalSupply; // Total supply of the token
    address public owner; // Owner of the contract

    // Balances for each account
    mapping(address => uint256) public balanceOf;
    // Allowances for each account to spend on behalf of others
    mapping(address => mapping(address => uint256)) public allowance;

    // Event triggered on transfers
    event Transfer(address indexed from, address indexed to, uint256 value);
    // Event triggered on approvals
    event Approval(address indexed owner, address indexed spender, uint256 value);
    // Event triggered on ownership transfer
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    // Modifier to restrict actions to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    // Constructor function to initialize the contract
    constructor() {
        owner = msg.sender;
        totalSupply = 10_999_000 * 10 ** uint256(decimals); // Initial supply of tokens
        balanceOf[msg.sender] = totalSupply; // Assign the total supply to the owner
        emit Transfer(address(0x0), owner, totalSupply); // Emit transfer event from 0x0 address to owner
    }

    // Function to transfer tokens
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address"); // Ensure the recipient address is valid
        require(balanceOf[msg.sender] >= _value, "Insufficient balance"); // Ensure the sender has enough balance
        balanceOf[msg.sender] -= _value; // Deduct from sender's balance
        balanceOf[_to] += _value; // Add to recipient's balance
        emit Transfer(msg.sender, _to, _value); // Emit transfer event
        return true;
    }

    // Function to approve allowance for another account
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value; // Set allowance
        emit Approval(msg.sender, _spender, _value); // Emit approval event
        return true;
    }

    // Function to transfer tokens on behalf of another account
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address"); // Ensure the recipient address is valid
        require(balanceOf[_from] >= _value, "Insufficient balance"); // Ensure the sender has enough balance
        require(allowance[_from][msg.sender] >= _value, "Allowance exceeded"); // Ensure the spender has enough allowance
        balanceOf[_from] -= _value; // Deduct from sender's balance
        balanceOf[_to] += _value; // Add to recipient's balance
        allowance[_from][msg.sender] -= _value; // Deduct from allowance
        emit Transfer(_from, _to, _value); // Emit transfer event
        return true;
    }

    // Function to transfer ownership of the contract
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner is the zero address"); // Ensure the new owner address is valid
        emit OwnershipTransferred(owner, newOwner); // Emit ownership transfer event
        owner = newOwner; // Set the new owner
    }

    // Internal function to set allowances
    function _approve(address user, address spender, uint256 amount) private {
        allowance[user][spender] = amount; // Set allowance
        emit Approval(user, spender, amount); // Emit approval event
    }
}

