
// File: @nftculture/nftc-contracts-private/contracts/access/v2/OwnableDeferral.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title OwnableDeferral
 * @author @NiftyMike | @NFTCulture
 * @dev Implements checks for contract admin operations. Will be Backed by
 * OZ Ownable.
 *
 * This contract is helpful when a contract tree gets complicated,
 * and multiple contracts need to leverage Ownable.
 *
 * Sample Implementation:
 *
 * modifier isOwner() override(...) {
 *     _isOwner();
 *     _;
 * }
 *
 * function _isOwner() internal view override(...) {
 *     _checkOwner();
 * }
 */
abstract contract OwnableDeferral {
    modifier isOwner() virtual;

    function _isOwner() internal view virtual;
}


// File: @nftculture/nftc-contracts-private/contracts/access/v2/OwnableDeferralResolution.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// OZ Libraries
import '@openzeppelin/contracts/access/Ownable.sol';

// Local References
import './OwnableDeferral.sol';

// Error Codes
error CallerIsNotOwner();

/**
 * @title OwnableDeferralResolution
 * @author @NiftyMike | @NFTCulture
 * @dev Implements checks for contract admin (Owner) operations. Backed by OZ Ownable.
 *
 * Ownership is assigned to contract deployer wallet by default.
 *
 * NOTE: IMPORTANT - This resolution will work great in a simple inheritance situation,
 * however, if multiple inheritance is involved, it might not adequately satisfy
 * override (...) conditions. In those scenarios, this code should be used as a
 * starting point and then adjusted appropriately.
 */
contract OwnableDeferralResolution is Ownable, OwnableDeferral {
    modifier isOwner() virtual override {
        _isOwner();
        _;
    }

    function _isOwner() internal view virtual override {
        // Same as _checkOwner() but using error code instead of a require statement.
        if (owner() != _msgSender()) revert CallerIsNotOwner();
    }
}


// File: @nftculture/nftc-contracts-private/contracts/metadata/v2/interfaces/AbstractMetadataConsumer.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// Local References
import './IChainNativeMetadataConsumer.sol';
import './IChainNativeMetadataProducer.sol';

/**
 * @title AbstractMetadataConsumer
 * @author @NiftyMike | @NFTCulture
 * @dev Abstract contract that defines what a MetadataConsumer should do.
 */
abstract contract AbstractMetadataConsumer is IChainNativeMetadataConsumer {
    function _getMetadataProducer(
        address collection,
        uint256 selectionCriteria
    ) internal view virtual returns (IChainNativeMetadataProducer);
}


// File: @nftculture/nftc-contracts-private/contracts/metadata/v2/interfaces/IChainNativeMetadataConsumer.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IChainNativeMetadataConsumer
 * @author @NiftyMike | @NFTCulture
 * @dev Super thin interface definition for a contract that
 * consumes art from an IChainNativeMetadataProducer
 */
interface IChainNativeMetadataConsumer {
    /**
     * Given a collection address, provide a metadata producer.
     *
     * @param collection collection we are requesting a producer for.
     * @param selectionCriteria data pertinent to selection of the producer.
     *
     * NOTE: It is important to realize that selectionCriteria is generic and does not imply a tokenType or
     * tokenId or anything else, it depends on the circumstance of the implementation.
     */
    function getMetadataProducer(address collection, uint256 selectionCriteria) external view returns (address);
}


// File: @nftculture/nftc-contracts-private/contracts/metadata/v2/interfaces/IChainNativeMetadataProducer.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IChainNativeMetadataProducer
 * @author @NiftyMike | @NFTCulture
 * @dev Super thin interface definition for a contract that
 * produces metadata in a chain native way.
 */
interface IChainNativeMetadataProducer {
    /**
     *
     * @param collection - the collection details that we are providing info for.
     * @param tokenId - the tokenId that we should provide a tokenType for.
     */
    function getTokenTypeForToken(address collection, uint256 tokenId) external view returns (uint64);

    /**
     * Provide a human-readable version of the metadata JSON.
     *
     * @param collection - the collection details that we are providing info for.
     * @param tokenType - the type of the token we should provide metadata for
     * @param tokenId - the specific tokenId
     * @param extraData - extra info that might be used to effect the metadata
     */
    function getJsonAsString(
        address collection,
        uint64 tokenType,
        uint256 tokenId,
        uint256 extraData
    ) external view returns (string memory);

    /**
     * Provide base64 encoded metadata JSON that can be consumed by an external service.
     *
     * @param collection - the collection details that we are providing info for.
     * @param tokenType - the type of the token we should provide metadata for
     * @param tokenId - the specific tokenIds
     * @param extraData - extra info that might be used to effect the metadata
     */
    function getJsonAsEncodedString(
        address collection,
        uint64 tokenType,
        uint256 tokenId,
        uint256 extraData
    ) external view returns (string memory);
}


// File: @nftculture/nftc-contracts-private/contracts/metadata/v2/metadata-consumers/SingletonMetadataConsumer.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// Local References
import '../../../access/v2/OwnableDeferral.sol';
import '../interfaces/AbstractMetadataConsumer.sol';

/**
 * @title SingletonMetadataConsumer
 * @author @NiftyMike | @NFTCulture
 * @dev Contract intended to be used to consume from a single on-chain source for NFT metadata.
 */
abstract contract SingletonMetadataConsumer is AbstractMetadataConsumer, OwnableDeferral {
    // External contract that manages the collection's metadata in a chain-native way.
    address private _metadataProducer;

    constructor(address __metadataProducer) {
        _setMetadataProducer(__metadataProducer);
    }

    /**
     * @notice Set the on-chain metadata producer contract.
     * Can only be called if caller is owner.
     *
     * @param __metadataProducer address of the producer contract.
     */
    function setMetadataProducer(address __metadataProducer) external isOwner {
        _setMetadataProducer(__metadataProducer);
    }

    function _setMetadataProducer(address __metadataProducer) internal {
        if (__metadataProducer != address(0)) {
            _metadataProducer = __metadataProducer;
        }
    }

    function getMetadataProducer(address, uint256) external view override returns (address) {
        return _metadataProducer;
    }

    function _getMetadataProducer(address, uint256) internal view override returns (IChainNativeMetadataProducer) {
        return IChainNativeMetadataProducer(_metadataProducer);
    }
}


// File: @nftculture/nftc-contracts-private/contracts/token-phasing/v2/basic/BasicPhasedMintBase.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Open Source Contracts See: https://github.com/NFTCulture/nftc-contracts
import {BooleanPacking} from '@nftculture/nftc-contracts/contracts/utility/BooleanPacking.sol';

// NFTC Prerelease Contracts
import '../../../access/v2/OwnableDeferral.sol';
import '../IMintablePublic.sol';

/**
 * @title BasicPhasedMintBase
 * @author @NiftyMike | @NFTCulture
 * @dev
 * PhasedMint: An approach to a standard system of controlling mint phases.
 * The 'Basic' flavor only provides on/off controls for each phase, no pricing info or anything else.
 */
abstract contract BasicPhasedMintBase is IMintablePublic, OwnableDeferral {
    using BooleanPacking for uint256;

    // BooleanPacking used on _mintControlFlags
    uint256 internal _mintControlFlags;

    uint256 private immutable PUBLIC_MINT_PHASE;

    modifier isPublicMinting() {
        require(_mintControlFlags.getBoolean(PUBLIC_MINT_PHASE), 'Minting stopped');
        _;
    }

    constructor(uint256 publicMintPhase) {
        PUBLIC_MINT_PHASE = publicMintPhase;
    }

    function _calculateMintingState(bool __publicMintingActive) internal view returns (uint256) {
        uint256 tempControlFlags;

        tempControlFlags = tempControlFlags.setBoolean(PUBLIC_MINT_PHASE, __publicMintingActive);

        // This does not set state, because state is held by the child classes.
        return tempControlFlags;
    }

    function isPublicMintingActive() external view virtual returns (bool) {
        return _isPublicMintingActive();
    }

    function _isPublicMintingActive() internal view returns (bool) {
        return _mintControlFlags.getBoolean(PUBLIC_MINT_PHASE);
    }

    function supportedPhases() external view returns (uint256) {
        return PUBLIC_MINT_PHASE;
    }
}


// File: @nftculture/nftc-contracts-private/contracts/token-phasing/v2/basic/BasicPhasedMintThree.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// OZ Libraries
import '@openzeppelin/contracts/access/Ownable.sol';

// Local References
import './BasicPhasedMintBase.sol';
import '../IMintablePhaseOne.sol';
import '../IMintablePhaseTwo.sol';

/**
 * @title BasicPhasedMintThree
 * @author @NiftyMike | @NFTCulture
 * @dev
 * PhasedMint: An approach to a standard system of controlling mint phases.
 * The 'Basic' flavor only provides on/off controls for each phase, no pricing info or anything else.
 *
 * This is the "Three" phase mint flavor of the PhasedMint approach.
 *
 * Note: Since the last phase is always assumed to be the public mint phase, we only
 * need to define the first and second phases here.
 */
abstract contract BasicPhasedMintThree is BasicPhasedMintBase, IMintablePhaseOne, IMintablePhaseTwo {
    using BooleanPacking for uint256;

    uint256 private constant PHASE_ONE = 1;
    uint256 private constant PHASE_TWO = 2;

    modifier isPhaseOne() {
        require(_mintControlFlags.getBoolean(PHASE_ONE), 'Phase one stopped');
        _;
    }

    modifier isPhaseTwo() {
        require(_mintControlFlags.getBoolean(PHASE_TWO), 'Phase two stopped');
        _;
    }

    constructor() BasicPhasedMintBase(3) {}

    function setMintingState(
        bool __phaseOneActive,
        bool __phaseTwoActive,
        bool __publicMintingActive
    ) external virtual isOwner {
        uint256 tempControlFlags = _calculateMintingState(__publicMintingActive);

        tempControlFlags = tempControlFlags.setBoolean(PHASE_ONE, __phaseOneActive);

        tempControlFlags = tempControlFlags.setBoolean(PHASE_TWO, __phaseTwoActive);

        _mintControlFlags = tempControlFlags;
    }

    function isPhaseOneActive() external view virtual returns (bool) {
        return _isPhaseOneActive();
    }

    function _isPhaseOneActive() internal view returns (bool) {
        return _mintControlFlags.getBoolean(PHASE_ONE);
    }

    function isPhaseTwoActive() external view virtual returns (bool) {
        return _isPhaseTwoActive();
    }

    function _isPhaseTwoActive() internal view returns (bool) {
        return _mintControlFlags.getBoolean(PHASE_TWO);
    }
}


// File: @nftculture/nftc-contracts-private/contracts/token-phasing/v2/IMintablePhaseOne.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IMintablePhaseOne
 * @author @NFTCulture
 * @dev Interface to define standardized functionality that should be exposed
 * on NFTC Mint contracts, so that Front End widgets can rely on a standard set
 * capabilities.
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 */
interface IMintablePhaseOne {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - Phase One Functions                 |
    \____________________________________________________________*/

    function isPhaseOneActive() external view returns (bool);

    function phaseOneBatchSize() external view returns (uint256);
}


// File: @nftculture/nftc-contracts-private/contracts/token-phasing/v2/IMintablePhaseTwo.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IMintablePhaseTwo
 * @author @NFTCulture
 * @dev Interface to define standardized functionality that should be exposed
 * on NFTC Mint contracts, so that Front End widgets can rely on a standard set
 * capabilities.
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 */
interface IMintablePhaseTwo {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - Phase Two Functions                 |
    \____________________________________________________________*/

    function isPhaseTwoActive() external view returns (bool);

    function phaseTwoBatchSize() external view returns (uint256);
}


// File: @nftculture/nftc-contracts-private/contracts/token-phasing/v2/IMintablePublic.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IMintablePublic
 * @author @NFTCulture
 * @dev Interface to define standardized functionality that should be exposed
 * on NFTC Mint contracts, so that Front End widgets can rely on a standard set
 * capabilities.
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 */
interface IMintablePublic {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - Public Mint Functions               |
    \____________________________________________________________*/

    function isPublicMintingActive() external returns (bool);

    function publicMintBatchSize() external returns (uint256);
}


// File: @nftculture/nftc-contracts-private/contracts/token-phasing/v2/static-extensions/StaticPhasedMintBase.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title StaticPhasedMintBase
 * @author @NiftyMike | @NFTCulture
 * @dev The base static phased mint implementation.
 *
 * PhasedMint: An approach to a standard system of controlling mint phases.
 * Static: An approach to ERC721 contracts that allows only a single type of tokens.
 *
 * This implementation also contains code to hold on to the pricing info, since it is global for all NFTs.
 */
abstract contract StaticPhasedMintBase {
    uint256 public publicMintPricePerNft;

    constructor(uint256 __publicMintPricePerNft) {
        publicMintPricePerNft = __publicMintPricePerNft;
    }

    function getPublicMintPricePerNft() external view virtual returns (uint256) {
        return publicMintPricePerNft;
    }
}


// File: @nftculture/nftc-contracts-private/contracts/token-phasing/v2/static-extensions/StaticPhasedMintThree.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// Local References
import '../basic/BasicPhasedMintThree.sol';
import './StaticPhasedMintBase.sol';

/**
 * @title StaticPhasedMintThree
 * @author @NiftyMike | @NFTCulture
 * @dev Static, PhasedMint, Implementation for Three phases.
 *
 * PhasedMint: An approach to a standard system of controlling mint phases.
 * Static: An approach to ERC721 contracts that allows only a single type of tokens.
 *
 * This is the "Three" phase mint flavor of the PhasedMint approach.
 *
 * Note: Since the last phase is always assumed to be the public mint phase, we only
 * need to define the first and second phases here.
 *
 * This implementation also contains code to hold on to the pricing info, since it is global for all NFTs.
 */
abstract contract StaticPhasedMintThree is BasicPhasedMintThree, StaticPhasedMintBase {
    uint256 public phaseOnePricePerNft;
    uint256 public phaseTwoPricePerNft;

    constructor(
        uint256 __phaseOnePricePerNft,
        uint256 __phaseTwoPricePerNft,
        uint256 __publicMintPricePerNft
    ) StaticPhasedMintBase(__publicMintPricePerNft) {
        phaseOnePricePerNft = __phaseOnePricePerNft;
        phaseTwoPricePerNft = __phaseTwoPricePerNft;
    }

    function setMintingPrice(
        uint256 __phaseOnePricePerNft,
        uint256 __phaseTwoPricePerNft,
        uint256 __publicMintPricePerNft
    ) external virtual isOwner {
        phaseOnePricePerNft = __phaseOnePricePerNft;
        phaseTwoPricePerNft = __phaseTwoPricePerNft;
        publicMintPricePerNft = __publicMintPricePerNft;
    }

    function getPhaseOnePricePerNft() external view virtual returns (uint256) {
        return phaseOnePricePerNft;
    }

    function getPhaseTwoPricePerNft() external view virtual returns (uint256) {
        return phaseTwoPricePerNft;
    }
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/ERC721A_NFTC.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// ERC721A from Chiru Labs
import 'erc721a/contracts/extensions/ERC721ABurnable.sol';

// ClosedSea by Vectorized
import 'closedsea/src/OperatorFilterer.sol';

// OZ Libraries
import '@openzeppelin/contracts/access/Ownable.sol';

// NFTC Prerelease Contracts
import '../../access/v2/OwnableDeferral.sol';

/**
 * @title  ERC721A_NFTC
 * @author @NFTCulture
 * @dev ERC721A plus NFTC-preferred extensions and add-ons.
 *  - Burnable
 *  - Ownable
 *  - OperatorFilterer
 *
 * Using implementation and approach created by Vectorized for OperatorFilterer.
 * See: https://github.com/Vectorized/closedsea/blob/main/src/example/ExampleERC721A.sol
 *
 * This contract is intended to be a distilled 'base' starting point for NFTC functionality.
 *
 * @notice Be sure to add the following to your impl constructor:
 * >>  _registerForOperatorFiltering();
 * >>  operatorFilteringEnabled = true;
 */
abstract contract ERC721A_NFTC is ERC721ABurnable, OperatorFilterer, OwnableDeferral {
    bool public operatorFilteringEnabled;

    function setApprovalForAll(
        address operator,
        bool approved
    ) public override(ERC721A, IERC721A) onlyAllowedOperatorApproval(operator) {
        super.setApprovalForAll(operator, approved);
    }

    function approve(
        address operator,
        uint256 tokenId
    ) public payable override(ERC721A, IERC721A) onlyAllowedOperatorApproval(operator) {
        super.approve(operator, tokenId);
    }

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public payable override(ERC721A, IERC721A) onlyAllowedOperator(from) {
        super.transferFrom(from, to, tokenId);
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public payable override(ERC721A, IERC721A) onlyAllowedOperator(from) {
        super.safeTransferFrom(from, to, tokenId);
    }

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) public payable override(ERC721A, IERC721A) onlyAllowedOperator(from) {
        super.safeTransferFrom(from, to, tokenId, data);
    }

    /**
     * Failsafe in case we need to turn operator filtering off.
     */
    function setOperatorFilteringEnabled(bool value) external isOwner {
        operatorFilteringEnabled = value;
    }

    /**
     * Failsafe in case we need to change what subscription we are using, for whatever reason.
     */
    function registerForOperatorFiltering(address subscription, bool subscribe) external isOwner {
        _registerForOperatorFiltering(subscription, subscribe);
    }

    function _operatorFilteringEnabled() internal view virtual override returns (bool) {
        return operatorFilteringEnabled;
    }

    function _isPriorityOperator(address operator) internal pure override returns (bool) {
        // OpenSea Seaport Conduit:
        // https://etherscan.io/address/0x1E0049783F008A0085193E00003D00cd54003c71
        // https://goerli.etherscan.io/address/0x1E0049783F008A0085193E00003D00cd54003c71
        return operator == address(0x1E0049783F008A0085193E00003D00cd54003c71);
    }
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/interfaces/IBaseURIConfigurable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IBaseURIConfigurable
 * @author @NFTCulture
 * @dev Interface to define Base URI configuration functions.
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 */
interface IBaseURIConfigurable {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - General Functions                   |
    \____________________________________________________________*/

    // Set Art URI for all tokens. ERC721 - Base URI. ERC1155 - Uri.
    function setArtURI(string memory) external;

    // Get Art URI for all tokens. ERC721 - Base URI. ERC1155 - Uri.
    function getArtURI() external view returns (string memory);
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/interfaces/INFTCNonFungibleToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Prerelease Contracts
import './IBaseURIConfigurable.sol';
import './INonFungibleTokenQueryable.sol';

/**
 * @title INFTCNonFungibleToken
 * @author @NFTCulture
 * @dev Interface to define standardized functionality that should be exposed
 * on NFTC NonFungible Token contracts.
 */
interface INFTCNonFungibleToken is IBaseURIConfigurable, INonFungibleTokenQueryable {
    // Tag Interface
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/interfaces/INonFungibleTokenQueryable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title INonFungibleTokenQueryable
 * @author @NFTCulture
 * @dev Interface to define data-retrieval functions for a NonFungible Token contract.
 */
interface INonFungibleTokenQueryable {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - General Functions                   |
    \____________________________________________________________*/

    // Return the maximum possible number of tokens that can be minted by this contract.
    function maxSupply() external view returns (uint256);

    // Return the number of tokens that have been minted.
    function totalMinted() external view returns (uint256);

    // Return the current number of tokens that exist, minted less burned.
    function totalTokensExist() external view returns (uint256);

    // Return the balance owned by an address.
    function balanceOwnedBy(address) external view returns (uint256);
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/minter-extensions/FullInteractiveNFTMinter.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// Local References
import '../ERC721A_NFTC.sol';
import '../interfaces/INFTCNonFungibleToken.sol';
import '../minter-interfaces/INFTCInteractiveMintFull.sol';

/**
 * @title FullInteractiveNFTMinter
 * @author @NiftyMike | @NFTCulture
 * @dev Minter for mints that can be directly interacted with by users, the full version.
 *
 *  - INFTCNonFungibleToken: Important mint functions for Base URI Management
 *    and Query Helpers
 */
abstract contract FullInteractiveNFTMinter is ERC721A_NFTC, INFTCNonFungibleToken, INFTCInteractiveMintFull {
    string public baseURI;

    constructor(string memory __baseURI) {
        baseURI = __baseURI;
    }

    function setArtURI(string memory __baseURI) external override isOwner {
        baseURI = __baseURI;
    }

    function getArtURI() external view override returns (string memory) {
        return _getArtURI();
    }

    function _getArtURI() internal view returns (string memory) {
        return baseURI;
    }

    function totalMinted() external view override returns (uint256) {
        return _totalMinted();
    }

    function balanceOwnedBy(address tokenOwner) external view override returns (uint256) {
        return super.balanceOf(tokenOwner);
    }
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/minter-interfaces/INFTCInteractiveMintFull.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title INFTCInteractiveMintFull
 * @author @NFTCulture
 * @dev This interface is tailored towards NFTs that will be
 * minted interactively by their recipients. To that end, it attempts to provide a
 * standardized set of capabilities upon which Front End dApps can rely.
 *
 * This interface is compatible with both Fungible and Non-Fungible tokens.
 *
 * Note: NFTC "Mint-Tag" interfaces are just helpers to set guidelines for implementing token
 * minting functions in a consistent way across projects, and to help readers more quickly
 * understand the public endpoints in the contract.
 */
interface INFTCInteractiveMintFull {
    function premintTokens(uint256 count, uint256 flavorId, address[] calldata destinations) external payable;

    function reserveTokens(uint256 count, uint256 flavorId, address[] calldata destinations) external payable;

    function publicMintTokens(
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider
    ) external payable;

    function publicMintTokensTo(
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider,
        address destination
    ) external payable;
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/token-types/FlavorInfo.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title FlavorInfo
 * @author @NFTCulture
 * @dev Library for FlavorInfoV4 objects.
 *
 *  Bits Layout:
 *    256 bit slot #1
 *    - [0..63]    `flavorId`
 *    - [64..127]  `maxSupply`
 *    - [128..191] `totalMinted`
 *    - [192..255] `totalSupply`
 *
 *    256 bit slot #2
 *    - [0..159]   `provider`
 *    - [160..255] `price`
 *
 *  NOTE: Provider is responsible for the following:
 *  - Storage of ipfsHash and uriFragment, if they exist
 *      bytes32 uriFragment; // Fragment to append to URI
 *      string ipfsHash; // IPFS Hash to append to URI
 *  - Splitting out uriFragment and ipfsHash to live with the provider makes FlavorInfo objects much more gas efficient.
 *
 *  - Instead of updating uri details, a new product list contract can be deployed that contains the updated data.
 *  Updating FlavorInfos in the main contract would just involve passing one new address to an update address function.
 *  This would involve many fewer writes of ipfsHashes if all that has changed is the ipfsHash, as the replacement contract wouldn't
 *  need to contain all the original flavor definitions.
 *
 *  URI should be built like: `${baseURI}${ipfsHash}${uriFragment}
 *    - Care should be taken to properly include '/' chars. Typically baseURI will have a trailing slash.
 *    - If ipfsHash is used, uriFragment should contain a leading '/'.
 *    - If ipfsHash is not used, uriFragment should not contain a leading '/'.
 */
library FlavorInfo {
    struct FlavorInfoV4 {
        uint64 flavorId;
        uint64 maxSupply;
        uint64 totalMinted;
        uint64 totalSupply; // TotalSupply or Extra storage space that can be used however needed by the caller.
        address provider; // Address of the provider.
        uint96 price; // Price needs to be 96 bit. 64bit for value sets a cap at about 9.2 ETH (9.2e18 wei)
    }
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/IMintable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// Local References
import '../token-types/FlavorInfo.sol';

/**
 * @title IMintable
 * @author @NFTCulture
 * @dev Interface to define standardized functionality that is needed to drive
 * user-interactive functionality via a generalized front-end interface.
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 */
interface IMintable {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - General Functions                   |
    \____________________________________________________________*/

    // Return a JSON representation of contract capabilities.
    function nftcContractDefinition() external view returns (string memory);

    // Return the list of TokenTypes that can be minted (was formerly getFlavors)
    function nftcTokenTypeList() external view returns (uint64[] memory);

    // Return the tokenTypeDefinition for a specific tokenType
    function nftcTokenTypeDefinition(uint64 tokenType) external view returns (FlavorInfo.FlavorInfoV4 memory);
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/IUserInteractivePhaseOne.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IUserInteractivePhaseOne
 * @author @NFTCulture
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 */
interface IUserInteractivePhaseOne {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - User Interactive Functions               |
    \____________________________________________________________*/

    function getTokensPurchased_PhaseOne(address) external view returns (uint256);
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/IUserInteractivePhaseTwo.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IUserInteractivePhaseTwo
 * @author @NFTCulture
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 */
interface IUserInteractivePhaseTwo {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - User Interactive Functions               |
    \____________________________________________________________*/

    function getTokensPurchased_PhaseTwo(address) external view returns (uint256);
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/merkle/IMintablePhaseOneMerkleAux.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// Local References
import '../IUserInteractivePhaseOne.sol';

/**
 * @title IMintablePhaseOneMerkleTiered
 * @author @NFTCulture
 * @dev Interface to define standardized functionality that should be exposed
 * on NFTC Mint contracts, so that Front End widgets can rely on a standard set
 * capabilities.
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 *
 * Merkle Aux: Leaves are generated using an Int value (which can be anything) and an "Auxillary" value (which is a string).
 */
interface IMintablePhaseOneMerkleAux is IUserInteractivePhaseOne {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - Phase One Functions                 |
    \____________________________________________________________*/

    function getTokensPurchased_PhaseOne(address) external view returns (uint256);

    function checkProof_PhaseOne(
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData
    ) external view returns (bool);

    function phaseOneMintTokens(
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider
    ) external payable;

    function phaseOneMintTokensTo(
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider,
        address destination
    ) external payable;
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/merkle/IMintablePhaseTwoMerkleAux.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// Local References
import '../IUserInteractivePhaseTwo.sol';

/**
 * @title IMintablePhaseTwoMerkleTiered
 * @author @NFTCulture
 * @dev Interface to define standardized functionality that should be exposed
 * on NFTC Mint contracts, so that Front End widgets can rely on a standard set
 * capabilities.
 *
 * Supported Contract Specs:
 *  - ERC721A Static
 *  - ERC721A Expandable
 *  - ERC1155
 *
 * Merkle Aux: Leaves are generated using an Int value (which can be anything) and an "Auxillary" value (which is a string).
 */
interface IMintablePhaseTwoMerkleAux is IUserInteractivePhaseTwo {
    /*°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\
    |                   API - Phase Two Functions                 |
    \____________________________________________________________*/

    function getTokensPurchased_PhaseTwo(address) external view returns (uint256);

    function checkProof_PhaseTwo(
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData
    ) external view returns (bool);

    function phaseTwoMintTokens(
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider
    ) external payable;

    function phaseTwoMintTokensTo(
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider,
        address destination
    ) external payable;
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/merkle/PhaseOneIsAuxillary.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Open Source Contracts See: https://github.com/NFTCulture/nftc-open-contracts
import '@nftculture/nftc-contracts/contracts/utility/AuxHelper32.sol';

// NFTC Prerelease Contracts
import './IMintablePhaseOneMerkleAux.sol';
import '../../../../whitelisting/MerkleLeavesExtended.sol';

// NFTC Prerelease Libraries
import {MerkleClaimList} from '../../../../whitelisting/MerkleClaimList.sol';

error AuxProofInvalid_PhaseOne();

/**
 * @title PhaseOneIsAuxillary
 */
abstract contract PhaseOneIsAuxillary is MerkleLeavesExtended, AuxHelper32, IMintablePhaseOneMerkleAux {
    using MerkleClaimList for MerkleClaimList.Root;

    MerkleClaimList.Root private _phaseOneRoot;

    constructor() {}

    function _setPhaseOneRoot(bytes32 __root) internal {
        _phaseOneRoot._setRoot(__root);
    }

    function checkProof_PhaseOne(
        bytes32[] calldata proof,
        string calldata auxInfo,
        uint256 extraData
    ) external view returns (bool) {
        return _phaseOneRoot._checkLeaf(proof, _generateAuxillaryLeaf(auxInfo, extraData));
    }

    function getTokensPurchased_PhaseOne(address wallet) external view returns (uint256) {
        (uint32 phaseOnePurchases, ) = _unpack32(_getPackedPurchasesAs64(wallet));
        return phaseOnePurchases;
    }

    function _getPackedPurchasesAs64(address wallet) internal view virtual returns (uint64);

    function _proofMintTokens_PhaseOne(
        address,
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData,
        uint256 count,
        address destination
    ) internal {
        // Verify address is eligible for mints in this tier.
        if (!_phaseOneRoot._checkLeaf(proof, _generateAuxillaryLeaf(auxInfo, extraData))) {
            revert AuxProofInvalid_PhaseOne();
        }

        _internalMintTokens(destination, count);
    }

    function _internalMintTokens(address minter, uint256 count) internal virtual;

    function _proofMintTokensOfFlavor_PhaseOne(
        address,
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        address destination
    ) internal {
        // Verify address is eligible for mints in this tier.
        if (!_phaseOneRoot._checkLeaf(proof, _generateAuxillaryLeaf(auxInfo, extraData))) {
            revert AuxProofInvalid_PhaseOne();
        }

        _internalMintTokens(destination, count, flavorId);
    }

    function _internalMintTokens(address minter, uint256 count, uint256 flavorId) internal virtual;
}


// File: @nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/merkle/PhaseTwoIsAuxillary.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Open Source Contracts See: https://github.com/NFTCulture/nftc-open-contracts
import '@nftculture/nftc-contracts/contracts/utility/AuxHelper32.sol';

// NFTC Prerelease Contracts
import './IMintablePhaseTwoMerkleAux.sol';
import '../../../../whitelisting/MerkleLeavesExtended.sol';

// NFTC Prerelease Libraries
import {MerkleClaimList} from '../../../../whitelisting/MerkleClaimList.sol';

error AuxProofInvalid_PhaseTwo();

/**
 * @title PhaseTwoIsAuxillary
 */
abstract contract PhaseTwoIsAuxillary is MerkleLeavesExtended, AuxHelper32, IMintablePhaseTwoMerkleAux {
    using MerkleClaimList for MerkleClaimList.Root;

    MerkleClaimList.Root private _phaseTwoRoot;

    constructor() {}

    function _setPhaseTwoRoot(bytes32 __root) internal {
        _phaseTwoRoot._setRoot(__root);
    }

    function checkProof_PhaseTwo(
        bytes32[] calldata proof,
        string calldata auxInfo,
        uint256 extraData
    ) external view returns (bool) {
        return _phaseTwoRoot._checkLeaf(proof, _generateAuxillaryLeaf(auxInfo, extraData));
    }

    function getTokensPurchased_PhaseTwo(address wallet) external view returns (uint256) {
        (uint32 phaseTwoPurchases, ) = _unpack32(_getPackedPurchasesAs64(wallet));
        return phaseTwoPurchases;
    }

    function _getPackedPurchasesAs64(address wallet) internal view virtual returns (uint64);

    function _proofMintTokens_PhaseTwo(
        address,
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData,
        uint256 count,
        address destination
    ) internal {
        // Verify address is eligible for mints in this tier.
        if (!_phaseTwoRoot._checkLeaf(proof, _generateAuxillaryLeaf(auxInfo, extraData))) {
            revert AuxProofInvalid_PhaseTwo();
        }

        _internalMintTokens(destination, count);
    }

    function _internalMintTokens(address minter, uint256 count) internal virtual;

    function _proofMintTokensOfFlavor_PhaseTwo(
        address,
        bytes32[] calldata proof,
        string memory auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        address destination
    ) internal {
        // Verify address is eligible for mints in this tier.
        if (!_phaseTwoRoot._checkLeaf(proof, _generateAuxillaryLeaf(auxInfo, extraData))) {
            revert AuxProofInvalid_PhaseTwo();
        }

        _internalMintTokens(destination, count, flavorId);
    }

    function _internalMintTokens(address minter, uint256 count, uint256 flavorId) internal virtual;
}


// File: @nftculture/nftc-contracts-private/contracts/whitelisting/MerkleClaimList.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

import {MerkleRoot} from './MerkleRoot.sol';

/**
 * @title MerkleClaimList
 * @author @NiftyMike | @NFTCulture
 * @dev Basic functionality for a MerkleTree that will be used as a "Claimlist"
 *
 * "Claimlist" - an approach for validating callers that is backed by a Merkle Tree.
 * Cheap to set the master claim, not that expensive to check the claim. Requires
 * off-chain generation of the Merkle Tree.
 *
 * This library allows you to declare a member variable like:
 * MerkleClaimList.Root private _claimRoot;
 *
 * The benefit of packaging this as a library, is that if you need multiple merkle trees in your
 * contract, you can declare multiple member variables using this library, and use them in similar fashion.
 *
 * see also: NFTC Labs' MerkleLeaves.sol, which is a companion abstract contract which contains helper
 * methods for generating leaves for the Merkle Tree.
 */
library MerkleClaimList {
    using MerkleRoot for bytes32;

    struct Root {
        // This variable should never be directly accessed by users of the library. See OZ comments in other libraries for more info.
        bytes32 _root;
    }

    /**
     * @dev Validate that a leaf is part of this merkle tree.
     */
    function _checkLeaf(Root storage root, bytes32[] calldata proof, bytes32 leaf) internal view returns (bool) {
        return root._root.check(proof, leaf);
    }

    /**
     * @dev Set the root of this merkle tree.
     */
    function _setRoot(Root storage root, bytes32 __root) internal {
        root._root = __root;
    }
}


// File: @nftculture/nftc-contracts-private/contracts/whitelisting/MerkleLeavesExtended.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title MerkleLeavesExtended
 * @author @NiftyMike | @NFTCulture
 * @dev Merkle Leaves for Merkle Trees - This is a companion contract to NFTC Labs' MerkleClaimList.sol library.
 *
 * It provides leaf generation functions for merkle trees.
 * It also provides wrapper methods to expose the leaf generation functions to off-chain callers.
 *
 * Off-chain access is useful, because both the contract and the caller need to be able to generate the
 * leaves in a perfectly identical manner, so the generators are exposed to make it easier.
 */
abstract contract MerkleLeavesExtended {
    /**
     * @notice External: generate a leaf for an embedded index value and an additional piece of data.
     *
     * @param auxInfo auxInfo to assign the leaf.
     * @param extraData extra data that is pertinent to the leaf.
     */
    function getAuxillaryLeafFor(string calldata auxInfo, uint256 extraData) external pure returns (bytes32) {
        return _generateAuxillaryLeaf(auxInfo, extraData);
    }

    /**
     * @dev Generate a merkle leaf based on auxInfo and a second piece of data.
     * This is useful when users need to distribute claims via some sort of code.
     */
    function _generateAuxillaryLeaf(string memory auxInfo, uint256 extraData) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(auxInfo, '_', extraData));
    }
}


// File: @nftculture/nftc-contracts-private/contracts/whitelisting/MerkleRoot.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

import {MerkleProof} from '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';

/**
 * @title MerkleRoot
 * @author @NiftyMike | @NFTCulture
 * @dev Companion library to OpenZeppelin's MerkleProof.
 * Allows you to abstract away merkle functionality a bit further, you now just need to
 * worry about dealing with your merkle root.
 *
 * Using this library allows you to treat bytes32 member variables as Merkle Roots, with a
 * slightly easier to use api then the OZ library.
 */
library MerkleRoot {
    using MerkleProof for bytes32[];

    function check(bytes32 root, bytes32[] calldata proof, bytes32 leaf) internal pure returns (bool) {
        return proof.verify(root, leaf);
    }
}


// File: @nftculture/nftc-contracts/contracts/financial/ERC2981_NFTCExtended.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

import '@openzeppelin/contracts/access/Ownable.sol';
import '@openzeppelin/contracts/token/common/ERC2981.sol';

/**
 * @title ERC2981_NFTCExtended
 * @author @NiftyMike | @NFTCulture
 * @dev A wrapper around ERC2981 which adds some common functionality.
 */
abstract contract ERC2981_NFTCExtended is ERC2981 {
    function setDefaultRoyalty(address newReceiver, uint96 newRoyalty) external {
        _isOwner();

        _setDefaultRoyalty(newReceiver, newRoyalty);
    }

    function _isOwner() internal view virtual;
}


// File: @nftculture/nftc-contracts/contracts/financial/NFTCPaymentSplitter.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Open Source Contracts See: https://github.com/NFTCulture/nftc-contracts
import './NFTCPaymentSplitterBase.sol';

/**
 * @title NFTCPaymentSplitter
 * @author @NiftyMike | @NFTCulture
 * @dev NFTC's Implementation of a Payment Splitter
 *
 * Underlying is based on OpenZeppelin Contracts v4.8.0 (finance/PaymentSplitter.sol)
 */
abstract contract NFTCPaymentSplitter is NFTCPaymentSplitterBase {
    /**
     * @dev Overrides release() method, so that it can only be called by owner.
     * @notice Owner: Release funds to a specific address.
     *
     * @param account Payable address that will receive funds.
     */
    function release(address payable account) public override {
        _isOwner();

        _release(account);
    }

    /**
     * @dev Triggers a transfer to caller's address of the amount of Ether they are owed, according to their percentage of the
     * total shares and their previous withdrawals.
     * @notice Sender: request payment.
     */
    function releaseToSelf() public {
        _release(payable(_msgSender()));
    }

    function _isOwner() internal view virtual;
}


// File: @nftculture/nftc-contracts/contracts/financial/NFTCPaymentSplitterBase.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

import '@openzeppelin/contracts/utils/Address.sol';
import '@openzeppelin/contracts/utils/Context.sol';

/**
 * @title NFTCPaymentSplitterBase
 * @author @NiftyMike | @NFTCulture
 * @dev An opinionated replacement of OZ's Payment Splitter.
 *
 * Notes:
 *  - Based on OZ Contracts v4.8.0 (finance/PaymentSplitter.sol)
 *  - ERC-20 token functionality removed to save gas.
 *  - Transferability of Payees, but only by Payee
 *  - Some require messages are shortened.
 *  - contract changed to abstract and release() functionality moved to internal method.
 *
 * IMPORTANT: changes to release() require higher level classes to expose release() in order
 * for funds to be withdrawn. This allows higher level classes to enforce better controls.
 */
abstract contract NFTCPaymentSplitterBase is Context {
    event PayeeAdded(address account, uint256 shares);
    event PaymentReleased(address to, uint256 amount);
    event PaymentReceived(address from, uint256 amount);
    event PayeeTransferred(address oldOwner, address newOwner);

    uint256 private _totalShares;
    uint256 private _totalReleased;

    mapping(address => uint256) private _shares;
    mapping(address => uint256) private _released;
    address[] private _payees;

    /**
     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at
     * the matching position in the `shares` array.
     *
     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no
     * duplicates in `payees`.
     */
    constructor(address[] memory payees, uint256[] memory shares_) payable {
        require(payees.length == shares_.length, 'PaymentSplitter: length mismatch');
        require(payees.length > 0, 'PaymentSplitter: no payees');

        for (uint256 i = 0; i < payees.length; i++) {
            _addPayee(payees[i], shares_[i]);
        }
    }

    /**
     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully
     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the
     * reliability of the events, and not the actual splitting of Ether.
     *
     * To learn more about this see the Solidity documentation for
     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback
     * functions].
     */
    receive() external payable virtual {
        emit PaymentReceived(_msgSender(), msg.value);
    }

    /**
     * @dev Getter for the total shares held by payees.
     */
    function totalShares() public view returns (uint256) {
        return _totalShares;
    }

    /**
     * @dev Getter for the total amount of Ether already released.
     */
    function totalReleased() public view returns (uint256) {
        return _totalReleased;
    }

    /**
     * @dev Getter for the amount of shares held by an account.
     */
    function shares(address account) public view returns (uint256) {
        return _shares[account];
    }

    /**
     * @dev Getter for the amount of Ether already released to a payee.
     */
    function released(address account) public view returns (uint256) {
        return _released[account];
    }

    /**
     * @dev Getter for the address of the payee number `index`.
     */
    function payee(uint256 index) public view returns (address) {
        return _payees[index];
    }

    /**
     * @dev Getter for the amount of payee's releasable Ether.
     */
    function releasable(address account) public view returns (uint256) {
        return _releasable(account);
    }

    function _releasable(address account) internal view returns (uint256) {
        uint256 totalReceived = address(this).balance + totalReleased();
        return _pendingPayment(account, totalReceived, released(account));
    }

    /**
     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the
     * total shares and their previous withdrawals.
     */
    function _release(address payable account) internal {
        require(_shares[account] > 0, 'PaymentSplitter: no shares');

        uint256 payment = _releasable(account);

        require(payment != 0, 'PaymentSplitter: not due payment');

        // _totalReleased is the sum of all values in _released.
        // If "_totalReleased += payment" does not overflow, then "_released[account] += payment" cannot overflow.
        _totalReleased += payment;
        unchecked {
            _released[account] += payment;
        }

        Address.sendValue(account, payment);
        emit PaymentReleased(account, payment);
    }

    /**
     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and
     * already released amounts.
     */
    function _pendingPayment(
        address account,
        uint256 totalReceived,
        uint256 alreadyReleased
    ) private view returns (uint256) {
        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;
    }

    /**
     * @dev Add a new payee to the contract.
     * @param account The address of the payee to add.
     * @param shares_ The number of shares owned by the payee.
     */
    function _addPayee(address account, uint256 shares_) private {
        require(account != address(0), 'PaymentSplitter: zero address');
        require(shares_ > 0, 'PaymentSplitter: no shares');
        require(_shares[account] == 0, 'PaymentSplitter: payee has shares');

        _payees.push(account);
        _shares[account] = shares_;
        _totalShares = _totalShares + shares_;
        emit PayeeAdded(account, shares_);
    }

    /**
     * @dev Allows owner to transfer their shares to somebody else; it can only be called by of a share.
     * @notice Owner: Release funds to a specific address.
     *
     * @param newOwner Payable address which has no shares and will receive the shares of the current owner.
     */
    function transferPayee(address payable newOwner) public {
        require(newOwner != address(0), 'PaymentSplitter: zero address');
        require(_shares[_msgSender()] > 0, 'PaymentSplitter: no owned shares');
        require(_shares[newOwner] == 0, 'PaymentSplitter: payee has shares');

        _transferPayee(newOwner);
        emit PayeeTransferred(_msgSender(), newOwner);
    }

    function _transferPayee(address newOwner) private {
        if (_payees.length == 0) return;

        for (uint i = 0; i < _payees.length - 1; i++) {
            if (_payees[i] == _msgSender()) {
                _payees[i] = newOwner;
                _shares[newOwner] = _shares[_msgSender()];
                _shares[_msgSender()] = 0;
            }
        }
    }

    function release(address payable account) public virtual;
}


// File: @nftculture/nftc-contracts/contracts/financial/NFTCSplitsAndRoyalties.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Open Source Contracts See: https://github.com/NFTCulture/nftc-contracts
import './ERC2981_NFTCExtended.sol';
import './NFTCPaymentSplitter.sol';

/**
 * @title NFTCSplitsAndRoyalties
 * @author @NiftyMike | @NFTCulture
 * @dev One stop shop for Payment Splits and ERC2981 Royalty Definition.
 */
abstract contract NFTCSplitsAndRoyalties is NFTCPaymentSplitter, ERC2981_NFTCExtended {
    constructor(
        address[] memory __addresses,
        uint256[] memory __splits,
        address defaultRoyaltyReceiver,
        uint96 defaultRoyaltyBasisPoints
    ) NFTCPaymentSplitterBase(__addresses, __splits) {
        // Default royalty information to be this contract, so that no potential
        // royalty payments are missed by marketplaces that support ERC2981.
        _setDefaultRoyalty(defaultRoyaltyReceiver, defaultRoyaltyBasisPoints);
    }

    function _isOwner() internal view virtual override(NFTCPaymentSplitter, ERC2981_NFTCExtended);
}


// File: @nftculture/nftc-contracts/contracts/meta/ERC7572_ContractMetadata.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// Local References
import './IERC7572.sol';

// OZ References
import '@openzeppelin/contracts/utils/introspection/ERC165.sol';

/**
 * @title ERC7572_ContractMetadata
 * @author @NiftyMike | @NFTCulture
 * @dev A basic implementation of ERC-7572 for exposing contract-level metadata for
 * external marketplaces via IPFS. This approach can be used to provide out-of-the-box
 * pretty metadata on contract deployment.
 */
abstract contract ERC7572_ContractMetadata is IERC7572, ERC165 {
    string private _contractURI;

    /**
     * @dev return the contract URI.
     *
     * See: https://docs.opensea.io/docs/contract-level-metadata
     *
     * Three approaches:
     *
     * - Native IPFS Addressing: "ipfs://QmTNgv3jx2HHfBjQX9RnKtxj2xv2xQDtbVXoRi5rJ3a46e"
     * - Link to a JSON file: "https://external-link-url.com/my-contract-metadata.json"
     * - OnChain/Encoded in Contract:
     *      string memory json = '{"name": "Creatures","description":"..."}';
     *      return string.concat("data:application/json;utf8,", json);
     */
    function contractURI() external view override returns (string memory) {
        return _contractURI;
    }

    function setContractURI(string calldata __contractUri) external {
        _isOwner();

        _setContractURI(__contractUri);
    }

    function _setContractURI(string memory __contractUri) internal {
        _contractURI = __contractUri;

        emit ContractURIUpdated();
    }

    function _getContractURI() internal view returns (string memory) {
        return _contractURI;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {
        return interfaceId == type(IERC7572).interfaceId || super.supportsInterface(interfaceId);
    }

    function _isOwner() internal view virtual;
}


// File: @nftculture/nftc-contracts/contracts/meta/IERC7572.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title IERC7572
 * @author @NiftyMike | @NFTCulture
 * @dev This specification standardizes contractURI() to return contract-level metadata.
 *
 * @notice See: https://eips.ethereum.org/EIPS/eip-7572
 */
interface IERC7572 {
    function contractURI() external view returns (string memory);

    event ContractURIUpdated();
}


// File: @nftculture/nftc-contracts/contracts/utility/AuxHelper32.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title AuxHelper32
 * @author @NiftyMike | @NFTCulture
 * @dev Helper class for ERC721a Aux storage, using 32 bit ints.
 */
abstract contract AuxHelper32 {
    function _pack32(uint32 left32, uint32 right32) internal pure returns (uint64) {
        return (uint64(left32) << 32) | uint32(right32);
    }

    function _unpack32(uint64 aux) internal pure returns (uint32 left32, uint32 right32) {
        return (uint32(aux >> 32), uint32(aux));
    }
}


// File: @nftculture/nftc-contracts/contracts/utility/BooleanPacking.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

/**
 * @title BooleanPacking
 * @author @NiftyMike | @NFTCulture
 * @dev Credit to Zimri Leijen
 * See https://ethereum.stackexchange.com/a/92235
 */
library BooleanPacking {
    function getBoolean(uint256 _packedBools, uint256 _columnNumber) internal pure returns (bool) {
        uint256 flag = (_packedBools >> _columnNumber) & uint256(1);
        return (flag == 1 ? true : false);
    }

    function setBoolean(uint256 _packedBools, uint256 _columnNumber, bool _value) internal pure returns (uint256) {
        if (_value) {
            _packedBools = _packedBools | (uint256(1) << _columnNumber);
            return _packedBools;
        } else {
            _packedBools = _packedBools & ~(uint256(1) << _columnNumber);
            return _packedBools;
        }
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/interfaces/IERC2981.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)

pragma solidity ^0.8.0;

import "../utils/introspection/IERC165.sol";

/**
 * @dev Interface for the NFT Royalty Standard.
 *
 * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal
 * support for royalty payments across all NFT marketplaces and ecosystem participants.
 *
 * _Available since v4.5._
 */
interface IERC2981 is IERC165 {
    /**
     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of
     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.
     */
    function royaltyInfo(
        uint256 tokenId,
        uint256 salePrice
    ) external view returns (address receiver, uint256 royaltyAmount);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/common/ERC2981.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)

pragma solidity ^0.8.0;

import "../../interfaces/IERC2981.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.
 *
 * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for
 * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.
 *
 * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the
 * fee is specified in basis points by default.
 *
 * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See
 * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to
 * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.
 *
 * _Available since v4.5._
 */
abstract contract ERC2981 is IERC2981, ERC165 {
    struct RoyaltyInfo {
        address receiver;
        uint96 royaltyFraction;
    }

    RoyaltyInfo private _defaultRoyaltyInfo;
    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {
        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @inheritdoc IERC2981
     */
    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {
        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];

        if (royalty.receiver == address(0)) {
            royalty = _defaultRoyaltyInfo;
        }

        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();

        return (royalty.receiver, royaltyAmount);
    }

    /**
     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a
     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an
     * override.
     */
    function _feeDenominator() internal pure virtual returns (uint96) {
        return 10000;
    }

    /**
     * @dev Sets the royalty information that all ids in this contract will default to.
     *
     * Requirements:
     *
     * - `receiver` cannot be the zero address.
     * - `feeNumerator` cannot be greater than the fee denominator.
     */
    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {
        require(feeNumerator <= _feeDenominator(), "ERC2981: royalty fee will exceed salePrice");
        require(receiver != address(0), "ERC2981: invalid receiver");

        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);
    }

    /**
     * @dev Removes default royalty information.
     */
    function _deleteDefaultRoyalty() internal virtual {
        delete _defaultRoyaltyInfo;
    }

    /**
     * @dev Sets the royalty information for a specific token id, overriding the global default.
     *
     * Requirements:
     *
     * - `receiver` cannot be the zero address.
     * - `feeNumerator` cannot be greater than the fee denominator.
     */
    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {
        require(feeNumerator <= _feeDenominator(), "ERC2981: royalty fee will exceed salePrice");
        require(receiver != address(0), "ERC2981: Invalid parameters");

        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);
    }

    /**
     * @dev Resets royalty information for the token id back to the global default.
     */
    function _resetTokenRoyalty(uint256 tokenId) internal virtual {
        delete _tokenRoyaltyInfo[tokenId];
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)

pragma solidity ^0.8.0;

/**
 * @dev These functions deal with verification of Merkle Tree proofs.
 *
 * The tree and the proofs can be generated using our
 * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].
 * You will find a quickstart guide in the readme.
 *
 * WARNING: You should avoid using leaf values that are 64 bytes long prior to
 * hashing, or use a hash function other than keccak256 for hashing leaves.
 * This is because the concatenation of a sorted pair of internal nodes in
 * the merkle tree could be reinterpreted as a leaf value.
 * OpenZeppelin's JavaScript library generates merkle trees that are safe
 * against this attack out of the box.
 */
library MerkleProof {
    /**
     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree
     * defined by `root`. For this, a `proof` must be provided, containing
     * sibling hashes on the branch from the leaf to the root of the tree. Each
     * pair of leaves and each pair of pre-images are assumed to be sorted.
     */
    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
        return processProof(proof, leaf) == root;
    }

    /**
     * @dev Calldata version of {verify}
     *
     * _Available since v4.7._
     */
    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
        return processProofCalldata(proof, leaf) == root;
    }

    /**
     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up
     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt
     * hash matches the root of the tree. When processing the proof, the pairs
     * of leafs & pre-images are assumed to be sorted.
     *
     * _Available since v4.4._
     */
    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            computedHash = _hashPair(computedHash, proof[i]);
        }
        return computedHash;
    }

    /**
     * @dev Calldata version of {processProof}
     *
     * _Available since v4.7._
     */
    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            computedHash = _hashPair(computedHash, proof[i]);
        }
        return computedHash;
    }

    /**
     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by
     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.
     *
     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.
     *
     * _Available since v4.7._
     */
    function multiProofVerify(
        bytes32[] memory proof,
        bool[] memory proofFlags,
        bytes32 root,
        bytes32[] memory leaves
    ) internal pure returns (bool) {
        return processMultiProof(proof, proofFlags, leaves) == root;
    }

    /**
     * @dev Calldata version of {multiProofVerify}
     *
     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.
     *
     * _Available since v4.7._
     */
    function multiProofVerifyCalldata(
        bytes32[] calldata proof,
        bool[] calldata proofFlags,
        bytes32 root,
        bytes32[] memory leaves
    ) internal pure returns (bool) {
        return processMultiProofCalldata(proof, proofFlags, leaves) == root;
    }

    /**
     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction
     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another
     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false
     * respectively.
     *
     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree
     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the
     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).
     *
     * _Available since v4.7._
     */
    function processMultiProof(
        bytes32[] memory proof,
        bool[] memory proofFlags,
        bytes32[] memory leaves
    ) internal pure returns (bytes32 merkleRoot) {
        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by
        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the
        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of
        // the merkle tree.
        uint256 leavesLen = leaves.length;
        uint256 proofLen = proof.length;
        uint256 totalHashes = proofFlags.length;

        // Check proof validity.
        require(leavesLen + proofLen - 1 == totalHashes, "MerkleProof: invalid multiproof");

        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using
        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's "pop".
        bytes32[] memory hashes = new bytes32[](totalHashes);
        uint256 leafPos = 0;
        uint256 hashPos = 0;
        uint256 proofPos = 0;
        // At each step, we compute the next hash using two values:
        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we
        //   get the next hash.
        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the
        //   `proof` array.
        for (uint256 i = 0; i < totalHashes; i++) {
            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
            bytes32 b = proofFlags[i]
                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])
                : proof[proofPos++];
            hashes[i] = _hashPair(a, b);
        }

        if (totalHashes > 0) {
            require(proofPos == proofLen, "MerkleProof: invalid multiproof");
            unchecked {
                return hashes[totalHashes - 1];
            }
        } else if (leavesLen > 0) {
            return leaves[0];
        } else {
            return proof[0];
        }
    }

    /**
     * @dev Calldata version of {processMultiProof}.
     *
     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.
     *
     * _Available since v4.7._
     */
    function processMultiProofCalldata(
        bytes32[] calldata proof,
        bool[] calldata proofFlags,
        bytes32[] memory leaves
    ) internal pure returns (bytes32 merkleRoot) {
        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by
        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the
        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of
        // the merkle tree.
        uint256 leavesLen = leaves.length;
        uint256 proofLen = proof.length;
        uint256 totalHashes = proofFlags.length;

        // Check proof validity.
        require(leavesLen + proofLen - 1 == totalHashes, "MerkleProof: invalid multiproof");

        // The xxxPos values are "pointers" to the next value to consume in each array. All accesses are done using
        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's "pop".
        bytes32[] memory hashes = new bytes32[](totalHashes);
        uint256 leafPos = 0;
        uint256 hashPos = 0;
        uint256 proofPos = 0;
        // At each step, we compute the next hash using two values:
        // - a value from the "main queue". If not all leaves have been consumed, we get the next leaf, otherwise we
        //   get the next hash.
        // - depending on the flag, either another value from the "main queue" (merging branches) or an element from the
        //   `proof` array.
        for (uint256 i = 0; i < totalHashes; i++) {
            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
            bytes32 b = proofFlags[i]
                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])
                : proof[proofPos++];
            hashes[i] = _hashPair(a, b);
        }

        if (totalHashes > 0) {
            require(proofPos == proofLen, "MerkleProof: invalid multiproof");
            unchecked {
                return hashes[totalHashes - 1];
            }
        } else if (leavesLen > 0) {
            return leaves[0];
        } else {
            return proof[0];
        }
    }

    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {
        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);
    }

    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, a)
            mstore(0x20, b)
            value := keccak256(0x00, 0x40)
        }
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1, "Math: mulDiv overflow");

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);
        }
    }
}


// File: @openzeppelin/contracts/utils/math/SignedMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard signed math utilities missing in the Solidity language.
 */
library SignedMath {
    /**
     * @dev Returns the largest of two signed numbers.
     */
    function max(int256 a, int256 b) internal pure returns (int256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two signed numbers.
     */
    function min(int256 a, int256 b) internal pure returns (int256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two signed numbers without overflow.
     * The result is rounded towards zero.
     */
    function average(int256 a, int256 b) internal pure returns (int256) {
        // Formula from the book "Hacker's Delight"
        int256 x = (a & b) + ((a ^ b) >> 1);
        return x + (int256(uint256(x) >> 255) & (a ^ b));
    }

    /**
     * @dev Returns the absolute unsigned value of a signed value.
     */
    function abs(int256 n) internal pure returns (uint256) {
        unchecked {
            // must be unchecked in order to support `n = type(int256).min`
            return uint256(n >= 0 ? n : -n);
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";
import "./math/SignedMath.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `int256` to its ASCII `string` decimal representation.
     */
    function toString(int256 value) internal pure returns (string memory) {
        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }

    /**
     * @dev Returns true if the two strings are equal.
     */
    function equal(string memory a, string memory b) internal pure returns (bool) {
        return keccak256(bytes(a)) == keccak256(bytes(b));
    }
}


// File: closedsea/src/OperatorFilterer.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

/// @notice Optimized and flexible operator filterer to abide to OpenSea's
/// mandatory on-chain royalty enforcement in order for new collections to
/// receive royalties.
/// For more information, see:
/// See: https://github.com/ProjectOpenSea/operator-filter-registry
abstract contract OperatorFilterer {
    /// @dev The default OpenSea operator blocklist subscription.
    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;

    /// @dev The OpenSea operator filter registry.
    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;

    /// @dev Registers the current contract to OpenSea's operator filter,
    /// and subscribe to the default OpenSea operator blocklist.
    /// Note: Will not revert nor update existing settings for repeated registration.
    function _registerForOperatorFiltering() internal virtual {
        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);
    }

    /// @dev Registers the current contract to OpenSea's operator filter.
    /// Note: Will not revert nor update existing settings for repeated registration.
    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)
        internal
        virtual
    {
        /// @solidity memory-safe-assembly
        assembly {
            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.

            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.
            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))

            for {} iszero(subscribe) {} {
                if iszero(subscriptionOrRegistrantToCopy) {
                    functionSelector := 0x4420e486 // `register(address)`.
                    break
                }
                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.
                break
            }
            // Store the function selector.
            mstore(0x00, shl(224, functionSelector))
            // Store the `address(this)`.
            mstore(0x04, address())
            // Store the `subscriptionOrRegistrantToCopy`.
            mstore(0x24, subscriptionOrRegistrantToCopy)
            // Register into the registry.
            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {
                // If the function selector has not been overwritten,
                // it is an out-of-gas error.
                if eq(shr(224, mload(0x00)), functionSelector) {
                    // To prevent gas under-estimation.
                    revert(0, 0)
                }
            }
            // Restore the part of the free memory pointer that was overwritten,
            // which is guaranteed to be zero, because of Solidity's memory size limits.
            mstore(0x24, 0)
        }
    }

    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.
    modifier onlyAllowedOperator(address from) virtual {
        if (from != msg.sender) {
            if (!_isPriorityOperator(msg.sender)) {
                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);
            }
        }
        _;
    }

    /// @dev Modifier to guard a function from approving a blocked operator..
    modifier onlyAllowedOperatorApproval(address operator) virtual {
        if (!_isPriorityOperator(operator)) {
            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);
        }
        _;
    }

    /// @dev Helper function that reverts if the `operator` is blocked by the registry.
    function _revertIfBlocked(address operator) private view {
        /// @solidity memory-safe-assembly
        assembly {
            // Store the function selector of `isOperatorAllowed(address,address)`,
            // shifted left by 6 bytes, which is enough for 8tb of memory.
            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).
            mstore(0x00, 0xc6171134001122334455)
            // Store the `address(this)`.
            mstore(0x1a, address())
            // Store the `operator`.
            mstore(0x3a, operator)

            // `isOperatorAllowed` always returns true if it does not revert.
            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {
                // Bubble up the revert if the staticcall reverts.
                returndatacopy(0x00, 0x00, returndatasize())
                revert(0x00, returndatasize())
            }

            // We'll skip checking if `from` is inside the blacklist.
            // Even though that can block transferring out of wrapper contracts,
            // we don't want tokens to be stuck.

            // Restore the part of the free memory pointer that was overwritten,
            // which is guaranteed to be zero, if less than 8tb of memory is used.
            mstore(0x3a, 0)
        }
    }

    /// @dev For deriving contracts to override, so that operator filtering
    /// can be turned on / off.
    /// Returns true by default.
    function _operatorFilteringEnabled() internal view virtual returns (bool) {
        return true;
    }

    /// @dev For deriving contracts to override, so that preferred marketplaces can
    /// skip operator filtering, helping users save gas.
    /// Returns false for all inputs by default.
    function _isPriorityOperator(address) internal view virtual returns (bool) {
        return false;
    }
}


// File: contracts/AuxInfoStorage.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

error InvalidAuxInfo(string);
error InvalidExtraData(uint256);
error CannotOverwriteData();

/**
 * @title AuxInfoStorage
 * @author @NiftyMike | @NFTCulture
 * @dev This is a utility class for storing and retrieving auxInfo and extraData values.
 */
abstract contract AuxInfoStorage {
    bytes20[] private _auxData;

    constructor() {
        _auxData = new bytes20[](100);
    }

    function hasAuxData(uint256 extraData) external view returns (bool) {
        return _hasAuxData(extraData);
    }

    function _hasAuxData(uint256 extraData) internal view returns (bool) {
        if (extraData == 0 || extraData > 100) return false;
        if (_auxData[extraData - 1] == bytes20(0)) return false;
        return true;
    }

    function readFromAux(uint256 extraData) external view returns (string memory) {
        return _readFromAux(extraData);
    }

    function _readFromAux(uint256 extraData) internal view returns (string memory) {
        if (extraData == 0 || extraData > 100) return '';
        bytes20 aux = _auxData[extraData - 1];
        if (aux == bytes20(0)) return '';
        return string(bytes.concat(aux));
    }

    function _storeToAux(uint256 extraData, string memory auxInfo, bool force) internal {
        if (extraData == 0 || extraData > 100) revert InvalidExtraData(extraData);
        if (bytes(auxInfo).length != 20) revert InvalidAuxInfo(auxInfo);
        if (!force && _hasAuxData(extraData)) revert CannotOverwriteData();
        _auxData[extraData - 1] = bytes20(bytes(auxInfo));
    }

    function _deleteAux(uint256 extraData) internal {
        if (extraData == 0 || extraData > 100) revert InvalidExtraData(extraData);
        delete _auxData[extraData - 1];
    }
}


// File: contracts/EncodingHelper.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

error InvalidLength(string);

/**
 * @title EncodingHelper
 * @author @NiftyMike | @NFTCulture
 * @dev This is a utility class for encoding and decoding specially built strings to uint256 and back.
 * - Handles 16 byte Salt strings.
 * - Handles 20 byte AuxInfo strings.
 */
abstract contract EncodingHelper {
    function encodeSaltToUint256(string memory salt) external pure returns (uint256) {
        return _encodeSaltToUint256(salt);
    }

    function _encodeSaltToUint256(string memory salt) internal pure returns (uint256) {
        if (bytes(salt).length != 16) revert InvalidLength(salt);
        return uint128(bytes16(bytes(salt)));
    }

    function encodeAuxInfoToUint256(string memory auxInfo) external pure returns (uint256) {
        return _encodeAuxInfoToUint256(auxInfo);
    }

    function _encodeAuxInfoToUint256(string memory auxInfo) internal pure returns (uint256) {
        if (bytes(auxInfo).length != 20) revert InvalidLength(auxInfo);
        return uint160(bytes20(bytes(auxInfo)));
    }

    function decodeSaltFromUint256(uint256 saltAsInt) external pure returns (string memory) {
        return _decodeSaltFromUint256(saltAsInt);
    }

    function _decodeSaltFromUint256(uint256 saltAsInt) internal pure returns (string memory) {
        return string(bytes.concat(bytes16(uint128(saltAsInt))));
    }

    function decodeAuxInfoFromUint256(uint256 auxInfoAsInt) external pure returns (string memory) {
        return _decodeAuxInfoFromUint256(auxInfoAsInt);
    }

    function _decodeAuxInfoFromUint256(uint256 auxInfoAsInt) internal pure returns (string memory) {
        return string(bytes.concat(bytes20(uint160(auxInfoAsInt))));
    }
}


// File: contracts/MaintainableAuxInfoStorage.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Prerelease Contracts
import '@nftculture/nftc-contracts-private/contracts/access/v2/OwnableDeferral.sol';

// Local References
import './AuxInfoStorage.sol';
import './EncodingHelper.sol';

/**
 * @title MaintainableAuxInfoStorage
 * @author @NiftyMike | @NFTCulture
 * @dev Extension contract that enables maintenance of the data stored in AuxInfoStorage.
 */
abstract contract MaintainableAuxInfoStorage is AuxInfoStorage, EncodingHelper, OwnableDeferral {
    function storeToAux(uint256 extraData, string memory auxInfo, bool force) external isOwner {
        _storeToAux(extraData, auxInfo, force);
    }

    function deleteAux(uint256 extraData) external isOwner {
        _deleteAux(extraData);
    }
}


// File: contracts/NBNFTA1/NFTBookArtistOneBase.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Prerelease Contracts
import '@nftculture/nftc-contracts-private/contracts/metadata/v2/metadata-consumers/SingletonMetadataConsumer.sol';
import '@nftculture/nftc-contracts-private/contracts/token/v4/minter-extensions/FullInteractiveNFTMinter.sol';
import '@nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/IMintable.sol';
import '@nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/merkle/PhaseOneIsAuxillary.sol';
import '@nftculture/nftc-contracts-private/contracts/token/v4/user-interactive/merkle/PhaseTwoIsAuxillary.sol';
import '@nftculture/nftc-contracts-private/contracts/token-phasing/v2/static-extensions/StaticPhasedMintThree.sol';

// OZ Libraries
import '@openzeppelin/contracts/security/ReentrancyGuard.sol';
import '@openzeppelin/contracts/utils/Strings.sol';

// Local References
import '../MaintainableAuxInfoStorage.sol';

// Error Codes
error ExceedsBatchSize();
error ExceedsPurchaseLimit();
error ExceedsSupplyCap();
error InvalidPayment();
error MintNotAvailable();
error ClaimAlreadyMinted();

/**
 * @title NFTBookArtistOneBase
 * @author @NiftyMike | @NFTCulture
 * @dev ERC721a Implementation with @NFTCulture standardized components.
 *
 * Public Mint is Phase Three.
 */
abstract contract NFTBookArtistOneBase is
    IMintable,
    FullInteractiveNFTMinter,
    SingletonMetadataConsumer,
    StaticPhasedMintThree,
    PhaseOneIsAuxillary,
    PhaseTwoIsAuxillary,
    MaintainableAuxInfoStorage,
    ReentrancyGuard
{
    using Strings for uint256;

    uint256 private constant MAX_RESERVE_BATCH_SIZE = 1;

    uint256 private constant PHASE_ONE_BATCH_SIZE = 1;
    uint256 private constant PHASE_ONE_SUPPLY_CAP = 100;

    uint256 private constant PHASE_TWO_BATCH_SIZE = 1;
    uint256 private constant PHASE_TWO_SUPPLY_CAP = 100;

    uint256 private constant PUBLIC_MINT_BATCH_SIZE = 1;
    uint256 private constant PUBLIC_MINT_SUPPLY_CAP = 100;

    constructor(
        string memory __baseURI,
        uint256[] memory __phasePrices
    ) FullInteractiveNFTMinter(__baseURI) StaticPhasedMintThree(__phasePrices[0], __phasePrices[1], __phasePrices[2]) {
        _registerForOperatorFiltering();
        operatorFilteringEnabled = true;
    }

    function nftcContractDefinition() external pure override returns (string memory) {
        // NFTC Contract Definition for front-end websites.
        return
            string.concat(
                '{',
                '"ncdVersion":1,', // NFTC Contract Definition version.
                '"phases":3,', // # of mint phases?
                '"type":"Static",', // do tokens have a type? [Static | Expandable]
                '"openEdition":false', // is collection an open edition? [true | false]
                '}'
            );
    }

    /**
     * Not relevant to typical static contracts.
     */
    function nftcTokenTypeList() external pure override returns (uint64[] memory) {
        return new uint64[](0);
    }

    /**
     * Not relevant to typical static contracts.
     */
    function nftcTokenTypeDefinition(
        uint64
    ) external pure override returns (FlavorInfo.FlavorInfoV4 memory emptyFlavor) {
        return emptyFlavor;
    }

    function _startTokenId() internal pure override returns (uint256) {
        return 1;
    }

    /**
     * @notice Max number of tokens that can exist.
     */
    function maxSupply() external pure returns (uint256) {
        return PUBLIC_MINT_SUPPLY_CAP;
    }

    /**
     * @notice Total tokens that currently exist - minted less burned
     */
    function totalTokensExist() external view override returns (uint256) {
        return _totalMinted() - _totalBurned();
    }

    function phaseOneBatchSize() external pure returns (uint256) {
        return PHASE_ONE_BATCH_SIZE;
    }

    function phaseTwoBatchSize() external pure returns (uint256) {
        return PHASE_TWO_BATCH_SIZE;
    }

    function publicMintBatchSize() external pure returns (uint256) {
        return PUBLIC_MINT_BATCH_SIZE;
    }

    function tokenURI(uint256 tokenId) public view virtual override(ERC721A, IERC721A) returns (string memory) {
        require(_exists(tokenId), 'No token');

        uint256 bookNumber = uint24(_ownershipAt(tokenId).extraData);
        uint64 tokenType = _getMetadataProducer(address(this), tokenId).getTokenTypeForToken(address(this), tokenId);
        return
            _getMetadataProducer(address(this), tokenId).getJsonAsEncodedString(
                address(this),
                tokenType,
                bookNumber,
                0
            );
    }

    function setMerkleRoots(bytes32 __phaseOneRoot, bytes32 __phaseTwoRoot) external isOwner {
        _setMerkleRoots(__phaseOneRoot, __phaseTwoRoot);
    }

    function _setMerkleRoots(bytes32 __phaseOneRoot, bytes32 __phaseTwoRoot) internal {
        if (__phaseOneRoot != 0) {
            _setPhaseOneRoot(__phaseOneRoot);
        }

        if (__phaseTwoRoot != 0) {
            _setPhaseTwoRoot(__phaseTwoRoot);
        }
    }

    function _getPackedPurchasesAs64(
        address
    ) internal view virtual override(PhaseOneIsAuxillary, PhaseTwoIsAuxillary) returns (uint64) {
        return 0; // Not tracking phase-specific purchases.
    }

    /**
     * @notice Owner: reserve tokens for team.
     *
     * @param bookNumber - extraData for the mint
     * @param auxInfoAsInt - auxInfo for the mint, encoded to a uint256
     * @param destinations - addresses to send tokens to.
     */
    function reserveTokens(
        uint256 bookNumber,
        uint256 auxInfoAsInt,
        address[] calldata destinations
    ) external payable override isOwner {
        uint256 count = 1;
        if (0 >= count || count > MAX_RESERVE_BATCH_SIZE || destinations.length > 1) revert ExceedsBatchSize();
        if (_totalMinted() + (destinations.length * count) > PUBLIC_MINT_SUPPLY_CAP) revert ExceedsSupplyCap();

        if (auxInfoAsInt > 0) {
            if (_hasAuxData(bookNumber)) revert ClaimAlreadyMinted();
            _storeToAux(bookNumber, _decodeAuxInfoFromUint256(auxInfoAsInt), false);
        } else {
            // Will need to perform maintenance later, not recommended.
        }

        _internalMintTokens(destinations[0], count, bookNumber);
    }

    /**
     * @dev - not used
     */
    function premintTokens(uint256, uint256, address[] calldata) external payable override {
        revert MintNotAvailable();
    }

    /**
     * @dev - not used
     */
    function publicMintTokens(uint256, uint256, uint256, address) external payable override {
        revert MintNotAvailable();
    }

    /**
     * @dev - not used
     */
    function publicMintTokensTo(uint256, uint256, uint256, address, address) external payable override {
        revert MintNotAvailable();
    }

    /**
     * @notice Mint tokens (Phase One) - purchase bound by terms & conditions of project.
     *
     * @param proof the merkle proof for this purchase.
     * @param count the number of tokens to mint.
     */
    function phaseOneMintTokens(
        bytes32[] calldata proof,
        string calldata auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider
    ) external payable nonReentrant isPhaseOne {
        _phaseOneMintTokensTo(proof, auxInfo, extraData, count, flavorId, validationData, provider, msg.sender);
    }

    /**
     * @notice Mint tokens (Phase One) - purchase bound by terms & conditions of project.
     *
     * @param proof the merkle proof for this purchase.
     * @param count the number of tokens to mint.
     */
    function phaseOneMintTokensTo(
        bytes32[] calldata proof,
        string calldata auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider,
        address destination
    ) external payable nonReentrant isPhaseOne {
        _phaseOneMintTokensTo(proof, auxInfo, extraData, count, flavorId, validationData, provider, destination);
    }

    function _phaseOneMintTokensTo(
        bytes32[] calldata proof,
        string calldata auxInfo,
        uint256 extraData,
        uint256 count,
        uint256,
        uint256 validationData,
        address,
        address destination
    ) internal {
        if (0 >= count || count > PHASE_ONE_BATCH_SIZE) revert ExceedsBatchSize();
        if (msg.value != phaseOnePricePerNft * count) revert InvalidPayment();
        if (_totalMinted() + count > PHASE_ONE_SUPPLY_CAP) revert ExceedsSupplyCap();
        if (_hasAuxData(extraData)) revert ClaimAlreadyMinted();

        _storeToAux(extraData, auxInfo, false); // Note: Not extended!

        if (validationData > 0) {
            string memory exAuxInfo = string.concat(_decodeSaltFromUint256(validationData), '_', auxInfo);
            _proofMintTokensOfFlavor_PhaseOne(msg.sender, proof, exAuxInfo, extraData, count, extraData, destination);
        } else {
            _proofMintTokensOfFlavor_PhaseOne(msg.sender, proof, auxInfo, extraData, count, extraData, destination);
        }
    }

    /**
     * @notice Mint tokens (Phase Two) - purchase bound by terms & conditions of project.
     *
     * @param proof the merkle proof for this purchase.
     * @param count the number of tokens to mint.
     */
    function phaseTwoMintTokens(
        bytes32[] calldata proof,
        string calldata auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider
    ) external payable nonReentrant isPhaseTwo {
        _phaseTwoMintTokensTo(proof, auxInfo, extraData, count, flavorId, validationData, provider, msg.sender);
    }

    /**
     * @notice Mint tokens (Phase Two) - purchase bound by terms & conditions of project.
     *
     * @param proof the merkle proof for this purchase.
     * @param count the number of tokens to mint.
     */
    function phaseTwoMintTokensTo(
        bytes32[] calldata proof,
        string calldata auxInfo,
        uint256 extraData,
        uint256 count,
        uint256 flavorId,
        uint256 validationData,
        address provider,
        address destination
    ) external payable nonReentrant isPhaseTwo {
        _phaseTwoMintTokensTo(proof, auxInfo, extraData, count, flavorId, validationData, provider, destination);
    }

    function _phaseTwoMintTokensTo(
        bytes32[] calldata proof,
        string calldata auxInfo,
        uint256 extraData,
        uint256 count,
        uint256,
        uint256 validationData,
        address,
        address destination
    ) internal {
        if (0 >= count || count > PHASE_TWO_BATCH_SIZE) revert ExceedsBatchSize();
        if (msg.value != phaseTwoPricePerNft * count) revert InvalidPayment();
        if (_totalMinted() + count > PHASE_TWO_SUPPLY_CAP) revert ExceedsSupplyCap();
        if (_hasAuxData(extraData)) revert ClaimAlreadyMinted();

        _storeToAux(extraData, auxInfo, false); // Note: Not extended!

        if (validationData > 0) {
            string memory exAuxInfo = string.concat(_decodeSaltFromUint256(validationData), '_', auxInfo);
            _proofMintTokensOfFlavor_PhaseTwo(msg.sender, proof, exAuxInfo, extraData, count, extraData, destination);
        } else {
            _proofMintTokensOfFlavor_PhaseTwo(msg.sender, proof, auxInfo, extraData, count, extraData, destination);
        }
    }

    function _internalMintTokens(address, uint256) internal override(PhaseOneIsAuxillary, PhaseTwoIsAuxillary) {
        // Do nothing
    }

    function _internalMintTokens(
        address minter,
        uint256 count,
        uint256 bookNumber
    ) internal override(PhaseOneIsAuxillary, PhaseTwoIsAuxillary) {
        uint256 nextToken = _nextTokenId();

        _safeMint(minter, count);

        _setExtraDataAt(nextToken, uint24(bookNumber));
    }

    function _extraData(address, address, uint24 previousExtraData) internal pure override returns (uint24) {
        // Just return the existing extra data, which is the booknumber for the token.
        // It doesn't matter who minted it, once its set, its set.
        return previousExtraData;
    }
}


// File: contracts/NBNFTA1/NFTBookArtistOneSplitsAndRoyalties.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// NFTC Open Source Contracts See: https://github.com/NFTCulture/nftc-contracts
import '@nftculture/nftc-contracts/contracts/financial/NFTCSplitsAndRoyalties.sol';

abstract contract NFTBookArtistOneSplitsAndRoyalties is NFTCSplitsAndRoyalties {
    address[] internal addresses = [
        0x2f950a29CB4A784a187032e9DF33De289f1B46D4 // OnNFTs Royalty Receiver
    ];

    uint256[] internal splits = [100];

    uint96 private constant DEFAULT_ROYALTY_BASIS_POINTS = 750;

    constructor() NFTCSplitsAndRoyalties(addresses, splits, address(this), DEFAULT_ROYALTY_BASIS_POINTS) {
        // Nothing to do.
    }
}


// File: contracts/NBNFTA1/OnNFTsRefikAnadol.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

// NFTC Open Source Contracts See: https://github.com/NFTCulture/nftc-contracts
import '@nftculture/nftc-contracts/contracts/meta/ERC7572_ContractMetadata.sol';

// NFTC Prerelease Contracts
import '@nftculture/nftc-contracts-private/contracts/access/v2/OwnableDeferralResolution.sol';

// Local References
import './NFTBookArtistOneBase.sol';
import './NFTBookArtistOneSplitsAndRoyalties.sol';

/**
 *      OOOOOOOOO                           NNNNNNNN        NNNNNNNN FFFFFFFFFFFFFFFFFFFFFF TTTTTTTTTTTTTTTTTTTTTTT
 *    OO:::::::::OO                         N:::::::N       N::::::N F::::::::::::::::::::F T:::::::::::::::::::::T
 *  OO:::::::::::::OO                       N::::::::N      N::::::N F::::::::::::::::::::F T:::::::::::::::::::::T
 * O:::::::OOO:::::::O                      N:::::::::N     N::::::N F:::::::FFFFFFFFFFFFFF TTTTTTTT:::::::TTTTTTTT
 * O::::::O   O::::::Onnnn  nnnnnnnn        N::::::::::N    N::::::N F:::::::F                     T:::::::T     ssssssssss
 * O:::::O     O:::::On:::nn::::::::nn      N:::::::::::N   N::::::N F:::::::F                     T:::::::T   ss::::::::::s
 * O:::::O     O:::::On::::::::::::::nn     N:::::::N::::N  N::::::N F::::::::FFFFFFFFFF           T:::::::T ss:::::::::::::s
 * O:::::O     O:::::Onn:::::::::::::::n    N::::::N N::::N N::::::N F:::::::::::::::::F           T:::::::T s::::::ssss:::::s
 * O:::::O     O:::::O  n:::::nnnn:::::n    N::::::N  N::::N:::::::N F:::::::::::::::::F           T:::::::T  s:::::s  ssssss
 * O:::::O     O:::::O  n::::n    n::::n    N::::::N   N:::::::::::N F::::::::FFFFFFFFFF           T:::::::T    s::::::s
 * O:::::O     O:::::O  n::::n    n::::n    N::::::N    N::::::::::N F:::::::F                     T:::::::T       s::::::s
 * O::::::O   O::::::O  n::::n    n::::n    N::::::N     N:::::::::N F:::::::F                     T:::::::T ssssss   s:::::s
 * O:::::::OOO:::::::O  n::::n    n::::n    N::::::N      N::::::::N F:::::::F                     T:::::::T s:::::ssss::::::s
 *  OO:::::::::::::OO   n::::n    n::::n    N::::::N       N:::::::N F:::::::F                     T:::::::T s::::::::::::::s
 *    OO:::::::::OO     n::::n    n::::n    N::::::N        N::::::N F:::::::F                     T:::::::T  s:::::::::::ss
 *      OOOOOOOOO       nnnnnn    nnnnnn    NNNNNNNN         NNNNNNN FFFFFFFFF                     TTTTTTTTT   sssssssssss
 *
 * On NFTs Art Edition - Refik Anadol - Published by Taschen
 */
contract OnNFTsRefikAnadol is
    NFTBookArtistOneSplitsAndRoyalties,
    NFTBookArtistOneBase,
    ERC7572_ContractMetadata,
    OwnableDeferralResolution
{
    // Mainnet
    string private constant DEFAULT_CONTRACT_METADATA_URI =
        'https://arweave.net/dKFDckMXIyJ0os3KZYLh2Ung9dJd5DoTME-Re0Q7LAU/onnfts-ae1.json'; // contract-metadata v1.0.4
    address private constant DEFAULT_METADATA_CONTRACT = 0xB5a9f4d240187a60A311a3fAd7cC72dEA59a06F8;

    uint256[] private DEFAULT_PHASE_PRICES = [0.000 ether, 0.000 ether, 0.000 ether];
    string private constant DEFAULT_ART_URI = ''; // Unused. Art is hosted via chainnative stack.

    constructor()
        ERC721A('OnNFTsRefikAnadol', 'ONNFTRA')
        NFTBookArtistOneBase(DEFAULT_ART_URI, DEFAULT_PHASE_PRICES)
        SingletonMetadataConsumer(DEFAULT_METADATA_CONTRACT)
    {
        _setContractURI(DEFAULT_CONTRACT_METADATA_URI);
    }

    function supportsInterface(
        bytes4 interfaceId
    ) public view virtual override(ERC2981, ERC721A, ERC7572_ContractMetadata, IERC721A) returns (bool) {
        return
            ERC721A.supportsInterface(interfaceId) ||
            ERC2981.supportsInterface(interfaceId) ||
            ERC7572_ContractMetadata.supportsInterface(interfaceId);
    }

    /**
     * Fulfill _isOwner() implementation, backed by OZ Ownable.
     *
     * @dev see OwnableDeferral/OwnableDeferralResolution for more explanation on this.
     */
    function _isOwner()
        internal
        view
        override(ERC7572_ContractMetadata, NFTCSplitsAndRoyalties, OwnableDeferral, OwnableDeferralResolution)
    {
        OwnableDeferralResolution._isOwner();
    }
}


// File: erc721a/contracts/ERC721A.sol
// SPDX-License-Identifier: MIT
// ERC721A Contracts v4.2.3
// Creator: Chiru Labs

pragma solidity ^0.8.4;

import './IERC721A.sol';

/**
 * @dev Interface of ERC721 token receiver.
 */
interface ERC721A__IERC721Receiver {
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

/**
 * @title ERC721A
 *
 * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)
 * Non-Fungible Token Standard, including the Metadata extension.
 * Optimized for lower gas during batch mints.
 *
 * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)
 * starting from `_startTokenId()`.
 *
 * Assumptions:
 *
 * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.
 * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).
 */
contract ERC721A is IERC721A {
    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).
    struct TokenApprovalRef {
        address value;
    }

    // =============================================================
    //                           CONSTANTS
    // =============================================================

    // Mask of an entry in packed address data.
    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;

    // The bit position of `numberMinted` in packed address data.
    uint256 private constant _BITPOS_NUMBER_MINTED = 64;

    // The bit position of `numberBurned` in packed address data.
    uint256 private constant _BITPOS_NUMBER_BURNED = 128;

    // The bit position of `aux` in packed address data.
    uint256 private constant _BITPOS_AUX = 192;

    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.
    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;

    // The bit position of `startTimestamp` in packed ownership.
    uint256 private constant _BITPOS_START_TIMESTAMP = 160;

    // The bit mask of the `burned` bit in packed ownership.
    uint256 private constant _BITMASK_BURNED = 1 << 224;

    // The bit position of the `nextInitialized` bit in packed ownership.
    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;

    // The bit mask of the `nextInitialized` bit in packed ownership.
    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;

    // The bit position of `extraData` in packed ownership.
    uint256 private constant _BITPOS_EXTRA_DATA = 232;

    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.
    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;

    // The mask of the lower 160 bits for addresses.
    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;

    // The maximum `quantity` that can be minted with {_mintERC2309}.
    // This limit is to prevent overflows on the address data entries.
    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}
    // is required to cause an overflow, which is unrealistic.
    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;

    // The `Transfer` event signature is given by:
    // `keccak256(bytes("Transfer(address,address,uint256)"))`.
    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =
        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;

    // =============================================================
    //                            STORAGE
    // =============================================================

    // The next token ID to be minted.
    uint256 private _currentIndex;

    // The number of tokens burned.
    uint256 private _burnCounter;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to ownership details
    // An empty struct value does not necessarily mean the token is unowned.
    // See {_packedOwnershipOf} implementation for details.
    //
    // Bits Layout:
    // - [0..159]   `addr`
    // - [160..223] `startTimestamp`
    // - [224]      `burned`
    // - [225]      `nextInitialized`
    // - [232..255] `extraData`
    mapping(uint256 => uint256) private _packedOwnerships;

    // Mapping owner address to address data.
    //
    // Bits Layout:
    // - [0..63]    `balance`
    // - [64..127]  `numberMinted`
    // - [128..191] `numberBurned`
    // - [192..255] `aux`
    mapping(address => uint256) private _packedAddressData;

    // Mapping from token ID to approved address.
    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    // =============================================================
    //                          CONSTRUCTOR
    // =============================================================

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
        _currentIndex = _startTokenId();
    }

    // =============================================================
    //                   TOKEN COUNTING OPERATIONS
    // =============================================================

    /**
     * @dev Returns the starting token ID.
     * To change the starting token ID, please override this function.
     */
    function _startTokenId() internal view virtual returns (uint256) {
        return 0;
    }

    /**
     * @dev Returns the next token ID to be minted.
     */
    function _nextTokenId() internal view virtual returns (uint256) {
        return _currentIndex;
    }

    /**
     * @dev Returns the total number of tokens in existence.
     * Burned tokens will reduce the count.
     * To get the total number of tokens minted, please see {_totalMinted}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        // Counter underflow is impossible as _burnCounter cannot be incremented
        // more than `_currentIndex - _startTokenId()` times.
        unchecked {
            return _currentIndex - _burnCounter - _startTokenId();
        }
    }

    /**
     * @dev Returns the total amount of tokens minted in the contract.
     */
    function _totalMinted() internal view virtual returns (uint256) {
        // Counter underflow is impossible as `_currentIndex` does not decrement,
        // and it is initialized to `_startTokenId()`.
        unchecked {
            return _currentIndex - _startTokenId();
        }
    }

    /**
     * @dev Returns the total number of tokens burned.
     */
    function _totalBurned() internal view virtual returns (uint256) {
        return _burnCounter;
    }

    // =============================================================
    //                    ADDRESS DATA OPERATIONS
    // =============================================================

    /**
     * @dev Returns the number of tokens in `owner`'s account.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        if (owner == address(0)) revert BalanceQueryForZeroAddress();
        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;
    }

    /**
     * Returns the number of tokens minted by `owner`.
     */
    function _numberMinted(address owner) internal view returns (uint256) {
        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;
    }

    /**
     * Returns the number of tokens burned by or on behalf of `owner`.
     */
    function _numberBurned(address owner) internal view returns (uint256) {
        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;
    }

    /**
     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).
     */
    function _getAux(address owner) internal view returns (uint64) {
        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);
    }

    /**
     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).
     * If there are multiple variables, please pack them into a uint64.
     */
    function _setAux(address owner, uint64 aux) internal virtual {
        uint256 packed = _packedAddressData[owner];
        uint256 auxCasted;
        // Cast `aux` with assembly to avoid redundant masking.
        assembly {
            auxCasted := aux
        }
        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);
        _packedAddressData[owner] = packed;
    }

    // =============================================================
    //                            IERC165
    // =============================================================

    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30000 gas.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        // The interface IDs are constants representing the first 4 bytes
        // of the XOR of all function selectors in the interface.
        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)
        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)
        return
            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.
            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.
            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.
    }

    // =============================================================
    //                        IERC721Metadata
    // =============================================================

    /**
     * @dev Returns the token collection name.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();

        string memory baseURI = _baseURI();
        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, it can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return '';
    }

    // =============================================================
    //                     OWNERSHIPS OPERATIONS
    // =============================================================

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        return address(uint160(_packedOwnershipOf(tokenId)));
    }

    /**
     * @dev Gas spent here starts off proportional to the maximum mint batch size.
     * It gradually moves to O(1) as tokens get transferred around over time.
     */
    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {
        return _unpackedOwnership(_packedOwnershipOf(tokenId));
    }

    /**
     * @dev Returns the unpacked `TokenOwnership` struct at `index`.
     */
    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {
        return _unpackedOwnership(_packedOwnerships[index]);
    }

    /**
     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.
     */
    function _initializeOwnershipAt(uint256 index) internal virtual {
        if (_packedOwnerships[index] == 0) {
            _packedOwnerships[index] = _packedOwnershipOf(index);
        }
    }

    /**
     * Returns the packed ownership data of `tokenId`.
     */
    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {
        uint256 curr = tokenId;

        unchecked {
            if (_startTokenId() <= curr)
                if (curr < _currentIndex) {
                    uint256 packed = _packedOwnerships[curr];
                    // If not burned.
                    if (packed & _BITMASK_BURNED == 0) {
                        // Invariant:
                        // There will always be an initialized ownership slot
                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)
                        // before an unintialized ownership slot
                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)
                        // Hence, `curr` will not underflow.
                        //
                        // We can directly compare the packed value.
                        // If the address is zero, packed will be zero.
                        while (packed == 0) {
                            packed = _packedOwnerships[--curr];
                        }
                        return packed;
                    }
                }
        }
        revert OwnerQueryForNonexistentToken();
    }

    /**
     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.
     */
    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {
        ownership.addr = address(uint160(packed));
        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);
        ownership.burned = packed & _BITMASK_BURNED != 0;
        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);
    }

    /**
     * @dev Packs ownership data into a single uint256.
     */
    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {
        assembly {
            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.
            owner := and(owner, _BITMASK_ADDRESS)
            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.
            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))
        }
    }

    /**
     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.
     */
    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {
        // For branchless setting of the `nextInitialized` flag.
        assembly {
            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.
            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))
        }
    }

    // =============================================================
    //                      APPROVAL OPERATIONS
    // =============================================================

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the
     * zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) public payable virtual override {
        address owner = ownerOf(tokenId);

        if (_msgSenderERC721A() != owner)
            if (!isApprovedForAll(owner, _msgSenderERC721A())) {
                revert ApprovalCallerNotOwnerNorApproved();
            }

        _tokenApprovals[tokenId].value = to;
        emit Approval(owner, to, tokenId);
    }

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();

        return _tokenApprovals[tokenId].value;
    }

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom}
     * for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _operatorApprovals[_msgSenderERC721A()][operator] = approved;
        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);
    }

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted. See {_mint}.
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return
            _startTokenId() <= tokenId &&
            tokenId < _currentIndex && // If within bounds,
            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.
    }

    /**
     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.
     */
    function _isSenderApprovedOrOwner(
        address approvedAddress,
        address owner,
        address msgSender
    ) private pure returns (bool result) {
        assembly {
            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.
            owner := and(owner, _BITMASK_ADDRESS)
            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.
            msgSender := and(msgSender, _BITMASK_ADDRESS)
            // `msgSender == owner || msgSender == approvedAddress`.
            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))
        }
    }

    /**
     * @dev Returns the storage slot and value for the approved address of `tokenId`.
     */
    function _getApprovedSlotAndAddress(uint256 tokenId)
        private
        view
        returns (uint256 approvedAddressSlot, address approvedAddress)
    {
        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];
        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.
        assembly {
            approvedAddressSlot := tokenApproval.slot
            approvedAddress := sload(approvedAddressSlot)
        }
    }

    // =============================================================
    //                      TRANSFER OPERATIONS
    // =============================================================

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token
     * by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public payable virtual override {
        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);

        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();

        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);

        // The nested ifs save around 20+ gas over a compound boolean condition.
        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))
            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();

        if (to == address(0)) revert TransferToZeroAddress();

        _beforeTokenTransfers(from, to, tokenId, 1);

        // Clear approvals from the previous owner.
        assembly {
            if approvedAddress {
                // This is equivalent to `delete _tokenApprovals[tokenId]`.
                sstore(approvedAddressSlot, 0)
            }
        }

        // Underflow of the sender's balance is impossible because we check for
        // ownership above and the recipient's balance can't realistically overflow.
        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.
        unchecked {
            // We can directly increment and decrement the balances.
            --_packedAddressData[from]; // Updates: `balance -= 1`.
            ++_packedAddressData[to]; // Updates: `balance += 1`.

            // Updates:
            // - `address` to the next owner.
            // - `startTimestamp` to the timestamp of transfering.
            // - `burned` to `false`.
            // - `nextInitialized` to `true`.
            _packedOwnerships[tokenId] = _packOwnershipData(
                to,
                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)
            );

            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .
            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {
                uint256 nextTokenId = tokenId + 1;
                // If the next slot's address is zero and not burned (i.e. packed value is zero).
                if (_packedOwnerships[nextTokenId] == 0) {
                    // If the next slot is within bounds.
                    if (nextTokenId != _currentIndex) {
                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.
                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;
                    }
                }
            }
        }

        emit Transfer(from, to, tokenId);
        _afterTokenTransfers(from, to, tokenId, 1);
    }

    /**
     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public payable virtual override {
        safeTransferFrom(from, to, tokenId, '');
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token
     * by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement
     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public payable virtual override {
        transferFrom(from, to, tokenId);
        if (to.code.length != 0)
            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {
                revert TransferToNonERC721ReceiverImplementer();
            }
    }

    /**
     * @dev Hook that is called before a set of serially-ordered token IDs
     * are about to be transferred. This includes minting.
     * And also called before burning one token.
     *
     * `startTokenId` - the first token ID to be transferred.
     * `quantity` - the amount to be transferred.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, `tokenId` will be burned by `from`.
     * - `from` and `to` are never both zero.
     */
    function _beforeTokenTransfers(
        address from,
        address to,
        uint256 startTokenId,
        uint256 quantity
    ) internal virtual {}

    /**
     * @dev Hook that is called after a set of serially-ordered token IDs
     * have been transferred. This includes minting.
     * And also called after one token has been burned.
     *
     * `startTokenId` - the first token ID to be transferred.
     * `quantity` - the amount to be transferred.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been
     * transferred to `to`.
     * - When `from` is zero, `tokenId` has been minted for `to`.
     * - When `to` is zero, `tokenId` has been burned by `from`.
     * - `from` and `to` are never both zero.
     */
    function _afterTokenTransfers(
        address from,
        address to,
        uint256 startTokenId,
        uint256 quantity
    ) internal virtual {}

    /**
     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.
     *
     * `from` - Previous owner of the given token ID.
     * `to` - Target address that will receive the token.
     * `tokenId` - Token ID to be transferred.
     * `_data` - Optional data to send along with the call.
     *
     * Returns whether the call correctly returned the expected magic value.
     */
    function _checkContractOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (
            bytes4 retval
        ) {
            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;
        } catch (bytes memory reason) {
            if (reason.length == 0) {
                revert TransferToNonERC721ReceiverImplementer();
            } else {
                assembly {
                    revert(add(32, reason), mload(reason))
                }
            }
        }
    }

    // =============================================================
    //                        MINT OPERATIONS
    // =============================================================

    /**
     * @dev Mints `quantity` tokens and transfers them to `to`.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `quantity` must be greater than 0.
     *
     * Emits a {Transfer} event for each mint.
     */
    function _mint(address to, uint256 quantity) internal virtual {
        uint256 startTokenId = _currentIndex;
        if (quantity == 0) revert MintZeroQuantity();

        _beforeTokenTransfers(address(0), to, startTokenId, quantity);

        // Overflows are incredibly unrealistic.
        // `balance` and `numberMinted` have a maximum limit of 2**64.
        // `tokenId` has a maximum limit of 2**256.
        unchecked {
            // Updates:
            // - `balance += quantity`.
            // - `numberMinted += quantity`.
            //
            // We can directly add to the `balance` and `numberMinted`.
            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);

            // Updates:
            // - `address` to the owner.
            // - `startTimestamp` to the timestamp of minting.
            // - `burned` to `false`.
            // - `nextInitialized` to `quantity == 1`.
            _packedOwnerships[startTokenId] = _packOwnershipData(
                to,
                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)
            );

            uint256 toMasked;
            uint256 end = startTokenId + quantity;

            // Use assembly to loop and emit the `Transfer` event for gas savings.
            // The duplicated `log4` removes an extra check and reduces stack juggling.
            // The assembly, together with the surrounding Solidity code, have been
            // delicately arranged to nudge the compiler into producing optimized opcodes.
            assembly {
                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.
                toMasked := and(to, _BITMASK_ADDRESS)
                // Emit the `Transfer` event.
                log4(
                    0, // Start of data (0, since no data).
                    0, // End of data (0, since no data).
                    _TRANSFER_EVENT_SIGNATURE, // Signature.
                    0, // `address(0)`.
                    toMasked, // `to`.
                    startTokenId // `tokenId`.
                )

                // The `iszero(eq(,))` check ensures that large values of `quantity`
                // that overflows uint256 will make the loop run out of gas.
                // The compiler will optimize the `iszero` away for performance.
                for {
                    let tokenId := add(startTokenId, 1)
                } iszero(eq(tokenId, end)) {
                    tokenId := add(tokenId, 1)
                } {
                    // Emit the `Transfer` event. Similar to above.
                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)
                }
            }
            if (toMasked == 0) revert MintToZeroAddress();

            _currentIndex = end;
        }
        _afterTokenTransfers(address(0), to, startTokenId, quantity);
    }

    /**
     * @dev Mints `quantity` tokens and transfers them to `to`.
     *
     * This function is intended for efficient minting only during contract creation.
     *
     * It emits only one {ConsecutiveTransfer} as defined in
     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),
     * instead of a sequence of {Transfer} event(s).
     *
     * Calling this function outside of contract creation WILL make your contract
     * non-compliant with the ERC721 standard.
     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309
     * {ConsecutiveTransfer} event is only permissible during contract creation.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `quantity` must be greater than 0.
     *
     * Emits a {ConsecutiveTransfer} event.
     */
    function _mintERC2309(address to, uint256 quantity) internal virtual {
        uint256 startTokenId = _currentIndex;
        if (to == address(0)) revert MintToZeroAddress();
        if (quantity == 0) revert MintZeroQuantity();
        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();

        _beforeTokenTransfers(address(0), to, startTokenId, quantity);

        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.
        unchecked {
            // Updates:
            // - `balance += quantity`.
            // - `numberMinted += quantity`.
            //
            // We can directly add to the `balance` and `numberMinted`.
            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);

            // Updates:
            // - `address` to the owner.
            // - `startTimestamp` to the timestamp of minting.
            // - `burned` to `false`.
            // - `nextInitialized` to `quantity == 1`.
            _packedOwnerships[startTokenId] = _packOwnershipData(
                to,
                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)
            );

            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);

            _currentIndex = startTokenId + quantity;
        }
        _afterTokenTransfers(address(0), to, startTokenId, quantity);
    }

    /**
     * @dev Safely mints `quantity` tokens and transfers them to `to`.
     *
     * Requirements:
     *
     * - If `to` refers to a smart contract, it must implement
     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.
     * - `quantity` must be greater than 0.
     *
     * See {_mint}.
     *
     * Emits a {Transfer} event for each mint.
     */
    function _safeMint(
        address to,
        uint256 quantity,
        bytes memory _data
    ) internal virtual {
        _mint(to, quantity);

        unchecked {
            if (to.code.length != 0) {
                uint256 end = _currentIndex;
                uint256 index = end - quantity;
                do {
                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {
                        revert TransferToNonERC721ReceiverImplementer();
                    }
                } while (index < end);
                // Reentrancy protection.
                if (_currentIndex != end) revert();
            }
        }
    }

    /**
     * @dev Equivalent to `_safeMint(to, quantity, '')`.
     */
    function _safeMint(address to, uint256 quantity) internal virtual {
        _safeMint(to, quantity, '');
    }

    // =============================================================
    //                        BURN OPERATIONS
    // =============================================================

    /**
     * @dev Equivalent to `_burn(tokenId, false)`.
     */
    function _burn(uint256 tokenId) internal virtual {
        _burn(tokenId, false);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);

        address from = address(uint160(prevOwnershipPacked));

        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);

        if (approvalCheck) {
            // The nested ifs save around 20+ gas over a compound boolean condition.
            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))
                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();
        }

        _beforeTokenTransfers(from, address(0), tokenId, 1);

        // Clear approvals from the previous owner.
        assembly {
            if approvedAddress {
                // This is equivalent to `delete _tokenApprovals[tokenId]`.
                sstore(approvedAddressSlot, 0)
            }
        }

        // Underflow of the sender's balance is impossible because we check for
        // ownership above and the recipient's balance can't realistically overflow.
        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.
        unchecked {
            // Updates:
            // - `balance -= 1`.
            // - `numberBurned += 1`.
            //
            // We can directly decrement the balance, and increment the number burned.
            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.
            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;

            // Updates:
            // - `address` to the last owner.
            // - `startTimestamp` to the timestamp of burning.
            // - `burned` to `true`.
            // - `nextInitialized` to `true`.
            _packedOwnerships[tokenId] = _packOwnershipData(
                from,
                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)
            );

            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .
            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {
                uint256 nextTokenId = tokenId + 1;
                // If the next slot's address is zero and not burned (i.e. packed value is zero).
                if (_packedOwnerships[nextTokenId] == 0) {
                    // If the next slot is within bounds.
                    if (nextTokenId != _currentIndex) {
                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.
                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;
                    }
                }
            }
        }

        emit Transfer(from, address(0), tokenId);
        _afterTokenTransfers(from, address(0), tokenId, 1);

        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.
        unchecked {
            _burnCounter++;
        }
    }

    // =============================================================
    //                     EXTRA DATA OPERATIONS
    // =============================================================

    /**
     * @dev Directly sets the extra data for the ownership data `index`.
     */
    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {
        uint256 packed = _packedOwnerships[index];
        if (packed == 0) revert OwnershipNotInitializedForExtraData();
        uint256 extraDataCasted;
        // Cast `extraData` with assembly to avoid redundant masking.
        assembly {
            extraDataCasted := extraData
        }
        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);
        _packedOwnerships[index] = packed;
    }

    /**
     * @dev Called during each token transfer to set the 24bit `extraData` field.
     * Intended to be overridden by the cosumer contract.
     *
     * `previousExtraData` - the value of `extraData` before transfer.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, `tokenId` will be burned by `from`.
     * - `from` and `to` are never both zero.
     */
    function _extraData(
        address from,
        address to,
        uint24 previousExtraData
    ) internal view virtual returns (uint24) {}

    /**
     * @dev Returns the next extra data for the packed ownership data.
     * The returned result is shifted into position.
     */
    function _nextExtraData(
        address from,
        address to,
        uint256 prevOwnershipPacked
    ) private view returns (uint256) {
        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);
        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;
    }

    // =============================================================
    //                       OTHER OPERATIONS
    // =============================================================

    /**
     * @dev Returns the message sender (defaults to `msg.sender`).
     *
     * If you are writing GSN compatible contracts, you need to override this function.
     */
    function _msgSenderERC721A() internal view virtual returns (address) {
        return msg.sender;
    }

    /**
     * @dev Converts a uint256 to its ASCII string decimal representation.
     */
    function _toString(uint256 value) internal pure virtual returns (string memory str) {
        assembly {
            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but
            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.
            // We will need 1 word for the trailing zeros padding, 1 word for the length,
            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.
            let m := add(mload(0x40), 0xa0)
            // Update the free memory pointer to allocate.
            mstore(0x40, m)
            // Assign the `str` to the end.
            str := sub(m, 0x20)
            // Zeroize the slot after the string.
            mstore(str, 0)

            // Cache the end of the memory to calculate the length later.
            let end := str

            // We write the string from rightmost digit to leftmost digit.
            // The following is essentially a do-while loop that also handles the zero case.
            // prettier-ignore
            for { let temp := value } 1 {} {
                str := sub(str, 1)
                // Write the character to the pointer.
                // The ASCII index of the '0' character is 48.
                mstore8(str, add(48, mod(temp, 10)))
                // Keep dividing `temp` until zero.
                temp := div(temp, 10)
                // prettier-ignore
                if iszero(temp) { break }
            }

            let length := sub(end, str)
            // Move the pointer 32 bytes leftwards to make room for the length.
            str := sub(str, 0x20)
            // Store the length.
            mstore(str, length)
        }
    }
}


// File: erc721a/contracts/extensions/ERC721ABurnable.sol
// SPDX-License-Identifier: MIT
// ERC721A Contracts v4.2.3
// Creator: Chiru Labs

pragma solidity ^0.8.4;

import './IERC721ABurnable.sol';
import '../ERC721A.sol';

/**
 * @title ERC721ABurnable.
 *
 * @dev ERC721A token that can be irreversibly burned (destroyed).
 */
abstract contract ERC721ABurnable is ERC721A, IERC721ABurnable {
    /**
     * @dev Burns `tokenId`. See {ERC721A-_burn}.
     *
     * Requirements:
     *
     * - The caller must own `tokenId` or be an approved operator.
     */
    function burn(uint256 tokenId) public virtual override {
        _burn(tokenId, true);
    }
}


// File: erc721a/contracts/extensions/IERC721ABurnable.sol
// SPDX-License-Identifier: MIT
// ERC721A Contracts v4.2.3
// Creator: Chiru Labs

pragma solidity ^0.8.4;

import '../IERC721A.sol';

/**
 * @dev Interface of ERC721ABurnable.
 */
interface IERC721ABurnable is IERC721A {
    /**
     * @dev Burns `tokenId`. See {ERC721A-_burn}.
     *
     * Requirements:
     *
     * - The caller must own `tokenId` or be an approved operator.
     */
    function burn(uint256 tokenId) external;
}


// File: erc721a/contracts/IERC721A.sol
// SPDX-License-Identifier: MIT
// ERC721A Contracts v4.2.3
// Creator: Chiru Labs

pragma solidity ^0.8.4;

/**
 * @dev Interface of ERC721A.
 */
interface IERC721A {
    /**
     * The caller must own the token or be an approved operator.
     */
    error ApprovalCallerNotOwnerNorApproved();

    /**
     * The token does not exist.
     */
    error ApprovalQueryForNonexistentToken();

    /**
     * Cannot query the balance for the zero address.
     */
    error BalanceQueryForZeroAddress();

    /**
     * Cannot mint to the zero address.
     */
    error MintToZeroAddress();

    /**
     * The quantity of tokens minted must be more than zero.
     */
    error MintZeroQuantity();

    /**
     * The token does not exist.
     */
    error OwnerQueryForNonexistentToken();

    /**
     * The caller must own the token or be an approved operator.
     */
    error TransferCallerNotOwnerNorApproved();

    /**
     * The token must be owned by `from`.
     */
    error TransferFromIncorrectOwner();

    /**
     * Cannot safely transfer to a contract that does not implement the
     * ERC721Receiver interface.
     */
    error TransferToNonERC721ReceiverImplementer();

    /**
     * Cannot transfer to the zero address.
     */
    error TransferToZeroAddress();

    /**
     * The token does not exist.
     */
    error URIQueryForNonexistentToken();

    /**
     * The `quantity` minted with ERC2309 exceeds the safety limit.
     */
    error MintERC2309QuantityExceedsLimit();

    /**
     * The `extraData` cannot be set on an unintialized ownership slot.
     */
    error OwnershipNotInitializedForExtraData();

    // =============================================================
    //                            STRUCTS
    // =============================================================

    struct TokenOwnership {
        // The address of the owner.
        address addr;
        // Stores the start time of ownership with minimal overhead for tokenomics.
        uint64 startTimestamp;
        // Whether the token has been burned.
        bool burned;
        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.
        uint24 extraData;
    }

    // =============================================================
    //                         TOKEN COUNTERS
    // =============================================================

    /**
     * @dev Returns the total number of tokens in existence.
     * Burned tokens will reduce the count.
     * To get the total number of tokens minted, please see {_totalMinted}.
     */
    function totalSupply() external view returns (uint256);

    // =============================================================
    //                            IERC165
    // =============================================================

    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    // =============================================================
    //                            IERC721
    // =============================================================

    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables
     * (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in `owner`'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`,
     * checking first that contract recipients are aware of the ERC721 protocol
     * to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move
     * this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement
     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external payable;

    /**
     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external payable;

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}
     * whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token
     * by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external payable;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the
     * zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external payable;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom}
     * for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}.
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    // =============================================================
    //                        IERC721Metadata
    // =============================================================

    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);

    // =============================================================
    //                           IERC2309
    // =============================================================

    /**
     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`
     * (inclusive) is transferred from `from` to `to`, as defined in the
     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.
     *
     * See {_mintERC2309} for more details.
     */
    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);
}

