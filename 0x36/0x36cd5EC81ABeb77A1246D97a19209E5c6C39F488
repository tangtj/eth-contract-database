
// File: /contracts/FARM.sol
pragma solidity ^0.8.20;

import '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';
import '@openzeppelin/contracts/security/ReentrancyGuard.sol';
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";



/**
 *  
 *   .d8888b.  d8b                        888           .d8888b.                  d8b                                       
 *  d88P  Y88b Y8P                        888          d88P  Y88b                 Y8P                                       
 *  Y88b.                                 888          888    888                                                           
 *   "Y888b.   888 88888b.d88b.  88888b.  888  .d88b.  888        888d888 8888b.  888 88888b.       .d88b.  888d888 .d88b.  
 *      "Y88b. 888 888 "888 "88b 888 "88b 888 d8P  Y8b 888  88888 888P"      "88b 888 888 "88b     d88""88b 888P"  d88P"88b 
 *        "888 888 888  888  888 888  888 888 88888888 888    888 888    .d888888 888 888  888     888  888 888    888  888 
 *  Y88b  d88P 888 888  888  888 888 d88P 888 Y8b.     Y88b  d88P 888    888  888 888 888  888 d8b Y88..88P 888    Y88b 888 
 *   "Y8888P"  888 888  888  888 88888P"  888  "Y8888   "Y8888P88 888    "Y888888 888 888  888 Y8P  "Y88P"  888     "Y88888 
 *                               888                                                                                    888 
 *                               888                                                                               Y8b d88P 
 *                               888                                                                                "Y88P"  
 */


/**
 * @title RICE Staking Contract
 * @dev This contract allows users to stake their LP tokens and earn RICE tokens as a reward.
 */
contract FARM is Ownable, ReentrancyGuard {

  /// @dev Structure to manage deposit state
  struct Deposit {
    uint256 amount; // User's deposited amount
    uint256 excluded; // User's excluded rewards
    uint256 excludedLpRewards; // User's excluded LP rewards
  }

  /// @dev Uniswap router reference
  IUniswapV2Router02 public router;

  /// @dev Token references
  IERC20 public rice; // RICE token reference
  IERC20 public lpToken; // LP token reference
  IERC20 public weth; // WETH token reference;

  /// @dev Constants and rewards parameters
  uint256 public PRECISION = 1e18;
  uint256 public rewardsPerSecond;
  uint256 public rewardsPerDeposit;

  /// @dev Timekeeping variables
  uint256 public rewardPeriodStart;
  uint256 public rewardsUpdatedAt;
  uint256 public rewardPeriodEnd;

  /// @dev State variables
  uint256 public rewardedLpPerDeposit;
  uint256 public totalDeposited;
  uint256 public totalLpRewards;
  uint256 public waitingPeriod;
  uint256 public rewardPeriod;

  /// @dev Mapping of user deposits
  mapping(address => Deposit) public deposits;

  /// @dev Events
  event Deposited(address indexed depositor, uint256 amount);
  event Withdrawn(address indexed depositor, uint256 amount);
  event Harvested(address indexed depositor, uint256 rewards);
  event HarvestedLP(address indexed depositor, uint256 rewards);
  event LpTokensRewarded(address indexed user, uint256 rewards, uint256 totalDeposits, uint256 senderDeposits);

  // @dev Struct that contains all necessary info for a web3 app
  struct UserInfo {
    uint256 totalDeposited;
    uint256 rewardPeriodStart;
    uint256 rewardPeriodEnd;
    uint256 rewardsPerSecond;
    address lpTokenAddress;
    uint256 userDepositAmount;
    uint256 userLpBalance;
    uint256 userLpApproved;
    uint256 amountToHarvest;
    uint256 lpToHarvest;
    uint256 currentTime;
    uint256 ricePerEth;
    uint256 lpPerEth;
  }

  /**
  * @dev Constructor sets the reward period and waiting period.
  * @param _rewardPeriod Number of seconds for the reward period.
  * @param _waitingPeriod Number of seconds to wait before starting the reward period.
  */
  constructor(uint256 _rewardPeriod, uint256 _waitingPeriod) {
    waitingPeriod = _waitingPeriod;
    rewardPeriod = _rewardPeriod;
  }

  /**
   * @notice Gets various information about the contract and optionally about a specific user.
   * @param user The address of the user for which to get info.
   *        Pass the zero address to only retrieve contract-wide info.
   * @return uint256[5] An array containing:
   *         - totalDeposited: The total number of tokens deposited.
   *         - rewardPeriodStart: The start time of rewards.
   *         - rewardPeriodEnd: The end time of rewards.
   *         - rewardsPerSecond: The rate of token distribution.
   *         - lpToken: the address of the LP token that can be deposited
   *         - userDepositAmount: user's bonded amount (or 0 if user == address(0)).
   *         - amountToHarvest for the user (or 0 if user == address(0)).
   *         - lpToHarvest: the amount of LP token rewards allocated for the user to claim
   *         - userLpApproved: amount of LP tokens approved for this farm to use
   *         - userLPBalance: amount of LP tokens in the user's wallet
   *         - ricePerEth: amount of rice to be exchanged for 1 eth in uniswap v2
   *         - lpPerEth: amount of LP tokens that are equal in value to 1 ETH
   */
  function getInfo(address user) public view returns (UserInfo memory) {
    UserInfo memory info = UserInfo({
      totalDeposited: totalDeposited,
      rewardPeriodStart: rewardPeriodStart,
      rewardPeriodEnd: rewardPeriodEnd,
      rewardsPerSecond: rewardsPerSecond,
      lpTokenAddress: address(lpToken),
      currentTime: block.timestamp,
      userDepositAmount: 0, // default value
      amountToHarvest: 0, // default value
      userLpApproved: 0, // default value
      userLpBalance: 0, // default value
      lpToHarvest: 0, // default value
      ricePerEth: 0, // default value
      lpPerEth: 0 // default value
    });

    if (address(lpToken) != address(0)) {
      info.lpPerEth = lpPerEth();
      info.ricePerEth = ricePerEth();
    }

    if (user != address(0) && rewardPeriodStart > 0) {
      info.userLpApproved = lpToken.allowance(user, address(this));
      info.userDepositAmount = deposits[user].amount;
      info.amountToHarvest = allocatedAmount(user);
      info.userLpBalance = lpToken.balanceOf(user);
      info.lpToHarvest = allocatedLpAmount(user);
    }

    return info;
  }

  function lpPerEth() public view returns (uint256) {
    uint256 lpRiceBalance = rice.balanceOf(address(lpToken));
    uint256 lpEthBalance = weth.balanceOf(address(lpToken));
    uint256 lpTotalSupply = lpToken.totalSupply();
    uint256 _ricePerEth = ricePerEth();

    if (_ricePerEth > 0) {
      uint256 riceValue = 10**18 * lpRiceBalance / _ricePerEth;
      return 10**18 * lpTotalSupply / (riceValue + (10**18 * lpEthBalance));
    } else return 0;
  }

  function ricePerEth() public view returns (uint256) {
    address[] memory path = new address[](2);
    path[0] = address(weth);
    path[1] = address(rice);

    uint256[] memory amountsOut = router.getAmountsOut(10**18, path);
    return amountsOut[1]; // This will give the amount of tokenOut you would get for _amountIn of tokenIn
  }

  /**
  * @dev Sets the RICE token address and transfers ownership to it.
  * @param _rice The RICE token contract.
  */
  function setRiceAddress(IERC20 _rice) external onlyOwner {
    transferOwnership(address(_rice));
    rice = _rice;
  }

  /**
  * @dev Activates the rewards distribution.
  * @param _uniswapPair The Uniswap pair for LP tokens.
  */
  function activateRewards(address _uniswapPair, address _weth, address _router) external onlyOwner {
    require(address(lpToken) == address(0), "Rewards already activated");
    router = IUniswapV2Router02(_router);
    lpToken = IERC20(_uniswapPair);
    weth = IERC20(_weth);

    rewardPeriodStart = block.timestamp + waitingPeriod;
    rewardPeriodEnd = rewardPeriodStart + rewardPeriod;
    rewardsUpdatedAt = rewardPeriodStart;

    rewardsPerSecond = PRECISION * rice.balanceOf(address(this)) / rewardPeriod;
  }

  /**
  * @dev Allows users to deposit LP tokens and start earning rewards.
  * @param amount The amount of LP tokens to deposit.
  */
  function deposit(uint256 amount) external nonReentrant {
    require(rewardPeriodStart <= block.timestamp, 'Depositing is not yet enabled');
    require(amount > 0, "Cannot deposit 0");

    lpToken.transferFrom(msg.sender, address(this), amount);
    _harvest();

    // If the user has already deposited,
    // and is trying to withdraw less than 5%,
    // apply the same tax as the harvest() function
    if (deposits[msg.sender].amount > 0 && amount < 5 * deposits[msg.sender].amount / 100)
      _applyHarvestTax();

    deposits[msg.sender].amount += amount;
    totalDeposited += amount;

    emit Deposited(msg.sender, amount);
  }

  /**
  * @dev Allows users to withdraw their LP tokens.
  * @param amount The amount of LP tokens to withdraw.
  */
  function withdraw(uint256 amount) external nonReentrant {
    require(amount > 0, "Cannot withdraw 0");
    require(deposits[msg.sender].amount >= amount, "Insufficient deposit");

    _harvest();

    // If trying to withdraw less than 5% of their deposits,
    // apply the same tax as the harvest() function
    if (amount < 5 * deposits[msg.sender].amount / 100)
      _applyHarvestTax();

    uint256 rewards = 0;
    // Last staker takes everything in the pool
    if (totalDeposited > amount)
      rewards = amount * 5 / 100;

    deposits[msg.sender].amount -= amount;
    totalDeposited -= amount;

    // Last user doesn't get taxed because taxes have no where to go
    if (totalDeposited - deposits[msg.sender].amount > 0) {
      // Distribute the rewards among all other stakers
      rewardedLpPerDeposit += PRECISION * rewards / (totalDeposited - deposits[msg.sender].amount);
      emit LpTokensRewarded(msg.sender, rewards, totalDeposited, deposits[msg.sender].amount);
      totalLpRewards += rewards;
      amount -= rewards;
    }

    deposits[msg.sender].excludedLpRewards = rewardedLpPerDeposit;

    lpToken.transfer(msg.sender, amount);

    emit Withdrawn(msg.sender, amount);
  }

  /**
  * @dev Allows users to claim their RICE rewards.
  *      and redistributes 0.1% of their LP tokens
  *      to the rest of the farmers
  */
  function harvest() external nonReentrant {
    _harvest();
    _applyHarvestTax();
  }

  function _applyHarvestTax() internal {
    if (totalDeposited <= deposits[msg.sender].amount) return;

    uint256 rewards = deposits[msg.sender].amount * 5 / 1000;

    // Distribute the rewards among all other stakers
    rewardedLpPerDeposit += PRECISION * rewards / (totalDeposited - deposits[msg.sender].amount);
    emit LpTokensRewarded(msg.sender, rewards, totalDeposited, deposits[msg.sender].amount);
    deposits[msg.sender].excludedLpRewards = rewardedLpPerDeposit;
    deposits[msg.sender].amount -= rewards;
    totalDeposited -= rewards;
    totalLpRewards += rewards;
  }

  /**
  * @dev Allows users to claim their LP rewards.
  */
  function _harvestLP() internal {
    uint256 rewards = allocatedLpAmount(msg.sender);
    deposits[msg.sender].excludedLpRewards = rewardedLpPerDeposit;

    if (rewards > 0) {
      lpToken.transfer(msg.sender, rewards);
      emit HarvestedLP(msg.sender, rewards);
    }
  }

  /**
  * @dev Allows users to claim their RICE rewards.
  */
  function _harvest() internal {
    _harvestLP();

    uint256 rewards = allocatedAmount(msg.sender);
    rewardsPerDeposit += _currentRewardsPerDeposit();
    deposits[msg.sender].excluded = rewardsPerDeposit;
    rewardsUpdatedAt = block.timestamp;

    if (rewards > 0) {
      rice.transfer(msg.sender, rewards);
      emit Harvested(msg.sender, rewards);
    }
  }

  /**
  * @dev Returns the amount of rewarded LP tokens allocated to a user.
  * @param user The address of the user.
  */
  function allocatedLpAmount(address user) public view returns (uint256) {
    return deposits[user].amount * (rewardedLpPerDeposit - deposits[user].excludedLpRewards) / PRECISION;
  }

  /**
  * @dev Returns the amount of RICE tokens allocated to a user.
  * @param user The address of the user.
  */
  function allocatedAmount(address user) public view returns (uint256) {
    if (totalDeposited == 0) return 0;
    uint256 currentAllocation = currentAllocationPeriod() * rewardsPerSecond * deposits[user].amount / totalDeposited;
    uint256 previousAllocation = deposits[user].amount * (rewardsPerDeposit - deposits[user].excluded);

    return (previousAllocation + currentAllocation) / PRECISION;
  }

  /**
  * @dev Returns the current allocation period.
  */
  function currentAllocationPeriod() public view returns (uint256) {
    uint256 currentPeriodEnd = block.timestamp > rewardPeriodEnd ? rewardPeriodEnd : block.timestamp;
    return currentPeriodEnd - rewardsUpdatedAt;
  }

  /**
  * @dev Calculates the current rewards per deposit.
  */
  function _currentRewardsPerDeposit() private view returns (uint256) {
    if (totalDeposited == 0) return 0;
    return (currentAllocationPeriod() * rewardsPerSecond / totalDeposited);
  }
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

