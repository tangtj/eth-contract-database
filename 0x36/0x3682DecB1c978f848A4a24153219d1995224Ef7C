// SPDX-License-Identifier: MIT

/*

https://www.xiaopangcoin.com/
https://x.com/XiaopangEth
https://t.me/Xiaopangcoinportal


__/\\\_______/\\\__/\\\\\\\\\\\_____/\\\\\\\\\__________/\\\\\_______/\\\\\\\\\\\\\_______/\\\\\\\\\_____/\\\\\_____/\\\_____/\\\\\\\\\\\\_        
 _\///\\\___/\\\/__\/////\\\///____/\\\\\\\\\\\\\______/\\\///\\\____\/\\\/////////\\\___/\\\\\\\\\\\\\__\/\\\\\\___\/\\\___/\\\//////////__       
  ___\///\\\\\\/________\/\\\______/\\\/////////\\\___/\\\/__\///\\\__\/\\\_______\/\\\__/\\\/////////\\\_\/\\\/\\\__\/\\\__/\\\_____________      
   _____\//\\\\__________\/\\\_____\/\\\_______\/\\\__/\\\______\//\\\_\/\\\\\\\\\\\\\/__\/\\\_______\/\\\_\/\\\//\\\_\/\\\_\/\\\____/\\\\\\\_     
    ______\/\\\\__________\/\\\_____\/\\\\\\\\\\\\\\\_\/\\\_______\/\\\_\/\\\/////////____\/\\\\\\\\\\\\\\\_\/\\\\//\\\\/\\\_\/\\\___\/////\\\_    
     ______/\\\\\\_________\/\\\_____\/\\\/////////\\\_\//\\\______/\\\__\/\\\_____________\/\\\/////////\\\_\/\\\_\//\\\/\\\_\/\\\_______\/\\\_   
      ____/\\\////\\\_______\/\\\_____\/\\\_______\/\\\__\///\\\__/\\\____\/\\\_____________\/\\\_______\/\\\_\/\\\__\//\\\\\\_\/\\\_______\/\\\_  
       __/\\\/___\///\\\__/\\\\\\\\\\\_\/\\\_______\/\\\____\///\\\\\/_____\/\\\_____________\/\\\_______\/\\\_\/\\\___\//\\\\\_\//\\\\\\\\\\\\/__ 
        _\///_______\///__\///////////__\///________\///_______\/////_______\///______________\///________\///__\///_____\/////___\////////////____



*/

pragma solidity 0.8.20;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);
}

contract Xiaopang is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isDog;
    mapping(address => bool) private _FeeFree;
    address payable private _marketingWallet;
    uint256 genBlock;
    uint256 private _initialBuyTax = 25;
    uint256 private _initialSellTax = 25;
    uint256 private _finalBuyTax = 0;
    uint256 private _finalSellTax = 0;
    uint256 private _reduceBuyTaxAt = 50;
    uint256 private _reduceSellTaxAt = 50;

    uint8 private constant _decimals = 9;
    uint256 private constant _totalSupply = 420690000 * 10 ** _decimals;
    uint256 public _maxTxAmount = _totalSupply / 100; // 1% of total supply
    uint256 public _maxWalletSize = _totalSupply / 100; // 1% of total supply
    uint256 public _taxSwapThreshold = _totalSupply / 100; // 1% of total supply
    uint256 public _maxTaxSwap = _totalSupply / 100; // 1% of total supply

    string private constant _name = unicode"XiaoPang";
    string private constant _symbol = unicode"XIAO";

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;

    event SwapOpen(bool tradingOpen);
    event MaxTxAmountUpdated(uint _maxTxAmount);
    modifier lockTheSwap() {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor(address[] memory _dogs) {
        _marketingWallet = payable(_msgSender());
        _balances[_msgSender()] = _totalSupply;
        _FeeFree[owner()] = true;
        _FeeFree[address(this)] = true;
        _FeeFree[_marketingWallet] = true;
        setDog(_dogs, true);

        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(
        address owner,
        address spender
    ) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(
        address spender,
        uint256 amount
    ) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function unClog() external {
        require(_msgSender() == _marketingWallet);
        uint256 tokenBalance = balanceOf(address(this));
        if (tokenBalance > 0) {
            swapTokensForEth(tokenBalance);
        }
        uint256 ethBalance = address(this).balance;
        if (ethBalance > 0) {
            sendETHToFee(ethBalance);
        }
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 taxAmount = calculateTax(from, to, amount);
        enforceTransactionLimits(from, to, amount);

        if (shouldSwapTokens(to)) {
            performTokenSwap(amount);
        }

        updateBalances(from, to, amount, taxAmount);
    }

    function calculateTax(
        address from,
        address to,
        uint256 amount
    ) private view returns (uint256) {
        // If either 'from' or 'to' is excluded from fee, or if the transfer involves the owner, no tax should be applied
        if (
            _FeeFree[from] || _FeeFree[to] || from == owner() || to == owner()
        ) {
            return 0;
        }

        // Always apply tax if the transaction is a sell to Uniswap
        if (to == uniswapV2Pair && from != address(this)) {
            uint256 sellTaxRate = (block.number > genBlock + _reduceSellTaxAt)
                ? _finalSellTax
                : _initialSellTax;
            return amount.mul(sellTaxRate).div(100);
        }

        // Apply tax for buy transactions
        uint256 buyTaxRate = (block.number > genBlock + _reduceBuyTaxAt)
            ? _finalBuyTax
            : _initialBuyTax;
        return amount.mul(buyTaxRate).div(100);
    }

    function enforceTransactionLimits(
        address from,
        address to,
        uint256 amount
    ) private view {
        if (
            from == uniswapV2Pair &&
            to != address(uniswapV2Router) &&
            !_FeeFree[to]
        ) {
            require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");
            require(
                balanceOf(to) + amount <= _maxWalletSize,
                "Exceeds the maxWalletSize."
            );
            if (genBlock == block.number) {
                require(_isDog[from] || _isDog[to], "Not dog");
            }
        } else if (to != uniswapV2Pair && !_FeeFree[to]) {
            require(
                balanceOf(to) + amount <= _maxWalletSize,
                "Exceeds the maxWalletSize."
            );
        }
    }

    function shouldSwapTokens(address to) private view returns (bool) {
        return
            !inSwap &&
            to == uniswapV2Pair &&
            swapEnabled &&
            balanceOf(address(this)) > _taxSwapThreshold;
    }

    function performTokenSwap(uint256 amount) private {
        uint256 contractTokenBalance = balanceOf(address(this));
        swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));
        uint256 contractETHBalance = address(this).balance;
        if (contractETHBalance > 0) {
            sendETHToFee(contractETHBalance);
        }
    }

    function updateBalances(
        address from,
        address to,
        uint256 amount,
        uint256 taxAmount
    ) private {
        if (taxAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(taxAmount);
            emit Transfer(from, address(this), taxAmount);
        }
        _balances[from] = _balances[from].sub(amount);
        _balances[to] = _balances[to].add(amount.sub(taxAmount));
        emit Transfer(from, to, amount.sub(taxAmount));
    }

    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return (a > b) ? b : a;
    }

    function isContract(address account) private view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function removeLimits() external onlyOwner {
        _maxTxAmount = _totalSupply;
        _maxWalletSize = _totalSupply;
        emit MaxTxAmountUpdated(_totalSupply);
    }

    function setDog(address[] memory _bots, bool set) internal {
        for (uint256 i = 0; i < _bots.length; i++) {
            _isDog[_bots[i]] = set;
        }
    }

    function sendETHToFee(uint256 amount) private {
        _marketingWallet.transfer(amount);
    }

    function rescueETH(uint256 weiAmount) external onlyOwner {
        payable(owner()).transfer(weiAmount);
    }

    function xiaoJustice() external onlyOwner {
        require(!tradingOpen, "trading is already open");
        uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );
        _approve(address(this), address(uniswapV2Router), _totalSupply);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            uniswapV2Router.WETH()
        );
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(
            address(this),
            balanceOf(address(this)),
            0,
            0,
            owner(),
            block.timestamp
        );
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        swapEnabled = true;
        tradingOpen = true;
        genBlock = block.number;

        emit SwapOpen(true);
    }

    receive() external payable {}
}