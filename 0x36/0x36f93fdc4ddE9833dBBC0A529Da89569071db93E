
// File: AIGOLD presale.sol
///SPDX-License-Identifier: MIT
pragma solidity 0.8.21;
import {SafeERC20} from "@openzeppelin/contracts@5.0.0/token/ERC20/utils/SafeERC20.sol";
import {IERC20} from "@openzeppelin/contracts@5.0.0/interfaces/IERC20.sol";
import {Ownable} from "@openzeppelin/contracts@5.0.0/access/Ownable.sol";
import {Ownable2Step} from "@openzeppelin/contracts@5.0.0/access/Ownable2Step.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts@5.0.0/utils/ReentrancyGuard.sol";
import {AggregatorV3Interface} from "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract AiGoldPresale is Ownable2Step, ReentrancyGuard {
    using SafeERC20 for IERC20;

    ///Custom errors
    error ZeroAmountNotAllowed();
    error ZeroAddressNotAllowed();
    error InvalidRound();
    error ClaimsAreNotAvailableYet();
    error TokenClaimFailed();
    error CannotClaimNativeTokens();
    error MaxWalletCapReached();
    error AmountExceedsAvailableTokens();
    error USDPaymentFailed();
    error ETHTransferFailed();
    error MinimumAmountIs10USD();
    error PresaleRoundIsAlreadyOver();
    error AlreadyClaimed();
    error ClaimsAreEnabledAlready();
    error CannotSetDateInPast();
    error CannotSetThePastRoundPrice();
    error PresaleIsPaused();
    error AmountMustBeLessThanAvailableTokens();
    error PresaleIsOver();
    error ETHRefundFailed();
    error ValuesAlreadyExists();
    error PriceCantNotBeZero();
    error UpdateBoolValue();
    error AlreadyAMultiSigWallet();

    ////struct for Round details
    struct Round {
        uint256 currentPrice;
        uint256 nextPrice;
        uint256 totalTokens;
        uint256 totalSold;
        uint256 startTime;
        uint256 endTime;
    }

    /// struct for user information
    struct User {
        uint256 totalUSDContributed;
        uint256 totalTokensBought;
        uint256 totalTokensClaimed;
    }
    //// CONSTANTS ////

    /// @notice token decimals
    uint256 private constant TOKEN_DECIMALS = 9;
    /// @notice usdt decimals
    uint256 private constant USDT_DECIMALS = 6;
    /// @notice base decimals (wei)
    uint256 private constant BASE_DECIMALS = 18;
    /// @notice max wallet limit for user, how much tokens a user can buy
    uint256 private constant MAX_WALLET_CAP = 30_000_000 * 10 ** TOKEN_DECIMALS;
    /// @notice no. of tokens in each round
    uint256 private constant tokensPerRound = 112_500_000 * 10 ** TOKEN_DECIMALS;
    /// @notice total no. of rounds
    uint256 private constant totalRounds = 12;

    /// @notice token that will be accepted in presale with eth
    IERC20 public immutable USDT;
    /// @notice chainlink price feed
    AggregatorV3Interface private immutable priceFeed;

    /// @notice multisig, where all funds will be stored
    address public multiSig;
    /// @notice token for sale
    IERC20 public token;

    /// @notice total tokens for sale
    uint256 public totalTokensForSale = tokensPerRound * totalRounds;
    /// @notice total usdt raised
    uint256 public totalUSDRaised;
    /// @notice total tokens sold
    uint256 public totalTokensSold;
    /// @notice current round
    uint256 public currentRound = 1;
    /// @notice claim enabled status
    bool private claimEnabled = false;
    /// @notice presale status if paused or not 
    bool private paused = false;

    /// @notice mapping for user info
    mapping(address => User) public users;
    /// @notice mapping for rounds info
    mapping(uint256 => Round) public rounds;

    //// Events
    event TokensClaimed(address indexed user, uint256 indexed amount);
    event TokensBought(address indexed user, uint256 indexed usd);
    event ClaimEnabled (bool indexed value);
    event PresalePaused (bool indexed value);
    event PriceUpdated (uint256 indexed currentRoundPrice, uint256 indexed nextRoundPrice);
    event PresaleDateUpdated (uint256 indexed newEndTime);
    event MultiSigUpdated(address indexed newMultiSig);
    event NextRoundStarted(uint256 indexed round);

    /// @dev create a presale contract using openzeppelin ownable2Step, ReentrancyGuard and
    /// using safeERC20, chainlink aggregator interface. Initilizing the token, usdt and price feed values
    /// along with multisig and starting first round.
    constructor() Ownable(msg.sender) {
        USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);
        priceFeed = AggregatorV3Interface(
            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419
        );
        
        multiSig = 0x6cAaD4f38661a9fC783758CAAf0b1e8713e68E8B; 
        switchRound(1);
    }

    //// modifier which checks if round is valid and user is buying
    /// within valid time (that's within round start and end date)
    modifier validRoundCheck() {
        if (paused) {
            revert PresaleIsPaused();
        }
        if ( currentRound > 12) {
            revert InvalidRound();
        }
        Round storage liveRound = rounds[currentRound];
        uint256 availableTokens = liveRound.totalTokens - liveRound.totalSold;
        if (availableTokens == 0 && currentRound == 12) {
            revert PresaleIsOver();
        }
        if (
             block.timestamp > liveRound.endTime
        ) {
            revert PresaleRoundIsAlreadyOver();
        }

        _;
    }

    /// internal function to switch to next round
    /// @param _round: round to switch
    function switchRound(uint256 _round) internal {
        if ( _round > 12) {
            revert InvalidRound();
        }
        if (_round == 1) {
            Round storage round = rounds[_round];
            round.currentPrice = 3500;
            round.nextPrice = 4500;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;

        } else if (_round == 2) {
            Round storage round = rounds[_round];
            round.currentPrice = 4500;
            round.nextPrice = 5500;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;

        } else if (_round == 3) {
            Round storage round = rounds[_round];
            round.currentPrice = 5500;
            round.nextPrice = 7500;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;

        } else if (_round == 4) {
            Round storage round = rounds[_round];
            round.currentPrice = 7500;
            round.nextPrice = 10000;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;

        } else if (_round == 5) {
            Round storage round = rounds[_round];
            round.currentPrice = 10000;
            round.nextPrice = 12500;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;

        } else if (_round == 6) {
            Round storage round = rounds[_round];
            round.currentPrice = 12500;
            round.nextPrice = 15000;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;

        } else if (_round == 7) {
            Round storage round = rounds[_round];
            round.currentPrice = 15000;
            round.nextPrice = 17500;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;
        
        } else if (_round == 8) {
            Round storage round = rounds[_round];
            round.currentPrice = 17500;
            round.nextPrice = 20000;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;
            
        } else if (_round == 9) {
            Round storage round = rounds[_round];
            round.currentPrice = 20000;
            round.nextPrice = 22500;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;
            
        } else if (_round == 10) {
            Round storage round = rounds[_round];
            round.currentPrice = 22500;
            round.nextPrice = 25000;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;
            
        }

        else if (_round == 11) {
            Round storage round = rounds[_round];
            round.currentPrice = 25000;
            round.nextPrice = 30000;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;
            
        } else {
            Round storage round = rounds[_round];
            round.currentPrice = 30000;
            round.nextPrice = 35000;
            round.totalTokens = tokensPerRound;
            round.totalSold = 0;
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 14 days;
            
        }
    }

    /// users can buy tokens using usdt
    /// @param _usdAmount: usd amount user want to spend to buy tokens
    function buyWithUSDT(
        uint256 _usdAmount
    ) external validRoundCheck nonReentrant {
        buyTokens(_usdAmount, true);
    }

    /// @dev buys tokens using ether
    /// users can buy tokens by inputting the ether amount.
    function buyWithETH() external payable validRoundCheck nonReentrant {
        uint256 _usdAmount = ethUSDHelper(msg.value);
        buyTokens(_usdAmount, false);
    }

    /// @notice users can claim tokens, as soon as claims are enabled
    function claim() external nonReentrant {
        if (!claimEnabled) {
            revert ClaimsAreNotAvailableYet();
        }
        User storage user = users[msg.sender];
        if (user.totalTokensClaimed > 0) {
            revert AlreadyClaimed();
        }
        uint256 availableToClaim = user.totalTokensBought;
        user.totalTokensClaimed = availableToClaim;

        uint256 balanceBefore = token.balanceOf(msg.sender);
        token.safeTransfer(msg.sender, availableToClaim);
        uint256 balanceAfter = token.balanceOf(msg.sender);

        if (balanceAfter - balanceBefore != availableToClaim) {
            revert TokenClaimFailed();
        }
        emit TokensClaimed(msg.sender, availableToClaim);
    }

    /// @dev manage token buy for eth, usd
    ///Requirements -
    /// Minimum amount is 10 usd
    /// user can buy within duration of sale
    /// if user USD amount is more than worth existing round tokens, it will
    /// calculate the remaining usd for next round price.
    /// Example - if token price for round 1 is 0.01 usd and 100 tokens are left.
    /// now user input 100 usd, so he will get 100 tokens at the rate of 0.01 usd (1 usd)
    /// For remaing 99 usd, he will get price of round 2. (which can be say 0.015 usd per token)
    /// In case it's round 12, then extra amount is refunded. If he is buying using usdt, then
    /// only required amount is deducted. In case of eth, any extra supplied eth is sent back to
    /// user within same tx
    /// user can max buy upto maxWalletLimit.
    function buyTokens(uint256 _usdAmount, bool value) private {
        if (_usdAmount < 10e6) {
            revert MinimumAmountIs10USD();
        }
        
        User storage user = users[msg.sender];
        Round storage round = rounds[currentRound];
        uint256 availableTokens = round.totalTokens - round.totalSold;
        uint256 outputTokens = getTokenAmount(_usdAmount);

        if (availableTokens >= outputTokens) {
            round.totalSold = round.totalSold + outputTokens;
        } else {
            round.totalSold = round.totalSold + availableTokens;
        }

        if (outputTokens > availableTokens && currentRound < 12) {
            /// cache round price from prev round
            uint256 currentRoundPrice = round.nextPrice;
            currentRound = currentRound + 1;
            switchRound(currentRound);
            Round storage roundNext = rounds[currentRound];
            roundNext.totalSold =
                roundNext.totalSold +
                (outputTokens - availableTokens);
            /// if price is updated in prev round for this round,
            /// should reflect here as well    
            if(roundNext.currentPrice != currentRoundPrice){
                roundNext.currentPrice = currentRoundPrice;
            }    
        }

        
        uint256 extraUsd = 0;
        if (currentRound == 12 && outputTokens > availableTokens) {
           uint256 usdRequired =
                (availableTokens * round.currentPrice) /
                10 ** TOKEN_DECIMALS;
            /// When user input is say 100 usd, but tokens available are worth 
            /// 80 usd only, then only 80 usd is deducted by the presale contract
            /// 20 stays in his wallet    
            /// When he pays in eth, then as he is sending msg.value worth 100 usd,
            /// so 20 usd worth is returned to user within same tx.
            if (usdRequired > 0) {
                 extraUsd = _usdAmount - usdRequired;
                _usdAmount = usdRequired; /// only deduct required usd amount
                outputTokens = availableTokens;
            }
        }
       
        if (user.totalTokensBought + outputTokens > MAX_WALLET_CAP) {
            revert MaxWalletCapReached();
        }
         
        if (value) {
            uint256 multiSigBalanceBefore = USDT.balanceOf(multiSig);
            USDT.safeTransferFrom(msg.sender, multiSig, _usdAmount);
            uint256 multiSigBalanceAfter = USDT.balanceOf(multiSig);

            if (multiSigBalanceAfter <= multiSigBalanceBefore) {
                revert USDPaymentFailed();
            }
        } else  {
            uint256 refund = 0;
            uint256 ethRequired = msg.value;
            if (extraUsd > 0) {
                uint256 oneETH = getLatestPrice();
                uint256 priceFeedDecimals = priceFeed.decimals();
                ///using multiplier to keep eth calculation upto 18 decimals (wei)
                uint256 multiplier = BASE_DECIMALS + priceFeedDecimals - USDT_DECIMALS;
                ethRequired = (_usdAmount * 10 ** multiplier) / oneETH;
                refund  = msg.value - ethRequired;
            }
             
             /// send required eth to multisig
            (bool success, ) = payable(multiSig).call{value: ethRequired}("");
            if (!success) {
                revert ETHTransferFailed();
            }
            /// if user has refund, sent that back to user
            if (refund > 0) {
                (bool sent, ) = payable(msg.sender).call{value: refund}("");
                if (!sent) {
                    revert ETHRefundFailed();
                }
            }
        }

        user.totalUSDContributed = user.totalUSDContributed + _usdAmount;
        user.totalTokensBought = user.totalTokensBought + outputTokens;

        totalTokensSold = totalTokensSold + outputTokens;
        totalUSDRaised = totalUSDRaised + _usdAmount;
        emit TokensBought(msg.sender, _usdAmount);
    }

    /// @dev enables claims globally, once enabled user can claim there tokens
    /// make sure the contract has enough tokens in it
    function enableClaims() external onlyOwner {
        if (claimEnabled) {
            revert ClaimsAreEnabledAlready();
        }
        
        claimEnabled = true;
        emit ClaimEnabled(true);
    }

    /// @dev update the current round end date
    /// @param endDate: unixTimestamp for new end date for current round
    function setEndDateForCurrentRound(uint256 endDate) external onlyOwner {
        Round storage round = rounds[currentRound];
        if (endDate < block.timestamp) {
            revert CannotSetDateInPast();
        }
        round.endTime = endDate;
        emit PresaleDateUpdated(endDate);
    }

    /// @dev update the price of token for current round
    /// @param _newPrice: price in wei format (usd has 6 decimals only so set
    /// @param _nextPrice; token price in wei format for next round than input
    ///                  accordingly.
    ///                  eg. 100 - 0.0001 usd
    ///                      1000 - 0.001 usd, 10000 - 0.01 usd
    function setPrice(
        uint256 _newPrice,
        uint256 _nextPrice
    ) external onlyOwner {
        if(_newPrice == 0 || _nextPrice == 0){
            revert PriceCantNotBeZero();
        }

        Round storage round = rounds[currentRound];
        
        /// one of value can stay same if owner want to update only one value 
        if(_newPrice == round.currentPrice && _nextPrice == round.nextPrice){
            revert ValuesAlreadyExists();
        }
        round.currentPrice = _newPrice;
        round.nextPrice = _nextPrice;

        emit PriceUpdated(_newPrice, _nextPrice);
    }

    /// @dev set the sale token address
    /// @param _token: address of sale token
    function setToken(address _token) external onlyOwner {
        if (_token == address(0)) {
            revert ZeroAddressNotAllowed();
        }
        token = IERC20(_token);
    }

    /// @dev update multisig/payment wallet address
    /// @param _multisig: new wallet address
    function updateMultiSigWallet (address _multisig) external onlyOwner {
        if(_multisig == address(0)){
            revert ZeroAddressNotAllowed();
        }
        if(_multisig == multiSig){
            revert AlreadyAMultiSigWallet();
        }
        multiSig = _multisig;
        emit MultiSigUpdated (_multisig);
    }

    /// @dev claim other erc20 tokens
    function claimOtherERC20(
        address othertkn,
        uint256 amount
    ) external onlyOwner {
        if (othertkn == address(token)) {
            revert CannotClaimNativeTokens();
        }
        IERC20 otherToken = IERC20(othertkn);
        otherToken.safeTransfer(owner(), amount);
    }

    /// @dev switch to next round
    /// Requirements -
    /// can't switch if it's already a last round
    function switchToNextRound() external onlyOwner {
        currentRound = currentRound + 1;
        switchRound(currentRound);
        emit NextRoundStarted (currentRound);
    }

    /// @dev claim ether if any
    function claimEther() external onlyOwner {
        (bool success, ) = payable(owner()).call{value: address(this).balance}("");
        if (!success) {
            revert ETHTransferFailed();
        }
    }

    /// @dev pause/unpause presale
    function togglePauseUnpause() external onlyOwner {
        paused = !paused;
        emit PresalePaused(paused);
    }


    /// @dev add tokens to current sale round
    /// @param amount: token amount to add
    function addTokensToSale(uint256 amount) external onlyOwner {
        Round storage round = rounds[currentRound];
        round.totalTokens = round.totalTokens + amount;
        totalTokensForSale = totalTokensForSale + amount;
    }

    /// @dev remove tokens to current sale round
    /// @param amount: token amount to remove
    function removeTokensFromSale(uint256 amount) external onlyOwner {
        Round storage round = rounds[currentRound];
        if (amount > round.totalTokens - round.totalSold) {
            revert AmountMustBeLessThanAvailableTokens();
        }
        round.totalTokens = round.totalTokens - amount;
        totalTokensForSale = totalTokensForSale - amount;
    }


    /////// Getters ////////

    /// @notice returns tokens for given usd amount
    /// @param _usdAmount: usdt amount
    /// @return tokensOutput : returns the tokens amount
    function getTokenAmount(
        uint256 _usdAmount
    ) public view returns (uint256 tokensOutput) {
        Round storage round = rounds[currentRound];
        uint256 totalAvailableTokens = round.totalTokens - round.totalSold;
        uint256 tokensAtCurrentPrice = (_usdAmount * 10 ** TOKEN_DECIMALS) /
            round.currentPrice;

        if (totalAvailableTokens >= tokensAtCurrentPrice) {
            return tokensAtCurrentPrice;
        } else if (
            totalAvailableTokens < tokensAtCurrentPrice
        ) {
            uint256 usdUsed = (totalAvailableTokens * round.currentPrice) /
                10 ** TOKEN_DECIMALS;
            uint256 usdLeft = _usdAmount - usdUsed;
            uint256 tokensFromNewRound;
            if(currentRound < 12){
                tokensFromNewRound = (usdLeft * 10 ** TOKEN_DECIMALS) /
                round.nextPrice;
            } else {
                tokensFromNewRound = (usdLeft * 10 ** TOKEN_DECIMALS) /
                round.currentPrice;
                }
            return tokensFromNewRound + totalAvailableTokens;
        } 
    }

    /// @dev Helper funtion to get USDT price for given amount of eth
    /// @param amount No of tokens to buy
    /// @return usdAmount for given input eth
    function ethUSDHelper(
        uint256 amount
    ) public view returns (uint256 usdAmount) {
        /// chainlink oracle return price upto 8 decimals
        uint256 perEthPrice = getLatestPrice(); 
        /// as per chainlink docs, for non-eth pair(x/usd), oracles return values
        /// upto 8 decimals. For eth pairs(x/eth) it return upto 18 decimals.
        /// here, it's 8 decimals
        uint256 priceFeedDecimals = priceFeed.decimals();
        /// calculate difference b/w base decimals and usdt decimals
        uint256 divisor  = BASE_DECIMALS + priceFeedDecimals - USDT_DECIMALS;
        /// return usd amount upto 6 decimals
        usdAmount = (perEthPrice * amount) / 10 ** divisor;
    
    }

    /// @return Latest ETH price in usd
    function getLatestPrice() public view returns (uint256) {
        (, int256 price, , , ) = priceFeed.latestRoundData();
        return uint256(price);
    }


    /// @return  hardcap of current round in usd
    function getHardcapCurrentRound() public view returns (uint256 hardcap) {
        uint256 totalTokens = rounds[currentRound].totalTokens;
        uint256 currentPrice = rounds[currentRound].currentPrice;
        hardcap = (totalTokens * currentPrice) / 10 ** TOKEN_DECIMALS;
       
    }

    /// @return raised amount of usd for current round
    function getRaisedAmountCurrentRound()
        public
        view
        returns (uint256 raised)
    {
        uint256 totalSold = rounds[currentRound].totalSold;
        uint256 currentPrice = rounds[currentRound].currentPrice;
        raised = (totalSold * currentPrice) / 10 ** TOKEN_DECIMALS;
    }

    /// @return endDate of current round
    function getEndDateOfCurrentRound() public view returns (uint256 endDate) {
        return rounds[currentRound].endTime;

    }

    /// @return claim status if enabled or not
    function getClaimStatus() public view returns (bool) {
        return claimEnabled;
    }

    /// @return if presale is paused or not
    function presalePausedStatus() public view returns (bool) {
        return paused;
    }
}

// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(
    uint80 _roundId
  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);

  function latestRoundData()
    external
    view
    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}


// File: @openzeppelin/contracts@5.0.0/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: @openzeppelin/contracts@5.0.0/access/Ownable2Step.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)

pragma solidity ^0.8.20;

import {Ownable} from "./Ownable.sol";

/**
 * @dev Contract module which provides access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is specified at deployment time in the constructor for `Ownable`. This
 * can later be changed with {transferOwnership} and {acceptOwnership}.
 *
 * This module is used through inheritance. It will make available all functions
 * from parent (Ownable).
 */
abstract contract Ownable2Step is Ownable {
    address private _pendingOwner;

    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Returns the address of the pending owner.
     */
    function pendingOwner() public view virtual returns (address) {
        return _pendingOwner;
    }

    /**
     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual override onlyOwner {
        _pendingOwner = newOwner;
        emit OwnershipTransferStarted(owner(), newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual override {
        delete _pendingOwner;
        super._transferOwnership(newOwner);
    }

    /**
     * @dev The new owner accepts the ownership transfer.
     */
    function acceptOwnership() public virtual {
        address sender = _msgSender();
        if (pendingOwner() != sender) {
            revert OwnableUnauthorizedAccount(sender);
        }
        _transferOwnership(sender);
    }
}


// File: @openzeppelin/contracts@5.0.0/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts@5.0.0/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../token/ERC20/IERC20.sol";


// File: @openzeppelin/contracts@5.0.0/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts@5.0.0/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts@5.0.0/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts@5.0.0/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts@5.0.0/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

