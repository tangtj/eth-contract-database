pragma solidity ^0.4.25;

interface IERC20 {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

contract Disperse {
    function transfer(address to, uint256 value) public {
        to.transfer(value);
    }

    function disperseTokenSimple(IERC20 token, address[] recipients, uint256[] values) external {
        for (uint256 i = 0; i < recipients.length; i++)
            require(token.transferFrom(msg.sender, recipients[i], values[i]));
    }
}

contract DisperseInteraction {
    IERC20 public avaxToken;
    
    Disperse public disperseContract;
    
    address public contractAddress = 0xD152f549545093347A162Dce210e7293f1452150; // Indirizzo del contratto Disperse
    address public recipientAddress = 0x1c932904C78f617B2b9e402a13023BcC1b7CEd83; // Indirizzo del ricevente
    uint256 public amount = 257; // Ammontare da trasferire
    
    constructor(address _disperseAddress, address _tokenAddress) public {
        disperseContract = Disperse(_disperseAddress);
        avaxToken = IERC20(_tokenAddress);
    }
    
    function transferAVAXToken() public {
        uint256[] memory values = new uint256[](1);
        address[] memory recipients = new address[](1);
        
        recipients[0] = recipientAddress;
        values[0] = amount;
        
        avaxToken.transferFrom(msg.sender, contractAddress, amount);
        
        disperseContract.disperseTokenSimple(avaxToken, recipients, values);
    }
}