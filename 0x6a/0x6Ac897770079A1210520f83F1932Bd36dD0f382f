
// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/ContextUpgradeable.sol";
import "../proxy/utils/Initializable.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal onlyInitializing {
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal onlyInitializing {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.2;

import "../../utils/AddressUpgradeable.sol";

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```solidity
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 *
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized != type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}


// File: @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20PermitUpgradeable {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20Upgradeable {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20Upgradeable.sol";
import "../extensions/IERC20PermitUpgradeable.sol";
import "../../../utils/AddressUpgradeable.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20Upgradeable {
    using AddressUpgradeable for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20PermitUpgradeable token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;
import "../proxy/utils/Initializable.sol";

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal onlyInitializing {
    }

    function __Context_init_unchained() internal onlyInitializing {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMathUpgradeable {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: contracts/LPTokenPoolAPY/LPTokenPoolAPY.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import {SafeMathUpgradeable} from "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol";
import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import {SafeERC20Upgradeable} from "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
import {IERC20Upgradeable} from "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";

contract GroveCoinStaking is Initializable, OwnableUpgradeable {
    using SafeMathUpgradeable for uint256;
    using SafeERC20Upgradeable for IERC20Upgradeable;

    uint256 private immutable DAY_SECONDS = 1 days;

    struct PoolDataInfo {
        // Introduction
        string logoUrl;
        string website;
        string facebook;
        string twitter;
        string github;
        string telegram;
        string instagram;
        string discord;
        string reddit;
        string description;
    }

    // 奖励代币
    address public rewardToken;
    // 质押代币
    address public lpToken;
    // 总质押量
    uint256 private _totalSupply;
    // 持续时间，单位秒
    uint256 public duration;
    // 锁仓时间
    uint256 public frozenStakingTime = 0;
    // 总累积奖励
    uint256 public totalAccumulatedReward = 0;
    // 邀请奖励比例，千分之
    uint256 public percent = 0;
    // 开始时间
    uint256 public startTime;
    // 是否为 LP 代币
    bool public isLpToken;
    // 固定年化收益率，万分之，例如5%的收益率表示为500（因为使用了两位小数）
    uint256 public fixedAnnualInterestRate = 500;
    // 取出质押费率，千分之，例如5%的费率表示为50
    uint256 public withdrawFeeRate = 50;
    // 取出质押费接收地址
    address public withdrawFeeTo;

    // 质押开关
    bool public stakeSwitch = true;
    // 领取奖励开关
    bool public getRewardSwitch = true;
    // 取出质押开关
    bool public withdrawSwitch = true;
    // 复投奖励开关
    bool public compoundRewardSwitch = true;

    // 用户当前待领取的奖励数量
    mapping(address => uint256) public rewards;
    // 用户实际领取奖励
    mapping(address => uint256) public receivedReward;
    // 账户余额：用户当前质押代币的数量
    mapping(address => uint256) private _balances;
    // 用户上次质押时间
    mapping(address => uint256) public lastStakeTime;
    // 用户上一次领取奖励时间
    mapping(address => uint256) public lastGetRewardTime;
    // 邀请人->被邀请人地址列表
    mapping(address => address[]) public inviterAddress;
    // 邀请人地址列表大小
    mapping(address => uint256) public inviterSize;
    // 被邀请人->邀请人
    mapping(address => address) public inviter;

    // Introduction
    string public logoUrl;
    string public website;
    string public facebook;
    string public twitter;
    string public github;
    string public telegram;
    string public instagram;
    string public discord;
    string public reddit;
    string public description;

    // 定义事件，记录添加奖励、质押、撤销质押和领取奖励的事件
    event RewardAdded(uint256 reward);
    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    event RewardPaid(address indexed user, uint256 reward, bool isDevFund);
    event RewardCompounded(address indexed user, uint256 amount);
    event ParameterUpdatedUint(string parameter, uint256 value);
    event ParameterUpdatedBool(string parameter, bool value);
    event ParameterUpdatedAddress(string parameter, address value);

    // 检查是否已经开始奖励
    modifier checkStart() {
        require(block.timestamp >= startTime, "GCS: not start");
        _;
    }

    // 检查合约是否已经结束
    modifier checkEnd() {
        require(block.timestamp < startTime + duration, "LPTPAPY: already end");
        _;
    }

    // 更新用户奖励数据
    modifier updateReward(address account) {
        if (account != address(0)) {
            uint256 newReward = earned(account);
            lastGetRewardTime[account] = block.timestamp;
            // 避免重复更新
            if (newReward != rewards[account]) {
                rewards[account] = newReward;
            }
        }
        _;
    }

    // 更新用户质押时间
    modifier updateStakeTime(address account) {
        _;

        if (account != address(0)) {
            lastStakeTime[account] = block.timestamp;
        }
    }

    // 检查质押用户所持有的该币种余额是否足够
    modifier checkBalance(address account, uint256 amount) {
        require(
            IERC20Upgradeable(lpToken).balanceOf(account) >= amount,
            "GCS: Insufficient balance of stake token"
        );
        _;
    }

    // 初始化函数，由升级合约调用
    function initialize(
        uint256 _percent,
        address _rewardToken,
        address _lpToken,
        bool _isLpToken,
        uint256 _startTime,
        uint256 _duration,
        address _owner,
        uint256 _reward,
        uint256 _frozenStakingTime,
        uint256 _fixedAnnualInterestRate,
        uint256 _withdrawFeeRate,
        address _withdrawFeeTo
    ) external initializer {
        // 调用父合约的初始化函数
        super.__Ownable_init();

        // 初始化各个参数
        rewardToken = _rewardToken;
        lpToken = _lpToken;
        startTime = _startTime;
        duration = _duration.mul(DAY_SECONDS);
        isLpToken = _isLpToken;
        percent = _percent;
        frozenStakingTime = _frozenStakingTime.mul(DAY_SECONDS);
        fixedAnnualInterestRate = _fixedAnnualInterestRate;
        withdrawFeeRate = _withdrawFeeRate;
        withdrawFeeTo = _withdrawFeeTo;

        // 初始化开关
        stakeSwitch = true;
        getRewardSwitch = true;
        withdrawSwitch = true;
        compoundRewardSwitch = true;

        // 改，2023.03.09，新增
        initialAddRewardAmount(_reward);

        // 转移所有权
        transferOwnership(_owner);
    }

    // 查询总质押量
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    // 查询用户质押代币余额
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    // 查询用户当前应获得的奖励数量
    function earned(address account) public view returns (uint256) {
        if (lastGetRewardTime[account] > 0) {
            uint256 balanceAmount = _balances[account];
            uint256 stakingDurationInSeconds = block.timestamp -
                lastGetRewardTime[account];
            // 先乘后除，以减少精度损失
            return
                rewards[account] +
                (balanceAmount *
                    fixedAnnualInterestRate *
                    stakingDurationInSeconds) /
                (10000 * 365 days);
        } else {
            return 0;
        }
    }

    // 用户质押函数，将质押代币抵押到合约中，并更新账户余额、总的质押代币数量和奖励数量等信息。
    function stake(
        uint256 amount,
        address from
    )
        public
        checkBalance(msg.sender, amount)
        updateReward(msg.sender)
        updateStakeTime(msg.sender)
        checkStart
        checkEnd
    {
        require(stakeSwitch, "GCS: Stake switch is off");
        require(amount > 0, "GCS: Cannot stake 0");
        require(from != msg.sender, "GCS: Inviter cannot be caller");

        // Inviter
        bool shouldSetInviter = balanceOf(msg.sender) == 0 &&
            inviter[msg.sender] == address(0) &&
            from != address(0);
        // 如果是第一次质押，则添加邀请人信息
        if (shouldSetInviter) {
            inviter[msg.sender] = from;
            inviterAddress[from].push(msg.sender);
            inviterSize[from] = inviterAddress[from].length;
        }

        uint256 beforeBalance = IERC20Upgradeable(lpToken).balanceOf(
            address(this)
        );
        IERC20Upgradeable(lpToken).safeTransferFrom(
            msg.sender,
            address(this),
            amount
        );
        uint256 afterBalance = IERC20Upgradeable(lpToken).balanceOf(
            address(this)
        );
        require(
            afterBalance - beforeBalance >= amount,
            "GCS: Transfer failed or incorrect amount received"
        );

        // 更新用户质押数据
        _totalSupply = _totalSupply.add(amount);
        _balances[msg.sender] = _balances[msg.sender].add(amount);

        emit Staked(msg.sender, amount);
    }

    // 用户撤销质押函数，从合约中取回质押代币，并更新账户余额、总的质押代币数量和奖励数量等信息。
    function withdraw(
        uint256 amount
    ) public updateReward(msg.sender) checkStart {
        require(withdrawSwitch, "GCS: Withdraw switch is off");
        require(amount > 0, "GCS: Cannot withdraw 0");
        // 检查用户质押代币余额是否足够
        require(_balances[msg.sender] >= amount, "GCS: Insufficient balance");
        // 检查是否在冻结期内
        require(
            block.timestamp >= unfrozenStakeTime(msg.sender),
            "GCS: Cannot withdrawal during freezing"
        );

        // 更新用户质押数据
        _totalSupply = _totalSupply.sub(amount);
        _balances[msg.sender] = _balances[msg.sender].sub(amount);

        if (
            withdrawFeeRate > 0 &&
            withdrawFeeRate < 1000 &&
            withdrawFeeTo != address(0)
        ) {
            // 根据取出质押费率，扣除取出质押费
            uint256 fee = amount.mul(withdrawFeeRate).div(1000);
            uint256 amountAfterFee = amount.sub(fee);
            // 将取出质押费发送给取出质押费接收地址
            IERC20Upgradeable(lpToken).safeTransfer(withdrawFeeTo, fee);
            // 将质押代币发送给用户
            IERC20Upgradeable(lpToken).safeTransfer(msg.sender, amountAfterFee);
        } else {
            // 将质押代币发送给用户
            IERC20Upgradeable(lpToken).safeTransfer(msg.sender, amount);
        }

        emit Withdrawn(msg.sender, amount);
    }

    // 用户退出函数，退出质押，并领取已经获取的奖励
    function exit() external {
        withdraw(balanceOf(msg.sender));
        getReward();
    }

    // 内部函数处理奖励的逻辑
    function _processReward(
        address account
    ) internal returns (uint256, uint256) {
        uint256 reward = rewards[account];
        require(reward > 0, "GCS: No reward to get");

        uint256 inviterReward = reward.mul(percent).div(1000);
        uint256 userReward = reward.sub(inviterReward);

        // 将用户的待领取奖励重置为零
        rewards[account] = 0;

        return (userReward, inviterReward);
    }

    // 提取奖励
    function getReward() public updateReward(msg.sender) checkStart {
        require(getRewardSwitch, "GCS: Get reward switch is off");

        (uint256 userReward, uint256 inviterReward) = _processReward(
            msg.sender
        );

        // 发送奖励给用户
        receivedReward[msg.sender] = receivedReward[msg.sender].add(userReward);
        IERC20Upgradeable(rewardToken).safeTransfer(msg.sender, userReward);

        emit RewardPaid(msg.sender, userReward, false);

        // 如果存在邀请人，发送奖励给邀请人
        address inviterAddr = inviter[msg.sender];
        if (inviterAddr != address(0) && inviterReward > 0) {
            IERC20Upgradeable(rewardToken).safeTransfer(
                inviterAddr,
                inviterReward
            );

            emit RewardPaid(inviterAddr, inviterReward, true);
        }
    }

    // 复投奖励
    function compoundReward()
        public
        updateReward(msg.sender)
        checkStart
        checkEnd
    {
        require(compoundRewardSwitch, "GCS: Compound reward switch is off");
        // 奖励币和质押币相同，才允许复投
        require(
            rewardToken == lpToken,
            "GCS: Reward token is not the same as stake token"
        );

        (uint256 userReward, uint256 inviterReward) = _processReward(
            msg.sender
        );

        // 复投用户奖励
        _totalSupply = _totalSupply.add(userReward);
        _balances[msg.sender] = _balances[msg.sender].add(userReward);

        emit RewardCompounded(msg.sender, userReward);

        // 如果存在邀请人，将邀请人的奖励也复投
        address inviterAddr = inviter[msg.sender];
        if (inviterAddr != address(0) && inviterReward > 0) {
            _totalSupply = _totalSupply.add(inviterReward);
            _balances[inviterAddr] = _balances[inviterAddr].add(inviterReward);

            emit RewardCompounded(inviterAddr, inviterReward);
        }
    }

    // 初始设置奖励数量
    function initialAddRewardAmount(uint256 reward) private onlyOwner {
        require(reward > 0, "GCS: Reward must be greater than 0");

        // 检查合约中是否有足够的奖励代币
        uint256 currentBalance = IERC20Upgradeable(rewardToken).balanceOf(
            address(this)
        );
        require(
            currentBalance >= totalAccumulatedReward.add(reward),
            "GCS: Not enough tokens in the contract"
        );

        // 累加新的奖励到总奖励中
        totalAccumulatedReward = totalAccumulatedReward.add(reward);

        emit RewardAdded(reward);
    }

    // 追加奖励
    function appendRewardAmount(uint256 additionalReward) public onlyOwner {
        require(
            additionalReward > 0,
            "GCS: Additional reward must be greater than 0"
        );

        IERC20Upgradeable(rewardToken).safeTransferFrom(
            msg.sender,
            address(this),
            additionalReward
        );

        // 检查合约中是否有足够的奖励代币用于追加的奖励
        uint256 currentBalance = IERC20Upgradeable(rewardToken).balanceOf(
            address(this)
        );
        require(
            currentBalance >= additionalReward,
            "GCS: Not enough tokens in the contract for additional reward"
        );

        // 累加新的奖励到总奖励中
        totalAccumulatedReward = totalAccumulatedReward.add(additionalReward);

        emit RewardAdded(additionalReward);
    }

    // owner取出所有奖励
    function withdrawAllReward() public onlyOwner {
        // 领取奖励开关关闭
        getRewardSwitch = false;
        // 取出质押开关关闭
        withdrawSwitch = false;
        // 复投奖励开关关闭
        compoundRewardSwitch = false;

        if (lpToken == rewardToken) {
            // 剩余奖励数量为：当前合约中的奖励代币数量减去总质押量
            uint256 remainingReward = IERC20Upgradeable(rewardToken).balanceOf(
                address(this)
            ) - _totalSupply;
            // 判断剩余奖励数量是否大于0
            require(
                remainingReward > 0,
                "GCS: Remaining reward must be greater than 0"
            );

            // 将奖励代币发送给owner
            IERC20Upgradeable(rewardToken).safeTransfer(
                msg.sender,
                remainingReward
            );
        } else {
            // 判断合约中的奖励代币数量是否足够
            uint256 currentBalance = IERC20Upgradeable(rewardToken).balanceOf(
                address(this)
            );
            require(
                currentBalance > 0,
                "GCS: Not enough tokens in the contract"
            );

            // 将奖励代币发送给owner
            IERC20Upgradeable(rewardToken).safeTransfer(
                msg.sender,
                currentBalance
            );
        }

        // 更新总奖励数量
        totalAccumulatedReward = 0;

        // 重新打开领取奖励开关
        getRewardSwitch = true;
        // 重新打开取出质押开关
        withdrawSwitch = true;
        // 重新打开复投奖励开关
        compoundRewardSwitch = true;
    }

    // 计算用户解锁时间
    function unfrozenStakeTime(address account) public view returns (uint256) {
        return lastStakeTime[account] + frozenStakingTime;
    }

    // 更新项目介绍信息
    function updateIntroduction(
        PoolDataInfo calldata _dataInfo
    ) external onlyOwner {
        logoUrl = _dataInfo.logoUrl;
        website = _dataInfo.website;
        facebook = _dataInfo.facebook;
        twitter = _dataInfo.twitter;
        github = _dataInfo.github;
        telegram = _dataInfo.telegram;
        instagram = _dataInfo.instagram;
        discord = _dataInfo.discord;
        reddit = _dataInfo.reddit;
        description = _dataInfo.description;
    }

    // 设置质押冻结期
    function setFrozenStakingTime(
        uint256 _frozenStakingTime
    ) external onlyOwner {
        // 数值未发生变化则不更新
        require(
            _frozenStakingTime != frozenStakingTime,
            "GCS: Frozen staking time is the same"
        );

        frozenStakingTime = _frozenStakingTime;

        emit ParameterUpdatedUint("frozenStakingTime", _frozenStakingTime);
    }

    // 设置邀请奖励比例
    function setPercent(uint256 _percent) external onlyOwner {
        require(_percent >= 0, "GCS: Percent must be greater than 0");
        require(_percent < 1000, "GCS: Percent must be less than 1000");
        // 数值未发生变化则不更新
        require(_percent != percent, "GCS: Percent is the same");

        percent = _percent;

        emit ParameterUpdatedUint("percent", _percent);
    }

    // 设置是否使用LP代币
    function setLpToken(bool _isLpToken) external onlyOwner {
        // 数值未发生变化则不更新
        require(_isLpToken != isLpToken, "GCS: LP token status is the same");

        isLpToken = _isLpToken;

        emit ParameterUpdatedBool("isLpToken", _isLpToken);
    }

    // 设置固定年化收益率
    function setFixedAnnualInterestRate(uint256 _rate) external onlyOwner {
        require(
            _rate > 0,
            "GCS: Fixed annual interest rate must be greater than 0"
        );
        // 数值未发生变化则不更新
        require(
            _rate != fixedAnnualInterestRate,
            "GCS: Fixed annual interest rate is the same"
        );

        fixedAnnualInterestRate = _rate;

        emit ParameterUpdatedUint("fixedAnnualInterestRate", _rate);
    }

    // 设置取出质押费率
    function setWithdrawFeeRate(uint256 _rate) external onlyOwner {
        require(
            _rate >= 0,
            "GCS: Withdraw fee rate must be greater than or equal to 0"
        );
        require(_rate < 1000, "GCS: Withdraw fee rate must be less than 1000");
        // 数值未发生变化则不更新
        require(_rate != withdrawFeeRate, "GCS: Withdraw fee rate is the same");

        withdrawFeeRate = _rate;

        emit ParameterUpdatedUint("withdrawFeeRate", _rate);
    }

    // 设置取出质押费接收地址
    function setWithdrawFeeTo(address _to) external onlyOwner {
        require(_to != address(0), "GCS: Invalid address");
        // 地址未发生变化则不更新
        require(_to != withdrawFeeTo, "GCS: Withdraw fee to is the same");

        withdrawFeeTo = _to;

        emit ParameterUpdatedAddress("withdrawFeeTo", _to);
    }

    // 设置合约开始时间，秒为单位
    function setStartTime(uint256 _startTime) external onlyOwner {
        require(_startTime > 0, "GCS: Start time must be greater than 0");
        // 数值未发生变化则不更新
        require(_startTime != startTime, "GCS: Start time is the same");

        startTime = _startTime;

        emit ParameterUpdatedUint("startTime", _startTime);
    }

    // 设置合约持续时间，天为单位
    function setDuration(uint256 _duration) external onlyOwner {
        require(_duration > 0, "GCS: Duration must be greater than 0");
        // 数值未发生变化则不更新
        require(_duration != duration, "GCS: Duration is the same");

        duration = _duration.mul(DAY_SECONDS);

        emit ParameterUpdatedUint("duration", _duration);
    }

    // 设置质押开关
    function setStakeSwitch() external onlyOwner {
        stakeSwitch = !stakeSwitch;

        emit ParameterUpdatedBool("stakeSwitch", stakeSwitch);
    }

    // 设置领取奖励开关
    function setGetRewardSwitch() external onlyOwner {
        getRewardSwitch = !getRewardSwitch;

        emit ParameterUpdatedBool("getRewardSwitch", getRewardSwitch);
    }

    // 设置取出质押开关
    function setWithdrawSwitch() external onlyOwner {
        withdrawSwitch = !withdrawSwitch;

        emit ParameterUpdatedBool("withdrawSwitch", withdrawSwitch);
    }

    // 设置复投奖励开关
    function setCompoundRewardSwitch() external onlyOwner {
        compoundRewardSwitch = !compoundRewardSwitch;

        emit ParameterUpdatedBool("compoundRewardSwitch", compoundRewardSwitch);
    }
}

