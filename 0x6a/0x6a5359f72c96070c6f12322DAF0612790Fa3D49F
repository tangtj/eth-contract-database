
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interface/IGenesisNft.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.22;

interface IGenesisNft {
    function reward(uint256 _tokenId, uint256 _amount) external;

    function getShares(uint256 _tokenId, uint256 _month) external view returns (uint256);

    function getStaked(
        uint256 _tokenId,
        uint256 _month
    ) external view returns (uint256 stakedAmount, uint256 stakedAmountMinimum);

    function getTotals(
        uint256 _month
    ) external view returns (uint256 _totalShares, uint256 _totalBalance, uint256 _minimumBalance);

    function getAirdropStartTime() external view returns (uint256);

    function startTime() external view returns (uint128);

    function ownerOf(uint256 tokenId) external view returns (address);

    function getCurrentMonth() external view returns (uint256);

    function monthlyTotal(
        uint256 _month
    ) external view returns (uint32 totalShares, uint128 totalStaked, uint128 minimumStaked);
}


// File: contracts/interface/IRewarder.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.22;

interface IRewarder {
    function claim(uint256 _nftId) external;
}


// File: contracts/reward/RewardWrapper.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.22;

import "./../interface/IGenesisNft.sol";
import "./../interface/IRewarder.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

error NftNotOwned();

contract RewardWrapper is Ownable {
    IGenesisNft immutable nft;
    IRewarder[] public rewarder;

    event RewardersSet(address[] rewarders);
    /**
     * @notice Initializes the contract with given addresses.
     * @param _genesisNftAddress Address of the Genesis NFT contract.
     * @param _rewardAddresses Addresses of the reward contracts.
     */
    constructor(address _genesisNftAddress, address[] memory _rewardAddresses) {
        nft = IGenesisNft(_genesisNftAddress);
        for (uint256 i = 0; i < _rewardAddresses.length; ++i) {
            rewarder.push(IRewarder(_rewardAddresses[i]));
        }
    }

    /**
     * @notice Claims rewards on all reward contracts for a give nftId.
     * @param _nftId Id of the nft to claim rewards for.
     */
    function claim(uint256 _nftId) external {
        if (msg.sender != nft.ownerOf(_nftId)) {
            revert NftNotOwned();
        }

        for (uint256 i = 0; i < rewarder.length; ++i) {
            rewarder[i].claim(_nftId);
        }
    }

    /**
     * @notice Set the array of reward contracts.
     * @param _rewardAddresses Addresses of the reward contracts.
     */
    function setRewarders(address[] memory _rewardAddresses) external onlyOwner {
        delete rewarder;
        for (uint256 i = 0; i < _rewardAddresses.length; ++i) {
            rewarder.push(IRewarder(_rewardAddresses[i]));
        }
        emit RewardersSet(_rewardAddresses);
    }

    /**
     * Get the array of reward contract addresses.
     * @return rewarder array of reward contract addresses.
     */
    function getRewarders() external view returns (IRewarder[] memory) {
        return rewarder;
    }
}

