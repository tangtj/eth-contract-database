
// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)

pragma solidity ^0.8.20;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev The `account` is missing a role.
     */
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);

    /**
     * @dev The caller of a function is not the expected one.
     *
     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.
     */
    error AccessControlBadConfirmation();

    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `callerConfirmation`.
     */
    function renounceRole(bytes32 role, address callerConfirmation) external;
}


// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)
pragma solidity ^0.8.20;

/**
 * @dev Standard ERC20 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.
 */
interface IERC20Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC20InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC20InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     * @param allowance Amount of tokens a `spender` is allowed to operate with.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC20InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC20InvalidSpender(address spender);
}

/**
 * @dev Standard ERC721 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.
 */
interface IERC721Errors {
    /**
     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.
     * Used in balance queries.
     * @param owner Address of the current owner of a token.
     */
    error ERC721InvalidOwner(address owner);

    /**
     * @dev Indicates a `tokenId` whose `owner` is the zero address.
     * @param tokenId Identifier number of a token.
     */
    error ERC721NonexistentToken(uint256 tokenId);

    /**
     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param tokenId Identifier number of a token.
     * @param owner Address of the current owner of a token.
     */
    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC721InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC721InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param tokenId Identifier number of a token.
     */
    error ERC721InsufficientApproval(address operator, uint256 tokenId);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC721InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC721InvalidOperator(address operator);
}

/**
 * @dev Standard ERC1155 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.
 */
interface IERC1155Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     * @param tokenId Identifier number of a token.
     */
    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC1155InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC1155InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param owner Address of the current owner of a token.
     */
    error ERC1155MissingApprovalForAll(address operator, address owner);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC1155InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC1155InvalidOperator(address operator);

    /**
     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
     * Used in batch transfers.
     * @param idsLength Length of the array of token identifiers
     * @param valuesLength Length of the array of token amounts
     */
    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "./IERC20.sol";
import {IERC20Metadata} from "./extensions/IERC20Metadata.sol";
import {Context} from "../../utils/Context.sol";
import {IERC20Errors} from "../../interfaces/draft-IERC6093.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 */
abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
    mapping(address account => uint256) private _balances;

    mapping(address account => mapping(address spender => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `value`.
     */
    function transfer(address to, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, value);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, value);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `value`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `value`.
     */
    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, value);
        _transfer(from, to, value);
        return true;
    }

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _transfer(address from, address to, uint256 value) internal {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(from, to, value);
    }

    /**
     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
     * this function.
     *
     * Emits a {Transfer} event.
     */
    function _update(address from, address to, uint256 value) internal virtual {
        if (from == address(0)) {
            // Overflow check required: The rest of the code assumes that totalSupply never overflows
            _totalSupply += value;
        } else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < value) {
                revert ERC20InsufficientBalance(from, fromBalance, value);
            }
            unchecked {
                // Overflow not possible: value <= fromBalance <= totalSupply.
                _balances[from] = fromBalance - value;
            }
        }

        if (to == address(0)) {
            unchecked {
                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
                _totalSupply -= value;
            }
        } else {
            unchecked {
                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
                _balances[to] += value;
            }
        }

        emit Transfer(from, to, value);
    }

    /**
     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
     * Relies on the `_update` mechanism
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _mint(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(address(0), account, value);
    }

    /**
     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
     * Relies on the `_update` mechanism.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead
     */
    function _burn(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        _update(account, address(0), value);
    }

    /**
     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     *
     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
     */
    function _approve(address owner, address spender, uint256 value) internal {
        _approve(owner, spender, value, true);
    }

    /**
     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
     *
     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
     * `Approval` event during `transferFrom` operations.
     *
     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
     * true using the following override:
     * ```
     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
     *     super._approve(owner, spender, value, true);
     * }
     * ```
     *
     * Requirements are the same as {_approve}.
     */
    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
        if (owner == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[owner][spender] = value;
        if (emitEvent) {
            emit Approval(owner, spender, value);
        }
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `value`.
     *
     * Does not update the allowance value in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Does not emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < value) {
                revert ERC20InsufficientAllowance(spender, currentAllowance, value);
            }
            unchecked {
                _approve(owner, spender, currentAllowance - value, false);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/interfaces/ISTBL.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.25;

interface ISTBL {
    function mint(address to, uint256 amount) external;

    function burn(address from, uint256 amount) external;

    function setWalletFactory(address walletFactory) external;

    function disableMinting() external;

    function enableMinting() external;

    function disableBurn() external;

    function enableBurn() external;

    function mintable() external view returns (bool);

    function burnable() external view returns (bool);

    function walletFactory() external view returns (address);
}


// File: contracts/interfaces/IWalletFactory.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.25;

interface IWalletFactory {
    enum UserStatus {
        INACTIVE,
        PENDING,
        ACTIVE,
        REJECTED,
        BLOCKED
    }

    struct UserWallet {
        UserStatus status;
        bool partner;
        bool burner;
        bool minter;
        address depositAddress;
        bool business;
        uint256 minted;
        uint256 mintLimit;
        uint256 burned;
        uint256 burnLimit;
    }

    function processMintRequest(
        address user,
        address stable,
        uint256 amount
    ) external returns (UserWallet memory);

    function rejectMintRequest(address user, address stable, uint256 amount) external;

    function processBurnRequest(address user, uint256 amount) external returns (UserWallet memory);

    function register(bool partner, bool burner, bool minter, bool business) external;

    function acceptUser(address userAddress) external;

    function rejectUser(address userAddress) external;

    function createDepositWallet(address userAddress) external;

    function setUserCaps(address user, uint256 mintLimit, uint256 burnLimit) external;

    function setGlobalAccess(bool value) external;

    function setDepositWalletStatus(address[] calldata addresses, bool[] calldata values) external;

    function setUserStatus(address[] calldata addresses, UserStatus[] calldata values) external;

    function setColdWallets(address[] calldata addresses, bool[] calldata values) external;

    function setMultisigAddress(address multisigAddress) external;

    function setDepositWalletImplementation(address implementation) external;

    function setBurnWalletImplementation(address implementation) external;

    function setDepositAddress(address userAddress, address depositAddress) external;

    function setTokens(
        address[] calldata addresses,
        bool[] calldata values,
        uint256[] calldata cryptoHardcaps
    ) external;

    function setFeeAddress(address feeAddress) external;

    function setFee(uint256 mintFee, uint256 burnFee, uint256 transferFee) external;

    function setSoftCaps(
        uint256 minMintSoftcap,
        uint256 maxMintSoftcap,
        uint256 minBurnSoftcap,
        uint256 maxBurnSoftcap
    ) external;

    function setGlobalUserCaps(
        uint256 businessMinterCap,
        uint256 personalMinterCap,
        uint256 businessBurnerCap,
        uint256 personalBurnerCap
    ) external;

    function setCryptoHardcap(address stable, uint256 cryptoHardcap) external;

    function setFiatHardcap(uint256 fiatHardcap) external;

    function setThresholds(uint256 adminThreshold, uint256 multisigThreshold) external;

    function setDAO(address daoAddress) external;

    function setMinters(address[] calldata addresses, bool[] calldata values) external;

    function setSTBLAddress(address stblAddress) external;

    function setBurnWallet() external;

    function transferFee() external view returns (uint256);

    function mintFee() external view returns (uint256);

    function burnFee() external view returns (uint256);

    function globalAccess() external view returns (bool);

    function feeAddress() external view returns (address);

    function multisigAddress() external view returns (address);

    function daoAddress() external view returns (address);

    function userWallets(address user) external view returns (UserWallet memory);

    function depositWallets(address user) external view returns (bool);

    function stblAddress() external view returns (address);

    function minterAddresses(address) external view returns (bool);

    function allowedTokens(address token) external view returns (bool);

    function coldWallets(address wallet) external view returns (bool);

    function adminThreshold() external view returns (uint256);

    function multisigThreshold() external view returns (uint256);

    function getThresholds() external view returns (uint256, uint256);

    function fiatHardcap() external view returns (uint256);

    function fiatDeposited() external view returns (uint256);

    function cryptoDeposited(address stable) external view returns (uint256);

    function cryptoHardcap(address stable) external view returns (uint256);

    function minMintSoftcap() external view returns (uint256);

    function maxMintSoftcap() external view returns (uint256);

    function maxBurnSoftcap() external view returns (uint256);

    function minBurnSoftcap() external view returns (uint256);

    function personalMinterCap() external view returns (uint256);

    function businessMinterCap() external view returns (uint256);

    function personalBurnerCap() external view returns (uint256);

    function businessBurnerCap() external view returns (uint256);

    function depositWalletImplementation() external view returns (address);

    function burnWalletImplementation() external view returns (address);

    function burnWallet() external view returns (address);

    function getLimits()
        external
        view
        returns (uint256, uint256, uint256, uint256, uint256, uint256);

    // function getUserAmountsAvailable(
    //     address user,
    //     address stable,
    //     bool fiat
    // ) external view returns (uint256 mintAvailable, uint256 burningAvailable);
}


// File: contracts/STBL.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.25;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./interfaces/IWalletFactory.sol";

import "@openzeppelin/contracts/access/IAccessControl.sol";
import "./interfaces/ISTBL.sol";
import "./utils/Errors.sol";

contract STBL is ERC20, ISTBL {
    uint256 public constant HUNDRED_PERCENT = 10000;
    bytes32 public constant SUPERADMIN_ROLE = keccak256("SUPERADMIN_ROLE");

    IWalletFactory private _walletFactory;
    bool private _mintable;
    bool private _burnable;

    ///@dev emitted when mintability is changed
    event MintabilitySet(bool value);
    ///@dev emitted when burnability is changed
    event BurnabilitySet(bool value);

    ///@dev check whether users are in the whitelist or blocked
    ///@param from sender adderss
    ///@param to receiver address
    modifier checkAccess(address from, address to) {
        bool globalAccess = _walletFactory.globalAccess();
        if (from != address(0)) {
            IWalletFactory.UserWallet memory fromWallet = _walletFactory.userWallets(from);
            if (fromWallet.status == IWalletFactory.UserStatus.BLOCKED) revert RoleControl();

            if (!globalAccess) {
                if (!(fromWallet.partner && fromWallet.status == IWalletFactory.UserStatus.ACTIVE))
                    revert RoleControl();
            }
        }

        if (to != address(0)) {
            IWalletFactory.UserWallet memory toWallet = _walletFactory.userWallets(to);
            if (toWallet.status == IWalletFactory.UserStatus.BLOCKED) revert RoleControl();

            if (!globalAccess) {
                if (!(toWallet.partner && toWallet.status == IWalletFactory.UserStatus.ACTIVE))
                    revert RoleControl();
            }
        }
        _;
    }

    ///@param walletFactory address of walletFactory smart contract
    constructor(address walletFactory) ERC20("Stability STBL", "STBL") {
        _walletFactory = IWalletFactory(walletFactory);
        _mintable = true;
        _burnable = true;
    }

    ///@dev mints tokens to a user, can only be called by minter smart contract
    ///@param to the address where tokens will be minted to
    ///@param amount the amount of tokens to be minted
    function mint(address to, uint256 amount) external override checkAccess(address(0), to) {
        if (!_mintable) {
            revert NotMintable();
        }
        if (!(_walletFactory.minterAddresses(msg.sender))) revert RoleControl();
        super._update(address(0), to, amount);
    }

    ///@dev burns tokens from a user, can only be called by minter smart contract
    ///@param from the address where tokens will be burned from
    ///@param amount the amount of tokens to be burned
    function burn(address from, uint256 amount) external override checkAccess(from, address(0)) {
        if (!_burnable) {
            revert NotBurnable();
        }
        if (!_walletFactory.minterAddresses(msg.sender)) revert RoleControl();
        super._update(from, address(0), amount);
    }

    ///@dev sets the walletFactory address, can only be called by multisig
    ///@param walletFactory address of walletFactory smart contract
    function setWalletFactory(address walletFactory) external override {
        if (msg.sender != _walletFactory.multisigAddress()) revert RoleControl();
        _walletFactory = IWalletFactory(walletFactory);
    }

    ///@dev disables minting in case of emergency, can be called by superadmin
    function disableMinting() external override {
        if (!IAccessControl(address(_walletFactory)).hasRole(SUPERADMIN_ROLE, msg.sender))
            revert RoleControl();
        _mintable = false;
        emit MintabilitySet(false);
    }

    ///@dev enables minting, can be called by multisig
    function enableMinting() external override {
        if (msg.sender != _walletFactory.multisigAddress()) revert RoleControl();
        _mintable = true;
        emit MintabilitySet(true);
    }

    ///@dev disables burn in case of emergency, can be called by superadmin
    function disableBurn() external override {
        if (!IAccessControl(address(_walletFactory)).hasRole(SUPERADMIN_ROLE, msg.sender))
            revert RoleControl();
        _burnable = false;
        emit BurnabilitySet(false);
    }

    ///@dev enables burn, can be called by multisig
    function enableBurn() external override {
        if (msg.sender != _walletFactory.multisigAddress()) revert RoleControl();
        _burnable = true;
        emit BurnabilitySet(true);
    }

    ///@dev returns true if token is currently mintable
    ///@return mintable
    function mintable() external view override returns (bool) {
        return _mintable;
    }

    ///@dev returns true if token is currently burnable
    ///@return burnable
    function burnable() external view override returns (bool) {
        return _burnable;
    }

    /// @return wallet factory
    function walletFactory() external view override returns (address) {
        return address(_walletFactory);
    }

    ///@dev standard ERC20 transfer function with fee
    function transfer(
        address to,
        uint256 value
    ) public override checkAccess(msg.sender, to) returns (bool) {
        address owner = msg.sender;
        uint256 fee = (value * _walletFactory.transferFee()) / HUNDRED_PERCENT;
        super._transfer(owner, to, value - fee);
        super._transfer(owner, _walletFactory.feeAddress(), fee);
        return true;
    }

    ///@dev standard ERC20 transferFrom function with fee
    function transferFrom(
        address from,
        address to,
        uint256 value
    ) public override checkAccess(from, to) returns (bool) {
        address spender = msg.sender;
        _spendAllowance(from, spender, value);
        uint256 fee = (value * _walletFactory.transferFee()) / HUNDRED_PERCENT;
        _transfer(from, to, value - fee);
        super._transfer(from, _walletFactory.feeAddress(), fee);
        return true;
    }
}


// File: contracts/utils/Errors.sol
pragma solidity =0.8.25;

error UserInactive(); // 0x3310e691
error InvalidToken(); // 0xc1ab6dc1
error ZeroAddress(); // 0xd92e233d
error DepositAddressBlocked(); // 0x24c07dff
error RoleControl(); // 0x38a097a3
error NotRejected(); // 0x954443dc
error NotMintable(); // 0x12a59152
error NotBurnable(); // 0xda38f010
error InvalidInput(); // 0xb4fa3fb3
error InternalError(); // 0xfe835e35
error CapReached(); // 0xd7e991d2
error AlreadyProcessed(); // 0x57eee766

