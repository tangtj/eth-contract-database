
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/BuildingManager.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import './BuildingRewardManagement.sol';
import './interfaces/IUniswapV2Router02.sol';
import './interfaces/IERC20Burnable.sol';

contract BuildingManager is Ownable, ReentrancyGuard {
  BuildingRewardManagement public buildingRewardManagement;
  using SafeERC20 for IERC20Burnable;
  using SafeERC20 for IERC20;
  IERC20Burnable public token;
  IERC20 public USDC;
  IUniswapV2Router02 public router;

  address public reservePool;

  address[] public payees;
  uint256[] public shares;
  uint8 public distributionFee;
  uint8 public marketingFee;
  uint8 public burnFee;
  uint8 public affiliateFee;

  bool public swapping = false;
  bool public swapLiquify = true;
  uint256 public swapTokensAmount;

  mapping(address => bool) private _isMalicious;
  mapping(address => bool) private _isExcluded;
  mapping(address => uint256) private _affiliateRewards;

  event UpdateRouter(address indexed newAddress, address indexed oldAddress);

  event Exclude(address indexed _account, bool isExcluded);

  event CreationBuilding(address indexed creator, uint8 indexed level, uint256 creationTime);
  event CashoutBuilding(address indexed user, uint256 time, uint256 amount);
  event CashoutAll(address indexed user, uint256 time, uint256 amount);

  constructor(
    address[] memory _payees,
    uint256[] memory _shares,
    address _V2Router,
    address _reservePool, // supplyManager
    address _token,
    address _USDC,
    uint8[] memory fees,
    uint256 swapAmount,
    uint256 _typesNumber,
    uint256[] memory _buildingPrices,
    uint256[] memory _rewardPerBuildings
  ) Ownable(msg.sender) {
    require(_payees.length == _shares.length, 'Payees and shares length mismatch');
    require(_payees.length > 0, 'No payees');

    for (uint256 i = 0; i < _payees.length; i++) {
      require(_payees[i] != address(0), 'Payee is the zero address');
      require(_shares[i] > 0, 'Share is 0');
      payees.push(_payees[i]);
      shares.push(_shares[i]);
    }
    require(_V2Router != address(0), 'ROUTER CANNOT BE ZERO');
    IUniswapV2Router02 v2Router = IUniswapV2Router02(_V2Router);
    router = v2Router;

    require(_reservePool != address(0), 'RESERVE ADDRESS CANNOT BE ZERO');
    reservePool = _reservePool;

    require(address(_token) != address(0), 'TOKEN ADDRESS CANNOT BE ZERO');
    token = IERC20Burnable(_token);

    require(address(_USDC) != address(0), 'USDC ADDRESS CANNOT BE ZERO');
    USDC = IERC20(_USDC);

    require(_typesNumber > 0, 'CONSTR: LEVEL SIZE INCORRECT');
    buildingRewardManagement = new BuildingRewardManagement(_typesNumber, _buildingPrices, _rewardPerBuildings);

    exclude(address(this), true);
    require(fees[0] != 0 && fees[1] != 0 && fees[2] != 0, 'CONSTR: Fees equal 0');
    distributionFee = fees[0];
    marketingFee = fees[1];
    burnFee = fees[2];
    affiliateFee = fees[3];

    require(swapAmount > 0, 'CONSTR: Swap amount incorrect');
    swapTokensAmount = swapAmount * (10 ** 18);
  }

  function updateV2Router(address newAddress) public onlyOwner {
    require(newAddress != address(router), 'TKN: The router already has that address');
    emit UpdateRouter(newAddress, address(router));
    router = IUniswapV2Router02(newAddress);
  }

  function exclude(address _account, bool excluded) public onlyOwner {
    require(_isExcluded[_account] != excluded, "TKN: _account is already the value of 'excluded'");
    _isExcluded[_account] = excluded;

    emit Exclude(_account, excluded);
  }

  function protectAgainstMalicious(address _account, bool value) external onlyOwner {
    _isMalicious[_account] = value;
  }

  function isExcluded(address _account) public view returns (bool) {
    return _isExcluded[_account];
  }

  function swapTokensForUSDC(uint256 tokenAmount) private {
    address[] memory path = new address[](3);
    path[0] = address(token);
    path[1] = router.WETH();
    path[2] = address(USDC);

    token.approve(address(router), tokenAmount);
    router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
      tokenAmount,
      0, // accept any amount of USDC
      path,
      address(this),
      block.timestamp
    );
  }

  function distributeUSDC(uint256 usdcAmount) private {
    uint256 totalShares = 0;
    for (uint i = 0; i < shares.length; i++) {
      totalShares += shares[i];
    }
    for (uint i = 0; i < payees.length; i++) {
      uint256 payeeShare = (usdcAmount * shares[i]) / totalShares;
      USDC.safeTransfer(payees[i], payeeShare);
    }
  }

  function createBuildingWithTokensAndAffiliation(uint8 _type, address _affiliateAddress) public nonReentrant {
    require(affiliateFee > 0, 'Affiliation is disabled');
    address sender = _msgSender();
    require(sender != address(0), 'BUILDING CREATION: creation from the zero address');
    require(!_isMalicious[sender], 'BUILDING CREATION: Malicious address');
    uint256 buildingPrice = buildingRewardManagement.getPriceOfBuilding(_type);
    require(buildingPrice != 0, 'PRICE CANNOT BE ZERO');
    require(token.balanceOf(sender) >= buildingPrice, 'BUILDING CREATION: Balance too low for creation.');
    require(sender != _affiliateAddress, "BUILDING CREATION: msgSender can't be the affiliated address");
    require(buildingRewardManagement.isBuildingOwner(_affiliateAddress), 'NO BUILDING OWNER');

    uint256 affiliateReward = buildingPrice / affiliateFee;
    uint256 paymentAfterAffiliateReward = buildingPrice - affiliateReward;

    token.transferFrom(sender, _affiliateAddress, affiliateReward);
    _affiliateRewards[_affiliateAddress] += affiliateReward;

    uint256 contractTokenBalance = token.balanceOf(address(this));
    bool swapAmountOk = contractTokenBalance >= swapTokensAmount;

    if (swapAmountOk && swapLiquify && !swapping && sender != owner()) {
      swapping = true;

      uint256 amountToReserve = (contractTokenBalance * distributionFee) / 100;
      token.safeTransfer(reservePool, amountToReserve);

      uint256 MarketingAmtToSwap = contractTokenBalance - amountToReserve;
      swapTokensForUSDC(MarketingAmtToSwap);
      uint256 usdcAcquired = USDC.balanceOf(address(this));
      distributeUSDC(usdcAcquired);

      swapping = false;
    }

    uint256 creationTime = buildingRewardManagement.createBuilding(sender, _type);
    token.transferFrom(sender, address(this), paymentAfterAffiliateReward);
    emit CreationBuilding(sender, _type, creationTime);
  }

  function createBuildingWithTokens(uint8 _type) public nonReentrant {
    address sender = _msgSender();
    require(sender != address(0), 'BUILDING CREATION: creation from the zero address');
    require(!_isMalicious[sender], 'BUILDING CREATION: Malicious address');
    uint256 buildingPrice = buildingRewardManagement.getPriceOfBuilding(_type);
    require(buildingPrice != 0, 'PRICE CANNOT BE ZERO');
    require(token.balanceOf(sender) >= buildingPrice, 'BUILDING CREATION: Balance too low for creation.');
    uint256 contractTokenBalance = token.balanceOf(address(this));

    bool swapAmountOk = contractTokenBalance >= swapTokensAmount;
    if (swapAmountOk && swapLiquify && !swapping && sender != owner()) {
      swapping = true;

      // Burn tokens
      uint256 burnAmount = (contractTokenBalance * burnFee) / 100;
      if (burnAmount > 0) token.burn(burnAmount);

      // Marketing
      uint256 marketingAmountToSwap = (contractTokenBalance * marketingFee) / 100;
      if (marketingAmountToSwap > 0) swapTokensForUSDC(marketingAmountToSwap);

      // Send USDC to payees
      uint256 usdcAcquired = USDC.balanceOf(address(this));
      if (usdcAcquired > 0) distributeUSDC(usdcAcquired);

      // Send remaining tokens to reserve
      uint256 amountToReserve = (contractTokenBalance * distributionFee) / 100;
      if (amountToReserve > 0) token.safeTransfer(reservePool, amountToReserve);

      swapping = false;
    }

    uint256 creationTime = buildingRewardManagement.createBuilding(sender, _type);
    token.transferFrom(sender, address(this), buildingPrice);
    emit CreationBuilding(sender, _type, creationTime);
  }

  function createBuildingForUser(address _account, uint8 _type) public onlyOwner {
    require(_account != address(0), 'BUILDING CREATION: creation from the zero address');
    require(!_isMalicious[_account], 'BUILDING CREATION: Malicious address');

    uint256 creationTime = buildingRewardManagement.createBuilding(_account, _type);
    emit CreationBuilding(_account, _type, creationTime);
  }

  function cashoutReward(uint256 index) public nonReentrant {
    address sender = _msgSender();
    require(sender != address(0), 'CSHT: creation from the zero address');
    require(!_isMalicious[sender], 'CSHT: Malicious address');
    uint256 rewardAmount = buildingRewardManagement.getBuildingRewardAmountOf(sender, index);
    require(rewardAmount > 0, "CSHT: You don't have enough reward to cash out");
    buildingRewardManagement.cashoutBuildingReward(sender, index);
    token.transferFrom(reservePool, sender, rewardAmount);
    emit CashoutBuilding(sender, block.timestamp, rewardAmount);
  }

  function cashoutRewardByCreatime(uint256 blocktime) public nonReentrant {
    address sender = _msgSender();
    require(sender != address(0), 'CSHT: creation from the zero address');
    require(!_isMalicious[sender], 'CSHT: Malicious address');
    uint256 rewardAmount = buildingRewardManagement.getBuildingRewardByCreatime(sender, blocktime);
    require(rewardAmount > 0, "CSHT: You don't have enough reward to cash out");
    buildingRewardManagement.cashoutBuildingReward(sender, blocktime);
    token.transferFrom(reservePool, sender, rewardAmount);
    emit CashoutBuilding(sender, block.timestamp, rewardAmount);
  }

  function cashoutAll() public nonReentrant {
    address sender = _msgSender();
    require(sender != address(0), 'CSHT: creation from the zero address');
    require(!_isMalicious[sender], 'CSHT: Malicious address');

    uint256 rewardAmount = buildingRewardManagement.getRewardAmountOf(sender);
    require(rewardAmount > 0, "CSHT: You don't have any rewards to cash out");
    buildingRewardManagement.cashoutAllBuildingsReward(sender);
    token.transferFrom(reservePool, sender, rewardAmount);
    emit CashoutAll(sender, block.timestamp, rewardAmount);
  }

  function updateReservePool(address _newAddress) public onlyOwner {
    reservePool = _newAddress;
  }

  function updateDistributionFee(uint8 value) external onlyOwner {
    distributionFee = value;
  }

  function updateAffiliateFee(uint8 value) external onlyOwner {
    affiliateFee = value;
  }

  function updateMarketingFee(uint8 value) external onlyOwner {
    marketingFee = value;
  }

  function updateBurnFee(uint8 value) external onlyOwner {
    burnFee = value;
  }

  function changeSwapLiquify(bool newVal) external onlyOwner {
    swapLiquify = newVal;
  }

  function changeBuildingManager(BuildingRewardManagement _newManager) external onlyOwner {
    buildingRewardManagement = _newManager;
  }

  function changeToken(IERC20Burnable _newToken) external onlyOwner {
    token = _newToken;
  }

  function createNewRewardBuildingEntity(uint256 _buildingPrice, uint256 _buildingRewardPerSecond) external onlyOwner {
    buildingRewardManagement.createNewRewardBuildingEntity(_buildingPrice, _buildingRewardPerSecond);
  }

  function updateRewardBuildingEntity(uint256 _buildingType, uint256 _buildingPrice, uint256 _buildingRewardPerSecond) external onlyOwner {
    buildingRewardManagement.updateRewardBuildingEntity(_buildingType, _buildingPrice, _buildingRewardPerSecond);
  }

  function addBuildings(address[] memory buildings, uint8 _type) public onlyOwner {
    buildingRewardManagement.addBuildings(buildings, _type);
  }

  function removeBuildings(address[] memory buildings) public onlyOwner {
    buildingRewardManagement.removeBuildings(buildings);
  }

  function changeMinimumClaimInterval(uint256 _newVal) public onlyOwner {
    buildingRewardManagement.changeMinimumClaimInterval(_newVal);
  }

  // Manual call to swapTokensForUSDC
  function swapTokensForUSDCManual(uint256 tokenAmount) public onlyOwner {
    swapTokensForUSDC(tokenAmount);
  }

  // Manual call to distributeUSDC
  function distributeUSDCManual(uint256 usdcAmount) public onlyOwner {
    distributeUSDC(usdcAmount);
  }

  // Change USDC
  function changeUSDC(IERC20 _newUSDC) public onlyOwner {
    USDC = _newUSDC;
  }

  function getBuildingPrice(uint8 _type) public view returns (uint256) {
    return buildingRewardManagement.getPriceOfBuilding(_type);
  }

  function getRewardPerBuilding(uint8 _type) public view returns (uint256) {
    return buildingRewardManagement.getrewardOfBuilding(_type);
  }

  function getTotalRewardStaked() public view returns (uint256) {
    return buildingRewardManagement.totalRewardStacked();
  }

  function getTotalBuildingTypes() public view returns (uint256) {
    return buildingRewardManagement.totalBuildingTypes();
  }

  function getTotalBuildingsCreated() public view returns (uint256) {
    return buildingRewardManagement.totalBuildingsCreated();
  }

  function getBuildingNumberOf(address _account) public view returns (uint256) {
    return buildingRewardManagement.getBuildingNumberOf(_account);
  }

  function getBuildingNumberOfType(address _account, uint256 _buildingIndex) public view returns (uint256) {
    return buildingRewardManagement.getBuildingNumberOfType(_account, _buildingIndex);
  }

  function getBuildingCreatimeOf(address _account, uint256 _buildingIndex) public view returns (uint256) {
    return buildingRewardManagement.getBuildingCreatimeOf(_account, _buildingIndex);
  }

  function getBuildingLastClaimOf(address _account, uint256 _buildingIndex) public view returns (uint256) {
    return buildingRewardManagement.getBuildingLastClaimOf(_account, _buildingIndex);
  }

  function getBuildingTypeOf(address _account, uint256 _buildingIndex) public view returns (uint256) {
    return buildingRewardManagement.getBuildingTypeOf(_account, _buildingIndex);
  }

  function getRewardAmountOf(address _account) public view returns (uint256) {
    return buildingRewardManagement.getRewardAmountOf(_account);
  }

  function getRewardAmount() public view returns (uint256) {
    require(_msgSender() != address(0), "SENDER CAN'T BE ZERO");
    require(buildingRewardManagement.isBuildingOwner(_msgSender()), 'NO BUILDING OWNER');
    return buildingRewardManagement.getRewardAmountOf(_msgSender());
  }

  function getBuildingRewardAmountOf(address _account, uint256 _buildingIndex) public view returns (uint256) {
    return buildingRewardManagement.getBuildingRewardAmountOf(_account, _buildingIndex);
  }

  function getTotalDailyRewards(address _account) public view returns (uint256) {
    return buildingRewardManagement.getTotalDailyRewards(_account);
  }

  function getTotalBuildingAmount(address _account) public view returns (uint256) {
    return buildingRewardManagement.getTotalBuildingAmount(_account);
  }

  function getBuildingClaimEligibility(address _account, uint256 _buildingIndex) public view returns (bool) {
    return buildingRewardManagement.getBuildingClaimEligibility(_account, _buildingIndex);
  }

  function getMinimumClaimInterval() public view returns (uint256) {
    return buildingRewardManagement.minimumClaimInterval();
  }

  function isBuildingOwner(address account) public view returns (bool) {
    return buildingRewardManagement.isBuildingOwner(account);
  }

  function getAffiliateReward(address _affiliateAddress) public view returns (uint256) {
    return _affiliateRewards[_affiliateAddress];
  }

  function getBuildingOwners() external view returns (address[] memory) {
    return buildingRewardManagement.getBuildingOwners();
  }

  function getBuildingOwnersRange(uint256 _start, uint256 _end) external view returns (address[] memory) {
    return buildingRewardManagement.getBuildingOwnersRange(_start, _end);
  }

  function getBuildingNumbersRange(uint256 _start, uint256 _end) external view returns (uint256[] memory) {
    return buildingRewardManagement.getBuildingNumbersRange(_start, _end);
  }

  function getTotalDailyRewardsRange(uint256 _start, uint256 _end) external view returns (uint256[] memory) {
    return buildingRewardManagement.getTotalDailyRewardsRange(_start, _end);
  }
}


// File: contracts/BuildingRewardManagement.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import '@openzeppelin/contracts/access/Ownable.sol';

contract BuildingRewardManagement is Ownable {
  struct BuildingEntity {
    uint256 creationTime;
    uint256 lastClaimTime;
    uint256 typee;
  }

  struct RewardBuildingEntity {
    uint256 price;
    uint256 rewardPerSecond;
  }
  mapping(uint256 => RewardBuildingEntity) private buildingTypes;
  mapping(address => BuildingEntity[]) private buildingsOfUser;

  uint256 public totalBuildingsCreated = 0;
  uint256 public totalBuildingTypes = 0;
  uint256 public totalRewardStacked = 0;

  uint256 public minimumClaimInterval = 60;
  uint256 public maintenanceInterval = 0;

  // Store all building owners
  address[] public buildingOwners;

  constructor(uint256 _typesNumber, uint256[] memory _buildingPrices, uint256[] memory _buildingRewardsPerSecond) Ownable(msg.sender) {
    require(_typesNumber > 0, 'TYPES ARRAY EMPTY');
    require(
      _typesNumber == _buildingPrices.length && _typesNumber == _buildingRewardsPerSecond.length,
      'ARRAY TYPES AND PARAMETERS NOT SAME LENGTH'
    );

    for (uint256 i = 0; i < _typesNumber; i++) {
      buildingTypes[i] = RewardBuildingEntity(_buildingPrices[i] * (10 ** 18), _buildingRewardsPerSecond[i]);
      totalBuildingTypes++;
    }
  }

  function createBuilding(address _account, uint256 _type) external onlyOwner returns (uint256) {
    require(buildingTypes[_type].rewardPerSecond > 0, 'TYPE NOT VALID');

    // Add the owner to the list of building owners
    if (!_isBuildingOwner(_account)) buildingOwners.push(_account);

    uint256 creaTime = block.timestamp;
    buildingsOfUser[_account].push(BuildingEntity({creationTime: creaTime, lastClaimTime: creaTime, typee: _type}));
    totalBuildingsCreated++;

    return creaTime;
  }

  function _getBuildingWithCreatime(
    BuildingEntity[] storage buildings,
    uint256 _creationTime
  ) private view returns (BuildingEntity storage) {
    uint256 numberOfBuildings = buildings.length;
    require(numberOfBuildings > 0, "CASHOUT ERROR: You don't have buildings to cash out");
    bool found = false;
    int256 index = binary_search(buildings, 0, numberOfBuildings, _creationTime);
    uint256 validIndex;
    if (index >= 0) {
      found = true;
      validIndex = uint256(index);
    }
    require(found, 'BUILDING SEARCH: No BUILDING Found with this blocktime');
    return buildings[validIndex];
  }

  function binary_search(BuildingEntity[] memory arr, uint256 low, uint256 high, uint256 x) private view returns (int256) {
    if (high >= low) {
      uint256 mid = (high + low) / 2;
      if (arr[mid].creationTime == x) {
        return int256(mid);
      } else if (arr[mid].creationTime > x) {
        return binary_search(arr, low, mid - 1, x);
      } else {
        return binary_search(arr, mid + 1, high, x);
      }
    } else {
      return -1;
    }
  }

  // function testStr(string memory str) private pure returns (bool) {
  //   bytes memory b = bytes(str);
  //   if (b.length > 13) return false;

  //   for (uint256 i; i < b.length; i++) {
  //     bytes1 char = b[i];

  //     if (
  //       !(char >= 0x30 && char <= 0x39) && //9-0
  //       !(char >= 0x41 && char <= 0x5A) && //A-Z
  //       !(char >= 0x61 && char <= 0x7A) && //a-z
  //       !(char == 0x2E) //.
  //     ) return false;
  //   }

  //   return true;
  // }

  function cashoutBuildingReward(address _account, uint256 _buildingIndex) external onlyOwner returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    if (checkActivity(_account)) {
      return 0;
    }
    BuildingEntity[] storage buildings = buildingsOfUser[_account];
    require(_buildingIndex < buildings.length, 'BUILDING: CREATIME must be higher than zero');
    BuildingEntity storage building = buildings[_buildingIndex];
    uint256 nowTime = block.timestamp;
    uint256 rewardUnit = (nowTime - building.lastClaimTime);
    require(rewardUnit > minimumClaimInterval, 'CLAIM NOT ELIGIBLE, WAIT BEFORE ELIGIBILITY');
    uint256 rewardBuilding = computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);
    building.lastClaimTime = nowTime;
    return rewardBuilding;
  }

  function cashoutBuildingRewardByCreatime(address _account, uint256 _creationTime) external onlyOwner returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    if (checkActivity(_account)) {
      return 0;
    }
    require(_creationTime > 0, 'BUILDING: CREATIME must be higher than zero');
    BuildingEntity[] storage buildings = buildingsOfUser[_account];
    BuildingEntity storage building = _getBuildingWithCreatime(buildings, _creationTime);
    uint256 nowTime = block.timestamp;
    uint256 rewardUnit = (nowTime - building.lastClaimTime);
    require(rewardUnit > minimumClaimInterval, 'CLAIM NOT ELIGIBLE, WAIT BEFORE ELIGIBILITY');
    uint256 rewardBuilding = computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);
    building.lastClaimTime = nowTime;
    totalRewardStacked += rewardBuilding;
    return rewardBuilding;
  }

  function cashoutAllBuildingsReward(address _account) external onlyOwner returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    if (checkActivity(_account)) {
      return 0;
    }
    BuildingEntity[] storage buildings = buildingsOfUser[_account];
    uint256 numberOfBuildings = buildings.length;
    BuildingEntity storage building;
    uint256 rewardsTotal = 0;
    uint256 nowTime = block.timestamp;
    uint256 rewardUnit;
    for (uint256 i = 0; i < numberOfBuildings; i++) {
      building = buildings[i];
      rewardUnit = nowTime - building.lastClaimTime;
      if (rewardUnit > minimumClaimInterval) {
        rewardsTotal += computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);
        building.lastClaimTime = nowTime;
      }
    }
    totalRewardStacked += rewardsTotal;
    return rewardsTotal;
  }

  function computeRewardAvailable(uint256 _lastClaimTime, uint256 _rewardPerSecond) private view returns (uint256) {
    return (block.timestamp - _lastClaimTime) * _rewardPerSecond;
  }

  function computeTotalRewardSecond(address _account) external view returns (uint256) {
    uint256 total = 0;
    if (_isBuildingOwner(_account)) {
      BuildingEntity[] storage buildings = buildingsOfUser[_account];
      for (uint256 i = 0; i < buildings.length; i++) {
        total += buildingTypes[buildings[i].typee].rewardPerSecond;
      }
    }
    return total;
  }

  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {
    if (_i == 0) {
      return '0';
    }
    uint256 j = _i;
    uint256 len;
    while (j != 0) {
      len++;
      j /= 10;
    }
    bytes memory bstr = new bytes(len);
    uint256 k = len;
    while (_i != 0) {
      k = k - 1;
      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));
      bytes1 b1 = bytes1(temp);
      bstr[k] = b1;
      _i /= 10;
    }
    return string(bstr);
  }

  function addBuildings(address[] memory _buildings, uint256 _type) external onlyOwner {
    require(buildingTypes[_type].rewardPerSecond > 0, 'LEVEL NOT VALID');
    uint256 creaTime = block.timestamp;
    for (uint256 i = 0; i < _buildings.length; i++) {
      buildingsOfUser[_buildings[i]].push(BuildingEntity({creationTime: creaTime, lastClaimTime: creaTime, typee: _type}));
      totalBuildingsCreated++;
    }
  }

  function removeBuildings(address[] memory buildingrs) external onlyOwner {
    for (uint256 i = 0; i < buildingrs.length; i++) {
      totalBuildingsCreated -= buildingsOfUser[buildingrs[i]].length;
      delete buildingsOfUser[buildingrs[i]];
    }
  }

  function checkActivity(address _account) internal returns (bool) {
    if (isMaintenanceOn()) {
      BuildingEntity[] memory buildings = buildingsOfUser[_account];
      if (buildings[buildings.length - 1].creationTime + maintenanceInterval < block.timestamp) {
        totalBuildingsCreated -= buildings.length;
        delete buildings;
        return true;
      }
    }
    return false;
  }

  function createNewRewardBuildingEntity(uint256 _buildingprice, uint256 _buildingRewardPerSecond) external onlyOwner {
    totalBuildingTypes++;
    buildingTypes[totalBuildingTypes] = RewardBuildingEntity(_buildingprice, _buildingRewardPerSecond);
  }

  function updateRewardBuildingEntity(uint256 _buildingType, uint256 _buildingprice, uint256 _buildingRewardPerSecond) external onlyOwner {
    buildingTypes[_buildingType] = RewardBuildingEntity(_buildingprice, _buildingRewardPerSecond);
  }

  function changeMinimumClaimInterval(uint256 _newVal) external onlyOwner {
    minimumClaimInterval = _newVal;
  }

  function getRewardAmountOf(address _account) external view returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    uint256 buildingsCount;

    BuildingEntity[] memory buildings = buildingsOfUser[_account];
    BuildingEntity memory building;
    buildingsCount = buildings.length;
    uint256 rewardsTotal = 0;
    for (uint256 i = 0; i < buildings.length; i++) {
      building = buildings[i];
      rewardsTotal += computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);
    }
    return rewardsTotal;
  }

  function getTotalBuildingAmount(address _account) external view returns (uint256) {
    uint256 totalAmount = 0;
    uint256 buildingCount = buildingsOfUser[_account].length;
    for (uint256 i = 0; i < buildingCount; i++) {
      uint256 buildingType = buildingsOfUser[_account][i].typee;
      uint256 price = buildingTypes[buildingType].price;
      totalAmount += price;
    }
    return totalAmount;
  }

  function getTotalDailyRewards(address _account) public view returns (uint256) {
    uint256 dailyTotalRewards = 0;
    uint256 buildingCount = buildingsOfUser[_account].length;

    for (uint256 i = 0; i < buildingCount; i++) {
      uint256 buildingType = buildingsOfUser[_account][i].typee;
      uint256 rewardPerSecond = buildingTypes[buildingType].rewardPerSecond;
      dailyTotalRewards += rewardPerSecond;
    }
    return dailyTotalRewards;
  }

  function getBuildingRewardByCreatime(address _account, uint256 _creationTime) external view returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    BuildingEntity[] storage buildings = buildingsOfUser[_account];
    BuildingEntity storage building = _getBuildingWithCreatime(buildings, _creationTime);
    uint256 rewards = computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);
    return rewards;
  }

  function getBuildingRewardAmountOf(address _account, uint256 _buildingIndex) external view returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    BuildingEntity[] storage buildings = buildingsOfUser[_account];
    require(_buildingIndex < buildings.length, 'Index greater than building array size');
    BuildingEntity storage building = buildings[_buildingIndex];
    uint256 rewards = computeRewardAvailable(building.lastClaimTime, buildingTypes[building.typee].rewardPerSecond);
    return rewards;
  }

  function getBuildingNumberOf(address _account) public view returns (uint256) {
    return buildingsOfUser[_account].length;
  }

  function getBuildingNumberOfType(address _account, uint256 _type) public view returns (uint256) {
    require(_isBuildingOwner(_account), 'GET BUILDING NUMBER TYPE OF : NO BUILDING OWNER');
    BuildingEntity[] memory buildings = buildingsOfUser[_account];
    uint256 cpt = 0;
    for (uint i = 0; i < buildings.length; i++) {
      if (buildings[i].typee == _type) {
        cpt++;
      }
    }
    return cpt;
  }

  function getBuildingCreatimeOf(address _account, uint256 _buildingIndex) public view returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    require(_buildingIndex < buildingsOfUser[_account].length, 'Index greater than building array size');
    return buildingsOfUser[_account][_buildingIndex].creationTime;
  }

  function getBuildingLastClaimOf(address _account, uint256 _buildingIndex) public view returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    require(_buildingIndex < buildingsOfUser[_account].length, 'Index greater than building array size');
    return buildingsOfUser[_account][_buildingIndex].lastClaimTime;
  }

  function getBuildingTypeOf(address _account, uint256 _buildingIndex) public view returns (uint256) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    require(_buildingIndex < buildingsOfUser[_account].length, 'Index greater than building array size');
    return buildingsOfUser[_account][_buildingIndex].typee;
  }

  function _isBuildingOwner(address _account) private view returns (bool) {
    return buildingsOfUser[_account].length > 0;
  }

  function isBuildingOwner(address _account) external view returns (bool) {
    return _isBuildingOwner(_account);
  }

  function getPriceOfBuilding(uint8 _type) external view returns (uint256) {
    return buildingTypes[_type].price;
  }

  function getrewardOfBuilding(uint8 _type) external view returns (uint256) {
    return buildingTypes[_type].rewardPerSecond;
  }

  function getBuildingClaimEligibility(address _account, uint256 _buildingIndex) external view returns (bool) {
    require(_isBuildingOwner(_account), 'GET REWARD OF: NO BUILDING OWNER');
    require(_buildingIndex < buildingsOfUser[_account].length, 'Index greater than building array size');
    return block.timestamp - buildingsOfUser[_account][_buildingIndex].lastClaimTime > minimumClaimInterval;
  }

  function isMaintenanceOn() public view returns (bool) {
    return maintenanceInterval > 0;
  }

  function getBuildingOwners() external view returns (address[] memory) {
    return buildingOwners;
  }

  // Ranged version of getBuildingOwners
  function getBuildingOwnersRange(uint256 _start, uint256 _end) external view returns (address[] memory) {
    require(_start < _end, 'INVALID RANGE');
    require(_end <= buildingOwners.length, 'OUT OF RANGE');

    address[] memory owners = new address[](_end - _start);
    for (uint256 i = _start; i < _end; i++) owners[i - _start] = buildingOwners[i];

    return owners;
  }

  // Number of buildings owned by each building owner, ranged
  function getBuildingNumbersRange(uint256 _start, uint256 _end) external view returns (uint256[] memory) {
    require(_start < _end, 'INVALID RANGE');
    require(_end <= buildingOwners.length, 'OUT OF RANGE');

    uint256[] memory numbers = new uint256[](_end - _start);
    for (uint256 i = _start; i < _end; i++) numbers[i - _start] = buildingsOfUser[buildingOwners[i]].length;

    return numbers;
  }

  // Total daily rewards for each building owner, ranged
  function getTotalDailyRewardsRange(uint256 _start, uint256 _end) external view returns (uint256[] memory) {
    require(_start < _end, 'INVALID RANGE');
    require(_end <= buildingOwners.length, 'OUT OF RANGE');

    uint256[] memory rewards = new uint256[](_end - _start);
    for (uint256 i = _start; i < _end; i++) rewards[i - _start] = getTotalDailyRewards(buildingOwners[i]);

    return rewards;
  }
}


// File: contracts/interfaces/IERC20Burnable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

interface IERC20Burnable is IERC20 {
  function burn(uint256 amount) external;
}


// File: contracts/interfaces/IUniswapV2Router01.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

interface IUniswapV2Router01 {
  function factory() external pure returns (address);
  function WETH() external pure returns (address);

  function addLiquidity(
    address tokenA,
    address tokenB,
    uint amountADesired,
    uint amountBDesired,
    uint amountAMin,
    uint amountBMin,
    address to,
    uint deadline
  ) external returns (uint amountA, uint amountB, uint liquidity);
  function addLiquidityETH(
    address token,
    uint amountTokenDesired,
    uint amountTokenMin,
    uint amountETHMin,
    address to,
    uint deadline
  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
  function removeLiquidity(
    address tokenA,
    address tokenB,
    uint liquidity,
    uint amountAMin,
    uint amountBMin,
    address to,
    uint deadline
  ) external returns (uint amountA, uint amountB);
  function removeLiquidityETH(
    address token,
    uint liquidity,
    uint amountTokenMin,
    uint amountETHMin,
    address to,
    uint deadline
  ) external returns (uint amountToken, uint amountETH);
  function removeLiquidityWithPermit(
    address tokenA,
    address tokenB,
    uint liquidity,
    uint amountAMin,
    uint amountBMin,
    address to,
    uint deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint amountA, uint amountB);
  function removeLiquidityETHWithPermit(
    address token,
    uint liquidity,
    uint amountTokenMin,
    uint amountETHMin,
    address to,
    uint deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint amountToken, uint amountETH);
  function swapExactTokensForTokens(
    uint amountIn,
    uint amountOutMin,
    address[] calldata path,
    address to,
    uint deadline
  ) external returns (uint[] memory amounts);
  function swapTokensForExactTokens(
    uint amountOut,
    uint amountInMax,
    address[] calldata path,
    address to,
    uint deadline
  ) external returns (uint[] memory amounts);
  function swapExactETHForTokens(
    uint amountOutMin,
    address[] calldata path,
    address to,
    uint deadline
  ) external payable returns (uint[] memory amounts);
  function swapTokensForExactETH(
    uint amountOut,
    uint amountInMax,
    address[] calldata path,
    address to,
    uint deadline
  ) external returns (uint[] memory amounts);
  function swapExactTokensForETH(
    uint amountIn,
    uint amountOutMin,
    address[] calldata path,
    address to,
    uint deadline
  ) external returns (uint[] memory amounts);
  function swapETHForExactTokens(
    uint amountOut,
    address[] calldata path,
    address to,
    uint deadline
  ) external payable returns (uint[] memory amounts);

  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: contracts/interfaces/IUniswapV2Router02.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
  function removeLiquidityETHSupportingFeeOnTransferTokens(
    address token,
    uint liquidity,
    uint amountTokenMin,
    uint amountETHMin,
    address to,
    uint deadline
  ) external returns (uint amountETH);
  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
    address token,
    uint liquidity,
    uint amountTokenMin,
    uint amountETHMin,
    address to,
    uint deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint amountETH);

  function swapExactTokensForTokensSupportingFeeOnTransferTokens(
    uint amountIn,
    uint amountOutMin,
    address[] calldata path,
    address to,
    uint deadline
  ) external;
  function swapExactETHForTokensSupportingFeeOnTransferTokens(
    uint amountOutMin,
    address[] calldata path,
    address to,
    uint deadline
  ) external payable;
  function swapExactTokensForETHSupportingFeeOnTransferTokens(
    uint amountIn,
    uint amountOutMin,
    address[] calldata path,
    address to,
    uint deadline
  ) external;
}

