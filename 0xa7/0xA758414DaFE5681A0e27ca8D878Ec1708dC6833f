
// File: src/dinoverter.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;


import { IERC20 } from "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import { Ownable } from "openzeppelin-contracts/contracts/access/Ownable.sol";
import { IUniswapV3Pool } from "./IUniswapV3Pool.sol";


contract Dinoverter is Ownable {
    // ierc20, minAmount, maxAmount
    IERC20 public dino;
    IERC20 public dinoshi; 

    uint256 public minAmountDino;
    uint256 public maxAmountDino;

    uint256 public minAmountDinoshi;
    uint256 public maxAmountDinoshi; 

    IUniswapV3Pool public dinoPool;
    IUniswapV3Pool public dinoshiPool;

    uint256 public errorPercentage = 1;

    constructor(address _dinoPool, address _dinoshiPool, address _dinoToken, address _dinoshiToken) Ownable(msg.sender) {
        dinoPool = IUniswapV3Pool(_dinoPool);
        dinoshiPool = IUniswapV3Pool(_dinoshiPool);
        dino = IERC20(_dinoToken);
        dinoshi = IERC20(_dinoshiToken);
    }

    function addFunds(uint256 _amount, address _token) external onlyOwner {
        IERC20 token = IERC20(_token);
        token.transferFrom(msg.sender, address(this), _amount);
        emit AddFunds(msg.sender, _amount, _token);
    }

    function buyWithWei(uint256 _amountTokens, bool _isBuyingDino) external payable {
        if (_isBuyingDino) {
            require(_amountTokens >= minAmountDino && _amountTokens <= maxAmountDino, "Amount out of range for Dino");
        } else {
            require(_amountTokens >= minAmountDinoshi && _amountTokens <= maxAmountDinoshi, "Amount out of range for Dinoshi");
        }

        address poolToUse = _isBuyingDino ? address(dinoPool) : address(dinoshiPool);
        require(poolToUse != address(0), "Pool not set");

        IERC20 token = _isBuyingDino ? dino : dinoshi;
        require(token != IERC20(address(0)), "Token not set");

        uint amountOut = getAmountOutFromEth(msg.value, poolToUse);
        require(amountOut > 0, "Amount out is 0");

        uint amountOfError = (amountOut * errorPercentage) / 100;
        require(
            amountOut + amountOfError > _amountTokens && amountOut - amountOfError < _amountTokens, 
            "Amount out of range"
        );

        uint balanceOfToken = token.balanceOf(address(this));
        require(balanceOfToken >= amountOut, "Not enough tokens in contract");

        bool transferSuccess = token.transfer(msg.sender, amountOut);
        require(transferSuccess, "Transfer failed");

        emit TokenExchanged(msg.sender, _amountTokens, msg.value);
    }


    function getSqrt(address _poolToUse) public view returns (uint256) {
        IUniswapV3Pool pool = IUniswapV3Pool(_poolToUse);
        (uint160 sqrtPriceX96,,,,,,) =  pool.slot0();
         return sqrtPriceX96;
	}
    
	function getAmountOutFromEth(uint256 _amount, address _poolToUse) public view returns (uint256) {
		uint256 result =  (2**192)*_amount/(getSqrt(_poolToUse)**2);
		return result;
	}

	function getAmountOutFromTokenToETH(uint256 _amount, address _poolToUse) public view returns (uint256) {
        uint256 result = ((getSqrt(_poolToUse)**2)*_amount)/(2**192);
        return result;
	}
    function setBuyLimitAmounts(uint256 _minAmount, uint256 _maxAmount, bool _isSettingDino) public onlyOwner {
        require(_minAmount < _maxAmount, "Min amount should be less than max amount");
        
        if (_isSettingDino) {
            minAmountDino = _minAmount;
            maxAmountDino = _maxAmount;
        } else {
            minAmountDinoshi = _minAmount;
            maxAmountDinoshi = _maxAmount;
        }
    }

    function withdraw() public onlyOwner {
		uint256 ethBalance = address(this).balance;
		payable(msg.sender).transfer(ethBalance);
		emit Withdraw(msg.sender, ethBalance);
	}
    function withdrawToken(IERC20 _token) public onlyOwner {
        uint256 tokenBalance = _token.balanceOf(address(this));
        _token.transfer(msg.sender, tokenBalance);
        emit WithdrawTokens(msg.sender, _token, tokenBalance);
    }
    function updateDinoPool(address _dinoPool) public onlyOwner {
        dinoPool = IUniswapV3Pool(_dinoPool);
        emit PoolUpdated(msg.sender, _dinoPool);
    }
    function updateDinoshiPool(address _dinoshiPool) public onlyOwner {
        dinoshiPool = IUniswapV3Pool(_dinoshiPool);
        emit PoolUpdated(msg.sender, _dinoshiPool);
    }
    function updateDinoToken(address _dinoToken) public onlyOwner {
        dino = IERC20(_dinoToken);
        emit TokenUpdated(msg.sender, _dinoToken);
    }
    function updateDinoshiToken(address _dinoshiToken) public onlyOwner {
        dinoshi = IERC20(_dinoshiToken);
        emit TokenUpdated(msg.sender, _dinoshiToken);
    }

    event TokenUpdated(address indexed user, address token);
    event PoolUpdated(address indexed user, address pool);
    event Withdraw(address indexed user, uint256 amount);
	event WithdrawTokens(address indexed user, IERC20 indexed token, uint256 amount);
    event TokenExchanged(address indexed user, uint256 amountTokens, uint256 amountEth);
	event AddFunds(address indexed user, uint256 amount, address token);
}

// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: src/IUniswapV3Pool.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

interface IUniswapV3Pool {
    event Burn(
        address indexed owner,
        int24 indexed tickLower,
        int24 indexed tickUpper,
        uint128 amount,
        uint256 amount0,
        uint256 amount1
    );
    event Collect(
        address indexed owner,
        address recipient,
        int24 indexed tickLower,
        int24 indexed tickUpper,
        uint128 amount0,
        uint128 amount1
    );
    event CollectProtocol(
        address indexed sender,
        address indexed recipient,
        uint128 amount0,
        uint128 amount1
    );
    event Flash(
        address indexed sender,
        address indexed recipient,
        uint256 amount0,
        uint256 amount1,
        uint256 paid0,
        uint256 paid1
    );
    event IncreaseObservationCardinalityNext(
        uint16 observationCardinalityNextOld,
        uint16 observationCardinalityNextNew
    );
    event Initialize(uint160 sqrtPriceX96, int24 tick);
    event Mint(
        address sender,
        address indexed owner,
        int24 indexed tickLower,
        int24 indexed tickUpper,
        uint128 amount,
        uint256 amount0,
        uint256 amount1
    );
    event SetFeeProtocol(
        uint8 feeProtocol0Old,
        uint8 feeProtocol1Old,
        uint8 feeProtocol0New,
        uint8 feeProtocol1New
    );
    event Swap(
        address indexed sender,
        address indexed recipient,
        int256 amount0,
        int256 amount1,
        uint160 sqrtPriceX96,
        uint128 liquidity,
        int24 tick
    );

    function burn(
        int24 tickLower,
        int24 tickUpper,
        uint128 amount
    ) external returns (uint256 amount0, uint256 amount1);

    function collect(
        address recipient,
        int24 tickLower,
        int24 tickUpper,
        uint128 amount0Requested,
        uint128 amount1Requested
    ) external returns (uint128 amount0, uint128 amount1);

    function collectProtocol(
        address recipient,
        uint128 amount0Requested,
        uint128 amount1Requested
    ) external returns (uint128 amount0, uint128 amount1);

    function factory() external view returns (address);

    function fee() external view returns (uint24);

    function feeGrowthGlobal0X128() external view returns (uint256);

    function feeGrowthGlobal1X128() external view returns (uint256);

    function flash(
        address recipient,
        uint256 amount0,
        uint256 amount1,
        bytes memory data
    ) external;

    function increaseObservationCardinalityNext(
        uint16 observationCardinalityNext
    ) external;

    function initialize(uint160 sqrtPriceX96) external;

    function liquidity() external view returns (uint128);

    function maxLiquidityPerTick() external view returns (uint128);

    function mint(
        address recipient,
        int24 tickLower,
        int24 tickUpper,
        uint128 amount,
        bytes memory data
    ) external returns (uint256 amount0, uint256 amount1);

    function observations(uint256)
        external
        view
        returns (
            uint32 blockTimestamp,
            int56 tickCumulative,
            uint160 secondsPerLiquidityCumulativeX128,
            bool initialized
        );

    function observe(uint32[] memory secondsAgos)
        external
        view
        returns (
            int56[] memory tickCumulatives,
            uint160[] memory secondsPerLiquidityCumulativeX128s
        );

    function positions(bytes32)
        external
        view
        returns (
            uint128 liquidity,
            uint256 feeGrowthInside0LastX128,
            uint256 feeGrowthInside1LastX128,
            uint128 tokensOwed0,
            uint128 tokensOwed1
        );

    function protocolFees()
        external
        view
        returns (uint128 token0, uint128 token1);

    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;

    function slot0()
        external
        view
        returns (
            uint160 sqrtPriceX96,
            int24 tick,
            uint16 observationIndex,
            uint16 observationCardinality,
            uint16 observationCardinalityNext,
            uint8 feeProtocol,
            bool unlocked
        );

    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)
        external
        view
        returns (
            int56 tickCumulativeInside,
            uint160 secondsPerLiquidityInsideX128,
            uint32 secondsInside
        );

    function swap(
        address recipient,
        bool zeroForOne,
        int256 amountSpecified,
        uint160 sqrtPriceLimitX96,
        bytes memory data
    ) external returns (int256 amount0, int256 amount1);

    function tickBitmap(int16) external view returns (uint256);

    function tickSpacing() external view returns (int24);

    function ticks(int24)
        external
        view
        returns (
            uint128 liquidityGross,
            int128 liquidityNet,
            uint256 feeGrowthOutside0X128,
            uint256 feeGrowthOutside1X128,
            int56 tickCumulativeOutside,
            uint160 secondsPerLiquidityOutsideX128,
            uint32 secondsOutside,
            bool initialized
        );

    function token0() external view returns (address);

    function token1() external view returns (address);
}

// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

