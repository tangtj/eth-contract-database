
// File: contracts/SteppableNFT.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";

import {HotSteppable} from "./HotSteppable.sol";

contract SteppableNFT is
  ERC721,
  Pausable,
  Ownable,
  ERC721Burnable,
  HotSteppable
{
  address constant BLACK_HOLE_ADDRESS =
    0x0000000000000000000000000000000000000000;
  address payable private beneficiary;
  address private developer;
  bool private mintingClosed;
  uint256 private _tokenIdCounter;
  uint256 private developerAllocation;
  uint256 private developerAllocated;

  constructor(
    uint256 _basePrice,
    uint256 _maxPrice,
    uint256 _priceIncrementToSet,
    uint256 _startPriceToSet,
    uint256 _bufferInSecondsToSet,
    uint256 _maxBatchMintToSet,
    uint256 _startPreviousBucketCountToSet,
    address payable _beneficiary,
    address _developer
  ) ERC721("Interleave Genesis", "INTER") {
    _setBasePrice(_basePrice);
    _setMaxPrice(_maxPrice);
    _setPriceIncrement(_priceIncrementToSet);
    _setStartPrice(_startPriceToSet);
    _setPriceBufferInSeconds(_bufferInSecondsToSet);
    _setMaxBatchMint(_maxBatchMintToSet);
    // we start with the previous price and current price the same:
    _setStartPreviousPrice(_startPriceToSet);
    _setStartPreviousBucketCount(_startPreviousBucketCountToSet);
    beneficiary = _beneficiary;
    developer = _developer;
    // start in minting mode:
    mintingClosed = false;
    // and in surge mode, not openmint mode:
    _setSurgeModeOn();
    // start paused using the inherited function, as we don't
    // want to set any zero point reference here:
    _pause();
  }

  modifier whenMintingOpen() {
    require(!mintingClosed, "Minting must be open");
    _;
  }

  modifier whenMintingClosed(address from) {
    require(
      (mintingClosed || from == BLACK_HOLE_ADDRESS),
      "Minting must be closed"
    );
    _;
  }

  event ethWithdrawn(uint256 indexed withdrawal, uint256 effectiveDate);
  event mintingStarted(uint256 mintStartTime);
  event mintingEnded(uint256 mintEndTime);

  function pause() external onlyOwner {
    _pause();
    _handleZeroPointReference();
  }

  function unpause() external onlyOwner {
    _unpause();
    _updateZeroPoint();
    if (_pausedAt == 0) {
      // This is the start of minting. Say so:
      emit mintingStarted(block.timestamp);
    }
  }

  function closeMinting() external onlyOwner {
    performMintingClose();
  }

  function performMintingClose() internal {
    mintingClosed = true;
    emit mintingEnded(block.timestamp);
  }

  function setBasePrice(uint256 _basePriceToSet) external onlyOwner {
    _setBasePrice(_basePriceToSet);
  }

  function setMaxBatchMint(uint256 _maxBatchMintToSet) external onlyOwner {
    _setMaxBatchMint(_maxBatchMintToSet);
  }

  function setPriceIncrement(uint256 _priceIncrementToSet) external onlyOwner {
    _setPriceIncrement(_priceIncrementToSet);
  }

  function setPriceBufferInSeconds(uint256 _BufferInSecondsToSet)
    external
    onlyOwner
  {
    _setPriceBufferInSeconds(_BufferInSecondsToSet);
  }

  function setSurgeModeOff() external onlyOwner {
    _setSurgeModeOff();
  }

  function setSurgeModeOn() external onlyOwner {
    _setSurgeModeOn();
  }

  function getEndTimeStamp() external view returns (uint256) {
    return (_endTimeStamp);
  }

  // The fallback function is executed on a call to the contract if
  // none of the other functions match the given function signature.
  fallback() external payable {
    revert();
  }

  receive() external payable {
    revert();
  }

  // Ensure that the beneficiary can receive deposited ETH:
  function withdraw(uint256 _withdrawal) external onlyOwner returns (bool) {
    (bool success, ) = beneficiary.call{value: _withdrawal}("");
    require(success, "Transfer failed.");
    emit ethWithdrawn(_withdrawal, block.timestamp);
    return true;
  }

  function getPrice()
    public
    view
    whenNotPaused
    whenMintingOpen
    returns (
      uint256,
      uint256,
      uint256
    )
  {
    return (_getPrice());
  }

  function steppableMint(uint256 quantity)
    external
    payable
    whenNotPaused
    whenMintingOpen
  {
    // Don't want to try and mint 0 NFTs for 0 ETH:
    require(
      (quantity > 0) && (quantity <= _maxBatchMint),
      "Quantity must be greater than 0 and less than or equal to maximum"
    );

    // Get the price
    uint256 NFTPrice;
    uint256 bucketNumberToAdd;
    uint256 OldNFTPrice;
    (NFTPrice, bucketNumberToAdd, OldNFTPrice) = _getPrice();

    // We need the surge price * quantity to have been paid in:
    if (msg.value < (quantity * NFTPrice)) {
      // Check the buffer
      require(
        _withinBuffer(bucketNumberToAdd) &&
          (msg.value >= (quantity * OldNFTPrice)),
        "Insufficient ETH for surge adjusted price"
      );
    }

    // Update the bucket details IF we need to:
    if (bucketNumberToAdd > 0) {
      _updateBuckets(bucketNumberToAdd, NFTPrice, OldNFTPrice, quantity);
    } else {
      _recordMinting(quantity);
    }

    // Mint required qantity:
    performMinting(quantity, msg.sender);

    // Check if this is the end:
    if (block.timestamp > _endTimeStamp) {
      performMintingClose();
    }

    emit _steppableMinting(msg.sender, quantity, msg.value, block.timestamp);
  }

  function performMinting(uint256 quantityToMint, address to) internal {
    uint256 tokenIdToMint = _tokenIdCounter;
    for (uint256 i = 0; i < quantityToMint; i++) {
      _safeMint(to, tokenIdToMint);
      tokenIdToMint += 1;
    }
    _tokenIdCounter = tokenIdToMint;
  }

  function getDeveloperAllocationDetails()
    external
    view
    onlyOwner
    returns (uint256, uint256)
  {
    return (developerAllocation, developerAllocated);
  }

  function mintDeveloperAllocation(uint256 quantity)
    external
    onlyOwner
    whenMintingClosed(msg.sender)
  {
    if (developerAllocation == 0) {
      developerAllocation = (((_tokenIdCounter * 204) / 10000) + 1);
    }

    uint256 remainingDeveloperAllocation = (developerAllocation -
      developerAllocated);
    require(remainingDeveloperAllocation > 0, "Developer allocation exhausted");

    if (remainingDeveloperAllocation < quantity) {
      quantity = remainingDeveloperAllocation;
    }

    developerAllocated += quantity;

    // Mint required qantity:
    performMinting(quantity, developer);

    emit _developerAllocationMinting(
      developer,
      quantity,
      remainingDeveloperAllocation - quantity,
      block.timestamp
    );
  }

  function _beforeTokenTransfer(
    address from,
    address to,
    uint256 tokenId
  ) internal override(ERC721) whenNotPaused whenMintingClosed(from) {
    super._beforeTokenTransfer(from, to, tokenId);
  }

  function _baseURI() internal pure override returns (string memory) {
    return "https://arweave.net/u7QmmY8LhngU50EqUjjhdB6h8tnqK-9opSGmYVI8-v8";
  }

  function tokenURI(uint256 tokenId)
    public
    view
    override
    returns (string memory)
  {
    require(
      _exists(tokenId),
      "ERC721Metadata: URI query for nonexistent token"
    );
    return _baseURI();
  }

  // The following functions are overrides required by Solidity.

  function supportsInterface(bytes4 interfaceId)
    public
    view
    override(ERC721)
    returns (bool)
  {
    return super.supportsInterface(interfaceId);
  }
}


// File: @openzeppelin/contracts/token/ERC721/ERC721.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../ERC721.sol";
import "../../../utils/Context.sol";

/**
 * @title ERC721 Burnable Token
 * @dev ERC721 Token that can be irreversibly burned (destroyed).
 */
abstract contract ERC721Burnable is Context, ERC721 {
    /**
     * @dev Burns `tokenId`. See {ERC721-_burn}.
     *
     * Requirements:
     *
     * - The caller must own `tokenId` or be an approved operator.
     */
    function burn(uint256 tokenId) public virtual {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
        _burn(tokenId);
    }
}


// File: contracts/HotSteppable.sol
// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.9;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";

/**
 * Contract module which allows children to implement a surge
 * pricing mechanism that can be configured by an authorized account.
 *
 */
abstract contract HotSteppable is Context {
  // Use of constants as this will be part of the agreed offering
  // that I don't think you can change midway, so why not save the gas:
  uint256 constant DEVIATION_PERCENTAGE = 20; // 20%
  uint256 constant BUCKET_LENGTH_IN_SECONDS = 900; // 15 minutes
  uint256 constant FORTY_EIGHT_HOURS_IN_SECONDS = 172800; // 48 hours

  bool private _surgeModeActive;
  uint256 public _basePrice;
  uint256 public _maxPrice;
  uint256 public _currentPrice;
  uint256 public _previousPrice;
  uint256 public _priceBufferInSeconds;
  uint256 public _currentTimeBucket;
  uint256 public _priceIncrement;
  uint256 public _zeroPointReference;
  uint256 public _endTimeStamp;
  uint256 public _countCurrentBucket;
  uint256 public _countPreviousBucket;
  uint256 public _pausedAt;
  uint256 public _totalSecondsPaused;
  uint256 public _maxBatchMint;

  event _BasePriceSet(uint256 basePrice);

  event _MaxPriceSet(uint256 maxPrice);

  event _StartPreviousPriceSet(uint256 previousPrice);

  event _StartPriceSet(uint256 currentPrice);

  event _ZeroPointReferenceSet(uint256 startTimeStamp);

  event _EndTimeStampSet(uint256 endTimeStamp);

  event _PriceBufferSet(uint256 priceBufferInSeconds);

  event _PriceIncrementSet(uint256 priceIncrement);

  event _MaxBatchMintSet(uint256 maxBatchMint);

  event _StartPreviousBucketSet(uint256 previousBucketStartValue);

  event _steppableMinting(
    address recipient,
    uint256 quantity,
    uint256 mintCost,
    uint256 mintTimeStamp
  );

  event _developerAllocationMinting(
    address recipient,
    uint256 quantity,
    uint256 remainingAllocation,
    uint256 mintTimeStamp
  );

  event _SurgeOff(address account);

  event _SurgeOn(address account);

  constructor() {}

  modifier whenSurge() {
    require(_surgeModeActive, "Surge: Surge mode is OFF");
    _;
  }

  modifier whenNotSurge() {
    require(!_surgeModeActive, "Surge: Surge mode is ON");
    _;
  }

  function _handleZeroPointReference() internal virtual {
    _pausedAt = block.timestamp;
  }

  function _updateZeroPoint() internal virtual {
    if (_pausedAt != 0) {
      _totalSecondsPaused = (_totalSecondsPaused +
        (block.timestamp - _pausedAt));
      _setZeroPointReference(_zeroPointReference + _totalSecondsPaused);
    } else {
      if (_zeroPointReference == 0) {
        _setZeroPointReference(block.timestamp);
        _setEndTimeStamp(block.timestamp + FORTY_EIGHT_HOURS_IN_SECONDS);
      }
    }
  }

  function _setBasePrice(uint256 _basePriceToSet)
    internal
    virtual
    returns (bool)
  {
    _basePrice = _basePriceToSet;
    emit _BasePriceSet(_basePriceToSet);
    return true;
  }

  function _setMaxPrice(uint256 _maxPriceToSet)
    internal
    virtual
    returns (bool)
  {
    _maxPrice = _maxPriceToSet;
    emit _MaxPriceSet(_maxPriceToSet);
    return true;
  }

  function _setZeroPointReference(uint256 _zeroPointReferenceToSet)
    internal
    virtual
    returns (bool)
  {
    _zeroPointReference = _zeroPointReferenceToSet;
    emit _ZeroPointReferenceSet(_zeroPointReference);
    return true;
  }

  function _setEndTimeStamp(uint256 _endTimeStampToSet)
    internal
    virtual
    returns (bool)
  {
    _endTimeStamp = _endTimeStampToSet;
    emit _EndTimeStampSet(_endTimeStamp);
    return true;
  }

  function _setStartPrice(uint256 _startPriceToSet)
    internal
    virtual
    returns (bool)
  {
    _currentPrice = _startPriceToSet;
    emit _StartPriceSet(_currentPrice);
    return true;
  }

  function _setStartPreviousPrice(uint256 _startPreviousPriceToSet)
    internal
    virtual
    returns (bool)
  {
    _previousPrice = _startPreviousPriceToSet;
    emit _StartPreviousPriceSet(_previousPrice);
    return true;
  }

  function _setPriceBufferInSeconds(uint256 _bufferInSecondsToSet)
    internal
    virtual
    returns (bool)
  {
    _priceBufferInSeconds = _bufferInSecondsToSet;
    emit _PriceBufferSet(_priceBufferInSeconds);
    return true;
  }

  function _setPriceIncrement(uint256 _priceIncrementToSet)
    internal
    virtual
    returns (bool)
  {
    _priceIncrement = _priceIncrementToSet;
    emit _PriceIncrementSet(_priceIncrementToSet);
    return true;
  }

  function _setMaxBatchMint(uint256 _maxBatchMintToSet)
    internal
    virtual
    returns (bool)
  {
    _maxBatchMint = _maxBatchMintToSet;
    emit _MaxBatchMintSet(_maxBatchMint);
    return true;
  }

  function _setStartPreviousBucketCount(uint256 _startPreviousBucketCount)
    internal
    virtual
    returns (bool)
  {
    _countPreviousBucket = _startPreviousBucketCount;
    emit _StartPreviousBucketSet(_startPreviousBucketCount);
    return true;
  }

  function _setSurgeModeOff() internal virtual whenSurge {
    _surgeModeActive = false;
    emit _SurgeOff(_msgSender());
  }

  function _setSurgeModeOn() internal virtual whenNotSurge {
    _surgeModeActive = true;
    emit _SurgeOn(_msgSender());
  }

  function surgeModeActive() external view virtual returns (bool) {
    return _surgeModeActive;
  }

  function _updateBuckets(
    uint256 _bucketNumberToAdd,
    uint256 _newPrice,
    uint256 _oldPrice,
    uint256 _quantity
  ) internal virtual {
    if (_surgeModeActive) {
      // This is called on mint when we know that the bucket must advance
      _currentTimeBucket = _currentTimeBucket + _bucketNumberToAdd;
      // More than one bucket to add indicates the most recent previous bucket must have been a zeromint:
      if (_bucketNumberToAdd > 1) {
        _countPreviousBucket = 0;
      } else {
        _countPreviousBucket = _countCurrentBucket;
      }
      _countCurrentBucket = _quantity;
      _previousPrice = _oldPrice;
      _currentPrice = _newPrice;
    }
  }

  function _recordMinting(uint256 _quantity) internal virtual {
    if (_surgeModeActive) {
      // This is called on mint when within a bucket. Just increment the current bucket counter
      _countCurrentBucket += _quantity;
    }
  }

  function _withinBuffer(uint256 _bucketNumberToAdd)
    internal
    view
    virtual
    returns (bool)
  {
    // Check if we are within the buffer period:
    uint256 bucketStart = _zeroPointReference +
      ((_currentTimeBucket + _bucketNumberToAdd) * BUCKET_LENGTH_IN_SECONDS);
    return ((block.timestamp - bucketStart) <= _priceBufferInSeconds);
  }

  function _bullish() internal view virtual returns (bool) {
    return ((_countCurrentBucket * 100) >=
      (_countPreviousBucket * (100 + DEVIATION_PERCENTAGE)));
  }

  function _bearish() internal view virtual returns (bool) {
    return ((_countPreviousBucket * 100) >=
      (_countCurrentBucket * (100 + DEVIATION_PERCENTAGE)));
  }

  function _inCurrentBucket() internal view virtual returns (bool) {
    return (((block.timestamp - _zeroPointReference) /
      BUCKET_LENGTH_IN_SECONDS) == _currentTimeBucket);
  }

  function _getPrice()
    internal
    view
    virtual
    returns (
      uint256,
      uint256,
      uint256
    )
  {
    uint256 calculatedPrice = _currentPrice;
    uint256 calculatedPreviousPrice = _previousPrice;
    uint256 numberOfElapsedBucketsSinceCurrent = 0;

    // Only do surge pricing if this is active, otherwise we are in openmint mode:
    if (_surgeModeActive) {
      if (_inCurrentBucket()) {
        // Nothing extra to do - we have set the calculatedPrice to the _currentPrice
        // and the calculatedPreviousPrice to the _previousPrice above.
      } else {
        // First, we have moved buckets, so change the previous price to what was the current price:
        calculatedPreviousPrice = _currentPrice;

        // We need to work our current price based on:
        // (a) How many time buckets have passed
        // (b) How each one (if more than one has passed) relates to the one before
        // Now, any mint in that time period that occured AFTER that bucket has closed will have closed that
        // bucket and opened a new one. So we KNOW that any mints in countCurrentBucket apply to the bucket
        // that is bucketStart + BUCKET_LENGTH_IN_SECONDS and no others occured in that bucket.
        // So first we record what effect that had on the price:
        // See if we have gone down by the deviation percentage. Be aware that in instances of both the
        // current and the previous bucket having a count of 0 BOTH bullish and bearish will resolve to true,
        // as thanks to maths 0 * anything will still = 0. But we put bearish first, as if we had no sales
        // in the previous bucket and no sales in this bucket that is bearish.

        if (_bearish()) {
          if (calculatedPrice > _priceIncrement) {
            calculatedPrice = calculatedPrice - _priceIncrement;
          }
        } else {
          if (_bullish()) {
            // The count for that current bucket was higher than the deviation percentage above the previous
            // bucket therefore we increase the price by _priceIncrement:
            calculatedPrice = calculatedPrice + _priceIncrement;
          } else {
            // _crabish: Current count is within both the increase and decrease boundary. Price stays the same
            // Nothing extra to do - we have set the calculatedPrice to the _currentPrice
            // and the calculatedPreviousPrice to the _previousPrice above.
          }
        }
        // We now need to check how many buckets have passed, as there could be multiple that have not
        // had a mint event to close the previous one and open a new one. These also need to be considered
        // in the pricing:
        numberOfElapsedBucketsSinceCurrent =
          ((block.timestamp - _zeroPointReference) / BUCKET_LENGTH_IN_SECONDS) -
          _currentTimeBucket;
        // A result of 1 means we have ticked over into just one time bucket beyond the current. Anything more than 1 is a zeromint
        // bucket that must be represented.
        // Every time period with 0 mints by definition should be considered to be a decrease event, as
        // either it is infinitely less (as a %) than whatever the previous value was, or is a continuation of
        // no one being willing to mint at this price:

        // Change to increments not %s:
        if (numberOfElapsedBucketsSinceCurrent > 1) {
          if (numberOfElapsedBucketsSinceCurrent > 2) {
            uint256 previousReduction = (_priceIncrement *
              (numberOfElapsedBucketsSinceCurrent - 2));
            if (calculatedPreviousPrice > previousReduction) {
              calculatedPreviousPrice = (calculatedPrice - previousReduction);
            } else {
              calculatedPreviousPrice = 0;
            }
          } else {
            calculatedPreviousPrice = calculatedPrice;
          }

          uint256 currentReduction = (_priceIncrement *
            (numberOfElapsedBucketsSinceCurrent - 1));
          if (calculatedPrice > currentReduction) {
            calculatedPrice = (calculatedPrice - currentReduction);
          } else {
            calculatedPrice = 0;
          }
        }
      }

      // Implement Max price checks:
      if (calculatedPrice < _basePrice) {
        calculatedPrice = _basePrice;
      }

      if (calculatedPrice > _maxPrice) {
        calculatedPrice = _maxPrice;
      }

      if (calculatedPreviousPrice < _basePrice) {
        calculatedPreviousPrice = _basePrice;
      }

      if (calculatedPreviousPrice > _maxPrice) {
        calculatedPreviousPrice = _maxPrice;
      }
    } else {
      // Openmint mode - current and previous price are set from the base price:
      calculatedPreviousPrice = _basePrice;
      calculatedPrice = _basePrice;
      numberOfElapsedBucketsSinceCurrent = 0;
    }

    return (
      calculatedPrice,
      numberOfElapsedBucketsSinceCurrent,
      calculatedPreviousPrice
    );
  }
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

