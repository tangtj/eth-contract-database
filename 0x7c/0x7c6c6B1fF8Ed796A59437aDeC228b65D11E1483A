// SPDX-License-Identifier: MIT

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

// File: ContractEvrtext.sol


pragma solidity ^0.8.20;


contract EvrtextBurner {
    address public constant tokenAddress = 0x20739d479691F74601E4F3f8b6a6cfEB830ee0a8;
    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;
    uint256 public constant tokenDecimals = 18;
    uint256 public constant tokensPerCharacter = 10 ** (tokenDecimals - 1); // 0.1 token per character (assuming 18 decimals)

    // Event to log the burning action with metadata
    event TokensBurned(address indexed burner, uint256 amount, string metadata);

    function burnTokensWithMetadata(string calldata metadata) external {
        IERC20 token = IERC20(tokenAddress);
        uint256 amountToBurn = bytes(metadata).length * tokensPerCharacter;

        uint256 balance = token.balanceOf(msg.sender);
        require(balance >= amountToBurn, "Insufficient token balance");

        // The user must approve the TokenBurner contract to spend their tokens before calling burnTokensWithMetadata
        require(token.allowance(msg.sender, address(this)) >= amountToBurn, "Allowance not set or insufficient");

        bool success = token.transferFrom(msg.sender, burnAddress, amountToBurn);
        require(success, "Token transfer failed");

        emit TokensBurned(msg.sender, amountToBurn, metadata);
    }
}