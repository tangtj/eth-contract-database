// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

contract PreSaleVesting is Ownable, ReentrancyGuard {
    IERC20 public immutable GVVToken;
    IERC20 public immutable USDT;
    address payable public fundsWallet;

    uint256[] public tokenLimits = [20000000, 80000000, 150000000];
    uint256[] public tokenSoldAmount = [0, 0, 0];
    uint256[] public tokenPricePerRound = [230000, 340000, 450000];

    bool public paused = true;

    struct Buyer {
        uint256 tokenAmount;
        uint256 buyDate;
        uint256 lastClaimDate;
    }

    mapping(address => mapping(uint256 => Buyer)) public buyers;

    event TransferUSDT(address indexed from, address indexed to, uint256 amount);
    event Withdraw(address indexed fundsWallet, uint256 amountOfUSDT);
    event TransferGVVToken(address indexed from, address indexed to, uint256 amount, uint256 date);

    constructor(address _gvvToken, address _usdt, address _fundsWallet) Ownable(msg.sender) {
        require(_gvvToken != address(0) && _usdt != address(0) && _fundsWallet != address(0), "Invalid address");
        GVVToken = IERC20(_gvvToken);
        USDT = IERC20(_usdt);
        fundsWallet = payable(_fundsWallet);
    }

    function setFundsWallet(address _newAddr) external onlyOwner {
        require(_newAddr != address(0), "Invalid address");
        fundsWallet = payable(_newAddr);
    }

    function togglePause() external onlyOwner {
        paused = !paused;
    }

    modifier whenNotPaused() {
        require(!paused, "Contract is paused");
        _;
    }

    function buyTokensByUSDT(uint256 _amount, uint256 round) external nonReentrant whenNotPaused {
        require(round < tokenLimits.length, "Invalid round");
        require(tokenSoldAmount[round] + _amount <= tokenLimits[round], "Token is already sold out!");
        require(_amount > 0, "Amount should be more than 0");

        uint256 usdtCost = _amount * tokenPricePerRound[round];
        require(USDT.allowance(msg.sender, address(this)) >= usdtCost, "Insufficient allowance");

        USDT.transferFrom(msg.sender, address(this), usdtCost);
        USDT.transfer(fundsWallet, usdtCost);

        tokenSoldAmount[round] += _amount;
        buyers[msg.sender][round].tokenAmount += _amount;
        buyers[msg.sender][round].buyDate = block.timestamp;
        buyers[msg.sender][round].lastClaimDate = block.timestamp;

        emit TransferUSDT(msg.sender, address(this), usdtCost);
    }

    function buyTokensByNativeCoin(uint256 _amount, uint256 round) external payable nonReentrant whenNotPaused {
        require(round < tokenLimits.length, "Invalid round");
        require(tokenSoldAmount[round] + _amount <= tokenLimits[round], "Token is already sold out!");
        require(_amount > 0, "Amount should be more than 0");
        require(msg.value > 0, "Value must be greater than 0");

        // TODO: Implement conversion from native coin to token amount

        tokenSoldAmount[round] += _amount;
        buyers[msg.sender][round].tokenAmount += _amount;
        buyers[msg.sender][round].buyDate = block.timestamp;
        buyers[msg.sender][round].lastClaimDate = block.timestamp;

        (bool sent, ) = fundsWallet.call{value: msg.value}("");
        require(sent, "Failed to send Ether");

        emit TransferUSDT(msg.sender, address(this), msg.value);
    }

    function claimToken(uint256 _roundNum) external nonReentrant whenNotPaused {
        require(_roundNum < tokenLimits.length, "Invalid round");
        Buyer storage buyer = buyers[msg.sender][_roundNum];
        require(buyer.tokenAmount > 0, "No tokens to claim");

        uint256 deltaMonths = (block.timestamp - buyer.lastClaimDate) / 30 days;
        uint256 payoutAmount = calculatePayout(_roundNum, deltaMonths, buyer.tokenAmount);

        require(payoutAmount > 0, "No tokens to claim at this time");
        require(GVVToken.balanceOf(address(this)) >= payoutAmount, "Insufficient contract balance");

        buyer.lastClaimDate = block.timestamp;
        GVVToken.transfer(msg.sender, payoutAmount);

        emit TransferGVVToken(address(this), msg.sender, payoutAmount, block.timestamp);
    }

    function calculatePayout(uint256 _roundNum, uint256 deltaMonths, uint256 tokenAmount) internal pure returns (uint256) {
        if (_roundNum == 0) {
            // Private sale stage 1
            if (deltaMonths <= 4) return 0;
            return (tokenAmount * 10 * (deltaMonths - 4)) / 100;
        } else if (_roundNum == 1) {
            // Private sale stage 2
            if (deltaMonths <= 4) return 0;
            return (tokenAmount * 40 * (deltaMonths - 4)) / 100;
        } else {
            // Public sale
            return (tokenAmount * 75) / 100;
        }
    }

    function withdraw() external onlyOwner {
        uint256 balance = USDT.balanceOf(address(this));
        require(balance > 0, "Insufficient balance");
        USDT.transfer(fundsWallet, balance);
        emit Withdraw(fundsWallet, balance);
    }

    function getUserBuyDate(address _user, uint256 _roundNum) external view returns (uint256) {
        return buyers[_user][_roundNum].buyDate;
    }

    function getUserBuyAmount(address _user, uint256 _roundNum) external view returns (uint256) {
        return buyers[_user][_roundNum].tokenAmount;
    }

    function getClaimableAmount(uint256 _roundNum) external view returns (uint256) {
        Buyer memory buyer = buyers[msg.sender][_roundNum];
        uint256 deltaMonths = (block.timestamp - buyer.lastClaimDate) / 30 days;
        return calculatePayout(_roundNum, deltaMonths, buyer.tokenAmount);
    }

    receive() external payable {}
}