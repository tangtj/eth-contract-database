{"AIToken.sol":{"content":"// SPDX-License-Identifier: MIT\n/*\n █████╗ ██╗              \n██╔══██╗██║              \n███████║██║              \n██╔══██║██║              \n██║  ██║██║              \n╚═╝  ╚═╝╚═╝              \n██╗███████╗              \n██║██╔════╝              \n██║███████╗              \n██║╚════██║              \n██║███████║              \n╚═╝╚══════╝              \n██████╗ ███████╗██╗   ██╗\n██╔══██╗██╔════╝██║   ██║\n██║  ██║█████╗  ██║   ██║\n██║  ██║██╔══╝  ╚██╗ ██╔╝\n██████╔╝███████╗ ╚████╔╝ \n╚═════╝ ╚══════╝  ╚═══╝  \n*/\n// This token was generated AND deployed using GPT-3.5 and DALLE-2 for FREE on https://aiis.dev! \n// All tokens deployed from this website adhere to basic token standards, ensuring secure code and compatibility among the blockchain ecosystem.\n// Check it out now! https://aiis.dev\n\npragma solidity ^0.8.9;\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\n\ncontract AIToken is IERC20, Ownable {\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 internal _totalSupply;\n    string public name;\n    mapping(address =\u003e uint256) internal _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal allowances;\n\n    address public factory;\n\n   constructor() Ownable(_msgSender()){\n        factory = msg.sender;\n    }\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        uint256 _initialSupply,\n        address _initialHolder\n    ) external {\n        require(msg.sender == factory, \"only f\");\n        // Set the token details and credit the initial supply to _initialHolder\n        name = _name;\n        symbol = _symbol;\n        _totalSupply = _initialSupply * (10 ** uint256(decimals));\n        _balances[_initialHolder] = _totalSupply;\n        emit Transfer(address(0), _initialHolder, _totalSupply);\n\n        // Transfer ownership to the dead address\n        transferOwnership(0x000000000000000000000000000000000000dEaD);\n    }\n\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) external view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) external virtual returns (bool) {\n        require(msg.sender != address(0), \"from 0\"); // \"ERC20: transfer from the zero address\" -\u003e \"from 0\"\n        require(recipient != address(0), \"to 0\"); // \"ERC20: transfer to the zero address\" -\u003e \"to 0\"\n        require(_balances[msg.sender] \u003e= amount, \"low bal\"); // \"ERC20: insufficient balance\" -\u003e \"low bal\"\n\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        require(msg.sender != address(0), \"from 0\"); // \"ERC20: approve from the zero address\" -\u003e \"from 0\"\n        require(spender != address(0), \"to 0\"); // \"ERC20: approve to the zero address\" -\u003e \"to 0\"\n\n        allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool) {\n        require(sender != address(0), \"from 0\"); // \"ERC20: transfer from the zero address\" -\u003e \"from 0\"\n        require(recipient != address(0), \"to 0\"); // \"ERC20: transfer to the zero address\" -\u003e \"to 0\"\n        require(_balances[sender] \u003e= amount, \"low bal\"); // \"ERC20: insufficient balance\" -\u003e \"low bal\"\n        require(allowances[sender][msg.sender] \u003e= amount, \"\u003eallowance\"); // Shortened but kept clear\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        allowances[sender][msg.sender] -= amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, allowances[msg.sender][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        uint256 currentAllowance = allowances[msg.sender][spender];\n        require(currentAllowance \u003e= subtractedValue, \"under 0\"); // \"ERC20: decreased allowance below zero\" -\u003e \"under 0\"\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"from 0\"); // \"ERC20: approve from the zero address\" -\u003e \"from 0\"\n        require(spender != address(0), \"to 0\"); // \"ERC20: approve to the zero address\" -\u003e \"to 0\"\n\n        allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IERC20 {\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        uint256 _initialSupply,\n        address _initialHolder\n    ) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"}}