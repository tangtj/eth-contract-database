
// File: /contracts/NftUnLock.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";

interface NFTCaller {
  function unrestrict(uint256 tokenId) external;

  function burnByAdmin(uint256 tokenId) external;

  function mint(address to, uint256 tokenId) external;
}

contract NftUnLock is Ownable {
  address private sazaAddress; //사자 컨트랙트
  address private gazaAddress; //가자 컨트랙트

  constructor(address saza, address gaza) Ownable(msg.sender) {
    sazaAddress = saza;
    gazaAddress = gaza;
  }

  // 문자열 비교 함수
  function compareString(
    string memory str1,
    string memory str2
  ) private pure returns (bool) {
    return (keccak256(abi.encodePacked(str1)) ==
      keccak256(abi.encodePacked(str2)));
  }

  // 락업해제
  function nftUnrestrict(
    uint256[] calldata _id_list,
    string memory _tokenType
  ) public onlyOwner {
    address targetAddress;
    if (compareString(_tokenType, "saza")) {
      targetAddress = sazaAddress;
    } else if (compareString(_tokenType, "gaza")) {
      targetAddress = gazaAddress;
    } else {
      revert("Invalid token type");
    }

    for (uint256 i = 0; i < _id_list.length; i++) {
      NFTCaller(targetAddress).unrestrict(_id_list[i]);
    }
  }

  // 소각과 민트와 락업해제
  function burnAndMintAndUnrestrict(
    address[] calldata _to_list,
    uint256[] calldata _id_list,
    string memory _tokenType
  ) public onlyOwner {
    require(
      _to_list.length == _id_list.length,
      "to_list and id_list must be same length"
    );

    address targetAddress;
    if (compareString(_tokenType, "saza")) {
      targetAddress = sazaAddress;
    } else if (compareString(_tokenType, "gaza")) {
      targetAddress = gazaAddress;
    } else {
      revert("Invalid token type");
    }

    for (uint256 i = 0; i < _to_list.length; i++) {
      NFTCaller(targetAddress).burnByAdmin(_id_list[i]);
      NFTCaller(targetAddress).mint(_to_list[i], _id_list[i]);
      NFTCaller(targetAddress).unrestrict(_id_list[i]);
    }
  }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

