
// File: NFTMultisender.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

interface IERC721 {
    function approve(address to, uint256 tokenId) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function getApproved(uint256 tokenId) external view returns (address);
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
}

contract NFTMultisender {

    function multisendNFTs(
        address NFTaddress, 
        uint256[] calldata tokenIds, 
        address[] calldata addresses) 
        external {
        require(tokenIds.length > 0, "Length is zero");
        require(tokenIds.length == addresses.length, "Lengths do not match");
        
        IERC721 nftContract = IERC721(NFTaddress);

        for( uint256 i = 0; i < tokenIds.length; i++){
            address approvedAddress = nftContract.getApproved(tokenIds[i]);
            bool isApprovedForAll = nftContract.isApprovedForAll(msg.sender, address(this));
            require(approvedAddress == address(this) || isApprovedForAll, "Contract not approved to transfer this token");

            nftContract.safeTransferFrom(msg.sender, addresses[i], tokenIds[i]);
        }
    }

}
