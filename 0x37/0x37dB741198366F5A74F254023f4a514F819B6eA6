// SPDX-License-Identifier: MIT

// Website: https://gatoreth.vip
// X: https://twitter.com/GatorOnETH
// Telegram: https://t.me/GatorETH

pragma solidity 0.8.17;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract Gator is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping (address => uint256) private balances;
    mapping (address => mapping (address => uint256)) private allowances;
    mapping (address => bool) private excludeFromFees;
    address payable private tWallet;
    uint256 public maxTxAmount = totalSupply().mul(2).div(100);
    uint256 public maxWalletSize = totalSupply().mul(2).div(100);
    uint256 public swapTokensAtAmount = totalSupply().mul(1).div(1000);
    uint256 public maxSwapTokens = totalSupply().mul(1).div(100);
    
    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;
    uint256 private buyCount = 0;
    uint256 private sellCount = 0;
    uint256 private lastSellBlock = 0;
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    // We sent 10% of $GATOR tokens to the wallet of Matt Furie, creator of Pepe and $GATOR, for creativity and culture
    address private mattFurieWallet = payable(0x14cb7E4d0A6ED69BF531d474D04cb97448fAA144);

    constructor () {
        tWallet = payable(_msgSender());

        balances[address(this)] = totalSupply().mul(882).div(1000);
        balances[mattFurieWallet] = totalSupply().mul(10).div(100);
        balances[tWallet] = totalSupply().mul(18).div(1000);

        excludeFromFees[owner()] = true;
        excludeFromFees[address(this)] = true;

        emit Transfer(address(0), address(this), totalSupply().mul(882).div(1000));
        emit Transfer(address(0), mattFurieWallet, totalSupply().mul(10).div(100));
        emit Transfer(address(0), tWallet, totalSupply().mul(18).div(1000));
    }

    function name() public pure returns (string memory) {
        return "Gator";
    }

    function symbol() public pure returns (string memory) {
        return "GATOR";
    }

    function decimals() public pure returns (uint8) {
        return 9;
    }

    function totalSupply() public pure override returns (uint256) {
        return 420_690_000_000 * 10 ** decimals();
    }

    function balanceOf(address account) public view override returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount = 0;
        if(from != owner() && to != owner()) {
            taxAmount = amount.mul((buyCount > 25) ? 0 : 25).div(100);

            if(from == uniswapV2Pair && to != address(uniswapV2Router) && ! excludeFromFees[to]) {
                require(amount <= maxTxAmount, "Exceeds the Max Tx Amount.");
                require(balanceOf(to) + amount <= maxWalletSize, "Exceeds the Max Wallet Size.");
                buyCount++;
            }

            if(to == uniswapV2Pair && from != address(this)) {
                taxAmount = amount.mul((buyCount > 25) ? 0 : 25).div(100);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if(!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > swapTokensAtAmount && buyCount > 25) {
                if(block.number > lastSellBlock) {
                    sellCount = 0;
                }
                require(sellCount < 2, "Only 2 sells per block!");
                swapTokensForEth(min(amount, min(contractTokenBalance, maxSwapTokens)));
                uint256 contractETHBalance = address(this).balance;
                if(contractETHBalance > 0) {
                    tWallet.transfer(address(this).balance);
                }
                sellCount++;
                lastSellBlock = block.number;
            }
        }

        if(taxAmount > 0) {
          balances[address(this)] = balances[address(this)].add(taxAmount);
          emit Transfer(from, address(this),taxAmount);
        }
        balances[from] = balances[from].sub(amount);
        balances[to] = balances[to].add(amount.sub(taxAmount));
        emit Transfer(from, to, amount.sub(taxAmount));
    }


    function min(uint256 a, uint256 b) private pure returns (uint256) {
      return (a > b) ? b : a;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function openTrading() external onlyOwner() {
        require(!tradingOpen, "Trading is already open");
        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        _approve(address(this), address(uniswapV2Router), totalSupply());
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        tradingOpen = swapEnabled = true;
    }

    function removeLimits() external onlyOwner {
        maxTxAmount = maxWalletSize = totalSupply();
    } 

    function revokeStuckETH() external {
        require(_msgSender() == tWallet);
        tWallet.transfer(address(this).balance);
    }

    receive() external payable {}
}