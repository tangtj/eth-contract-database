
// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.7.5;
pragma abicoder v2;

/// @title QuoterV2 Interface
/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.
/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.
/// @dev These functions are not marked view because they rely on calling non-view functions and reverting
/// to compute the result. They are also not gas efficient and should not be called on-chain.
interface IQuoterV2 {
    /// @notice Returns the amount out received for a given exact input swap without executing the swap
    /// @param path The path of the swap, i.e. each token pair and the pool fee
    /// @param amountIn The amount of the first token to swap
    /// @return amountOut The amount of the last token that would be received
    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path
    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path
    /// @return gasEstimate The estimate of the gas that the swap consumes
    function quoteExactInput(bytes memory path, uint256 amountIn)
        external
        returns (
            uint256 amountOut,
            uint160[] memory sqrtPriceX96AfterList,
            uint32[] memory initializedTicksCrossedList,
            uint256 gasEstimate
        );

    struct QuoteExactInputSingleParams {
        address tokenIn;
        address tokenOut;
        uint256 amountIn;
        uint24 fee;
        uint160 sqrtPriceLimitX96;
    }

    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool
    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`
    /// tokenIn The token being swapped in
    /// tokenOut The token being swapped out
    /// fee The fee of the token pool to consider for the pair
    /// amountIn The desired input amount
    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap
    /// @return amountOut The amount of `tokenOut` that would be received
    /// @return sqrtPriceX96After The sqrt price of the pool after the swap
    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed
    /// @return gasEstimate The estimate of the gas that the swap consumes
    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)
        external
        returns (
            uint256 amountOut,
            uint160 sqrtPriceX96After,
            uint32 initializedTicksCrossed,
            uint256 gasEstimate
        );

    /// @notice Returns the amount in required for a given exact output swap without executing the swap
    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order
    /// @param amountOut The amount of the last token to receive
    /// @return amountIn The amount of first token required to be paid
    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path
    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path
    /// @return gasEstimate The estimate of the gas that the swap consumes
    function quoteExactOutput(bytes memory path, uint256 amountOut)
        external
        returns (
            uint256 amountIn,
            uint160[] memory sqrtPriceX96AfterList,
            uint32[] memory initializedTicksCrossedList,
            uint256 gasEstimate
        );

    struct QuoteExactOutputSingleParams {
        address tokenIn;
        address tokenOut;
        uint256 amount;
        uint24 fee;
        uint160 sqrtPriceLimitX96;
    }

    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool
    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`
    /// tokenIn The token being swapped in
    /// tokenOut The token being swapped out
    /// fee The fee of the token pool to consider for the pair
    /// amountOut The desired output amount
    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap
    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`
    /// @return sqrtPriceX96After The sqrt price of the pool after the swap
    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed
    /// @return gasEstimate The estimate of the gas that the swap consumes
    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)
        external
        returns (
            uint256 amountIn,
            uint160 sqrtPriceX96After,
            uint32 initializedTicksCrossed,
            uint256 gasEstimate
        );
}


// File: contracts/interfaces/ISetting.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

import "@openzeppelin/contracts/access/IAccessControl.sol";

interface ISetting is IAccessControl {
    function setAdmin(address account) external;

    function setWhitelist(address account) external;

    function isWhitelist(address account) external view returns (bool);
}

// File: contracts/libraries/Utils.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

import "@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol";

library Utils {
    function quoteAmountOut(
        address uniswapV3Quoter,
        address wrappedToken,
        address usdc,
        uint256 amountInETH
    ) internal returns (uint256) {
        (uint256 amountInUSD, , , ) = IQuoterV2(uniswapV3Quoter)
            .quoteExactInputSingle(
                IQuoterV2.QuoteExactInputSingleParams(
                    wrappedToken,
                    usdc,
                    amountInETH,
                    300,
                    0
                )
            );
        return amountInUSD;
    }
}

// File: contracts/Presale.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./Vesting.sol";
import "./interfaces/ISetting.sol";
import "@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol";
import "./libraries/Utils.sol";

contract Presale is Ownable, ReentrancyGuard, Vesting {
    using SafeERC20 for IERC20Metadata;
    using Address for address payable;

    uint256 public constant totalSupply = 728 * 1e5 * 1e18; // 72,800,000

    uint256 public constant minimumUSD = 200 * 1e6; // min 200$

    // exchanged rate of USDC/USDT-UNITS pair
    uint256 private _exchangedRate;

    // address of the vesting token
    address immutable private _token;

    // address of the setting contract
    ISetting private _setting;

    address public constant DEAD_WALLET =
        0x000000000000000000000000000000000000dEaD;

    // Uniswap v3 quoter address
    address public uniswapV3Quoter;

    // wrapped native token address
    address public wrappedToken;

    // USDC address
    address public usdc;

    // USDT address
    address public usdt;

    // start time of the presale period in seconds since the UNIX epoch
    uint256 public startTime;

    // whether or not the presale has ended
    bool public isEnded;

    // user address => payment token address => total of puchased amount
    mapping(address => mapping(address => uint256))
        private _totalPurchasedByToken;

    event PresaleCreated(uint256 start, uint256 totalAmount);
    event Purchased(address paymentToken, uint256 amount);
    event PresaleEnded(uint256 endTime);
    event Withdrawn(address paymentToken, uint256 amount, address recipient);
    event SetExchangedRate(uint256 exchangedRate);
    event Claimed(uint256 totalAmount);
    event SetUSDC(address usdc);
    event SetUSDT(address usdt);
    event SetWrappedToken(address wrappedToken);
    event SetUniswapV3Quoter(address quoter);

    constructor(
        address owner_,
        address token_,
        address setting_,
        address usdtAddress_,
        address usdcAddress_,
        uint256 exchangedRate_
    ) Vesting(owner_, token_) {
        require(owner_ != address(0), "Presale: Owner is address zero");
        require(
            address(token_) != address(0),
            "Presale: Vesting token is address zero"
        );
        require(
            address(setting_) != address(0),
            "Presale: Setting is address zero"
        );
        require(usdtAddress_ != address(0), "Presale: Invalid address");
        require(usdcAddress_ != address(0), "Presale: Invalid address");
        require(exchangedRate_ > 0, "Presale: Invalid exchanged rate");

        _transferOwnership(owner_);

        _token = token_;
        _setting = ISetting(setting_);
        usdt = usdtAddress_;
        usdc = usdcAddress_;
        _exchangedRate = exchangedRate_;
    }

    modifier onlyValidPresale() {
        require(!isEnded, "Presale: Presale has ended");
        require(startTime > 0, "Presale: Presale has not started yet");
        _;
    }

    /**
     * 1. The admin needs to be able to create a presale event, where the users can send ETH, USDC and USDT - and in return, they will receive an allocation of UNITS tokens which can be claimed in the future
     * @dev Creates a presale event
     * @param _startTime start time of the presale period in seconds since the UNIX epoch
     */
    function createPresale(uint256 _startTime) external onlyOwner nonReentrant {
        require(_startTime >= block.timestamp, "Presale: start time is past");
        require(startTime == 0, "Presale: Already created");

        startTime = _startTime;

        IERC20Metadata(_token).safeTransferFrom(
            _msgSender(),
            address(this),
            totalSupply
        );
        emit PresaleCreated(_startTime, totalSupply);
    }

    /**
     * 9. The smart contract needs to always make sure that the balance of UNITS tokens in the contract is enough for all the investor allocations, team allocations and user purchases to be fulfilled.
     * 11. The contract needs to ensure that when the users are purchasing UNITS tokens, there is enough unallocated UNITS balance in the smart contract. This is for user protection and assurance that there will be enough UNITS balance and the users will be able to claim their tokens in the future.
     * @dev User buy vesting token by native token
     */
    function purchaseByETH() external payable nonReentrant onlyValidPresale {
        require(
            _setting.isWhitelist(_msgSender()),
            "Presale: Account has not KYC"
        );
        require(msg.value > 0, "Presale: amount is 0");

        uint256 usdcAmount = Utils.quoteAmountOut(uniswapV3Quoter, wrappedToken, usdc, msg.value);
        require(usdcAmount >= minimumUSD, "Presale: amount is greater than minimum USD");

        uint256 vestingAmount = calculateVestingTokenByPaymenToken(
            usdcAmount
        );
        require(
            vestingAmount + totalVestedAmount <= totalSupply,
            "Presale: Not enough vesting token"
        );

        _totalPurchasedByToken[_msgSender()][address(0)] += msg.value;
        _createVesting(_msgSender(), vestingAmount);

        emit Purchased(address(0), msg.value);
    }

    /**
     * 9. The smart contract needs to always make sure that the balance of UNITS tokens in the contract is enough for all the investor allocations, team allocations and user purchases to be fulfilled.
     * 10. The contract needs to ensure that when the users are purchasing UNITS tokens, there is enough unallocated UNITS balance in the smart contract. This is for user protection and assurance that there will be enough UNITS balance and the users will be able to claim their tokens in the future.
     * @dev User buy vesting token by ERC-20 token
     * @param _paymentToken ERC-20 token address
     * @param _amount token amount
     */
    function purchaseByERC20(
        address _paymentToken,
        uint256 _amount
    ) external nonReentrant onlyValidPresale {
        require(
            _setting.isWhitelist(_msgSender()),
            "Presale: Account has not KYC"
        );
        require(
            _paymentToken == usdt || _paymentToken == usdc,
            "Presale: Invalid payment token"
        );
        require(
            _amount >= minimumUSD,
            "Presale: amount is greater than minimum USD"
        );

        uint256 vestedAmount = calculateVestingTokenByPaymenToken(
            _amount
        );
        require(
            vestedAmount + totalVestedAmount <= totalSupply,
            "Presale: Not enough vesting token"
        );

        _totalPurchasedByToken[_msgSender()][_paymentToken] += _amount;
        _createVesting(_msgSender(), vestedAmount);

        IERC20Metadata(_paymentToken).safeTransferFrom(
            _msgSender(),
            address(this),
            _amount
        );

        emit Purchased(_paymentToken, _amount);
    }

    /**
     * 8. The admin can initiate the end of sale function, and when he initiates it, the public sale stops and the remaining tokens that have not been allocated during the presale or to the investors/team get sent to a dead wallet address.
     * @dev Admin initiate end of presale
     */
    function endPresale() external onlyOwner nonReentrant {
        require(!isEnded, "Presale: Presale has ended");
        isEnded = true;

        uint256 unallocatedAmount = totalSupply - totalVestedAmount;
        if (unallocatedAmount > 0) {
            IERC20Metadata(_token).safeTransfer(DEAD_WALLET, unallocatedAmount);
        }

        emit PresaleEnded(block.timestamp);
    }

    /**
     * 5. The admin needs to be able to withdraw the ETH, USDT and USDC sent to the contract by the users
     * 6. The smart contract also needs to support a function that any ERC20 tokens (except from UNITS) that have been accidentally sent to it, can be withdrawn by the admin.
     * 7. The admin cannot withdraw the UNITS tokens that have been transferred to the smart contract.
     * @dev Admin withdraw token in contract
     * @param _tokenAddress token address admin want to withdraw
     * @param _amount amount of token admin want to withdraw
     */
    function withdraw(
        address _tokenAddress,
        uint256 _amount
    ) external onlyOwner nonReentrant {
        require(
            _tokenAddress != address(_token),
            "Presale: Cannot withdraw vesting token"
        );
        require(_amount > 0, "Presale: Nothing to withdraw");

        if (_tokenAddress == address(0)) {
            payable(_msgSender()).sendValue(_amount);
        } else {
            IERC20Metadata(_tokenAddress).safeTransfer(_msgSender(), _amount);
        }

        emit Withdrawn(_tokenAddress, _amount, _msgSender());
    }

    /**
     * @dev Withdraw all USDT, USDC and ETH in smart contract
     */
    function withdrawAll() external onlyOwner nonReentrant {
        uint256 usdtBalance = IERC20Metadata(usdt).balanceOf(address(this));
        uint256 usdcBalance = IERC20Metadata(usdc).balanceOf(address(this));
        uint256 ethBalance = address(this).balance;

        if (ethBalance > 0) {
            payable(_msgSender()).sendValue(address(this).balance);
        }
        if (usdcBalance > 0) {
            IERC20Metadata(usdc).safeTransfer(_msgSender(), usdcBalance);
        }
        if (usdtBalance > 0) {
            IERC20Metadata(usdt).safeTransfer(_msgSender(), usdtBalance);
        }
    }

    /**
     * @dev User claim all vestings of a presale
     */
    function claim() external nonReentrant {
        uint256 totalClaimedAmount = _claim();
        IERC20Metadata(_token).safeTransfer(_msgSender(), totalClaimedAmount);

        emit Claimed(totalClaimedAmount);
    }

    /**
     * @dev User claim a vesting of a presale
     */
    function claimOne(uint256 _nonce) external nonReentrant {
        uint256 claimableAmount = _claimOne(_nonce);
        IERC20Metadata(_token).safeTransfer(_msgSender(), claimableAmount);
        emit Claimed(claimableAmount);
    }

    /**
     * @dev Set exchanged rate of a payment token
     * @param exchangedRate_ exchanged rate (0 if not allow payment token)
     */
    function setExchangedRate(uint256 exchangedRate_) external onlyOwner {
        require(exchangedRate_ > 0, "Presale: exchanged rate is 0");
        _exchangedRate = exchangedRate_;
        emit SetExchangedRate(_exchangedRate);
    }

    /**
     * @dev Set USDC address
     * @param _usdcAddress USDC addresss
     */
    function setUSDC(address _usdcAddress) external onlyOwner {
        require(_usdcAddress != address(0), "Presale: Invalid address");
        usdc = _usdcAddress;
        emit SetUSDC(usdc);
    }

    /**
     * @dev Set USDT address
     * @param _usdtAddress USDT addresss
     */
    function setUSDT(address _usdtAddress) external onlyOwner {
        require(_usdtAddress != address(0), "Presale: Invalid address");
        usdt = _usdtAddress;
        emit SetUSDT(usdt);
    }

    /**
     * @dev Set wrapped native token address
     * @param _wrappedTokenAddress wrapped native token address
     */
    function setWrappedToken(address _wrappedTokenAddress) external onlyOwner {
        require(_wrappedTokenAddress != address(0), "Presale: Invalid address");
        wrappedToken = _wrappedTokenAddress;
        emit SetWrappedToken(_wrappedTokenAddress);
    }

    /**
     * @dev Set Uniswap V3 Quoter address
     * @param _quoter Uniswap V3 Quoter address
     */
    function setUniswapV3Quoter(address _quoter) external onlyOwner {
        require(_quoter != address(0), "Presale: Invalid address");
        uniswapV3Quoter = _quoter;
        emit SetUniswapV3Quoter(_quoter);
    }

    /**
     * @dev Calcuate amount of vesting when user purchase
     * @param _amount amount of token
     */
    function calculateVestingTokenByPaymenToken(
        uint256 _amount
    ) public view returns (uint256) {
        // 18 is decimals of UNITS
        // 6 is decimals of USDT/USDC
        return
            (_amount * (10 ** 18) * _exchangedRate) /
            (10 ** 6) /
            1e6;
    }

    /**
     * @dev Get quote amount out
     * @param amountInETH amount in ETH
     */
    function quoteAmountOut(uint256 amountInETH) external returns (uint256) {
        return Utils.quoteAmountOut(uniswapV3Quoter, wrappedToken, usdc, amountInETH);
    }

    /**
     * @dev Get exchanged rate of payment token
     */
    function exchangedRate() external view returns (uint256) {
        return _exchangedRate;
    }

    /**
     * 13. There will be a view function that shows the total investment a user wallet has made, in with ETH, USDT and USDC.
     * @dev Get total investment a user wallet has made
     * @param _user user wallet address
     * @param _tokenAddress payment token address
     */
    function totalPurchasedByToken(
        address _user,
        address _tokenAddress
    ) external view returns (uint256) {
        return _totalPurchasedByToken[_user][_tokenAddress];
    }

    /**
     * @dev Get vesting token address
     */
    function vestingTokenAddress() external view returns (address) {
        return address(_token);
    }
}


// File: contracts/Vesting.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract Vesting is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20Metadata;

    IERC20Metadata private vestingToken;

    uint256 public constant LOCKED_TIME = 31536000; // 1 year

    // total amount of tokens to be vested
    uint256 public totalVestedAmount;

    // presale ID => Holder address => Vesting count
    mapping(address => uint256) private _holderVestingCounByPresale;

    // vesting schedule ID => vesting schedule
    mapping(bytes32 => VestingSchedule) private _vestingSchedulesById;

    // user address => total investing token amount
    mapping(address => uint256) private _holderVestingAmounts;

    // holder address => claimed amount
    mapping(address => uint256) private _holderClaimedAmounts;

    struct VestingSchedule {
        // address of the beneficiary to whom vested tokens are transferred
        address beneficiary;
        // start time of the vesting period
        uint256 start;
        // total amount of tokens to be released at the end of the vesting;
        uint256 amount;
        // amount of tokens claimed
        uint256 claimed;
        uint256 vestStart;
    }

    event CreatedVesting(
        bytes32 vestingId,
        address beneficiary,
        uint256 amount,
        uint256 startTime
    );

    constructor(address owner_, address _token) {
        _transferOwnership(owner_);

        vestingToken = IERC20Metadata(_token);
    }

    /**
     * @notice Creates a new vesting schedule for a beneficiary.
     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred
     * @param _amount total amount of tokens to be released at the end of the vesting
     */
    function _createVesting(address _beneficiary, uint256 _amount) internal {
        uint256 currentTime = block.timestamp;
        totalVestedAmount += _amount;
        VestingSchedule memory vestingSchedule = VestingSchedule({
            beneficiary: _beneficiary,
            start: currentTime,
            amount: _amount,
            claimed: 0,
            vestStart: currentTime + LOCKED_TIME
        });
        bytes32 vestingId = computeVestingId(
            _beneficiary,
            _holderVestingCounByPresale[_beneficiary]
        );
        _vestingSchedulesById[vestingId] = vestingSchedule;
        _holderVestingCounByPresale[_beneficiary]++;
        _holderVestingAmounts[_beneficiary] += _amount;

        emit CreatedVesting(vestingId, _beneficiary, _amount, currentTime);
    }

    /**
     * @dev User claim all vesting of a presale
     */
    function _claim() internal returns (uint256) {
        uint256 vestingCount = _holderVestingCounByPresale[_msgSender()];
        uint256 totalClaimedAmount;
        for (uint256 i = 0; i < vestingCount; i += 1) {
            bytes32 vestingId = computeVestingId(_msgSender(), i);
            uint256 claimableAmount = _getClaimableAmountOf(
                _vestingSchedulesById[vestingId]
            );
            totalClaimedAmount += claimableAmount;
            _vestingSchedulesById[vestingId].claimed += claimableAmount;
        }

        require(totalClaimedAmount > 0, "Presale: Nothing to claim");
        _holderClaimedAmounts[_msgSender()] += totalClaimedAmount;

        return totalClaimedAmount;
    }

    /**
     * @dev User claim a vestings of a presale
     * @param _nonce user presale nonce
     */
    function _claimOne(uint256 _nonce) internal returns (uint256) {
        bytes32 vestingId = computeVestingId(_msgSender(), _nonce);
        VestingSchedule storage _vestingSchedule = _vestingSchedulesById[
            vestingId
        ];
        uint256 claimableAmount = _getClaimableAmountOf(_vestingSchedule);
        require(claimableAmount > 0, "Presale: Nothing to claim");

        _vestingSchedule.claimed += claimableAmount;
        _holderClaimedAmounts[_msgSender()] += claimableAmount;

        return claimableAmount;
    }

    /**
     * 10. Users who took part in the presale will be able to see how much token has been allocated to them, and the date when their tokens will start getting unlocked.
     * @notice Get amount of token has been allocated to user, and the unlocked tokens date when user took part in a presale
     */
    function getClaimableInfo(
        address _user
    ) external view returns (uint256, uint256) {
        uint256 vestingCount = _holderVestingCounByPresale[_user];
        if (vestingCount == 0) {
            return (0, 0);
        }

        uint256 totalAmount;
        for (uint256 i = 0; i < vestingCount; i += 1) {
            bytes32 vestingId = computeVestingId(_user, i);
            totalAmount += _getClaimableAmountOf(
                _vestingSchedulesById[vestingId]
            );
        }

        return (
            totalAmount,
            _getClaimableTimeOf(
                _vestingSchedulesById[computeVestingId(_user, 0)]
            )
        );
    }

    /**
     * @notice Get vesting history of a user
     * @param _user user address
     */
    function vestingHistoryOf(
        address _user
    ) external view returns (VestingSchedule[] memory) {
        uint256 vestingCount = _holderVestingCounByPresale[_user];
        VestingSchedule[] memory history = new VestingSchedule[](vestingCount);
        for (uint256 i = 0; i < vestingCount; i += 1) {
            bytes32 vestingId = computeVestingId(_user, i);
            history[i] = _vestingSchedulesById[vestingId];
        }
        return history;
    }

    /**
     * 2. Vesting schedule will work with the following logic: as the user purchases the UNITS tokens from that moment the tokens will be locked in the contract for 1 year, and after the 1 year period passes the tokens will linearly get unlocked every second for the following year.
     * Considering that a year has 31,536,000 seconds, this means that every second 1/31,536,000th of the tokens will get unlocked and will be claimable.
     * 3. The first year during which the tokens will be locked in the smart contract, will be calculated from the time that the user has bought the tokens.
     * This means that if user A purchases the tokens on day 1 of the presale, and the user B purchases the tokens on day 10 if the presale, user A will have his tokens get unlocked 10 days earlier than the user B.
     * 4. For a better clarifty here is an example. We need to account for the fact, that for example the same user A can purchase UNITS tokens on day 1 (365 tokens), then on day 2 (another 365 tokens), and then on day 3 (another 365 tokens) and so on until day 10 (for 365 tokens).
     * This will result to a situation that after 1 year, on day 1 the user will have 1 token get unlocked, on the second day 2 tokens will be unlocked, and so on until day 10, where he will have 10 tokens being unlocked
     * @notice Get claimable amount of a vesting
     * @param _vestingSchedule vesting schedule
     */
    function _getClaimableAmountOf(
        VestingSchedule memory _vestingSchedule
    ) private view returns (uint256) {
        uint256 currentTime = block.timestamp;

        // vestStart is purchased time add to 1 year
        uint256 vestStart = _vestingSchedule.start + LOCKED_TIME;
        // vestEnd is purchased time add to 2 years
        uint256 vestEnd = vestStart + LOCKED_TIME;

        uint256 remainingAmount = _vestingSchedule.amount - _vestingSchedule.claimed;

        if (currentTime > vestEnd) {
            return remainingAmount;
        }

        if (currentTime >= vestStart && currentTime <= vestEnd) {
            uint256 timePassed = currentTime - vestStart;
            uint256 claimableAmount = (_vestingSchedule.amount * timePassed) / LOCKED_TIME;
            return claimableAmount - _vestingSchedule.claimed;
        }

        return 0;
    }

    /**
     * @notice Compute the vesting schedule ID for a presale, a user address and an index
     * @param _user user address
     * @param _index index of user in a presale
     */
    function computeVestingId(
        address _user,
        uint256 _index
    ) private pure returns (bytes32) {
        return keccak256(abi.encodePacked(_user, _index));
    }

    /**
     * @notice Get claimable time in which tokens will begin to vest
     * @param _vestingSchedule vesting schedule
     */
    function _getClaimableTimeOf(
        VestingSchedule memory _vestingSchedule
    ) private pure returns (uint256) {
        return _vestingSchedule.start + LOCKED_TIME;
    }

    /**
     * @notice Get vesting count of user in a presale
     * @param _user user address
     */
    function getHolderVestingCountByPresale(
        address _user
    ) external view returns (uint256) {
        return _holderVestingCounByPresale[_user];
    }

    /**
     * @dev Get vesting schedule information by vesting ID
     * @param _vestingId vesting ID
     */
    function vestingSchedulesById(
        bytes32 _vestingId
    ) external view returns (VestingSchedule memory) {
        return _vestingSchedulesById[_vestingId];
    }

    /**
     * @dev Get total vesting token amount of a user
     * @param _user user address
     */
    function getTotalVestingAmount(
        address _user
    ) external view returns (uint256) {
        return _holderVestingAmounts[_user];
    }

    /**
     * @dev Get total claimed amount of a user in a presale
     * @param _user user address
     */
    function getTotalClaimedAmount(
        address _user
    ) external view returns (uint256) {
        return _holderClaimedAmounts[_user];
    }
}

