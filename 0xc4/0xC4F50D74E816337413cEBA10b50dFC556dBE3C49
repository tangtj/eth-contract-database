
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/StakeLpEarnMultiToken.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
contract ERC20 is IERC20 {
    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;

    function name() external pure returns (string memory) {
        return "stakeLP";
    }

    function symbol() external pure returns (string memory){
        return "SLP";
    }

    function decimals() external pure returns (uint8){
        return 18;
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function _transfer(address from, address recipient, uint256 amount) private {
        emit Transfer(from, recipient, amount);
    }

    function mint(address to, uint256 amount) internal {
        _balances[to] += amount;
//        _transfer(address(0),msg.sender,to,amount);
        _totalSupply += amount;
        emit Transfer(address(0), to, amount);
    }

    function allowance(address, address) external pure returns (uint256) {
        return type(uint256).max;
    }

    function approve(address, uint256) external pure returns (bool){
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool){
        _transfer(sender, recipient, amount);
        return true;
    }

}

contract Distributor is Ownable {
    IERC20 public token;
    IERC20 public voucher;
    uint256 public rate;
    bool public isOpen;
    mapping(address => uint256) public redeemed;

    event Exchange(address indexed user, uint256 amount);
    // @param rate: 1:1 _rate=10000  1:0.5 _rate=5000 1:2.5 = _rate=25000
    constructor (IERC20 _voucher, IERC20 _token, uint256 _rate) {
        token = _token;
        voucher = _voucher;
        setRate(_rate);
    }

    modifier onlyOpen() {
        require(isOpen, "not open");
        _;
    }
    function setOpen() public onlyOwner {
        isOpen = !isOpen;
    }
    function setRate(uint256 _rate) public onlyOwner{
//        require(_rate < 10000 && _rate > 500, "invalid");
        rate = _rate;
    }

    function pending(address user)public view returns(uint256){
        uint256 redeem = redeemed[user];
        uint amount = voucher.balanceOf(user);
        if (amount == 0) return 0;
        if (amount < redeem) return 0;
        return (amount-redeem)*rate/ 10000;
    }

    function exchange() public onlyOpen {
        address ua = msg.sender;
        uint256 reward = pending(ua);
        require(reward > 0, "not enough reward");
        uint256 balance = token.balanceOf(address(this));
        redeemed[ua] = voucher.balanceOf(ua);
        if (balance < reward) {
            token.transfer(ua, balance);
        } else {
            token.transfer(ua, reward);
        }
        emit Exchange(ua, reward);
    }

}

contract StakeLPEarnMultiToken is Ownable, ERC20, ReentrancyGuard {
    struct PoolInfo {
        IERC20 lpToken;
        uint256 lastRewardTime;
        uint256 accPerShare;
        uint256 amount;
        uint256 referralRate;
        uint256 perSecond;
    }

    struct UserInfo {
        uint256 amount;
        address referer;
        uint256 referralAmount;
        uint256 rewardDebt;
    }
    uint256 public constant ACCURACY = 1e12;

    PoolInfo public pool;
    Distributor[] public distributors;
    mapping(address => UserInfo) public users;

    event Deposit(address indexed user, uint256 indexed amount, address indexed referer);
    event Withdraw(address indexed user, uint256 amount);
    event Claim(address indexed user, address indexed tid, uint256 amount);
    event CreateDistributor(IERC20 indexed token, uint256 _rate);
    constructor(IERC20 _lpToken) {
        pool.lpToken = _lpToken;
        pool.referralRate = 20;
        pool.perSecond = 964506172839506;
        pool.lastRewardTime = block.number;
    }

    function updatePool() public {
        if (block.number <= pool.lastRewardTime) return;
//        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (pool.amount == 0) {
            pool.lastRewardTime = block.number;
            return;
        }
        uint256 multiplier = block.number - pool.lastRewardTime;
//        if (multiplier <= 0) return;

//        uint256 timeReward = multiplier * pool.perSecond;
        uint256 accShare = multiplier * pool.perSecond * ACCURACY / pool.amount;
        pool.accPerShare += accShare;
        pool.lastRewardTime = block.number;
    }

    function pending(address user) public view returns (uint256){
        UserInfo memory u = users[user];
        if (u.amount == 0) return 0;
        uint256 accPerShare = pool.accPerShare;
        if (block.number > pool.lastRewardTime) {
//            uint256 lpSupply = pool.lpToken.balanceOf(address(this));
            uint256 lpSupply = pool.amount;
            if (lpSupply != 0) {
                uint256 multiplier = block.number - pool.lastRewardTime;
                uint256 reward = multiplier * pool.perSecond;
                accPerShare += reward * ACCURACY /lpSupply;
            }
        }
        return (u.amount * accPerShare / ACCURACY) - u.rewardDebt;
    }

    function deposit(uint256 amount, address referer) external  nonReentrant{
        UserInfo storage user = users[msg.sender];
        require(referer != address(0), "referer is none");
        require(referer != msg.sender, "referer is self");
        if (user.referer == address(0)) {
            user.referer = referer;
        } else {
            require(user.referer == referer, "invalid referer");
        }
        updatePool();
        if (user.amount > 0) {
            referral(msg.sender);
        }
        if (amount > 0) {
            pool.lpToken.transferFrom(msg.sender, address(this), amount);
            user.amount += amount;
            pool.amount += amount;
        }
        user.rewardDebt = (user.amount * pool.accPerShare / ACCURACY);
        emit Deposit(msg.sender, amount, referer);
    }

    function withdraw(uint256 _amount) external nonReentrant {
        address ua = msg.sender;
        UserInfo storage user = users[ua];
        require(user.amount >= _amount, "not enough amount");
        updatePool();
        if (user.amount > 0) {
            referral(ua);
        }
        if (_amount > 0) {
            user.amount -= _amount;
            pool.amount -= _amount;
            pool.lpToken.transfer(ua, _amount);
        }
        user.rewardDebt = user.amount * pool.accPerShare / ACCURACY;
        emit Withdraw(ua, _amount);
    }

    function referral(address user) private {
        UserInfo storage u = users[user];
        uint256 accPerShare = pool.accPerShare;
        uint256 pendingAmount = (u.amount * accPerShare / ACCURACY) - u.rewardDebt;
        require(pendingAmount > 0, "not enough reward");

        uint256 refererAmount = pendingAmount * pool.referralRate / 100;
        pendingAmount -= refererAmount;
        mint(user, pendingAmount);
        mint(u.referer, refererAmount);
        users[u.referer].referralAmount += refererAmount;
        emit Claim(user, u.referer, pendingAmount + refererAmount);
    }

    function createDistributeToken(IERC20 _token, uint256 _rate) external onlyOwner{
        Distributor distributor = new Distributor(IERC20(address(this)), _token, _rate);
        distributors.push(distributor);
        emit CreateDistributor(_token, _rate);
    }
    function poolLength() external view returns(uint256){
        return distributors.length;
    }
    function open(uint256 idx) external onlyOwner {
        distributors[idx].setOpen();
    }

    function setRate(uint256 idx, uint256 _rate) external onlyOwner {
        distributors[idx].setRate(_rate);
    }
}

