
// File: contracts/persistent/smart-accounts/share-price-throttled-asset-manager/SharePriceThrottledAssetManagerFactory.sol
// SPDX-License-Identifier: GPL-3.0

/*
    This file is part of the Enzyme Protocol.

    (c) Enzyme Council <council@enzyme.finance>

    For the full license information, please view the LICENSE
    file that was distributed with this source code.
*/

pragma solidity 0.8.19;

import {NonUpgradableProxy} from "../../../utils/0.8.19/NonUpgradableProxy.sol";
import {ISharePriceThrottledAssetManagerLib} from "./ISharePriceThrottledAssetManagerLib.sol";

/// @title SharePriceThrottledAssetManagerFactory Contract
/// @author Enzyme Council <security@enzyme.finance>
/// @notice A factory for SharePriceThrottledAssetManager proxy instances
contract SharePriceThrottledAssetManagerFactory {
    event ProxyDeployed(
        address indexed deployer,
        address proxyAddress,
        address indexed owner,
        address indexed vaultProxy,
        uint64 lossTolerance,
        uint32 lossTolerancePeriodDuration,
        address shutDowner
    );

    address internal immutable LIB_ADDRESS;

    constructor(address _libAddress) {
        LIB_ADDRESS = _libAddress;
    }

    /// @notice Deploys a new SharePriceThrottledAssetManager proxy instance
    /// @param _owner The owner (signer) of the instance
    /// @param _vaultProxyAddress The VaultProxy that the instance will be associated with
    /// @param _lossTolerance The cumulative percentage loss tolerated (1e18 is 100%)
    /// @param _lossTolerancePeriodDuration The length of the period (in seconds) used in cumulative loss tolerance calculations
    /// @param _shutdowner The admin who can shut down the smart account
    /// @return proxyAddress_ The newly-deployed instance
    function deployProxy(
        address _owner,
        address _vaultProxyAddress,
        uint64 _lossTolerance,
        uint32 _lossTolerancePeriodDuration,
        address _shutdowner
    ) external returns (address proxyAddress_) {
        bytes memory constructData = abi.encodeWithSelector(
            ISharePriceThrottledAssetManagerLib.init.selector,
            _owner,
            _vaultProxyAddress,
            _lossTolerance,
            _lossTolerancePeriodDuration,
            _shutdowner
        );

        proxyAddress_ = address(new NonUpgradableProxy({_constructData: constructData, _contractLogic: LIB_ADDRESS}));

        emit ProxyDeployed(
            msg.sender,
            proxyAddress_,
            _owner,
            _vaultProxyAddress,
            _lossTolerance,
            _lossTolerancePeriodDuration,
            _shutdowner
        );

        return proxyAddress_;
    }
}


// File: contracts/utils/0.8.19/NonUpgradableProxy.sol
// SPDX-License-Identifier: GPL-3.0

/*
    This file is part of the Enzyme Protocol.

    (c) Enzyme Council <council@enzyme.finance>

    For the full license information, please view the LICENSE
    file that was distributed with this source code.
*/

pragma solidity 0.8.19;

/// @title NonUpgradableProxy Contract
/// @author Enzyme Council <security@enzyme.finance>
/// @notice A proxy contract for use with non-upgradable libs
/// @dev The recommended constructor-fallback pattern of a proxy in EIP-1822, updated for solc 0.8.19,
/// and using an immutable lib value to save on gas (since not upgradable).
/// The EIP-1967 storage slot for the lib is still assigned,
/// for ease of referring to UIs that understand the pattern, i.e., Etherscan.
contract NonUpgradableProxy {
    address private immutable CONTRACT_LOGIC;

    constructor(bytes memory _constructData, address _contractLogic) {
        CONTRACT_LOGIC = _contractLogic;

        assembly {
            // EIP-1967 slot: `bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)`
            sstore(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc, _contractLogic)
        }
        if (_constructData.length > 0) {
            (bool success, bytes memory returnData) = _contractLogic.delegatecall(_constructData);
            require(success, string(returnData));
        }
    }

    // solhint-disable-next-line no-complex-fallback
    fallback() external payable {
        address contractLogic = CONTRACT_LOGIC;

        assembly {
            calldatacopy(0x0, 0x0, calldatasize())
            let success := delegatecall(sub(gas(), 10000), contractLogic, 0x0, calldatasize(), 0, 0)
            let retSz := returndatasize()
            returndatacopy(0, 0, retSz)
            switch success
            case 0 { revert(0, retSz) }
            default { return(0, retSz) }
        }
    }
}


// File: contracts/persistent/smart-accounts/share-price-throttled-asset-manager/ISharePriceThrottledAssetManagerLib.sol
// SPDX-License-Identifier: GPL-3.0

/*
    This file is part of the Enzyme Protocol.

    (c) Enzyme Council <council@enzyme.finance>

    For the full license information, please view the LICENSE
    file that was distributed with this source code.
*/

pragma solidity >=0.6.0 <0.9.0;

/// @title ISharePriceThrottledAssetManagerLib Interface
/// @author Enzyme Council <security@enzyme.finance>
interface ISharePriceThrottledAssetManagerLib {
    struct Throttle {
        // `cumulativeLoss`: the cumulative loss to the fund's share price, as a percentage,
        // after previous losses were replenished according to `lossTolerancePeriodDuration`
        uint64 cumulativeLoss;
        // `lastLossTimestamp`: the timestamp of the last loss to the fund's share price,
        // and thus also the last time `cumulativeLoss` was updated
        uint64 lastLossTimestamp;
    }

    function init(
        address _owner,
        address _vaultProxyAddress,
        uint64 _lossTolerance,
        uint32 _lossTolerancePeriodDuration,
        address _shutdowner
    ) external;
}

