{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\nlibrary Address {\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}"},"BridgeOracle.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface HandlerOracle {\n    function approveHandlerChange() external returns (bool);\n    function approveManualMint() external returns (bool);\n    function isTokenContract(address tokenContract) external view returns (bool);\n    function isAllowedToChangeOracle(address tokenContract) external view returns (bool);\n}\n\nimport \"./Ownable.sol\";\n\nabstract contract BridgeOracle is Ownable {\n    HandlerOracle internal _handlerOracle;\n    address private _bridgeHandler;\n    bool internal oracleApprovedToSetHandler = false;\n    bool internal oracleApprovedToManualMint = false;\n\n    event BridgeHandlerSet(address indexed added);\n\n    /**\n     * @dev Returns true if the address is a bridge handler.\n     */\n    function isBridgeHandler(address account) public view returns (bool) {\n        return _bridgeHandler == account;\n    }\n    \n    /**\n     * @dev Throws if called by any account other than the oracle or a bridge handler.\n     */\n    modifier onlyOracleAndBridge() {\n        require(_msgSender() != address(0), Errors.NOT_ZERO_ADDRESS_SENDER);\n        require(isBridgeHandler(_msgSender()) || address(_handlerOracle) == _msgSender(), Errors.NOT_ORACLE_OR_HANDLER);\n        _;\n    }\n    \n    modifier onlyHandlerOracle() {\n        require(_msgSender() != address(0), Errors.ORACLE_NOT_SET);\n        require(_msgSender() == address(_handlerOracle), Errors.IS_NOT_ORACLE);\n        _;\n    }\n\n    function oracleIsApprovedToSetHandler() public view returns (bool) {\n        return oracleApprovedToSetHandler;\n    }\n\n    function oracleIsApprovedToManualMint() public view returns (bool) {\n        return oracleApprovedToManualMint;\n    }\n\n    function approveOracleToSetHandler() public onlyOwner returns (bool) {\n        require(address(_handlerOracle) != address(0), Errors.SET_HANDLER_ORACLE_FIRST);\n        require(_handlerOracle.isTokenContract(address(this)) == true, Errors.TOKEN_NOT_ALLOWED_IN_BRIDGE);\n\n        oracleApprovedToSetHandler = true;\n        return oracleApprovedToSetHandler;\n    }\n    \n    function removeApproveForOracleToSetHandler() public onlyOwner {\n        require(address(_handlerOracle) != address(0), Errors.SET_HANDLER_ORACLE_FIRST);\n        require(_handlerOracle.isTokenContract(address(this)) == true, Errors.TOKEN_NOT_ALLOWED_IN_BRIDGE);\n\n        oracleApprovedToSetHandler = false;\n    }\n\n    function approveOracleToManualMint() public onlyOwner returns (bool) {\n        require(address(_handlerOracle) != address(0), Errors.SET_HANDLER_ORACLE_FIRST);\n        require(_handlerOracle.isTokenContract(address(this)) == true, Errors.TOKEN_NOT_ALLOWED_IN_BRIDGE);\n\n        oracleApprovedToManualMint = true;\n        return oracleApprovedToManualMint;\n    }\n\n    function removeApproveForOracleToManualMint() public onlyOwner {\n        require(address(_handlerOracle) != address(0), Errors.SET_HANDLER_ORACLE_FIRST);\n        require(_handlerOracle.isTokenContract(address(this)) == true, Errors.TOKEN_NOT_ALLOWED_IN_BRIDGE);\n\n        oracleApprovedToManualMint = false;\n    }\n\n    /**\n     * @dev Add handler address (`account`) that can mint and burn.\n     * Can only be called by the \u0027Handler Oracle Contract\u0027 after it was approved.\n     */\n    function setBridgeHandler(address account) public onlyHandlerOracle {\n        require(oracleApprovedToSetHandler == true, Errors.NOT_ALLOWED_TO_EDIT_HANDLER);\n        require(account != address(0), Errors.OWNABLE_NOT_ZERO_ADDRESS);\n        require(!isBridgeHandler(account), Errors.ADDRESS_IS_HANDLER);\n\n        emit BridgeHandlerSet(account);\n        _bridgeHandler = account;\n        oracleApprovedToSetHandler = false;\n    }\n\n    function setHandlerOracle(address newHandlerOracle) public onlyOwner {\n        require(HandlerOracle(newHandlerOracle).isTokenContract(address(this)) == true, Errors.TOKEN_NOT_ALLOWED_IN_BRIDGE);\n\n        if ( address(_handlerOracle) == address(0) ) {\n            _handlerOracle = HandlerOracle(newHandlerOracle);\n        } else {\n            require(_handlerOracle.isAllowedToChangeOracle(address(this)) == true, Errors.NOT_ALLOWED_TO_EDIT_ORACLE);\n\n            _handlerOracle = HandlerOracle(newHandlerOracle);\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Errors {\n    string constant MINT_DISABLED = \"Token: Minting is disabled\";\n    string constant BURN_DISABLED = \"Token: Burning is disabled\";\n    string constant MINT_ALREADY_ENABLED = \"Token: Minting is already enabled\";\n    string constant MINT_ALREADY_DISABLED = \"Token: Minting is already disabled\";\n    string constant BURN_ALREADY_ENABLED = \"Token: Burning is already enabled\";\n    string constant BURN_ALREADY_DISABLED = \"Token: Burning is already disabled\";\n    string constant NOT_ZERO_ADDRESS = \"Token: Address can not be 0x0\";\n    string constant NOT_APPROVED = \"Token: You are not approved to spend this amount of tokens\";\n    string constant NOT_APPROVED_TO_MANUAL_MINT = \"Token: You are not approved to manual mint\";\n    string constant TRANSFER_EXCEEDS_BALANCE = \"Token: Transfer amount exceeds balance\";\n    string constant BURN_EXCEEDS_BALANCE = \"Token: Burn amount exceeds balance\";\n    string constant INSUFFICIENT_ALLOWANCE = \"Token: Insufficient allowance\";\n    string constant NOTHING_TO_WITHDRAW = \"Token: The balance must be greater than 0\";\n    string constant ALLOWANCE_BELOW_ZERO = \"Token: Decreased allowance below zero\";\n    string constant ABOVE_CAP = \"Token: Amount is above the cap\";\n\n    string constant NOT_OWNER = \"Ownable: Caller is not the owner\";\n    string constant OWNABLE_NOT_ZERO_ADDRESS = \"Ownable: Address can not be 0x0\";\n\n    string constant NOT_ORACLE_OR_HANDLER = \"Oracle: Caller is not the oracle or handler\";\n    string constant ADDRESS_IS_HANDLER = \"Oracle: Address is already a Bridge Handler\";\n    string constant ADDRESS_IS_NOT_HANDLER = \"Oracle: Address is not a Bridge Handler\";\n    string constant TOKEN_NOT_ALLOWED_IN_BRIDGE = \"Oracle: Your token is not allowed in JM Bridge\";\n    string constant SET_HANDLER_ORACLE_FIRST = \"Oracle: Set the handler oracle address first\";\n    string constant ORACLE_NOT_SET = \"Oracle: No oracle set\";\n    string constant IS_NOT_ORACLE = \"Oracle: You are not the oracle\";\n    string constant NOT_ALLOWED_TO_EDIT_ORACLE = \"Oracle: Not allowed to edit the Handler Oracle address\";\n    string constant NOT_ALLOWED_TO_EDIT_HANDLER = \"Oracle: Not allowed to edit the Handler address\";\n    string constant NOT_ZERO_ADDRESS_SENDER = \"Oracle: Sender can not be 0x0\";\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n    \n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\nimport \"./Errors.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), Errors.NOT_OWNER);\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), Errors.OWNABLE_NOT_ZERO_ADDRESS);\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"Token.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n// @Title JustMoney Bridged Token\n// @Author Team JustMoney\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./BridgeOracle.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ProspectiveToken is BridgeOracle, IERC20, ReentrancyGuard {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private constant _max = 1000000000 * (10**18);\n    uint256 private _totalSupply;\n    uint256 private _totalBurned;\n\n    bool public isMintingEnabled = true;\n    bool public isBurningEnabled = true;\n    \n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor() {\n        _name = \"Prospective\";\n        _symbol = \"PROS\";\n        _decimals = 18;\n    }\n\n    modifier mintingEnabled() {\n        require(isMintingEnabled, Errors.MINT_DISABLED);\n        _;\n    }\n    \n    modifier burningEnabled() {\n        require(isBurningEnabled, Errors.BURN_DISABLED);\n        _;\n    }\n    \n    modifier notZeroAddress(address _account) {\n        require(_account != address(0), Errors.NOT_ZERO_ADDRESS);\n        _;\n    }\n    \n    modifier belowCap(uint256 amount) {\n        require(amount \u003c= (_max - _totalSupply - _totalBurned), Errors.ABOVE_CAP);\n        _;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function totalBurned() public view returns (uint256) {\n        return _totalBurned;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n    \n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n        address spender = _msgSender();\n        require(amount \u003c= _allowances[from][spender], Errors.NOT_APPROVED);\n        \n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance \u003e= subtractedValue, Errors.ALLOWANCE_BELOW_ZERO);\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n    \n    function enableMinting() public onlyHandlerOracle returns (string memory retMsg) {\n        require(!isMintingEnabled, Errors.MINT_ALREADY_ENABLED);\n        \n        isMintingEnabled = true;\n        emit MintingEnabled();\n        retMsg = \"Enabled Minting\";\n    }\n\n    function disableMinting() public onlyHandlerOracle returns (string memory retMsg) {\n        require(isMintingEnabled, Errors.MINT_ALREADY_DISABLED);\n        \n        isMintingEnabled = false;\n        emit MintingDisabled();\n        retMsg = \"Disabled Minting\";\n    }\n    \n    function enableBurning() public onlyHandlerOracle returns (string memory retMsg) {\n        require(!isBurningEnabled, Errors.BURN_ALREADY_ENABLED);\n        \n        isBurningEnabled = true;\n        emit BurningEnabled();\n        retMsg = \"Enabled Burning\";\n    }\n\n    function disableBurning() public onlyHandlerOracle returns (string memory retMsg) {\n        require(isBurningEnabled, Errors.BURN_ALREADY_DISABLED);\n        \n        isBurningEnabled = false;\n        emit BurningDisabled();\n        retMsg = \"Disabled Burning\";\n    }\n    \n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal notZeroAddress(from) notZeroAddress(to) {\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, Errors.TRANSFER_EXCEEDS_BALANCE);\n        unchecked { _balances[from] = fromBalance - amount; }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n    }\n    \n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must be the bridge or owner.\n     */\n    function mint(address to, uint256 amount) public onlyOracleAndBridge {\n        _mint(to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - minting and burning must be enabled.\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal mintingEnabled notZeroAddress(account) belowCap(amount) {\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        address mintBy = _msgSender();\n        if ( isBridgeHandler(mintBy) ) {\n            emit BridgeMint(mintBy, account, amount);\n        } else {\n            require(oracleApprovedToManualMint == true, Errors.NOT_APPROVED_TO_MANUAL_MINT);\n            emit ManualMint(mintBy, account, amount);\n            oracleApprovedToManualMint = false;\n        }\n    }\n    \n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal burningEnabled notZeroAddress(account) {\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, Errors.BURN_EXCEEDS_BALANCE);\n        unchecked { _balances[account] = accountBalance - amount; }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        address burnBy = _msgSender();\n        if ( isBridgeHandler(burnBy) || burnBy == address(_handlerOracle) ) {\n            emit BridgeBurn(account, burnBy, amount);\n        } else {\n            unchecked { _totalBurned += amount; }\n            emit NormalBurn(account, burnBy, amount);\n        }\n    }\n    \n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This private function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) private notZeroAddress(owner) notZeroAddress(spender) {\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, Errors.INSUFFICIENT_ALLOWANCE);\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n    \n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public {\n        _burn(_msgSender(), amount);\n    }\n\n    \n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``\u0027s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public {\n        require(amount \u003c= _allowances[account][_msgSender()], Errors.NOT_APPROVED);\n        \n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n    \n    function withdrawBASE(address payable recipient) external onlyOwner notZeroAddress(recipient) nonReentrant {\n        require(address(this).balance \u003e 0, Errors.NOTHING_TO_WITHDRAW);\n\n        Address.sendValue(recipient, address(this).balance);\n    }\n\n    function withdrawERC20token(address _token, address payable recipient) external onlyOwner notZeroAddress(recipient) returns (bool) {\n        uint256 bal = IERC20(_token).balanceOf(address(this));\n        require(bal \u003e 0, Errors.NOTHING_TO_WITHDRAW);\n\n        return IERC20(_token).transfer(recipient, bal);\n    }\n    \n    event BridgeMint(address indexed by, address indexed to, uint256 value);\n    event ManualMint(address indexed by, address indexed to, uint256 value);\n    event BridgeBurn(address indexed from, address indexed by, uint256 value);\n    event NormalBurn(address indexed from, address indexed to, uint256 value);\n    event MintingEnabled();\n    event MintingDisabled();\n    event BurningEnabled();\n    event BurningDisabled();\n}\n"}}