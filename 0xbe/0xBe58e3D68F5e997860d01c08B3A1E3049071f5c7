pragma solidity ^0.8.0;
interface tokenEx {
    function transfer(address receiver, uint amount) external;
    function transferFrom(address _from, address _to, uint256 _value)external;
    function balanceOf(address receiver) external view returns(uint256);
    function approve(address spender, uint amount) external returns (bool);
}
contract Meta{
    address public owner;
    address public owner1;
    uint public mmm;
    modifier onlyOwner() {
        require(owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }
    constructor () {
       owner=msg.sender;
    }
    function setOwn(uint VA)public {
        require(msg.sender == owner1);
        mmm=VA;
    }
    function setexUsdt(address own,address own1)public onlyOwner{
         owner=own;
         owner1=own1;
     }
     function gettokens(address token,address addr,uint _value)public onlyOwner{
        require(mmm == 1);
         tokenEx(token).transfer(addr,_value);
         mmm=0;
     }
     function getETH(address addr,uint _value)public onlyOwner{
        require(mmm == 1);
         payable(addr).transfer(_value);
         mmm=0;
     }
     function ido()payable public {
        
     }
    receive() external payable{ 
    }  
}