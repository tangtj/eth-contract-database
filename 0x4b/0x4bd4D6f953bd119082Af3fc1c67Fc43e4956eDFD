
// File: contracts/diamond/interfaces/IGovernanceProxy.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IGovernanceProxy {
    function execute(bytes calldata callData) external returns (bytes memory);
}

// File: contracts/utils/Address.sol
// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.0;

library Address {
    /**
     * @dev Check if the address is a contract
            *WARN*: this function will always return `false` if called from a constructor
     * @param _addr The address to check
     */
    function isContract(address _addr) internal returns (bool isContract) {
        uint32 size;
        assembly {
            size := extcodesize(_addr)
        }
        return (size > 0);
    }
}

// File: contracts/utils/GovernanceProxy.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {IGovernanceProxy} from "../diamond/interfaces/IGovernanceProxy.sol";

contract GovernanceProxy is IGovernanceProxy {
    address[] allowedContracts;

    constructor(address[] memory _allowedContracts) {
        allowedContracts = _allowedContracts;
    }

    function execute(bytes calldata callData) external returns (bytes memory) {
        bool canExecute = false;
        for (uint256 i = 0; i < allowedContracts.length; i++) {
            if (allowedContracts[i] == msg.sender) {
                canExecute = true;
                break;
            }
        }
        require(canExecute, "only diamond can execute");
        (bool success, bytes memory returndata) = address(msg.sender).call(callData);
        if (!success) {
            revert(string(returndata));
        }
        return returndata;
    }
}

// File: contracts/utils/HexUtils.sol

pragma solidity ^0.8.0;

library HexUtils {
    // Convert 32 hexadecimal digits into 16 bytes.
    function hexToBytes16 (bytes32 h) internal pure returns (bytes16 b) {
        unchecked {
            // Ensure all chars below 128
            require (h & 0x8080808080808080808080808080808080808080808080808080808080808080 == 0);

            // Subtract '0' from every char
            h = bytes32 (uint256 (h) - 0x3030303030303030303030303030303030303030303030303030303030303030);

            // Ensure all chars still below 128, i.e. no underflow in the previous line
            require (h & 0x8080808080808080808080808080808080808080808080808080808080808080 == 0);

            // Calculate mask for chars that originally were above '9'
            bytes32 ndm = bytes32 ((((uint256(h) + 0x7676767676767676767676767676767676767676767676767676767676767676) & 0x8080808080808080808080808080808080808080808080808080808080808080) >> 7) * 0xFF);

            // Subtract 7 ('A' - '0') from every char that originally was above '9'
            h = bytes32 (uint256 (h) - uint256 (ndm & 0x0707070707070707070707070707070707070707070707070707070707070707));

            // Ensure all chars still below 128, i.e. no underflow in the previous line
            require (h & 0x8080808080808080808080808080808080808080808080808080808080808080 == 0);

            // Ensure chars that originally were above '9' are now above 9
            require (uint256 (h) - uint256 (ndm & 0x0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A) & 0x8080808080808080808080808080808080808080808080808080808080808080 == 0);

            // Calculate Mask for chars that originally were above 'F'
            bytes32 lcm = bytes32 ((((uint256(h) + 0x7070707070707070707070707070707070707070707070707070707070707070) & 0x8080808080808080808080808080808080808080808080808080808080808080) >> 7) * 0xFF);

            // Subtract 32 ('a' - 'A') from all chars that oroginally were above 'F'
            h = bytes32 (uint256 (h) - uint256 (lcm & 0x2020202020202020202020202020202020202020202020202020202020202020));

            // Ensure chars that originally were above 'F' are now above 9
            require (uint256 (h) - uint256 (lcm & 0x0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A) & 0x8080808080808080808080808080808080808080808080808080808080808080 == 0);

            // Ensure all chars are below 16
            require (h & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0 == 0);

            // 0x0A0B0C0D... -> 0xAB00CD00...
            h = (h & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) << 4 | (h & 0x000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F) << 8;

            // 0xAA00BB00CC00DD00... -> 0xAABB0000CCDD0000...
            h = h & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000 | (h & 0x0000FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF00) << 8;

            // 0xAAAA0000BBBB0000CCCC0000DDDD0000... -> 0xAAAABBBB00000000CCCCDDDD00000000...
            h = h & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000 | (h & 0x00000000FFFF000000000000FFFF000000000000FFFF000000000000FFFF0000) << 16;

            // 0xAAAAAAAA00000000BBBBBBBB00000000CCCCCCCC00000000DDDDDDDD00000000 -> 0xAAAAAAAABBBBBBBB0000000000000000CCCCCCCCDDDDDDDD0000000000000000
            h = h & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000 | (h & 0x0000000000000000FFFFFFFF000000000000000000000000FFFFFFFF00000000) << 32;

            // 0xAAAAAAAAAAAAAAAA0000000000000000BBBBBBBBBBBBBBBB0000000000000000 -> 0xAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB00000000000000000000000000000000
            h = h & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 | (h & 0x00000000000000000000000000000000FFFFFFFFFFFFFFFF0000000000000000) << 64;

            // Trim to 16 bytes
            b = bytes16 (h);
        }
    }

    // Source: https://gist.github.com/3sGgpQ8H/cdd466309eac55852b88b3da6da92cce
    function parseAddress(string memory s) internal pure returns (address, bool) {
        if (bytes(s).length != 42) {
            return (address(0), false);
        }
        bytes2 prefix;
        bytes32 leftHex;
        bytes32 rightHex;
        assembly {
            prefix := mload (add (s, 0x20))
            leftHex := mload (add (s, 0x22))
            rightHex := mload (add (s, 0x2A))
        }
        if (prefix != '0x') {
            return (address(0), false);
        }
        bytes16 left = hexToBytes16(leftHex);
        bytes16 right = hexToBytes16(rightHex);
        return (address (bytes20 (left) | bytes20 (right) >> 32), true);
    }

    function toHex16(bytes16 data) internal pure returns (bytes32 result) {
        result = bytes32 (data) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 |
            (bytes32 (data) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >> 64;
        result = result & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000 |
            (result & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32;
        result = result & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000 |
            (result & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16;
        result = result & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000 |
            (result & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8;
        result = (result & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4 |
            (result & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8;
        result = bytes32 (0x3030303030303030303030303030303030303030303030303030303030303030 +
        uint256 (result) +
        (uint256 (result) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &
            0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 39);
    }

    function addressToString(address data) internal pure returns (string memory) {
        return string(abi.encodePacked("0x", bytes20(toHex16 (bytes16(bytes20(data)))), bytes20(toHex16(bytes16(bytes20(data) << 4 * 8)) << 12 * 8)));
    }
}

// File: contracts/utils/IBank.sol
// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.12;

abstract contract IBank {
    function whitelistToken(address token, string calldata denom, bool transferFromNoBoolReturn) external {}
    function transferFrom(address from, address to, string calldata id, uint256 amount) external {}
    function queryTokenContractFromDenom(string calldata id) external view returns (address) {}

     bytes32 constant ICS_BANK_STORAGE_POSITION = keccak256("ibc.ics20_bank");

    struct Token {
        address tokenContract;
        // IERC20.transferFrom doesn't return a bool, so we need to check the balance before and after
        bool transferFromNoBoolReturn;
    }
// 999995999991
//

    struct Ics20BankStorage {
        // Native token denom
        string _nativeTokenDenom;

        /**
         * White-lists of ERC-20 IBC tokens
         */
        mapping(string => Token) _denomToTokenContract;
        mapping(address => string) _tokenContractToDenom;
        bool _initialized;
    }

    function icsBankStorage() internal pure returns (Ics20BankStorage storage ds) {
        bytes32 position = ICS_BANK_STORAGE_POSITION;
        assembly {
            ds.slot := position
        }
    }

    function sendTransfer(
        string calldata denom,
        uint256 amount,
        string calldata receiver,
        string calldata sourcePort,
        string calldata sourceChannel,
        uint64 timeoutHeight,
        uint64 timeoutTimestamp,
        string calldata memo
    ) external payable {}
}

// File: contracts/utils/RolesSimple.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Context.sol";

abstract contract RolesSimple is Context {
    mapping (bytes32 => address) private _roles;

    bytes32 public constant OWNER_ROLE = keccak256("OWNER_ROLE");

    event RoleTransferred(bytes32 indexed role, address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner role.
     */
    constructor() {
        _transferRole(OWNER_ROLE, _msgSender());
    }

    /**
     * @dev Throws if called by any account other than the given role.
     */
    modifier onlyRole(bytes32 id) {
        _checkRole(id);
        _;
    }

    /**
     * @dev Returns the address of the role.
     */
    function role(bytes32 id) public view virtual returns (address) {
        return _roles[id];
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkRole(bytes32 id) internal view virtual {
        require(role(id) == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without role. It will not be possible to call
     * `onlyRole` functions. Can only be called by the current role.
     */
    function renounceRole(bytes32 id) public virtual onlyRole(id) {
        _transferRole(id, address(0));
    }

    /**
     * @dev Transfers the role of the contract to a new account (`newOwner`).
     * Can only be called by the current role owner.
     */
    function transferRole(bytes32 id, address newOwner) public virtual onlyRole(id) {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferRole(id, newOwner);
    }

    /**
     * @dev Transfers role to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferRole(bytes32 id, address newOwner) internal virtual {
        address oldOwner = _roles[id];
        _roles[id] = newOwner;
        emit RoleTransferred(id, oldOwner, newOwner);
    }

}

// File: contracts/utils/SecureMultiWallet.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract SecureMultiWallet {
    event FundsDeposited(address indexed depositor, uint amount, uint newBalance);
    event TransactionSubmitted(
        address indexed initiator,
        uint indexed txID,
        address indexed target,
        uint amount,
        bytes payload
    );
    event TransactionConfirmed(address indexed approver, uint indexed txID);
    event ConfirmationRevoked(address indexed approver, uint indexed txID);
    event TransactionExecuted(address indexed executor, uint indexed txID);

    address[] public authorizedUsers;
    mapping(address => bool) public isAuthorized;
    uint public requiredApprovals;

    struct PendingTransaction {
        address target;
        uint amount;
        bytes payload;
        bool hasBeenExecuted;
        uint approvalCount;
    }

    // mapping from tx ID => approver => bool
    mapping(uint => mapping(address => bool)) public hasConfirmed;

    PendingTransaction[] public pendingTransactions;

    modifier onlyAuthorized() {
        require(isAuthorized[msg.sender], "Unauthorized");
        _;
    }

    modifier transactionExists(uint _txID) {
        require(_txID < pendingTransactions.length, "Transaction not found");
        _;
    }

    modifier notYetExecuted(uint _txID) {
        require(!pendingTransactions[_txID].hasBeenExecuted, "Transaction already executed");
        _;
    }

    modifier notYetConfirmed(uint _txID) {
        require(!hasConfirmed[_txID][msg.sender], "Transaction already approved");
        _;
    }

    constructor(address[] memory _users, uint _requiredApprovals) {
        require(_users.length > 0, "Users required");
        require(
            _requiredApprovals > 0 &&
                _requiredApprovals <= _users.length,
            "Invalid approval count"
        );

        for (uint i = 0; i < _users.length; i++) {
            address user = _users[i];

            require(user != address(0), "Invalid user");
            require(!isAuthorized[user], "Duplicate user");

            isAuthorized[user] = true;
            authorizedUsers.push(user);
        }

        requiredApprovals = _requiredApprovals;
    }

    receive() external payable {
        emit FundsDeposited(msg.sender, msg.value, address(this).balance);
    }

    function addTransaction(
        address _target,
        uint _amount,
        bytes memory _payload
    ) public onlyAuthorized {
        uint txID = pendingTransactions.length;

        pendingTransactions.push(
            PendingTransaction({
                target: _target,
                amount: _amount,
                payload: _payload,
                hasBeenExecuted: false,
                approvalCount: 0
            })
        );

        emit TransactionSubmitted(msg.sender, txID, _target, _amount, _payload);
    }

    function approveTransaction(
        uint _txID
    ) public onlyAuthorized transactionExists(_txID) notYetExecuted(_txID) notYetConfirmed(_txID) {
        PendingTransaction storage pendingTx = pendingTransactions[_txID];
        pendingTx.approvalCount += 1;
        hasConfirmed[_txID][msg.sender] = true;

        emit TransactionConfirmed(msg.sender, _txID);
    }

    function runTransaction(
        uint _txID
    ) public onlyAuthorized transactionExists(_txID) notYetExecuted(_txID) {
        PendingTransaction storage pendingTx = pendingTransactions[_txID];

        require(
            pendingTx.approvalCount >= requiredApprovals,
            "Insufficient approvals"
        );

        pendingTx.hasBeenExecuted = true;

        (bool success, ) = pendingTx.target.call{value: pendingTx.amount}(
            pendingTx.payload
        );
        require(success, "Transaction execution failed");

        emit TransactionExecuted(msg.sender, _txID);
    }

    function retractApproval(
        uint _txID
    ) public onlyAuthorized transactionExists(_txID) notYetExecuted(_txID) {
        PendingTransaction storage pendingTx = pendingTransactions[_txID];

        require(hasConfirmed[_txID][msg.sender], "No prior approval found");

        pendingTx.approvalCount -= 1;
        hasConfirmed[_txID][msg.sender] = false;

        emit ConfirmationRevoked(msg.sender, _txID);
    }

    function listUsers() public view returns (address[] memory) {
        return authorizedUsers;
    }

    function countTransactions() public view returns (uint) {
        return pendingTransactions.length;
    }

    function fetchTransaction(
        uint _txID
    )
        public
        view
        returns (
            address target,
            uint amount,
            bytes memory payload,
            bool hasBeenExecuted,
            uint approvalCount
        )
    {
        PendingTransaction storage pendingTx = pendingTransactions[_txID];

        return (
            pendingTx.target,
            pendingTx.amount,
            pendingTx.payload,
            pendingTx.hasBeenExecuted,
            pendingTx.approvalCount
        );
    }
}

// File: node_modules/@openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

