// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.26;

abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}

contract VinceFight is ReentrancyGuard {

/*
           ...............,:llc:,'..........',;;,'............'',,,,,,,,''','.',;,'..    ............
                     ...';lodoc;,..........''''''...........',,;;;,'.....''.'',:c:,.       .........
.....                ..',:lodol:;,,,;;;;,'''''''.............',;;;,,'......'',,:cc:,..      .       
,,''...   ......    ...,:lloc;;:llodxxxdl:;;,,,,''''......'',;;:::::;,'....''';:clcc;.    .....     
::;;,'................;ldddoccldk0K0kkOOkdollcccc::::::::::::clooool:;,'..',,;::lddc:,. ........    
lcc::;,,''..........':oxxddoodkOKXKOkxkkkxdddoooollllllllloooodxkxdllc;,'',,;;;:coddc;...........   
llccc::;,,''''....'';dxxdddddxOOO0OOkxxxxddddddooooolllllodddxxxxxdolc:;,'',,;:::cll:;'.'''........ 
cccccc::;,''''',,;;:okkdxxxddxOOkkkkxxxxxdxxxxdddooooooooodddddxxddolc:;,'''''''';:lc:,'''........  
::cccc::;,''',;:::clxkkxxxddxO000Okkxxxxdxkkkxdddoooooddooddoddddoollcc:;,'''''.';:lll:,.......     
;::::::;,''',;ccllloxxxxxdlcldkkkxxdddooodxxddoollllcccllcccclodolccccccc:;,''',,;:cloc;...         
;;;;;;,,'.'';:cllllodddddoc:;,;;:clcccclllllccc::;;,''''',,;:clolc::;;::cc::;;;;;;;:c:::'..         
,,,,,''....';:cllllllcccloddl:'''',;;;;:;:::;;;;,'''.'',,;:ccclllc:;,,,;:::;;;;;;;:c:,;;'...        
'''''......,;::cc::c::::cddc;'.....'',,;;;:;;,,''........',;cclllccc;'''',,,,',,,;:c;,,;;'......    
''''......',;;;;;,,,;:ccll:''........',cllllc;,.........,;,,,,:cccclc;,'..'''.',;:clc,,;c::;,'....  
.........',,;;;;,''';cccll;,::'..'''',cddooool:;;;,,'..,odoc:;;::ccllc:,......',;;;;;'':oooolc;,'...
'..'''',,;;;;;;;,,',;:codollolc:::;',lddoooooooc:;;;;;:cllllllccccclllc;'.''''',;,'''',cxxxxddolc:,'
;,,,;;::::::::::;;,;;:lddddolcccc:::odolllloddol::;;::ccccclooooollllllc,''',,,;;;,;::cdkkkkkxxddolc
c::::::cccccccccccccc:coxkkxollccldkkdllccllddxdolc::::cclloooddooolloll:'',;;:cl:,.,lxkkkkkkkkkkxxd
:::::::ccccllllollodxl:oO0OdllloxkkOdllllllloddddollc::::clooddoodooooool:;:cllllol,.;oxxkkkkkOOkkkk
;;;;;;;;;;;;::;;;;:ll;;oxxxdddxxxdoocccllcclloooollllllcccllloooooooddddddoolc::cldl''lddddxxxxxkkkk
''..........''.....,,..cdolooddddl;,,,;,'',:clllllllloollcccccccclloddddxxdddl,.';ll;:ooooddxxdddddd
...     .   ..    ... .lolclloolc;....''....,:ccccccllllcc::::::cclodddxxxddxdc'.':llcc;::cclooooddd
                   . .;oocccclccodc;,'';;;;,,;:cllccclcc:::::::::clodxxxxxddddo:'':ol:'....''',,;;::
                  .. .:olc::cc:cdddlc;,,;cclllllollc:::c::;;;;;;:ccloxxddxdloddocclol,.    .........
                     .:olc::c:;cllllc;;;;:cccllllcccc:::::;;;;;;::cclddoodo:clodddoo:.              
                     .,ccc::c::clccccc::::cccccc:::cc:::::;;;;;;;:::cllcclccllloddl,.               
                     ..,::;:cc:clc:,'.'''',;:::::::::::::::;;,;;;;;:ccccc:;:c::::;.                 
                     ...,::;:cccc;'...    ...',;;;;;:::::::;;,,,;;;::ccccc;cc'.',.                  
                     ....;:;;ccc:,..          ..,;;;;::cc::;;,,,;;;::cllcooodc.''.                  
                     .....;;:cc:;,..            .',;;:::::::;;,,,;;;:clcclooxdc:,.                  
                     .... .;:cc:;,..            ..,,;;:::::;;;,,,;;;:cc:cllodxood;.                 
                     ....  .;:c:;;;'.           .,;;;;;::::;;;;;;;;;::::cllodkl,oOc.                
                     ....  .::cc:::;,.....''....,;;;;::::cc:;;;;;;;;:::ccllodkd:oKKc                
                      ...  ,olcc::::::;,;:c:;'',;;;;;::::cc:::;;::::;:::clloodolONW0:.              
                      ... .dkoc:::::::::;,,,;;;;;;;;;:;;:cc::::::c:;;;:::ccccccdKNWN0xc'...         
                      ....:0Odl:;::;;;;,;;;;;,,,;;;;;;;;::::::::cc::;;;::::cc;c0NWWNKOOkdolcc:,...  
       ...''',,,;;;;;;::;:kNXOo:,;::;,,''''...'',,,,;;;;:::::::::::::::::::;';kXWWWWKOOOkkO0Okxollc:
..',;cldddooooollc;;,'';cdOXNKOo;,;:;,''.......',,,,;;:;;;;:;;;;;;;;;;;;;,',lOXXkod0KOOOOOKKKOxollox
kOkdodxdoc:,,,,,'....;ldxxkKXxoolclllcc:;,'''',;;;;;;;;;;;;;,,,,,,,,;;;;''cxOxl,..'cxkkOO0KXX0kOxoll
KOdoloolll:,'.....,cdxkkxxxOd'..,looloooc,'..',,;;;;;;;,,,,''.''',,,,,;;:ldl;'.. .;:oxxxk0KKKOxkOkxd
Okddoooodddolc:;coxkkkxxxxxko,...:oooloooc;'..'''',,,'''........'',,',cllc;,'....':cdxxxxO0KKOxxkkkx
olc:cdxxddddooddxkxxxxxxxdxOd:'...,:clllloll:;'.................'',,;lolc:,'.....;coxkxxxkkOkxdddxkx
loccldddddxxxxkxxxxxddddddxOkl;.  ..',:cllllllc;,'......... ..':clodddoc:;,'.....:oxxxxxxxxddooooood
dxdxxddxxkkkkkkxxddddoooddxOOd:.  ..',;:cccccccllllool;...',:clddxxxkxdl:;;'... .lxxdxxxxxdddooooooo
xxxxxdlloddxxxxxddddoooodddkOx:...,;:ccccccllllllllloxkc,colc::cx0K0Okkdlc:'....,oxddxxxxxdddooooooo
*/

    struct Token {
        bool allowed;
        address lp;
    }

    mapping(address => Token) public token;
    address public constant vince = 0xDccf3968b667e515C9FC952aA6Bf834eb9d8476c;
    address maga = 0xD29DA236dd4AAc627346e1bBa06A619E8c22d7C5;
    address pepe = 0x6982508145454Ce325dDbE47a25d4ec3d2311933;
    address weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address lpvince = 0x02249fbc47437A07A88Ad7a124f2Da9610856920;
    address lpmaga = 0x961eC3bb28C9E98A040c4bDEd38917aA96B791bE;
    address lppepe = 0x11950d141EcB863F01007AdD7D1A342041227b58;
    address routerV3 = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;
    address dead = 0x000000000000000000000000000000000000dEaD;
    address immutable vinceFight;
    address addTokenRole;
    address startGameRole;

    bool public gameStarted;
    uint256 public round;
    uint256 public deadline;
    mapping(address => mapping(uint256 => mapping(bool => uint256))) public individualAmounts;
    mapping(uint256 => mapping(bool => uint256)) public totalAmounts;
    mapping(uint256 => mapping(bool => uint256)) public score;
    mapping(uint256 => bool) public winner;

    uint256 vinceRate = 42069; //x0.042069
    uint256 vinceRateBasis = 1000000;
    uint256 bonus = 125; //x1.25
    uint256 bonusBasis = 100;
    uint256 slippageBasis = 10000;
    uint256 matchTime = 24 * 60 * 60;
    uint256 deltaTime = 15 * 60;
    uint256 developmentDeltaTime = 0;
    //uint256 matchTime = 2 * 60;
    //uint256 deltaTime = 1 * 60;
    //uint256 immutable developmentDeltaTime = 1719569519 - block.timestamp; //a time delta for hardhat fork in dev

    event NewRound(uint256 round, uint256 deadline, bool winner);
    event DeadlineExtended(uint256 deadline);
    event ScoreUpdated(uint256 scoreFighter, bool fighter);

    constructor() {
        vinceFight = address(this);
        addTokenRole = msg.sender;
        startGameRole = msg.sender;
        deadline = block.timestamp + matchTime + developmentDeltaTime;
        token[vince] = Token(true, lpvince);
        token[maga] = Token(true, lpmaga);
        token[pepe] = Token(true, lppepe);
        token[weth] = Token(true, weth);
    }

    modifier isGameStarted() {
        require((gameStarted || msg.sender == startGameRole), "Game not started yet");
        _;
    }

    /* Main function to play vinceFight
    If called during last deltaTime before the end of the match, deltaTime is added to deadline
    In addition
    If input is Vince, checks amount > 4.2069% score, then transfers
    If input is token with V3 pool or ETH, checks equivalent Vince amount (boosted x1.25) > 4.2069% score, then swaps and transfers
    Eventually updates individual amount, total amount and score for the chosen fighter at the current round
    Token with V3 pool and ETH accrue x1.25 score to selected fighter */
    function supportVince(bool f, uint256 a, address t, uint256 s) external payable nonReentrant isGameStarted {
        require(block.timestamp + developmentDeltaTime < deadline, "Match is over. Start a new one");
        require((s >= 0) && (s < slippageBasis), "Slippage must be 0 or higher or less than 10000");
        require(token[t].allowed, "Used token is not allowed");
        uint256 vinceSwapped = a;
        if (t == vince) {
            require(a > (score[round][f] * vinceRate) / vinceRateBasis,"You should support at least 4.2069% of total fighter score");
            require(IERC20(t).transferFrom(msg.sender, vinceFight, a),"Transfer was not successful.");
        } else if (t == weth) {
            require(msg.value >= a, "Insufficient balance");
            uint256 vinceSlip = getVinceSlip(f, msg.value, weth, s);
            ISwapRouter02V3.ExactInputSingleParams
                memory params = ISwapRouter02V3.ExactInputSingleParams({
                    tokenIn: weth,
                    tokenOut: vince,
                    fee: IUniswapV3PoolState(token[vince].lp).fee(),
                    recipient: vinceFight,
                    amountIn: msg.value,
                    amountOutMinimum: vinceSlip,
                    sqrtPriceLimitX96: 0});
            vinceSwapped = ISwapRouter02V3(routerV3).exactInputSingle{value: msg.value}(params);
        } else {
            uint256 vinceSlip = getVinceSlip(f, a, t, s);
            require(IERC20(t).transferFrom(msg.sender, vinceFight, a),"Transfer was not successful.");
            IERC20(t).approve(routerV3, a);
            bytes memory path = abi.encodePacked(
                t,
                IUniswapV3PoolState(token[t].lp).fee(),
                weth,
                IUniswapV3PoolState(token[vince].lp).fee(),
                vince);
            ISwapRouter02V3.ExactInputParams memory params = ISwapRouter02V3.ExactInputParams({
                    path: path,
                    recipient: vinceFight,
                    amountIn: a,
                    amountOutMinimum: vinceSlip});
            vinceSwapped = ISwapRouter02V3(routerV3).exactInput(params);
        }
        individualAmounts[msg.sender][round][f] += vinceSwapped; //registers total individual amounts
        totalAmounts[round][f] += vinceSwapped; //registers total fighter amounts
        score[round][f] += t != vince ? (vinceSwapped * bonus) / bonusBasis : vinceSwapped; //registers total fighter score
        emit ScoreUpdated(score[round][f], f);
        checkAndAddTime();
    }

    function checkAndAddTime() internal {
        if (block.timestamp + developmentDeltaTime >= deadline - deltaTime) {
            deadline = block.timestamp + deltaTime + developmentDeltaTime; //adds time to deadline
            emit DeadlineExtended(deadline);
        }
    }

    receive() external payable {}
    fallback() external payable {}

    /* Function to quote input token amount in Vince
    It checks equivalent amount in Vince to be more than 4.2069% of fighter score
    If so, produces a slipped amount for minimum output on swap */
    function getVinceSlip(bool f,uint256 a,address t,uint256 s) internal view returns (uint256) {
        uint256 tQuote = t!=weth ? quoteV3(t) : 1;
        uint8 d = IERC20(t).decimals();
        uint256 multiplier = d != 18 ? 10**uint256(18-d) : 1;
        uint256 vinceEquivalent = multiplier * (a * quoteV3(vince) * bonus) / tQuote / bonusBasis;
        require(vinceEquivalent > (score[round][f] * vinceRate) / vinceRateBasis,
            "You should support at least 4.2069% of total fighter score");
        uint256 vinceSlip = (vinceEquivalent * (slippageBasis - s) * bonusBasis) / slippageBasis / bonus;
        return vinceSlip;
    }

    /* Function to end match
    Select winner as fighter with highest score (if even, true wins)
    Burns half the amount allocated to loser
    Updates round and deadline for the new match */
    function noChanceInHellYouGot() public nonReentrant isGameStarted {
        require(block.timestamp + developmentDeltaTime >= deadline, "Match is not over yet");
        winner[round] = score[round][true] >= score[round][false]; //if even, true wins
        uint256 amountToBurn = totalAmounts[round][!winner[round]] >> 1;
        if (amountToBurn > 0) {
            require(IERC20(vince).transfer(dead, amountToBurn), "Transfer was not successful."); //burns half of total loser amount
            totalAmounts[round][!winner[round]] -= amountToBurn; //registers final total loser amount
        }
        round += 1;
        deadline = block.timestamp + matchTime + developmentDeltaTime;
        emit NewRound(round, deadline, winner[round - 1]);
    }

    /* Function to withdraw funds and rewards
    User can withdraw funds only if s/he put most Vince on the winning fighter
    If not, the user cannot withdraw funds
    Otherwise, the user can withdraw the allocated funds + a quota of loser total amount
    The quota is proportional to how much the user allocated for the winner compared to all winning players
    Data is updated to prevent users withdraw multiple times */
    function withdraw(uint256 r) external nonReentrant isGameStarted {
        if (block.timestamp + developmentDeltaTime >= deadline) {noChanceInHellYouGot();} //ends match if time is over
        require(r < round,"You can withdraw only completed rounds.");
        bool chosenFighter = individualAmounts[msg.sender][r][true] >= individualAmounts[msg.sender][r][false]; //if even, true wins
        require(individualAmounts[msg.sender][r][chosenFighter] > 0,
        "At the selected round, you may have nothing to withdraw or you already withdrew this round. Default is round 0.");
        require(chosenFighter == winner[r],"You cannot withdraw because you lost.");
        uint256 reward = individualAmounts[msg.sender][r][chosenFighter] +
            ((individualAmounts[msg.sender][r][chosenFighter] * totalAmounts[r][!chosenFighter]) / totalAmounts[r][chosenFighter]);
        require(IERC20(vince).transfer(msg.sender, reward), "Transfer was not successful.");
        individualAmounts[msg.sender][r][chosenFighter] = 0; //deletes data to prevent multiple withdraws
        individualAmounts[msg.sender][r][!chosenFighter] = 0; //deletes data to prevent multiple withdraws
        checkAndAddTime(); //adds deltaTime if in deltaTime
    }

    //Basic liquidity quoter for V3 pools (number of tokens t to purchase 1 eth)
    function quoteV3(address t) public view returns (uint256) {
        require(token[t].allowed, "Used token is not allowed");
        uint8 d = IERC20(t).decimals();
        uint256 multiplier = d != 18 ? 10**uint256(d) : 1;
        (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3PoolState(token[t].lp).slot0();
        uint256 tokenFor1ETH = IUniswapV3PoolState(token[t].lp).token0() == weth
            ? ((uint256(sqrtPriceX96) * multiplier) / 2**96)**2 / multiplier
            : ((2**96 * multiplier) / uint256(sqrtPriceX96))**2 / multiplier;
        return tokenFor1ETH;
    }

    //Function to read the minimum allowed amount for a token. Takes into account boost
    function readMinimumQuote(bool f, address t) public view returns (uint256) {
        require(token[t].allowed, "Used token is not allowed");
        uint8 d = IERC20(t).decimals();
        uint256 multiplier = d != 18 ? 10**uint256(18-d) : 1;
        uint256 tEquivalent = t == vince
            ? (score[round][f] * vinceRate) / vinceRateBasis
            : t != weth
            ? (score[round][f] * quoteV3(t) * vinceRate * bonusBasis) / quoteV3(vince) / vinceRateBasis / bonus / multiplier
            : (score[round][f] * 1 * vinceRate * bonusBasis) / quoteV3(vince) / vinceRateBasis / bonus;
        return tEquivalent;
    }

    //Function to easily read the main tokens
    function readMinimumStandardQuotes(bool f) public view returns (uint256, uint256, uint256, uint256) {
        uint256 vinceEquivalent = readMinimumQuote(f, vince);
        uint256 magaEquivalent = readMinimumQuote(f, maga);
        uint256 pepeEquivalent = readMinimumQuote(f, pepe);
        uint256 ethEquivalent = readMinimumQuote(f, weth);
        return (vinceEquivalent, magaEquivalent, pepeEquivalent, ethEquivalent);
    }

    //Helper function to read mapping
    function readTotalAmount(bool f) public view returns (uint256) {
        return totalAmounts[round][f];
    }

    //Function to start the game at command (otherwise would start automatically from round 0 at construction)
    function startGame() external nonReentrant {
        require(msg.sender == startGameRole, "You don't have rights to call this function.");
        require(!gameStarted, "Game already started.");
        gameStarted = true;
        startGameRole = dead;
        round = 1;
        deadline = block.timestamp + matchTime + developmentDeltaTime;
        emit NewRound(round, deadline, true);
    }

    //Function to add tokens. Tokens can only be added and not removed
    function addToken(address t, address lp) external nonReentrant {
        require(msg.sender == addTokenRole, "You don't have rights to call this function.");
        token[t] = Token(true, lp);
    }

    //Function to remove all rights
    function removeAddTokenRole() external nonReentrant {
        require(msg.sender == addTokenRole, "You don't have rights to call this function.");
        addTokenRole = dead;
    }

/*
.......             ....'''.....                  ...,coolloxkkkxxxxxkkkkOO00OOOkkkOOOOOkdlcc::::::;,'.                                                                     
...........             ....''''...           .':l:,';cooodxkkkxkkxxxkkkOOOOkkkkkOOOO0000Oxo:;;::;:c:,'...                                                                     
;;;;;;;;,,''...             ......'....     .';::codc,;cldxxxkkxxdolloddxxxxxxxkkkkkkOOOO0Okoc:::::c;'....                                                                     
::::::::::;;;,,'..               ....''.....,;;;,';ooc::looxkxdxxoccclllodddxxxxxkkkkkkkOO00Oxoc;;:cc;....                                                                     
:::::::;;;;;;,,'....                .....',;:cdoc::llloooodxxxkxdxxxxxxxxkOOOkkkxxkOOOOOOO000Okdl;,,;:,...                                                                     
cc:::;;,'''''.............               .':lol::cc::lddkOkkxxkOOOOOOOO00000OOOOkkkkOOOO0000OOOOkdlc,.'..                                                                      
::::::;,,''''''''''''''''.....           .,ll:,,,,;:cdkxxxkkkkkOOOkkkOOkxxxxxxxkkxdodxkkkO00OOOOOkxo:....                                                                      
;;;;;:;;;;,,,,;;;,,'''...............    .colc:c::okOOOkxxxxxxxkxxxxxoc:;,,,,;:loooooooodxkOOOOOOOkx:....                                                                      
;;;;;;;;;;;;;:::;;,''...'''',,,;;;;,,''..'llcloolokkOOkxdddoooddddol:,'''.'...'',;;:cllllldxOOOOOkkd:.....                                                                     
,,,,,,,,,,;;:::::;;;;;;;;;;::::::::::::;;;lxxxkdlooxkxxdollllloooolc:;,,,,,,,'.......';::ccodxkOOkkd:.....                                                                     
,,,,,,,,,,;;::cc:::::::::cccc:::::::::::::codxxdolcoddddollllooddxxdolccc;;:c:.     ...',;;cclodxxdo;.....                                                                     
,;,,,,,,,,,;;::c:::::::::::::::::;;::::::c:;:lool:codoooolcclllloddxkkdollc::::,...  ....';::::clllc,.....                                                                     
;;;;;,,;;;;;;:::::::ccc::::::::::::::cllcc:::::cc:looolllccccccccccldxxocclllllll:,''';;:ll:,'',;;c:'.....                                                                     
,;;,,'',''',,;;;::::::::::::::::::::lkd,';cclcc:;;llccccccccc::;;;;::loddlclllloooc:::ccldx:......',.....                                                                      
,,,,''''',,,,;;;;;;:::::::::::::::cdKXd..:llcc::;;:::::ccclcc::;;,,;;:lodxxxxxxddolcccc:cdxl;'. ..........                                                                     
',,;;;,;;;;;;;;;;;;;;:::ccc::cccclOXNNO;,lolcc:c:;;;;;:cclllcccc:;;;:coddxxxxxxolccc::::cdxdol;'''........                                                                     
,;;;;;;;;;;;;;;;;,,,;;;::ccccloldKNNNXXdcddocc:::;;:::cccllllllllccccllodddxxxl:;;;;,;::codool:,'........                                                                      
,;;;;;;;;;;::;;;,,,,,;;;:cllllldKNXNXXNKxddoccc:;;;:::ccccllllllllllllllooollc;;clc:;cdddxkocl;,,'.......                                                                      
,,;;;;;,;;;;;;,,,,,;;:clllllllloOXXNXNNX0xdlcc::;,,;;::::ccllllllllllllcccccc:,,:cllcloodkxollc;,'.......                                                                      
,,,,,,;;::ccccllllloooddoollllccdXNNNNNNX0dlc:;;,..',,;;;:::ccccllcc:::cccccc:,.....',;;:lolc;'''........                                                                      
:::cclloooddddoooooooooooollllc:l0NNNNNNNX0oc:;,,.....'',,,,,;;:::::::::ccccc:;,,,'..'''':lc,,;,'.                                                                             
ooooodddddddoooolllllllllllllccccxXNNNNNXXX0o::;,'...........',,;;:c:;;:::::::::;;,'';:;:clcclc;..                                                                             
dddddddoooooollllcc:cclccccccccc:cOXXNXXNXXX0d;',''............',;;,'''',;:lddxkOOkxxxddddoolc;'.                                                                              
ddddddoooolllccccc:;:cccccccc::;;;dKXNXXXXXXKKk:'..'''...........''..''',;:dkkOKNNNNNNNXXXXXKOkxol:,.                                                                          
ddooooooollc:;;::c:;;:ccccc::;,,;;cOXXXXXXXXKK0Oo;'..... ...............;ldO000KKKKKKXXXXXXXXNNNNNNXx'                                                                         
doooooooolcc;'..,;:;;;:cc:;;,,,,;;:dKXXXXXXXK000Oxl'...      ............,ok00000kk0KKKKKKKKKKKXK0O0Ol.                                                                        
ooooooollllcc:,...'',,;:;;,,,,,,,;;lOKXXXXXXXK00OOOd;..         ....'''..'ckkk0K0O0XNNNNNNXNNNXK0Oxxd:.                                                                        
oooooollllllcc:;,....',,,,,,,,,,,,,:x0KXXKXXXKK00OOkkl,.          ...... .'okO00OO0KXXNNNXXXNNX00Okko,                                                                         
olllllllllllllcc::;,,,,,,,,,,,,,,,,,lOKKKKKKKKK000OOkkdc'.          ...    ;kO00O0KKKXXNNNNXXXK00OkOd:'..                                                                      
llllllllcccccccccc::::;,,,,,,,,,,,,,:d0KKKKKKKKK0000OOkxd:...          ....;x00O0000KKKKKKXXXK0OOOOOkxdddl:,.                                                                  
lllcccccc:;;;;:::;;;;;;;,,,,,,,,,,,,,lO0KKKKKKKK000000Okkxl;'',',,,.....',;lOK0O000KK0OOO0KKKKKOOOOOkOOO0OOOk:                                                                 
llcc::;;;;,'',,,,,',,;,,,,,,,,,,,,,''ck00KKKKKKKK0K000000KKOkOOOO0k:....',cx00OOO00K0dodk0KKKK0K000kdooxkkkkkc.                                                                
lc::;;,,,,,''.''''',,,,,,,,,,,'','''';d000KKKKKKKKKKKXXXXX0xdk0K0Kd'.''''cxOK0xkOOO0kl::lk0000000KKKOxddxxxxl.                                                                 
c:;;;,,,,,''...''''',,,,,,,'''''''''''l0K0KKKKKKKXXXXXXKOkkko,;xKO:.''',:dk00kdxOOOOOxc;;:ldxkOOO00KKKK0Okxl'                                                                  
::;;;,,,''''...''...'''''''''''''''''';kXKKKKKKKKKKK0Oxdxkkdc,.,kd'.''';oxkkkddkOOO000kkdoc:::coxkO000000Od'                                                                   
:;;;;;,,''................'''''''''''''oKXXKKKKK0kollooooxklco:;o;..'',cdxdddddxxkxkxxxxxxdolc,',:oxOkxkOko.                                                                   
:;;;;;;,,'....................''''''..':OXXXXKOoc,.'::clcclldOxo:...'';odxkOOOOOOkkkkkxxxddooool:,',loloxkd,                                                                   
:;;,;;;;,,'...................''''''..';d00K0kdlll;....''''lO00x. ..'';ldk000KKKK00KKKKKKKK00000kl,,:ccodxx:.                                                                  
;;,,,;;;;,,'...................'''''..',oOO0K0Oxo:..    ..'dKK0d. ..'':okO0KKK00OOO00000000000K0xc;',coxxxko'                                                                  
;;,,,,,;;;,,'..................''''....'o0000kxdc..       ;0KK0c....';lddox000000OOOO00000K000OOOxdddkOOOOOk:.                                                                 
;,,,,,,;;;;,,'..........................:OOOOxl;..    .. .lK00k;...'';loc;:oxxxxxxddxkkkkO000OOOOO0KKKKKK0Ok:.                                                                 
;,,,,,,;;;;;,,,'........................,dkxxo;..   .... .d0OOo. ..',ldko;,:ccclllc::clloddxkkkkOO0000KK00Oo.                                                                  
,,,,,,,;;;;;;;,,''.......................:oc;,.    .'... ,xkkkc. ..':dkkxc,,:clodddooollllccloddxkO0000000Od.                                                                  
,,,,,,,;;;;;;;;,,'........................,'..     .... .:xkkk;  ..,okOkxodo:;;::cldxxxxddddddddxkkOOOOOOOko.                                                                  
,,,,,,,,,,;;;;,,,'.....................  ....        ....lxxkd'  ..:xkOOxoxOOkxo:,,;:cooodxxkkkO00000O00Odc.                                                                   
'''''',,,,,,,,,,''..................                 ...'oxkkl.  ..lkO0KOkO000Odc::::;,',:ldxkkOOO000O0Oo'                                                                     
........'''''''....         .....                   ..'.,dkkd;   .,dOOKKK0KXKKOocccoxxol:'.,cldkOOOOkkko'                                                                      
...................                                ......:::,.   .:xO0KK00XXXNX0kkkOOkxxdc;,;coxOOOkdoc'.                                                                      
....................  .                            ....          .:xO0KXKKXXXNNNNXNNXKOkxlccc:oxOOOdo:.                                                                        
 */
 
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    function decimals() external view returns (uint8);
}

interface IUniswapV3PoolState {
    function fee() external view returns (uint24);

    function token0() external view returns (address);

    function slot0()
        external
        view
        returns (
            uint160 sqrtPriceX96,
            int24 tick,
            uint16 observationIndex,
            uint16 observationCardinality,
            uint16 observationCardinalityNext,
            uint8 feeProtocol,
            bool unlocked
        );
}

interface ISwapRouter02V3 {
    struct ExactInputSingleParams {
        address tokenIn;
        address tokenOut;
        uint24 fee;
        address recipient;
        uint256 amountIn;
        uint256 amountOutMinimum;
        uint160 sqrtPriceLimitX96;
    }

    function exactInputSingle(ExactInputSingleParams calldata params)
        external
        payable
        returns (uint256 amountOut);

    struct ExactInputParams {
        bytes path;
        address recipient;
        uint256 amountIn;
        uint256 amountOutMinimum;
    }

    function exactInput(ExactInputParams calldata params)
        external
        payable
        returns (uint256 amountOut);
}