{"Migrations.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.4.22 \u003c0.9.0;\n\ncontract Migrations {\n  address public owner = msg.sender;\n  uint public last_completed_migration;\n\n  modifier restricted() {\n    require(\n      msg.sender == owner,\n      \"This function is restricted to the contract\u0027s owner\"\n    );\n    _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n}\n"},"Token.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.4.22 \u003c0.9.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b \u003c= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c \u003e= a);\n        return c;\n    }\n}\n\ncontract Token is IERC20 {\n    using SafeMath for uint256;\n\n    string public name = \"BTCCB\";\n    string public symbol = \"BTCCB\";\n    uint8 public decimals = 18;\n    uint256 public _totalSupply = 1370000000000000000000000;\n    bool public locked = false;\n\n    address owner;\n    modifier restricted {\n        require(\n            msg.sender == owner,\n            \"This function is restricted to the contract\u0027s owner\"\n        );\n        _;\n    }\n\n    mapping(address =\u003e uint256) balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) allowed;\n\n    constructor(address _owner) {\n        owner = _owner;\n        balances[_owner] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address tokenOwner)\n        public\n        view\n        override\n        returns (uint256 balance)\n    {\n        return balances[tokenOwner];\n    }\n\n    function allowance(address tokenOwner, address spender)\n        public\n        view\n        override\n        returns (uint256 remaining)\n    {\n        return allowed[tokenOwner][spender];\n    }\n\n    function approve(address spender, uint256 tokens)\n        public\n        override\n        returns (bool success)\n    {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function transfer(address to, uint256 tokens)\n        public\n        override\n        returns (bool success)\n    {\n        require(!locked, \"Transfers are temporarily locked\");\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function setLocked(bool _locked) public restricted {\n        locked = _locked;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokens\n    ) public override returns (bool success) {\n        require(!locked, \"Transfers are temporarily locked\");\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n}\n"}}