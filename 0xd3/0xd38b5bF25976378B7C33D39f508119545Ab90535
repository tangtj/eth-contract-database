{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\n\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e uint256) private _prvPledges;\n\n    address[] private prvAddressIndices;\n\n    mapping(address =\u003e uint256) private _pubPledges;\n\n    address[] private pubAddressIndices;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * 70% dao\n     * */\n    uint constant private contractProportion = 300;\n    /**\n     * 30%\n     **/\n    uint constant private popularizeProportion = 700;\n\n    address private admin;\n\n    bool private _isStartPrv = false;\n\n    bool private _isStartPub = false;\n\n    uint256 private _totalPrvAmount = 0;\n\n    uint256 private _tokenPrice = 0;\n\n    /**\n     * @dev pledge value\n     */\n    event _prvPledge(address indexed pledgeAddress_, uint256 value);\n\n    /**\n     * @dev pledge value\n     */\n    event _pubPledge(address indexed pledgeAddress_, uint256 value);\n\n\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_,uint256 totalSupply_, string memory symbol_) payable  {\n        _name = name_;\n        _symbol = symbol_;\n        _totalSupply = totalSupply_;\n\n        uint256 contractValue_ = SafeMath.mul(SafeMath.div(_totalSupply,1000),SafeMath.sub(1000,contractProportion));\n        uint popularizeValue_ = SafeMath.mul(SafeMath.div(totalSupply_,1000),SafeMath.sub(1000,popularizeProportion));\n        _balances[address(this)] = contractValue_;\n        _balances[msg.sender] =  popularizeValue_;\n        admin = msg.sender;\n\n        _allowances[address(this)][msg.sender] = contractValue_;\n        emit Approval(address(this), msg.sender, contractValue_);\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * BNB and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\n            unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n    }\n\n_transfer(sender, recipient, amount);\n\nreturn true;\n}\n\n/**\n * @dev Moves `amount` of tokens from `sender` to `recipient`.\n *\n * This internal function is equivalent to {transfer}, and can be used to\n * e.g. implement automatic token fees, slashing mechanisms, etc.\n *\n * Emits a {Transfer} event.\n *\n * Requirements:\n *\n * - `sender` cannot be the zero address.\n * - `recipient` can be the zero address.\n * - `sender` must have a balance of at least `amount`.\n */\nfunction _transfer(\naddress sender,\naddress recipient,\nuint256 amount\n) internal virtual {\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\n\n_beforeTokenTransfer(sender, recipient, amount);\n\nuint256 senderBalance = _balances[sender];\nrequire(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\nunchecked {\n_balances[sender] = senderBalance - amount;\n}\n_balances[recipient] += amount;\n\nemit Transfer(sender, recipient, amount);\n\n_afterTokenTransfer(sender, recipient, amount);\n}\n\n\n\n/**\n * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n *\n * This internal function is equivalent to `approve`, and can be used to\n * e.g. set automatic allowances for certain subsystems, etc.\n *\n * Emits an {Approval} event.\n *\n * Requirements:\n *\n * - `owner` cannot be the zero address.\n * - `spender` cannot be the zero address.\n */\nfunction _approve(\naddress owner,\naddress spender,\nuint256 amount\n) internal virtual {\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\n\n_allowances[owner][spender] = amount;\nemit Approval(owner, spender, amount);\n}\n\n/**\n * @dev Hook that is called before any transfer of tokens. This includes\n * minting and burning.\n *\n * Calling conditions:\n *\n * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n * will be transferred to `to`.\n * - when `from` is zero, `amount` tokens will be minted for `to`.\n * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n * - `from` and `to` are never both zero.\n *\n * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n */\nfunction _beforeTokenTransfer(\naddress from,\naddress to,\nuint256 amount\n) internal virtual {}\n\n/**\n * @dev Hook that is called after any transfer of tokens. This includes\n * minting and burning.\n *\n * Calling conditions:\n *\n * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n * has been transferred to `to`.\n * - when `from` is zero, `amount` tokens have been minted for `to`.\n * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n * - `from` and `to` are never both zero.\n *\n * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n */\nfunction _afterTokenTransfer(\naddress from,\naddress to,\nuint256 amount\n) internal virtual {}\n\n/**\n* @dev owner\n**/\nfunction getAdmin() view public returns(address){\nreturn admin;\n}\n\nfunction ethBalance() public view returns (uint256){\nreturn address(this).balance;\n}\n\nfunction withdraw() public payable  {\nrequire(msg.sender==admin,\"not permissions\");\npayable(admin).transfer(address(this).balance);\n}\n\nfunction signPledge(uint8 v,bytes32 r,bytes32 s) internal virtual returns(address){\nbytes32 orderHash = keccak256(abi.encodePacked(ByteConversionUtils.toBytes(uint(uint160(msg.sender)))));\nbytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",orderHash));\nreturn ecrecover(message, v, r, s);\n}\n\nfunction changeStartPrv(bool status_)public {\nrequire(admin==msg.sender,\"not permission\");\n_isStartPrv = status_;\n}\n\nfunction getStartPrv() public view returns(bool) {\nreturn _isStartPrv;\n}\n\nfunction prvPledge() public payable {\nrequire(_isStartPrv,\"stopped\");\n// require(admin==signPledge(v,r,s),\"sign verfiy faild\");\n\nrequire(msg.value \u003e= 1000000000000000,\"Amount must be greater than 0.001 eth\");\nuint256 pledged = SafeMath.add(msg.value,_prvPledges[msg.sender]);\nrequire(pledged \u003c= 2000000000000000000, \"Amount must be less than 2 eth\");\n\nif (_prvPledges[msg.sender]==0){\nprvAddressIndices.push(msg.sender);\n}\n\n_prvPledges[msg.sender] = pledged;\n\nuint256 totalPrvAmount_ = SafeMath.add(_totalPrvAmount,msg.value);\nrequire(totalPrvAmount_\u003c=35000000000000000000,\"prv ido insufficient balance\");\n_totalPrvAmount = totalPrvAmount_;\n\nemit _prvPledge(address(this), msg.value);\n}\n\nfunction getTotalPrvAmount() public view returns (uint256){\nreturn _totalPrvAmount;\n}\n\nfunction getPrvPledge() public view returns(uint256){\nreturn  _prvPledges[msg.sender];\n}\n\nfunction getPrvAddressIndices() public view returns (address[] memory){\nreturn prvAddressIndices;\n}\n\nfunction distributionPrvToken() public payable {\nrequire(admin==msg.sender,\"not permission\");\nfor (uint i = 0; i \u003c prvAddressIndices.length; i++) {\naddress _userAddress =  prvAddressIndices[i];\n\nuint256 _userPledgeAmount =  _prvPledges[_userAddress];\nif(_userPledgeAmount\u003e0){\nuint256 _token = SafeMath.mul(SafeMath.div(_userPledgeAmount,500000),1000000000000000000);\ntransferFrom(address(this),_userAddress,_token);\n}\n}\n}\n\nfunction changeStartPub(bool status_)public {\nrequire(admin==msg.sender,\"not permission\");\n_isStartPub = status_;\n}\n\nfunction getStartPub() public view returns(bool) {\nreturn _isStartPub;\n}\n\n/**\n * @dev pub\n **/\nfunction pubPledge() public payable {\nrequire(_isStartPub,\"stopped\");\nrequire(msg.value \u003e= 1000000000000000,\"Amount must be greater than 0.001 eth\");\nuint256 pledged = SafeMath.add(msg.value,_pubPledges[msg.sender]);\n\nif (_pubPledges[msg.sender]==0){\npubAddressIndices.push(msg.sender);\n}\n\n_pubPledges[msg.sender] = pledged;\n\nemit _pubPledge(address(this), msg.value);\n}\n\nfunction getPubPledge() public view returns(uint256){\nreturn  _pubPledges[msg.sender];\n}\n\nfunction getPubAddressIndices() public view returns (address[] memory){\nreturn pubAddressIndices;\n}\n\nfunction distributionPubToken() public  {\nuint256 _userPledgeAmount =  _pubPledges[msg.sender];\nrequire(_userPledgeAmount \u003e 0,\"not amount\");\nrequire(_tokenPrice \u003e 0,\"stopped\");\n\n\nuint256 _token = SafeMath.mul(SafeMath.div(_userPledgeAmount,_tokenPrice),1000000000000000000);\n\n_balances[msg.sender] = SafeMath.add(_token,_balances[msg.sender]);\n\n_balances[address(this)] = SafeMath.sub(_balances[address(this)],_token);\n\n_pubPledges[msg.sender] = 0;\nemit Transfer(address(this), msg.sender, _token);\n}\n\nfunction setPubTokenPrice(uint256 tokenPrice_) public {\nrequire(admin==msg.sender,\"not permission\");\n_tokenPrice = tokenPrice_;\n}\n}\n\n/**\n * byte operating\n * */\nlibrary ByteConversionUtils{\n\nfunction toBytes(uint256 x)internal pure returns (bytes memory b) {\nb = new bytes(32);\nassembly { mstore(add(b, 32), x) }\n}\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b \u003c= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c \u003e= a);\n        return c;\n    }\n}"}}