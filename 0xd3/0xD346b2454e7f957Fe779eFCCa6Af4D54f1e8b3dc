
// File: src/yield/RewardsDistributor.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.19;

/// Import from Utils /////
import {sTRSY} from "./sTRSY.sol";
import {Ownable} from "src/utils/Ownable.sol";

/// Import from Interfaces /////
import {IERC20} from "openzeppelin-contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol";

///@title RewardsDistributor
///@notice Stake TRSY to receive yield accruing sTRSY. Send TRSY to this contract and set vesting
/// period to distribute yield in TRSY over time.
///        Activate Fyde rewards to receveive Fyde token emissions for sTRSY balance.
contract RewardsDistributor is Ownable {
  /*//////////////////////////////////////////////////////////////
                            ERRORs
  //////////////////////////////////////////////////////////////*/

  error ZeroAmount();
  error NotAllowed();

  event RewardPaid(address indexed user, uint256 reward);

  /*//////////////////////////////////////////////////////////////
                            STORAGE VAR 
  //////////////////////////////////////////////////////////////*/

  /// @notice WETH interface
  IERC20 public immutable FYDE;
  IERC20 public strsy;

  uint256 constant PRECISION = 1e30;

  /// @notice The per-second rate at which rewardPerToken increases (1e18 is 1 point per second)
  uint256 public rewardRate;

  /// @notice The last Unix timestamp (in seconds) when rewardPerTokenStored was updated
  uint256 public lastUpdateTime;

  /// @notice The last stored rewardPerToken value
  uint256 public rewardPerTokenStored;

  /// @notice The total tokens staked in the pool
  uint256 public totalSupply;

  /// @notice The amount of tokens staked by an account
  mapping(address => uint256) public balanceOf;

  /// @notice The rewardPerToken value when an account last staked/withdrew
  mapping(address => uint256) public userRewardPerTokenPaid;

  /// @notice The earned() value when an account last staked/withdrew
  mapping(address => uint256) public rewards;

  mapping(address => bool) public activatedEmissions;

  /*//////////////////////////////////////////////////////////////
                            ADMIN FUNCTIONS
  //////////////////////////////////////////////////////////////*/

  /// @notice Sets the reward rate for Fyde emissions
  /// @param _rewardRate The new reward rate per second
  function setRewardRate(uint256 _rewardRate) external onlyOwner {
    // update how much fyde earned so far with old rate
    rewardPerTokenStored = rewardPerToken();
    lastUpdateTime = block.timestamp;
    // update rate
    rewardRate = _rewardRate;
  }

  /*//////////////////////////////////////////////////////////////
                            USER FUNCTIONS
  //////////////////////////////////////////////////////////////*/

  constructor(address _fydeToken, address _strsy) Ownable(msg.sender) {
    lastUpdateTime = uint64(block.timestamp);
    FYDE = IERC20(_fydeToken);
    strsy = IERC20(_strsy);
  }

  /// @notice Activate Fyde emission for your sTRSY balance
  /// @dev sTrsy activates for any user upon staking. If user received strsy via transfer they can
  /// activate for themseles and _user is ignored.
  function activateFydeEmissions(address _user) external {
    if (msg.sender != address(strsy)) _user = msg.sender;
    activatedEmissions[_user] = true;
    _updateAccounting(_user);
  }

  function updateAccounting(address _user1, address _user2) public {
    _updateAccounting(_user1);
    _updateAccounting(_user2);
  }

  function _updateAccounting(address _user) internal {
    if (!activatedEmissions[_user]) return;

    // We load var
    uint256 rewardPerSTRSY = rewardPerToken();

    // Perform state update for fyde points
    rewardPerTokenStored = rewardPerSTRSY;
    rewards[_user] = earned(_user, balanceOf[_user], rewardPerSTRSY, rewards[_user]);
    userRewardPerTokenPaid[_user] = rewardPerSTRSY;

    // general
    lastUpdateTime = block.timestamp;
    totalSupply -= balanceOf[_user];
    balanceOf[_user] = strsy.balanceOf(_user);
    totalSupply += balanceOf[_user];
  }

  /// @notice Withdraws all earned rewards
  function claimFydeEmissions() external {
    /// -----------------------------------------------------------------------
    /// Storage loads
    /// -----------------------------------------------------------------------

    uint256 accountBalance = balanceOf[msg.sender];
    uint256 rewardPerToken_ = rewardPerToken();

    /// -----------------------------------------------------------------------
    /// State updates
    /// -----------------------------------------------------------------------

    uint256 reward = earned(msg.sender, accountBalance, rewardPerToken_, rewards[msg.sender]);

    // accrue rewards
    rewardPerTokenStored = rewardPerToken_;
    lastUpdateTime = block.timestamp;
    userRewardPerTokenPaid[msg.sender] = rewardPerToken_;

    // withdraw rewards
    if (reward > 0) {
      rewards[msg.sender] = 0;

      /// -----------------------------------------------------------------------
      /// Effects
      /// -----------------------------------------------------------------------

      FYDE.transfer(msg.sender, reward);
      emit RewardPaid(msg.sender, reward);
    }
  }

  /*//////////////////////////////////////////////////////////////
                            VIEW FUNCTIONS
  //////////////////////////////////////////////////////////////*/

  /// @notice The amount of reward tokens each staked token has earned so far
  function rewardPerToken() public view returns (uint256) {
    return totalSupply == 0
      ? rewardPerTokenStored
      : rewardPerTokenStored
        + (PRECISION * (block.timestamp - lastUpdateTime) * rewardRate / totalSupply);
  }

  function earned(address _user, uint256 _userBalance, uint256 _rewardPerToken, uint256 _userReward)
    public
    view
    returns (uint256)
  {
    return
      _userReward + _userBalance * (_rewardPerToken - userRewardPerTokenPaid[_user]) / PRECISION;
  }

  function getReward(address user) external view returns (uint256) {
    return earned(user, balanceOf[user], rewardPerToken(), rewards[user]);
  }
}


// File: src/yield/sTRSY.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity >=0.8.7 <0.9.0;

/// Utils /////
import {RevenueDistributionToken} from "./revenueDistributionToken/RevenueDistributionToken.sol";
import {IRewardsDistributor} from "./IRewardsDistributor.sol";

contract sTRSY is RevenueDistributionToken {
  IRewardsDistributor public distributor;

  constructor(address _asset)
    RevenueDistributionToken("staked TRSY", "sTRSY", msg.sender, _asset, 1e27)
  {}

  function setRewardsDistributor(address _distributor) external {
    require(msg.sender == owner, "RDT:SPO:NOT_OWNER");
    distributor = IRewardsDistributor(_distributor);
  }

  function _afterTokenTransfer(address from, address to, uint256) internal override {
    distributor.updateAccounting(from, to);
  }

  function _getRewardsDistributor() internal view override returns (IRewardsDistributor) {
    return distributor;
  }
}


// File: src/utils/Ownable.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;

///@title Ownable contract
/// @notice Simple 2step owner authorization combining solmate and OZ implementation
abstract contract Ownable {
  /*//////////////////////////////////////////////////////////////
                             STORAGE
    //////////////////////////////////////////////////////////////*/

  ///@notice Address of the owner
  address public owner;

  ///@notice Address of the pending owner
  address public pendingOwner;

  /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

  event OwnershipTransferred(address indexed user, address indexed newOner);
  event OwnershipTransferStarted(address indexed user, address indexed newOwner);
  event OwnershipTransferCanceled(address indexed pendingOwner);

  /*//////////////////////////////////////////////////////////////
                                 ERROR
    //////////////////////////////////////////////////////////////*/

  error Unauthorized();

  /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

  constructor(address _owner) {
    owner = _owner;

    emit OwnershipTransferred(address(0), _owner);
  }

  /*//////////////////////////////////////////////////////////////
                             OWNERSHIP LOGIC
    //////////////////////////////////////////////////////////////*/

  ///@notice Transfer ownership to a new address
  ///@param newOwner address of the new owner
  ///@dev newOwner have to acceptOwnership
  function transferOwnership(address newOwner) external onlyOwner {
    pendingOwner = newOwner;
    emit OwnershipTransferStarted(msg.sender, pendingOwner);
  }

  ///@notice NewOwner accept the ownership, it transfer the ownership to newOwner
  function acceptOwnership() external {
    if (msg.sender != pendingOwner) revert Unauthorized();
    address oldOwner = owner;
    owner = pendingOwner;
    delete pendingOwner;
    emit OwnershipTransferred(oldOwner, owner);
  }

  ///@notice Cancel the ownership transfer
  function cancelTransferOwnership() external onlyOwner {
    emit OwnershipTransferCanceled(pendingOwner);
    delete pendingOwner;
  }

  modifier onlyOwner() {
    if (msg.sender != owner) revert Unauthorized();
    _;
  }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File: src/yield/revenueDistributionToken/RevenueDistributionToken.sol
// SPDX-License-Identifier: AGPL-3.0-or-later
pragma solidity ^0.8.19;

import {ERC20} from "./ERC20.sol";
import {ERC20Helper} from "./ERC20Helper.sol";

import {IRevenueDistributionToken} from "./IRevenueDistributionToken.sol";
import {IRewardsDistributor} from "../IRewardsDistributor.sol";

/*
    ██████╗ ██████╗ ████████╗
    ██╔══██╗██╔══██╗╚══██╔══╝
    ██████╔╝██║  ██║   ██║
    ██╔══██╗██║  ██║   ██║
    ██║  ██║██████╔╝   ██║
    ╚═╝  ╚═╝╚═════╝    ╚═╝
*/

abstract contract RevenueDistributionToken is IRevenueDistributionToken, ERC20 {
  uint256 public immutable override PRECISION; // Precision of rates, equals max deposit amounts
    // before rounding errors occur

  address public override asset; // Underlying ERC-20 asset used by ERC-4626 functionality.

  address public override owner; // Current owner of the contract, able to update the vesting
    // schedule.
  address public override pendingOwner; // Pending owner of the contract, able to accept ownership.

  uint256 public override freeAssets; // Amount of assets unlocked regardless of time passed.
  uint256 public override issuanceRate; // asset/second rate dependent on aggregate vesting
    // schedule.
  uint256 public override lastUpdated; // Timestamp of when issuance equation was last updated.
  uint256 public override vestingPeriodFinish; // Timestamp when current vesting schedule ends.

  uint256 private locked = 1; // Used in reentrancy check.

  /**
   *
   */
  /**
   * Modifiers **
   */
  /**
   *
   */
  modifier nonReentrant() {
    require(locked == 1, "RDT:LOCKED");

    locked = 2;

    _;

    locked = 1;
  }

  constructor(
    string memory name_,
    string memory symbol_,
    address owner_,
    address asset_,
    uint256 precision_
  ) ERC20(name_, symbol_, ERC20(asset_).decimals()) {
    require((owner = owner_) != address(0), "RDT:C:OWNER_ZERO_ADDRESS");

    asset = asset_; // Don't need to check zero address as ERC20(asset_).decimals() will fail in
      // ERC20 constructor.
    PRECISION = precision_;
  }

  /**
   *
   */
  /**
   * Administrative Functions **
   */
  /**
   *
   */
  function acceptOwnership() external virtual override {
    require(msg.sender == pendingOwner, "RDT:AO:NOT_PO");

    emit OwnershipAccepted(owner, msg.sender);

    owner = msg.sender;
    pendingOwner = address(0);
  }

  function setPendingOwner(address pendingOwner_) external virtual override {
    require(msg.sender == owner, "RDT:SPO:NOT_OWNER");

    pendingOwner = pendingOwner_;

    emit PendingOwnerSet(msg.sender, pendingOwner_);
  }

  function updateVestingSchedule(uint256 vestingPeriod_)
    external
    virtual
    override
    returns (uint256 issuanceRate_, uint256 freeAssets_)
  {
    require(msg.sender == owner, "RDT:UVS:NOT_OWNER");
    require(totalSupply != 0, "RDT:UVS:ZERO_SUPPLY");

    // Update "y-intercept" to reflect current available asset.
    freeAssets_ = freeAssets = totalAssets();

    // Calculate slope.
    issuanceRate_ = issuanceRate =
      ((ERC20(asset).balanceOf(address(this)) - freeAssets_) * PRECISION) / vestingPeriod_;

    // Update timestamp and period finish.
    vestingPeriodFinish = (lastUpdated = block.timestamp) + vestingPeriod_;

    emit IssuanceParamsUpdated(freeAssets_, issuanceRate_);
    emit VestingScheduleUpdated(msg.sender, vestingPeriodFinish);
  }

  /**
   *
   */
  /**
   * Staker Functions **
   */
  /**
   *
   */
  function deposit(uint256 assets_, address receiver_)
    external
    virtual
    override
    nonReentrant
    returns (uint256 shares_)
  {
    _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);
  }

  function depositWithPermit(
    uint256 assets_,
    address receiver_,
    uint256 deadline_,
    uint8 v_,
    bytes32 r_,
    bytes32 s_
  ) external virtual override nonReentrant returns (uint256 shares_) {
    ERC20(asset).permit(msg.sender, address(this), assets_, deadline_, v_, r_, s_);
    _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);
  }

  function mint(uint256 shares_, address receiver_)
    external
    virtual
    override
    nonReentrant
    returns (uint256 assets_)
  {
    _mint(shares_, assets_ = previewMint(shares_), receiver_, msg.sender);
  }

  function mintWithPermit(
    uint256 shares_,
    address receiver_,
    uint256 maxAssets_,
    uint256 deadline_,
    uint8 v_,
    bytes32 r_,
    bytes32 s_
  ) external virtual override nonReentrant returns (uint256 assets_) {
    require((assets_ = previewMint(shares_)) <= maxAssets_, "RDT:MWP:INSUFFICIENT_PERMIT");

    ERC20(asset).permit(msg.sender, address(this), maxAssets_, deadline_, v_, r_, s_);
    _mint(shares_, assets_, receiver_, msg.sender);
  }

  function redeem(uint256 shares_, address receiver_, address owner_)
    external
    virtual
    override
    nonReentrant
    returns (uint256 assets_)
  {
    _burn(shares_, assets_ = previewRedeem(shares_), receiver_, owner_, msg.sender);
  }

  function withdraw(uint256 assets_, address receiver_, address owner_)
    external
    virtual
    override
    nonReentrant
    returns (uint256 shares_)
  {
    _burn(shares_ = previewWithdraw(assets_), assets_, receiver_, owner_, msg.sender);
  }

  /**
   *
   */
  /**
   * Internal Functions **
   */
  /**
   *
   */
  function _mint(uint256 shares_, uint256 assets_, address receiver_, address caller_) internal {
    require(receiver_ != address(0), "RDT:M:ZERO_RECEIVER");
    require(shares_ != uint256(0), "RDT:M:ZERO_SHARES");
    require(assets_ != uint256(0), "RDT:M:ZERO_ASSETS");

    _mint(receiver_, shares_);

    uint256 freeAssetsCache = freeAssets = totalAssets() + assets_;

    uint256 issuanceRate_ = _updateIssuanceParams();

    emit Deposit(caller_, receiver_, assets_, shares_);
    emit IssuanceParamsUpdated(freeAssetsCache, issuanceRate_);

    require(ERC20Helper.transferFrom(asset, caller_, address(this), assets_), "RDT:M:TRANSFER_FROM");
    _activateFydeEmissions(receiver_);
  }

  function _burn(
    uint256 shares_,
    uint256 assets_,
    address receiver_,
    address owner_,
    address caller_
  ) internal {
    require(receiver_ != address(0), "RDT:B:ZERO_RECEIVER");
    require(shares_ != uint256(0), "RDT:B:ZERO_SHARES");
    require(assets_ != uint256(0), "RDT:B:ZERO_ASSETS");

    if (caller_ != owner_) _decreaseAllowance(owner_, caller_, shares_);

    _burn(owner_, shares_);

    uint256 freeAssetsCache = freeAssets = totalAssets() - assets_;

    uint256 issuanceRate_ = _updateIssuanceParams();

    emit Withdraw(caller_, receiver_, owner_, assets_, shares_);
    emit IssuanceParamsUpdated(freeAssetsCache, issuanceRate_);

    require(ERC20Helper.transfer(asset, receiver_, assets_), "RDT:B:TRANSFER");
  }

  function _updateIssuanceParams() internal returns (uint256 issuanceRate_) {
    return issuanceRate = (lastUpdated = block.timestamp) > vestingPeriodFinish ? 0 : issuanceRate;
  }

  /**
   *
   */
  /**
   * View Functions **
   */
  /**
   *
   */
  function balanceOfAssets(address account_)
    public
    view
    virtual
    override
    returns (uint256 balanceOfAssets_)
  {
    return convertToAssets(balanceOf[account_]);
  }

  function convertToAssets(uint256 shares_) public view virtual override returns (uint256 assets_) {
    uint256 supply = totalSupply; // Cache to stack.

    assets_ = supply == 0 ? shares_ : (shares_ * totalAssets()) / supply;
  }

  function convertToShares(uint256 assets_) public view virtual override returns (uint256 shares_) {
    uint256 supply = totalSupply; // Cache to stack.

    shares_ = supply == 0 ? assets_ : (assets_ * supply) / totalAssets();
  }

  function maxDeposit(address receiver_)
    external
    pure
    virtual
    override
    returns (uint256 maxAssets_)
  {
    receiver_; // Silence warning
    maxAssets_ = type(uint256).max;
  }

  function maxMint(address receiver_) external pure virtual override returns (uint256 maxShares_) {
    receiver_; // Silence warning
    maxShares_ = type(uint256).max;
  }

  function maxRedeem(address owner_) external view virtual override returns (uint256 maxShares_) {
    maxShares_ = balanceOf[owner_];
  }

  function maxWithdraw(address owner_) external view virtual override returns (uint256 maxAssets_) {
    maxAssets_ = balanceOfAssets(owner_);
  }

  function previewDeposit(uint256 assets_) public view virtual override returns (uint256 shares_) {
    // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,
    // it should round DOWN if it’s calculating the amount of shares to issue to a user, given an
    // amount of assets provided.
    shares_ = convertToShares(assets_);
  }

  function previewMint(uint256 shares_) public view virtual override returns (uint256 assets_) {
    uint256 supply = totalSupply; // Cache to stack.

    // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,
    // it should round UP if it’s calculating the amount of assets a user must provide, to be
    // issued a given amount of shares.
    assets_ = supply == 0 ? shares_ : _divRoundUp(shares_ * totalAssets(), supply);
  }

  function previewRedeem(uint256 shares_) public view virtual override returns (uint256 assets_) {
    // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,
    // it should round DOWN if it’s calculating the amount of assets to send to a user, given
    // amount of shares returned.
    assets_ = convertToAssets(shares_);
  }

  function previewWithdraw(uint256 assets_) public view virtual override returns (uint256 shares_) {
    uint256 supply = totalSupply; // Cache to stack.

    // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,
    // it should round UP if it’s calculating the amount of shares a user must return, to be sent
    // a given amount of assets.
    shares_ = supply == 0 ? assets_ : _divRoundUp(assets_ * supply, totalAssets());
  }

  function totalAssets() public view virtual override returns (uint256 totalManagedAssets_) {
    uint256 issuanceRate_ = issuanceRate;

    if (issuanceRate_ == 0) return freeAssets;

    uint256 vestingPeriodFinish_ = vestingPeriodFinish;
    uint256 lastUpdated_ = lastUpdated;

    uint256 vestingTimePassed = block.timestamp > vestingPeriodFinish_
      ? vestingPeriodFinish_ - lastUpdated_
      : block.timestamp - lastUpdated_;

    return ((issuanceRate_ * vestingTimePassed) / PRECISION) + freeAssets;
  }

  /**
   *
   */
  /**
   * Internal Functions **
   */
  /**
   *
   */
  function _divRoundUp(uint256 numerator_, uint256 divisor_)
    internal
    pure
    returns (uint256 result_)
  {
    return (numerator_ / divisor_) + (numerator_ % divisor_ > 0 ? 1 : 0);
  }

  function _activateFydeEmissions(address _user) internal {
    _getRewardsDistributor().activateFydeEmissions(_user);
  }

  function _getRewardsDistributor() internal view virtual returns (IRewardsDistributor);
}


// File: src/yield/IRewardsDistributor.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.19;

interface IRewardsDistributor {
  function updateAccounting(address _user1, address _user2) external;
  function activateFydeEmissions(address _user) external;
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: src/yield/revenueDistributionToken/ERC20.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.19;

import {IERC20} from "./IERC20.sol";

/*
    ███████╗██████╗  ██████╗    ██████╗  ██████╗
    ██╔════╝██╔══██╗██╔════╝    ╚════██╗██╔═████╗
    █████╗  ██████╔╝██║          █████╔╝██║██╔██║
    ██╔══╝  ██╔══██╗██║         ██╔═══╝ ████╔╝██║
    ███████╗██║  ██║╚██████╗    ███████╗╚██████╔╝
    ╚══════╝╚═╝  ╚═╝ ╚═════╝    ╚══════╝ ╚═════╝
*/

/**
 *  @title Modern ERC-20 implementation.
 *  @dev   Acknowledgements to Solmate, OpenZeppelin, and DSS for inspiring this code.
 */
contract ERC20 is IERC20 {
  /**
   *
   */
  /**
   * ERC-20 **
   */
  /**
   *
   */
  string public override name;
  string public override symbol;

  uint8 public override decimals;

  uint256 public override totalSupply;

  mapping(address => uint256) public override balanceOf;

  mapping(address => mapping(address => uint256)) public override allowance;

  /**
   *
   */
  /**
   * ERC-2612 **
   */
  /**
   *
   */

  // PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256
  // nonce,uint256 deadline)");
  bytes32 public constant override PERMIT_TYPEHASH =
    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;

  mapping(address => uint256) public override nonces;

  /**
   *  @param name_     The name of the token.
   *  @param symbol_   The symbol of the token.
   *  @param decimals_ The decimal precision used by the token.
   */
  constructor(string memory name_, string memory symbol_, uint8 decimals_) {
    name = name_;
    symbol = symbol_;
    decimals = decimals_;
  }

  /**
   *
   */
  /**
   * External Functions **
   */
  /**
   *
   */
  function approve(address spender_, uint256 amount_) external override returns (bool success_) {
    _approve(msg.sender, spender_, amount_);
    return true;
  }

  function decreaseAllowance(address spender_, uint256 subtractedAmount_)
    external
    override
    returns (bool success_)
  {
    _decreaseAllowance(msg.sender, spender_, subtractedAmount_);
    return true;
  }

  function increaseAllowance(address spender_, uint256 addedAmount_)
    external
    override
    returns (bool success_)
  {
    _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedAmount_);
    return true;
  }

  function permit(
    address owner_,
    address spender_,
    uint256 amount_,
    uint256 deadline_,
    uint8 v_,
    bytes32 r_,
    bytes32 s_
  ) external override {
    require(deadline_ >= block.timestamp, "ERC20:P:EXPIRED");

    // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf),
    // defines
    // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}.
    require(
      uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0)
        && (v_ == 27 || v_ == 28),
      "ERC20:P:MALLEABLE"
    );

    // Nonce realistically cannot overflow.
    unchecked {
      bytes32 digest = keccak256(
        abi.encodePacked(
          "\x19\x01",
          DOMAIN_SEPARATOR(),
          keccak256(
            abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_)
          )
        )
      );

      address recoveredAddress = ecrecover(digest, v_, r_, s_);

      require(recoveredAddress == owner_ && owner_ != address(0), "ERC20:P:INVALID_SIGNATURE");
    }

    _approve(owner_, spender_, amount_);
  }

  function transfer(address recipient_, uint256 amount_) external override returns (bool success_) {
    _transfer(msg.sender, recipient_, amount_);
    return true;
  }

  function transferFrom(address owner_, address recipient_, uint256 amount_)
    external
    override
    returns (bool success_)
  {
    _decreaseAllowance(owner_, msg.sender, amount_);
    _transfer(owner_, recipient_, amount_);
    return true;
  }

  /**
   *
   */
  /**
   * View Functions **
   */
  /**
   *
   */
  function DOMAIN_SEPARATOR() public view override returns (bytes32 domainSeparator_) {
    return keccak256(
      abi.encode(
        keccak256(
          "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
        ),
        keccak256(bytes(name)),
        keccak256(bytes("1")),
        block.chainid,
        address(this)
      )
    );
  }

  /**
   *
   */
  /**
   * Internal Functions **
   */
  /**
   *
   */
  function _approve(address owner_, address spender_, uint256 amount_) internal {
    emit Approval(owner_, spender_, allowance[owner_][spender_] = amount_);
  }

  function _burn(address owner_, uint256 amount_) internal {
    balanceOf[owner_] -= amount_;

    // Cannot underflow because a user's balance will never be larger than the total supply.
    unchecked {
      totalSupply -= amount_;
    }

    emit Transfer(owner_, address(0), amount_);

    _afterTokenTransfer(owner_, address(0x0), amount_);
  }

  function _decreaseAllowance(address owner_, address spender_, uint256 subtractedAmount_) internal {
    uint256 spenderAllowance = allowance[owner_][spender_]; // Cache to memory.

    if (spenderAllowance != type(uint256).max) {
      _approve(owner_, spender_, spenderAllowance - subtractedAmount_);
    }
  }

  function _mint(address recipient_, uint256 amount_) internal {
    totalSupply += amount_;

    // Cannot overflow because totalSupply would first overflow in the statement above.
    unchecked {
      balanceOf[recipient_] += amount_;
    }

    emit Transfer(address(0), recipient_, amount_);

    _afterTokenTransfer(address(0x0), recipient_, amount_);
  }

  function _transfer(address owner_, address recipient_, uint256 amount_) internal {
    balanceOf[owner_] -= amount_;

    // Cannot overflow because minting prevents overflow of totalSupply, and sum of user balances ==
    // totalSupply.
    unchecked {
      balanceOf[recipient_] += amount_;
    }

    emit Transfer(owner_, recipient_, amount_);

    _afterTokenTransfer(owner_, recipient_, amount_);
  }

  function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}


// File: src/yield/revenueDistributionToken/ERC20Helper.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.7;

import {IERC20Like} from "./IERC20Like.sol";

/**
 * @title Small Library to standardize erc20 token interactions.
 */
library ERC20Helper {
  /**
   *
   */
  /**
   * Internal Functions **
   */
  /**
   *
   */
  function transfer(address token_, address to_, uint256 amount_) internal returns (bool success_) {
    return _call(token_, abi.encodeWithSelector(IERC20Like.transfer.selector, to_, amount_));
  }

  function transferFrom(address token_, address from_, address to_, uint256 amount_)
    internal
    returns (bool success_)
  {
    return
      _call(token_, abi.encodeWithSelector(IERC20Like.transferFrom.selector, from_, to_, amount_));
  }

  function approve(address token_, address spender_, uint256 amount_)
    internal
    returns (bool success_)
  {
    // If setting approval to zero fails, return false.
    if (!_call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, uint256(0)))) {
      return false;
    }

    // If `amount_` is zero, return true as the previous step already did this.
    if (amount_ == uint256(0)) return true;

    // Return the result of setting the approval to `amount_`.
    return _call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, amount_));
  }

  function _call(address token_, bytes memory data_) private returns (bool success_) {
    if (token_.code.length == uint256(0)) return false;

    bytes memory returnData;
    (success_, returnData) = token_.call(data_);

    return success_ && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));
  }
}


// File: src/yield/revenueDistributionToken/IRevenueDistributionToken.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.19;

import {IERC20} from "./IERC20.sol";

import {IERC4626} from "./IERC4626.sol";

/// @title A token that represents ownership of future revenues distributed linearly over time.
interface IRevenueDistributionToken is IERC20, IERC4626 {
  /**
   *
   */
  /**
   * Events **
   */
  /**
   *
   */

  /**
   *  @dev   Issuance parameters have been updated after a `_mint` or `_burn`.
   *  @param freeAssets_   Resulting `freeAssets` (y-intercept) value after accounting update.
   *  @param issuanceRate_ The new issuance rate of `asset` until `vestingPeriodFinish_`.
   */
  event IssuanceParamsUpdated(uint256 freeAssets_, uint256 issuanceRate_);

  /**
   *  @dev   `newOwner_` has accepted the transferral of RDT ownership from `previousOwner_`.
   *  @param previousOwner_ The previous RDT owner.
   *  @param newOwner_      The new RDT owner.
   */
  event OwnershipAccepted(address indexed previousOwner_, address indexed newOwner_);

  /**
   *  @dev   `owner_` has set the new pending owner of RDT to `pendingOwner_`.
   *  @param owner_        The current RDT owner.
   *  @param pendingOwner_ The new pending RDT owner.
   */
  event PendingOwnerSet(address indexed owner_, address indexed pendingOwner_);

  /**
   *  @dev   `owner_` has updated the RDT vesting schedule to end at `vestingPeriodFinish_`.
   *  @param owner_               The current RDT owner.
   *  @param vestingPeriodFinish_ When the unvested balance will finish vesting.
   */
  event VestingScheduleUpdated(address indexed owner_, uint256 vestingPeriodFinish_);

  /**
   *
   */
  /**
   * State Variables **
   */
  /**
   *
   */

  /**
   *  @dev The total amount of the underlying asset that is currently unlocked and is not
   * time-dependent.
   *       Analogous to the y-intercept in a linear function.
   */
  function freeAssets() external view returns (uint256 freeAssets_);

  /**
   *  @dev The rate of issuance of the vesting schedule that is currently active.
   *       Denominated as the amount of underlying assets vesting per second.
   */
  function issuanceRate() external view returns (uint256 issuanceRate_);

  /**
   *  @dev The timestamp of when the linear function was last recalculated.
   *       Analogous to t0 in a linear function.
   */
  function lastUpdated() external view returns (uint256 lastUpdated_);

  /**
   *  @dev The address of the account that is allowed to update the vesting schedule.
   */
  function owner() external view returns (address owner_);

  /**
   *  @dev The next owner, nominated by the current owner.
   */
  function pendingOwner() external view returns (address pendingOwner_);

  /**
   *  @dev The precision at which the issuance rate is measured.
   */
  function PRECISION() external view returns (uint256 precision_);

  /**
   *  @dev The end of the current vesting schedule.
   */
  function vestingPeriodFinish() external view returns (uint256 vestingPeriodFinish_);

  /**
   *
   */
  /**
   * Administrative Functions **
   */
  /**
   *
   */

  /**
   *  @dev Sets the pending owner as the new owner.
   *       Can be called only by the pending owner, and only after their nomination by the current
   * owner.
   */
  function acceptOwnership() external;

  /**
   *  @dev   Sets a new address as the pending owner.
   *  @param pendingOwner_ The address of the next potential owner.
   */
  function setPendingOwner(address pendingOwner_) external;

  /**
   *  @dev    Updates the current vesting formula based on the amount of total unvested funds in the
   * contract and the new `vestingPeriod_`.
   *  @param  vestingPeriod_ The amount of time over which all currently unaccounted underlying
   * assets will be vested over.
   *  @return issuanceRate_  The new issuance rate.
   *  @return freeAssets_    The new amount of underlying assets that are unlocked.
   */
  function updateVestingSchedule(uint256 vestingPeriod_)
    external
    returns (uint256 issuanceRate_, uint256 freeAssets_);

  /**
   *
   */
  /**
   * Staker Functions **
   */
  /**
   *
   */

  /**
   *  @dev    Does a ERC4626 `deposit` with a ERC-2612 `permit`.
   *  @param  assets_   The amount of `asset` to deposit.
   *  @param  receiver_ The receiver of the shares.
   *  @param  deadline_ The timestamp after which the `permit` signature is no longer valid.
   *  @param  v_        ECDSA signature v component.
   *  @param  r_        ECDSA signature r component.
   *  @param  s_        ECDSA signature s component.
   *  @return shares_   The amount of shares minted.
   */
  function depositWithPermit(
    uint256 assets_,
    address receiver_,
    uint256 deadline_,
    uint8 v_,
    bytes32 r_,
    bytes32 s_
  ) external returns (uint256 shares_);

  /**
   *  @dev    Does a ERC4626 `mint` with a ERC-2612 `permit`.
   *  @param  shares_    The amount of `shares` to mint.
   *  @param  receiver_  The receiver of the shares.
   *  @param  maxAssets_ The maximum amount of assets that can be taken, as per the permit.
   *  @param  deadline_  The timestamp after which the `permit` signature is no longer valid.
   *  @param  v_         ECDSA signature v component.
   *  @param  r_         ECDSA signature r component.
   *  @param  s_         ECDSA signature s component.
   *  @return assets_    The amount of shares deposited.
   */
  function mintWithPermit(
    uint256 shares_,
    address receiver_,
    uint256 maxAssets_,
    uint256 deadline_,
    uint8 v_,
    bytes32 r_,
    bytes32 s_
  ) external returns (uint256 assets_);

  /**
   *
   */
  /**
   * View Functions **
   */
  /**
   *
   */

  /**
   *  @dev    Returns the amount of underlying assets owned by the specified account.
   *  @param  account_ Address of the account.
   *  @return assets_  Amount of assets owned.
   */
  function balanceOfAssets(address account_) external view returns (uint256 assets_);
}


// File: src/yield/revenueDistributionToken/IERC20.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.19;

/// @title Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit
/// functionality.
interface IERC20 {
  /**
   *
   */
  /**
   * Events **
   */
  /**
   *
   */

  /**
   *  @dev   Emitted when one account has set the allowance of another account over their tokens.
   *  @param owner_   Account that tokens are approved from.
   *  @param spender_ Account that tokens are approved for.
   *  @param amount_  Amount of tokens that have been approved.
   */
  event Approval(address indexed owner_, address indexed spender_, uint256 amount_);

  /**
   *  @dev   Emitted when tokens have moved from one account to another.
   *  @param owner_     Account that tokens have moved from.
   *  @param recipient_ Account that tokens have moved to.
   *  @param amount_    Amount of tokens that have been transferred.
   */
  event Transfer(address indexed owner_, address indexed recipient_, uint256 amount_);

  /**
   *
   */
  /**
   * External Functions **
   */
  /**
   *
   */

  /**
   *  @dev    Function that allows one account to set the allowance of another account over their
   * tokens.
   *          Emits an {Approval} event.
   *  @param  spender_ Account that tokens are approved for.
   *  @param  amount_  Amount of tokens that have been approved.
   *  @return success_ Boolean indicating whether the operation succeeded.
   */
  function approve(address spender_, uint256 amount_) external returns (bool success_);

  /**
   *  @dev    Function that allows one account to decrease the allowance of another account over
   * their tokens.
   *          Emits an {Approval} event.
   *  @param  spender_          Account that tokens are approved for.
   *  @param  subtractedAmount_ Amount to decrease approval by.
   *  @return success_          Boolean indicating whether the operation succeeded.
   */
  function decreaseAllowance(address spender_, uint256 subtractedAmount_)
    external
    returns (bool success_);

  /**
   *  @dev    Function that allows one account to increase the allowance of another account over
   * their tokens.
   *          Emits an {Approval} event.
   *  @param  spender_     Account that tokens are approved for.
   *  @param  addedAmount_ Amount to increase approval by.
   *  @return success_     Boolean indicating whether the operation succeeded.
   */
  function increaseAllowance(address spender_, uint256 addedAmount_)
    external
    returns (bool success_);

  /**
   *  @dev   Approve by signature.
   *  @param owner_    Owner address that signed the permit.
   *  @param spender_  Spender of the permit.
   *  @param amount_   Permit approval spend limit.
   *  @param deadline_ Deadline after which the permit is invalid.
   *  @param v_        ECDSA signature v component.
   *  @param r_        ECDSA signature r component.
   *  @param s_        ECDSA signature s component.
   */
  function permit(
    address owner_,
    address spender_,
    uint256 amount_,
    uint256 deadline_,
    uint8 v_,
    bytes32 r_,
    bytes32 s_
  ) external;

  /**
   *  @dev    Moves an amount of tokens from `msg.sender` to a specified account.
   *          Emits a {Transfer} event.
   *  @param  recipient_ Account that receives tokens.
   *  @param  amount_    Amount of tokens that are transferred.
   *  @return success_   Boolean indicating whether the operation succeeded.
   */
  function transfer(address recipient_, uint256 amount_) external returns (bool success_);

  /**
   *  @dev    Moves a pre-approved amount of tokens from a sender to a specified account.
   *          Emits a {Transfer} event.
   *          Emits an {Approval} event.
   *  @param  owner_     Account that tokens are moving from.
   *  @param  recipient_ Account that receives tokens.
   *  @param  amount_    Amount of tokens that are transferred.
   *  @return success_   Boolean indicating whether the operation succeeded.
   */
  function transferFrom(address owner_, address recipient_, uint256 amount_)
    external
    returns (bool success_);

  /**
   *
   */
  /**
   * View Functions **
   */
  /**
   *
   */

  /**
   *  @dev    Returns the allowance that one account has given another over their tokens.
   *  @param  owner_     Account that tokens are approved from.
   *  @param  spender_   Account that tokens are approved for.
   *  @return allowance_ Allowance that one account has given another over their tokens.
   */
  function allowance(address owner_, address spender_) external view returns (uint256 allowance_);

  /**
   *  @dev    Returns the amount of tokens owned by a given account.
   *  @param  account_ Account that owns the tokens.
   *  @return balance_ Amount of tokens owned by a given account.
   */
  function balanceOf(address account_) external view returns (uint256 balance_);

  /**
   *  @dev    Returns the decimal precision used by the token.
   *  @return decimals_ The decimal precision used by the token.
   */
  function decimals() external view returns (uint8 decimals_);

  /**
   *  @dev    Returns the signature domain separator.
   *  @return domainSeparator_ The signature domain separator.
   */
  function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator_);

  /**
   *  @dev    Returns the name of the token.
   *  @return name_ The name of the token.
   */
  function name() external view returns (string memory name_);

  /**
   *  @dev    Returns the nonce for the given owner.
   *  @param  owner_  The address of the owner account.
   *  @return nonce_ The nonce for the given owner.
   */
  function nonces(address owner_) external view returns (uint256 nonce_);

  /**
   *  @dev    Returns the permit type hash.
   *  @return permitTypehash_ The permit type hash.
   */
  function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);

  /**
   *  @dev    Returns the symbol of the token.
   *  @return symbol_ The symbol of the token.
   */
  function symbol() external view returns (string memory symbol_);

  /**
   *  @dev    Returns the total amount of tokens in existence.
   *  @return totalSupply_ The total amount of tokens in existence.
   */
  function totalSupply() external view returns (uint256 totalSupply_);
}


// File: src/yield/revenueDistributionToken/IERC20Like.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.7;

/// @title Interface of the ERC20 standard as needed by ERC20Helper.
interface IERC20Like {
  function approve(address spender_, uint256 amount_) external returns (bool success_);

  function transfer(address recipient_, uint256 amount_) external returns (bool success_);

  function transferFrom(address owner_, address recipient_, uint256 amount_)
    external
    returns (bool success_);
}


// File: src/yield/revenueDistributionToken/IERC4626.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.19;

import {IERC20} from "./IERC20.sol";

/// @title A standard for tokenized Vaults with a single underlying ERC-20 token.
interface IERC4626 is IERC20 {
  /**
   *
   */
  /**
   * Events **
   */
  /**
   *
   */

  /**
   *  @dev   `caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.
   *         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.
   *  @param caller_ The caller of the function that emitted the `Deposit` event.
   *  @param owner_  The owner of the shares.
   *  @param assets_ The amount of assets deposited.
   *  @param shares_ The amount of shares minted.
   */
  event Deposit(address indexed caller_, address indexed owner_, uint256 assets_, uint256 shares_);

  /**
   *  @dev   `caller_` has exchanged `shares_`, owned by `owner_`, for `assets_`, and
   * transferred them to `receiver_`.
   *         MUST be emitted when assets are withdrawn via the `withdraw` or `redeem` methods.
   *  @param caller_   The caller of the function that emitted the `Withdraw` event.
   *  @param receiver_ The receiver of the assets.
   *  @param owner_    The owner of the shares.
   *  @param assets_   The amount of assets withdrawn.
   *  @param shares_   The amount of shares burned.
   */
  event Withdraw(
    address indexed caller_,
    address indexed receiver_,
    address indexed owner_,
    uint256 assets_,
    uint256 shares_
  );

  /**
   *
   */
  /**
   * State Variables **
   */
  /**
   *
   */

  /**
   *  @dev    The address of the underlying asset used by the Vault.
   *          MUST be a contract that implements the ERC-20 standard.
   *          MUST NOT revert.
   *  @return asset_ The address of the underlying asset.
   */
  function asset() external view returns (address asset_);

  /**
   *
   */
  /**
   * State Changing Functions **
   */
  /**
   *
   */

  /**
   *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.
   *          MUST emit the {Deposit} event.
   *          MUST revert if all of the assets cannot be deposited (due to insufficient approval,
   * deposit limits, slippage, etc).
   *  @param  assets_   The amount of assets to deposit.
   *  @param  receiver_ The receiver of the shares.
   *  @return shares_   The amount of shares minted.
   */
  function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_);

  /**
   *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.
   *          MUST emit the {Deposit} event.
   *          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit
   * limits, slippage, etc).
   *  @param  shares_   The amount of shares to mint.
   *  @param  receiver_ The receiver of the shares.
   *  @return assets_   The amount of assets deposited.
   */
  function mint(uint256 shares_, address receiver_) external returns (uint256 assets_);

  /**
   *  @dev    Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.
   *          MUST emit the {Withdraw} event.
   *          MUST revert if all of the shares cannot be redeemed (due to insufficient shares,
   * withdrawal limits, slippage, etc).
   *  @param  shares_   The amount of shares to redeem.
   *  @param  receiver_ The receiver of the assets.
   *  @param  owner_    The owner of the shares.
   *  @return assets_   The amount of assets sent to the receiver.
   */
  function redeem(uint256 shares_, address receiver_, address owner_)
    external
    returns (uint256 assets_);

  /**
   *  @dev    Burns `shares_` from `owner_` and sends `assets_` to `receiver_`.
   *          MUST emit the {Withdraw} event.
   *          MUST revert if all of the assets cannot be withdrawn (due to insufficient assets,
   * withdrawal limits, slippage, etc).
   *  @param  assets_   The amount of assets to withdraw.
   *  @param  receiver_ The receiver of the assets.
   *  @param  owner_    The owner of the assets.
   *  @return shares_   The amount of shares burned from the owner.
   */
  function withdraw(uint256 assets_, address receiver_, address owner_)
    external
    returns (uint256 shares_);

  /**
   *
   */
  /**
   * View Functions **
   */
  /**
   *
   */

  /**
   *  @dev    The amount of `assets_` the `shares_` are currently equivalent to.
   *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.
   *          MUST NOT reflect slippage or other on-chain conditions when performing the actual
   * exchange.
   *          MUST NOT show any variations depending on the caller.
   *          MUST NOT revert.
   *  @param  shares_ The amount of shares to convert.
   *  @return assets_ The amount of equivalent assets.
   */
  function convertToAssets(uint256 shares_) external view returns (uint256 assets_);

  /**
   *  @dev    The amount of `shares_` the `assets_` are currently equivalent to.
   *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.
   *          MUST NOT reflect slippage or other on-chain conditions when performing the actual
   * exchange.
   *          MUST NOT show any variations depending on the caller.
   *          MUST NOT revert.
   *  @param  assets_ The amount of assets to convert.
   *  @return shares_ The amount of equivalent shares.
   */
  function convertToShares(uint256 assets_) external view returns (uint256 shares_);

  /**
   *  @dev    Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through
   * a `deposit` call.
   *          MUST return a limited value if the receiver is subject to any limits, or the maximum
   * value otherwise.
   *          MUST NOT revert.
   *  @param  receiver_ The receiver of the assets.
   *  @return assets_   The maximum amount of assets that can be deposited.
   */
  function maxDeposit(address receiver_) external view returns (uint256 assets_);

  /**
   *  @dev    Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a
   * `mint` call.
   *          MUST return a limited value if the receiver is subject to any limits, or the maximum
   * value otherwise.
   *          MUST NOT revert.
   *  @param  receiver_ The receiver of the shares.
   *  @return shares_   The maximum amount of shares that can be minted.
   */
  function maxMint(address receiver_) external view returns (uint256 shares_);

  /**
   *  @dev    Maximum amount of `shares_` that can be redeemed from the `owner_` through
   * a `redeem` call.
   *          MUST return a limited value if the owner is subject to any limits, or the total
   * amount of owned shares otherwise.
   *          MUST NOT revert.
   *  @param  owner_  The owner of the shares.
   *  @return shares_ The maximum amount of shares that can be redeemed.
   */
  function maxRedeem(address owner_) external view returns (uint256 shares_);

  /**
   *  @dev    Maximum amount of `assets_` that can be withdrawn from the `owner_` through a
   * `withdraw` call.
   *          MUST return a limited value if the owner is subject to any limits, or the total amount
   * of owned assets otherwise.
   *          MUST NOT revert.
   *  @param  owner_  The owner of the assets.
   *  @return assets_ The maximum amount of assets that can be withdrawn.
   */
  function maxWithdraw(address owner_) external view returns (uint256 assets_);

  /**
   *  @dev    Allows an on-chain or off-chain user to simulate the effects of their deposit at the
   * current block, given current on-chain conditions.
   *          MUST return as close to and no more than the exact amount of shares that would be
   * minted in a `deposit` call in the same transaction.
   *          MUST NOT account for deposit limits like those returned from `maxDeposit` and should
   * always act as though the deposit would be accepted.
   *          MUST NOT revert.
   *  @param  assets_ The amount of assets to deposit.
   *  @return shares_ The amount of shares that would be minted.
   */
  function previewDeposit(uint256 assets_) external view returns (uint256 shares_);

  /**
   *  @dev    Allows an on-chain or off-chain user to simulate the effects of their mint at the
   * current block, given current on-chain conditions.
   *          MUST return as close to and no fewer than the exact amount of assets that would be
   * deposited in a `mint` call in the same transaction.
   *          MUST NOT account for mint limits like those returned from `maxMint` and should always
   * act as though the minting would be accepted.
   *          MUST NOT revert.
   *  @param  shares_ The amount of shares to mint.
   *  @return assets_ The amount of assets that would be deposited.
   */
  function previewMint(uint256 shares_) external view returns (uint256 assets_);

  /**
   *  @dev    Allows an on-chain or off-chain user to simulate the effects of their redemption at
   * the current block, given current on-chain conditions.
   *          MUST return as close to and no more than the exact amount of assets that would be
   * withdrawn in a `redeem` call in the same transaction.
   *          MUST NOT account for redemption limits like those returned from `maxRedeem` and should
   * always act as though the redemption would be accepted.
   *          MUST NOT revert.
   *  @param  shares_ The amount of shares to redeem.
   *  @return assets_ The amount of assets that would be withdrawn.
   */
  function previewRedeem(uint256 shares_) external view returns (uint256 assets_);

  /**
   *  @dev    Allows an on-chain or off-chain user to simulate the effects of their withdrawal at
   * the current block, given current on-chain conditions.
   *          MUST return as close to and no fewer than the exact amount of shares that would be
   * burned in a `withdraw` call in the same transaction.
   *          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and
   * should always act as though the withdrawal would be accepted.
   *          MUST NOT revert.
   *  @param  assets_ The amount of assets to withdraw.
   *  @return shares_ The amount of shares that would be redeemed.
   */
  function previewWithdraw(uint256 assets_) external view returns (uint256 shares_);

  /**
   *  @dev    Total amount of the underlying asset that is managed by the Vault.
   *          SHOULD include compounding that occurs from any yields.
   *          MUST NOT revert.
   *  @return totalAssets_ The total amount of assets the Vault manages.
   */
  function totalAssets() external view returns (uint256 totalAssets_);
}

