
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)
pragma solidity ^0.8.20;

/**
 * @dev Standard ERC20 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.
 */
interface IERC20Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC20InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC20InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     * @param allowance Amount of tokens a `spender` is allowed to operate with.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC20InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC20InvalidSpender(address spender);
}

/**
 * @dev Standard ERC721 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.
 */
interface IERC721Errors {
    /**
     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.
     * Used in balance queries.
     * @param owner Address of the current owner of a token.
     */
    error ERC721InvalidOwner(address owner);

    /**
     * @dev Indicates a `tokenId` whose `owner` is the zero address.
     * @param tokenId Identifier number of a token.
     */
    error ERC721NonexistentToken(uint256 tokenId);

    /**
     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param tokenId Identifier number of a token.
     * @param owner Address of the current owner of a token.
     */
    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC721InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC721InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param tokenId Identifier number of a token.
     */
    error ERC721InsufficientApproval(address operator, uint256 tokenId);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC721InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC721InvalidOperator(address operator);
}

/**
 * @dev Standard ERC1155 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.
 */
interface IERC1155Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     * @param tokenId Identifier number of a token.
     */
    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC1155InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC1155InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param owner Address of the current owner of a token.
     */
    error ERC1155MissingApprovalForAll(address operator, address owner);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC1155InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC1155InvalidOperator(address operator);

    /**
     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
     * Used in batch transfers.
     * @param idsLength Length of the array of token identifiers
     * @param valuesLength Length of the array of token amounts
     */
    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "./IERC20.sol";
import {IERC20Metadata} from "./extensions/IERC20Metadata.sol";
import {Context} from "../../utils/Context.sol";
import {IERC20Errors} from "../../interfaces/draft-IERC6093.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 */
abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
    mapping(address account => uint256) private _balances;

    mapping(address account => mapping(address spender => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `value`.
     */
    function transfer(address to, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, value);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, value);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `value`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `value`.
     */
    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, value);
        _transfer(from, to, value);
        return true;
    }

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _transfer(address from, address to, uint256 value) internal {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(from, to, value);
    }

    /**
     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
     * this function.
     *
     * Emits a {Transfer} event.
     */
    function _update(address from, address to, uint256 value) internal virtual {
        if (from == address(0)) {
            // Overflow check required: The rest of the code assumes that totalSupply never overflows
            _totalSupply += value;
        } else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < value) {
                revert ERC20InsufficientBalance(from, fromBalance, value);
            }
            unchecked {
                // Overflow not possible: value <= fromBalance <= totalSupply.
                _balances[from] = fromBalance - value;
            }
        }

        if (to == address(0)) {
            unchecked {
                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
                _totalSupply -= value;
            }
        } else {
            unchecked {
                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
                _balances[to] += value;
            }
        }

        emit Transfer(from, to, value);
    }

    /**
     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
     * Relies on the `_update` mechanism
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _mint(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(address(0), account, value);
    }

    /**
     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
     * Relies on the `_update` mechanism.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead
     */
    function _burn(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        _update(account, address(0), value);
    }

    /**
     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     *
     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
     */
    function _approve(address owner, address spender, uint256 value) internal {
        _approve(owner, spender, value, true);
    }

    /**
     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
     *
     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
     * `Approval` event during `transferFrom` operations.
     *
     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
     * true using the following override:
     * ```
     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
     *     super._approve(owner, spender, value, true);
     * }
     * ```
     *
     * Requirements are the same as {_approve}.
     */
    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
        if (owner == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[owner][spender] = value;
        if (emitEvent) {
            emit Approval(owner, spender, value);
        }
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `value`.
     *
     * Does not update the allowance value in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Does not emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < value) {
                revert ERC20InsufficientAllowance(spender, currentAllowance, value);
            }
            unchecked {
                _approve(owner, spender, currentAllowance - value, false);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)

pragma solidity ^0.8.20;

import {ERC20} from "../ERC20.sol";
import {Pausable} from "../../../utils/Pausable.sol";

/**
 * @dev ERC20 token with pausable token transfers, minting and burning.
 *
 * Useful for scenarios such as preventing trades until the end of an evaluation
 * period, or having an emergency switch for freezing all token transfers in the
 * event of a large bug.
 *
 * IMPORTANT: This contract does not include public pause and unpause functions. In
 * addition to inheriting this contract, you must define both functions, invoking the
 * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate
 * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will
 * make the contract pause mechanism of the contract unreachable, and thus unusable.
 */
abstract contract ERC20Pausable is ERC20, Pausable {
    /**
     * @dev See {ERC20-_update}.
     *
     * Requirements:
     *
     * - the contract must not be paused.
     */
    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {
        super._update(from, to, value);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    bool private _paused;

    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    /**
     * @dev The operation failed because the contract is paused.
     */
    error EnforcedPause();

    /**
     * @dev The operation failed because the contract is not paused.
     */
    error ExpectedPause();

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        if (paused()) {
            revert EnforcedPause();
        }
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        if (!paused()) {
            revert ExpectedPause();
        }
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: contracts/FinanceCoin.sol
// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./utils/TransferControl.sol";
import "./utils/RewardManager.sol";
import "./utils/BlackList.sol";

contract FinanceCoin is
    ERC20,
    ERC20Pausable,
    Ownable,
    BlackList,
    TransferControl,
    RewardManager
{
    uint256 public constant INITIAL_SUPPLY = 5000 * 10 ** 0;

    constructor(
        address ownerAddress
    )
        ERC20("FinanceCoin", "xFNC")
        Ownable(ownerAddress)
        RewardManager(ownerAddress)
    {
        _mint(ownerAddress, INITIAL_SUPPLY * (10 ** uint(decimals())));
        _addToTransferAllowed(ownerAddress);
    }

    modifier requireNonZeroValue(uint256 value) {
        require(value > 0, "FinanceCoin:: Value must be greater than zero");
        _;
    }

    function approve(
        address spender,
        uint256 value
    )
        public
        virtual
        override
        whenNotPaused
        whenNotBlackListed(_msgSender(), spender)
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, value);

        return true;
    }

    function transfer(
        address to,
        uint256 value
    )
        public
        virtual
        override
        whenNotPaused
        requireNonZeroValue(value)
        requireTokenTransferEnabled(_msgSender())
        whenNotBlackListed(_msgSender(), to)
        returns (bool)
    {
        address sender = _msgSender();
        _transfer(sender, to, value);

        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 value
    )
        public
        virtual
        override
        whenNotPaused
        requireNonZeroValue(value)
        requireTokenTransferEnabled(_msgSender())
        whenNotBlackListed(from, to)
        requireNotBlackListed(_msgSender())
        returns (bool)
    {
        address spender = _msgSender();
        _spendAllowance(from, spender, value);
        _transfer(from, to, value);

        return true;
    }

    function batchTransfer(
        address[] memory recipients,
        uint256[] memory values
    )
        external
        whenNotPaused
        requireTokenTransferEnabled(_msgSender())
        whenNotBlackListedBatch(_msgSender(), recipients)
        returns (bool)
    {
        require(
            recipients.length == values.length,
            "FinanceCoin: Recipients and values length mismatch"
        );

        address sender = _msgSender();
        for (uint256 i = 0; i < recipients.length; i++) {
            address to = recipients[i];
            uint256 value = values[i];
            _transfer(sender, to, value);
        }

        return true;
    }

    function burn(uint256 amount) external {
        _burn(_msgSender(), amount);
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function addToBlackList(address account) external onlyOwner {
        _addToBlackList(account);
    }

    function removeFromBlackList(address account) external onlyOwner {
        _removeFromBlackList(account);
    }

    function enableTokenTransfer() external onlyOwner {
        _enableTokenTransfer();
    }

    function isTransferAllowed() external view virtual returns (bool) {
        return _isTransferAllowed();
    }

    function isTransferAllowed(
        address account
    ) external view virtual returns (bool) {
        return _isTransferAllowed(account);
    }

    function addToTransferAllowed(address account) external onlyOwner {
        _addToTransferAllowed(account);
    }

    function removeFromTransferAllowed(address account) external onlyOwner {
        _removeFromTransferAllowed(account);
    }

    function updateLiquidityProvider(address account) external onlyOwner {
        _updateLiquidityProvider(account);
    }

    function claimReward()
        external
        whenNotPaused
        requireNotBlackListed(_msgSender())
        returns (bool)
    {
        address account = _msgSender();
        address liquidityProvider = _currentLiquidityProvider();
        uint256 reward = _reward(account);

        require(
            balanceOf(liquidityProvider) >= reward,
            "FinanceCoin:: Liquidity provider does not have enough funds"
        );

        _claimReward(account);
        _transfer(liquidityProvider, account, reward);

        return true;
    }

    function addReward(
        address[] memory accounts,
        uint256[] memory rewards
    ) external whenNotPaused {
        require(
            accounts.length == rewards.length,
            "FinanceCoin: accounts and rewards length mismatch"
        );

        for (uint256 i = 0; i < accounts.length; i++) {
            _addReward(accounts[i], rewards[i]);
        }
    }

    function addRewardIssuer(
        address account
    ) external onlyOwner requireNotBlackListed(account) {
        _addRewardIssuer(account);
    }

    function removeRewardIssuer(
        address account
    ) external onlyOwner {
        _removeRewardIssuer(account);
    }

    function _update(
        address from,
        address to,
        uint256 value
    ) internal override(ERC20, ERC20Pausable) {
        super._update(from, to, value);
    }
}


// File: contracts/utils/BlackList.sol
// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.20;

abstract contract BlackList {
    mapping(address account => bool) private _blacklist;

    /**
     * @dev Emitted when the `account` is added to blacklist.
     */
    event BlackListed(address indexed account);

    /**
     * @dev Emitted when the `account` is removed from blacklist.
     */
    event WhiteListed(address indexed account);

    /**
     * @dev The operation failed because `account` is already in the blacklist.
     * @param account Address to be added in blacklist.
     */
    error AlreadyBlackListed(address account);

    /**
     * @dev The operation failed because `account` is not in the blacklist.
     * @param account Address to be removed from blacklist.
     */
    error AlreadyWhiteListed(address account);

    /**
     * @dev The operation failed because `account` is not valid.
     * @param account Address that should be added or removed from blacklist.
     */
    error InvalidAccount(address account);

    constructor() {}

    /**
     * @dev Modifier to make a function callable only when the `account` is not already blacklisted.
     *
     * Requirements:
     *
     * - The `account` must not be in the blacklist.
     */
    modifier requireNotBlackListed(address account) {
        _requireNotBlackListed(account);
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the `account` is already blacklisted.
     *
     * Requirements:
     *
     * - The `account` must be in the blacklist.
     */
    modifier requireBlackListed(address account) {
        _requireBlackListed(account);
        _;
    }

    /**
     * @dev Modifier to make a function callable only when neither of `caller` and `to` are blacklisted.
     *
     * Requirements:
     *
     * - The `caller` and `to` must not be in the blacklist.
     */
    modifier whenNotBlackListed(address caller, address to) {
        require(
            !isBlackListed(caller),
            "BlackList:: caller address is blacklisted"
        );
        require(!isBlackListed(to), "BlackList:: to address is blacklisted");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when neither the `caller` nor any of the `recipients` are blacklisted.
     *
     * Requirements:
     *
     * - The `caller` and all `recipients` must not be in the blacklist.
     */
    modifier whenNotBlackListedBatch(
        address caller,
        address[] memory recipients
    ) {
        _requireNotBlackListed(caller);

        for (uint256 i = 0; i < recipients.length; i++) {
            _requireNotBlackListed(recipients[i]);
        }
        _;
    }

    /**
     * @dev Returns true if the `account` is blacklisted, and false otherwise.
     */
    function isBlackListed(address account) public view virtual returns (bool) {
        return _blacklist[account];
    }

    /**
     * @dev Throws if the `account` is already in the blacklist.
     */
    function _requireNotBlackListed(address account) internal view virtual {
        if (isBlackListed(account)) {
            revert AlreadyBlackListed({account: account});
        }
    }

    /**
     * @dev Throws if the `account` is not in the blacklist.
     */
    function _requireBlackListed(address account) internal view virtual {
        if (!isBlackListed(account)) {
            revert AlreadyWhiteListed({account: account});
        }
    }

    /**
     * @dev add an `account` to blacklist.
     */
    function _addToBlackList(
        address account
    ) internal virtual requireNotBlackListed(account) {
        if (account == address(0)) {
            revert InvalidAccount({account: address(0)});
        }

        _blacklist[account] = true;
        emit BlackListed(account);
    }

    /**
     * @dev remove an `account` from blacklist.
     */
    function _removeFromBlackList(
        address account
    ) internal virtual requireBlackListed(account) {
        _blacklist[account] = false;
        emit WhiteListed(account);
    }
}


// File: contracts/utils/RewardManager.sol
// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.20;

abstract contract RewardManager {
    /**
     * @dev address of liquidity provider.
     */
    address private _liquidityProvider;

    /**
     * @dev Mapping to hold addresses and reward amount.
     */
    mapping(address => uint256) private _rewards;

    /**
     * @dev Mapping to hold addresses of reward issuers.
     */
    mapping(address => bool) private _rewardIssuers;

    /**
     * @dev Emitted when the `reward` is added against `account`.
     */
    event RewardAdded(address indexed account, uint256 reward);

    /**
     * @dev Emitted when the `reward` is claimed against `account`.
     */
    event RewardClaimed(address indexed account, uint256 reward);

    /**
     * @dev Emitted when a new reward issuer `account` is added.
     */
    event RewardIssuerAdded(address account);

    /**
     * @dev Emitted when a reward issuer `account` is removed.
     */
    event RewardIssuerRemoved(address account);

    /**
     * @dev Emitted when liquidity provider is updated from `oldAccount` to `newAccount`.
     */
    event LiquidityProviderUpdated(address oldAccount, address newAccount);

    /**
     * @dev The `account` is not a valid i.e address 0.
     */
    error InvalidAccountAddress(address account);

    /**
     * @dev The `account` is not a reward issuer.
     */
    error NotRewardIssuer(address account);

    /**
     * @dev The `account` is already a reward issuer.
     */
    error AlreadyRewardIssuer(address account);

    /**
     * @dev The `account` has no reward to claim.
     */
    error NoRewardToClaim(address account);

    /**
     * @dev Invalid reward amount.
     */
    error InvalidRewardAmount();

    constructor(address account) {
        _updateLiquidityProvider(account);
        _addRewardIssuer(account);
    }

    /**
     * @dev Modifier to check if the caller is reward issuer.
     */
    modifier onlyRewardIssuer() {
        _requireRewardIssuer(msg.sender);
        _;
    }

    /**
     * @dev Modifier to validate `account` is a reward issuer.
     */
    modifier requireRewardIssuer(address account) {
        _requireRewardIssuer(account);
        _;
    }

    /**
     * @dev Modifier to validate `account` should not be a reward issuer.
     */
    modifier requireNotRewardIssuer(address account) {
        _requireNotRewardIssuer(account);
        _;
    }

    /**
     * @dev Returns true if the `account` is reward issuer, and false otherwise.
     */
    function isRewardIssuer(
        address account
    ) external view virtual returns (bool) {
        return _isRewardIssuer(account);
    }

    /**
     * @dev returns total reward for `account`.
     */
    function reward(address account) external view virtual returns (uint256) {
        return _reward(account);
    }

    /**
     * @dev returns current liquidity provider.
     */
    function liquidityProvider() external view virtual returns (address) {
        return _currentLiquidityProvider();
    }

    /**
     * @dev Returns true if the `account` is reward issuer, and false otherwise.
     */
    function _isRewardIssuer(
        address account
    ) internal view virtual returns (bool) {
        return _rewardIssuers[account];
    }

    /**
     * @dev Throws if `account` is reward issuer.
     */
    function _requireNotRewardIssuer(address account) internal virtual {
        if (_isRewardIssuer(account)) {
            revert AlreadyRewardIssuer(account);
        }
    }

    /**
     * @dev Throws if `account` is not reward issuer.
     */
    function _requireRewardIssuer(address account) internal virtual {
        if (!_isRewardIssuer(account)) {
            revert NotRewardIssuer(account);
        }
    }

    /**
     * @dev Adds an `account` to the `_rewardIssuers` mapping.
     */
    function _addRewardIssuer(
        address account
    ) internal virtual requireNotRewardIssuer(account) {
        if (account == address(0)) {
            revert InvalidAccountAddress(address(0));
        }

        _rewardIssuers[account] = true;
        emit RewardIssuerAdded(account);
    }

    /**
     * @dev Removes an `account` from the `_rewardIssuers` mapping.
     */
    function _removeRewardIssuer(
        address account
    ) internal virtual requireRewardIssuer(account) {
        delete _rewardIssuers[account];
        emit RewardIssuerRemoved(account);
    }

    /**
     * @dev Adds a `rewardAmount` to an `account`.
     */
    function _addReward(
        address account,
        uint256 rewardAmount
    ) internal virtual onlyRewardIssuer {
        if (account == address(0)) {
            revert InvalidAccountAddress(address(0));
        }

        if (rewardAmount == 0) {
            revert InvalidRewardAmount();
        }

        _rewards[account] += rewardAmount;
        emit RewardAdded(account, rewardAmount);
    }

    /**
     * @dev Claims the reward for `account`.
     */
    function _claimReward(address account) internal virtual {
        uint256 rewardAmount = _rewards[account];
        if (rewardAmount == 0) {
            revert NoRewardToClaim(account);
        }

        _rewards[account] = 0;
        emit RewardClaimed(account, rewardAmount);
    }

    /**
     * @dev returns total reward for `account`.
     */
    function _reward(address account) internal view virtual returns (uint256) {
        return _rewards[account];
    }

    /**
     * @dev Updates the liquidity provider address to `newAccount`.
     */
    function _updateLiquidityProvider(address newAccount) internal virtual {
        address oldLiquidityProvider = _liquidityProvider;
        _liquidityProvider = newAccount;
        emit LiquidityProviderUpdated(oldLiquidityProvider, newAccount);
    }

    /**
     * @dev returns current liquidity provider.
     */
    function _currentLiquidityProvider() internal view virtual returns (address) {
        return _liquidityProvider;
    }
}


// File: contracts/utils/TransferControl.sol
// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.20;

abstract contract TransferControl {
    bool private _isTokenTransferEnabled = false;

    /**
     * @dev Mapping to hold addresses allowed to transfer.
     */
    mapping(address account => bool) private _transferAllowed;

    /**
     * @dev Emitted when the token transfer is enabled.
     */
    event TokenTransferEnabled();

    /**
     * @dev Emitted when the `account` is allowed to transfer.
     */
    event TransferAllowed(address indexed account);

    /**
     * @dev Emitted when the `account` is removed from allowed list.
     */
    event TransferNotAllowed(address indexed account);

    /**
     * @dev The operation failed because Token transfer is disabled.
     */
    error TokenTransferNotAllowed();

    /**
     * @dev The operation failed because `account` is already in the allowed transfer list.
     * @param account Address to be added in allowed transfer list.
     */
    error AlreadyTransferAllowed(address account);

    /**
     * @dev The operation failed because `account` is not in the allowed transfer list.
     * @param account Address to be removed from allowed transfer list.
     */
    error AlreadyTransferNotAllowed(address account);

    /**
     * @dev The operation failed because `account` is not valid.
     * @param account Address that should be added or removed from transfer allow list.
     */
    error InvalidAddress(address account);

    constructor() {}

    /**
     * @dev Modifier to make a function callable only when token transfer is enabled.
     */
    modifier requireTokenTransferEnabled(address caller) {
        _requireTokenTransferEnabled(caller);
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the `account` is already in transfer allowed list.
     *
     * Requirements:
     *
     * - The `account` must be in the transfer allowed list.
     */
    modifier requireTransferAllowed(address account) {
        _requireTransferAllowed(account);
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the `account` is not already in transfer allowed list.
     *
     * Requirements:
     *
     * - The `account` must not be in the transfer allowed list.
     */
    modifier requireTransferNotAllowed(address account) {
        _requireTransferNotAllowed(account);
        _;
    }

    /**
     * @dev Returns true if the `account` is allowed transfer, and false otherwise.
     */
    function _isTransferAllowed(address account) internal view virtual returns (bool) {
        return _transferAllowed[account];
    }

    /**
     * @dev Returns current state of `_isTokenTransferEnabled`.
     */
    function _isTransferAllowed() internal view returns (bool) {
        return _isTokenTransferEnabled;
    }

    /**
     * @dev Throws if the `account` is in the transfer allowed list.
     */
    function _requireTransferNotAllowed(address account) internal view virtual {
        if (_isTransferAllowed(account)) {
            revert AlreadyTransferAllowed({account: account});
        }
    }

    /**
     * @dev Throws if the `account` is not in the transfer allowed list.
     */
    function _requireTransferAllowed(address account) internal view virtual {
        if (!_isTransferAllowed(account)) {
            revert AlreadyTransferNotAllowed({account: account});
        }
    }

    /**
     * @dev Throws if the Token transfer is disabled.
     */
    function _requireTokenTransferEnabled(
        address caller
    ) internal view virtual {
        if (!_isTransferAllowed() && !_isTransferAllowed(caller)) {
            revert TokenTransferNotAllowed();
        }
    }

    /**
     * @dev Enable token transfer.
     */
    function _enableTokenTransfer() internal virtual {
        _isTokenTransferEnabled = true;
        emit TokenTransferEnabled();
    }

    /**
     * @dev add an `account` to transfer allowed list.
     */
    function _addToTransferAllowed(
        address account
    ) internal virtual requireTransferNotAllowed(account) {
        if (account == address(0)) {
            revert InvalidAddress({account: address(0)});
        }

        _transferAllowed[account] = true;
        emit TransferAllowed(account);
    }

    /**
     * @dev remove an `account` from transfer allowed list.
     */
    function _removeFromTransferAllowed(
        address account
    ) internal virtual requireTransferAllowed(account) {
        _transferAllowed[account] = false;
        emit TransferNotAllowed(account);
    }
}

