
// File: verified-sources/0x4A8826988296843B2132CD4efb21294B01553987/sources/v6/LuckyMeme.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

import {IERC20} from "./IERC20.sol";
import {IERC20Errors} from "./draft-IERC6093.sol";


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the sender.
     */
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC-20
 * applications.
 */
contract LuckyMeme is Ownable, IERC20, IERC20Errors {
    mapping(address account => uint256) internal _balances;
    mapping(address account => mapping(address spender => uint256)) internal _allowances;

    uint256 private immutable _decimals;
    uint256 public immutable _maxTransaction;    // max of 1% of the total supply per transaction
    uint256 public immutable _distributeThreshold;
    uint256 public constant _tax = 4;    // 0.4% fee (_tax / _taxDenominator = 4/1000 = 0.004 = 0.4%)
    uint256 private constant _taxDenominator = 1000;
    uint256 public _distributeCounter = 0;
    uint256 private _totalSupply;

    bool public _trading = false;
    bool public _presale = true;    // presale tax and everything related
    bool public _hardTax = false;    // first month tax
    bool public _zeroTax = true;    

    string private constant _name = "LuckyMeme";
    string private constant _symbol = "LME";

    address payable immutable lmeAddress = payable(address(this));
    address payable public _annualprizeWallet = payable(0x58c88BC76769B9380F65FA9F8A01dd9F8af81022);
    address payable public _monthlyprizeWallet = payable(0x10Eea63dAEDaa2d81e9c29641eF6dCE005164dc1);
    address payable public _weeklyprizeWallet = payable(0xb120D280270870E7EF43101250b1b7d5A9F0D8e0);

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor() {
        _decimals = decimals();
        _maxTransaction = 10000000 * 10**_decimals;
        _distributeThreshold = 100000 * 10**_decimals;

        // Total supply is fixed and equal to the initial supply.
        uint256 _initialSupply = 1000000000 * 10**_decimals;
        _mint(_msgSender(), _initialSupply);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `value`.
     */
    function transfer(address to, uint256 value) public virtual returns (bool) {
        address user = _msgSender();
        _zeroTax = true;
        _transfer(user, to, value);
        _zeroTax = false;

        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address user, address spender) public view virtual returns (uint256) {
        return _allowances[user][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public virtual returns (bool) {
        address user = _msgSender();
        _approve(user, spender, value);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Skips emitting an {Approval} event indicating an allowance update. This is not
     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `value`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `value`.
     */
    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
        address spender = _msgSender();
        _zeroTax = false;
        _spendAllowance(from, spender, value);
        _transfer(from, to, value);

        // Trigger for distributing fees between project addresses.
        uint256 tokenBalance = balanceOf(lmeAddress);
        if (tokenBalance > _distributeThreshold) {
            if (_trading) {
                _distributeFee();
            }
        }
        
        return true;
    }

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _transfer(address from, address to, uint256 value) internal {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }

        require((_trading) || ((from==lmeAddress) && (_presale)) || (to == owner()) || (from == owner()), "Cannot transact now"); 

        // Penalty imposed on holders who attempt to transact a larger amount than allowed, penalty=1 means there is no 
        // penalty (fee=0.4%). When the limit is exceeded, the holder suffers a penalty=10 (fee=4%).
        uint256 penalty;    

        // Situation in which the transaction limit has been exceeded.
        if (value > _maxTransaction) {
            penalty = 10;
        }
        // Transaction within the limit. 
        else {
            penalty = 1;    
        }

        _transferSubroutine(from, to, value, penalty);
    }

    /**
     * @dev Subroutine of the fucntion `_transfer`.     
     */
    function _transferSubroutine(address from, address to, uint256 value, uint256 penalty) internal {
        // If it is not one of the project addresses, penalty or fees are applied.
        if (from != owner() && from != _annualprizeWallet && from != _monthlyprizeWallet && from != _weeklyprizeWallet && from != lmeAddress) {
            if (to != owner() && to != _annualprizeWallet && to != _monthlyprizeWallet && to != _weeklyprizeWallet && to != lmeAddress) {
                uint256 taxedValue;    // value after fees                
                taxedValue = _applyFee(from, value, penalty);
                _update(from, to, taxedValue);
            }
            // Transaction to a project address. In this case, no penalties and no fees apply.
            else {
                _update(from, to, value);
            }
        }
        // Transaction from a project address. In this case, no penalties and no fees apply.
        else {
            _update(from, to, value);
        }
    }

    /**
     * @dev The contract retains a portion of the 'from' transaction amount (`value`) as a fee (`tax`).     
     */
    function _applyFee(address from, uint256 value, uint256 penalty) internal virtual returns(uint256) {
        uint256 tax;

        // Type of tax.
        if ((_zeroTax)||(_presale)) {
            tax = 0;
        }
        else if (_hardTax) {
            tax = 10 * penalty * (_tax * value) / _taxDenominator;
        }
        else {
            tax = penalty * (_tax * value) / _taxDenominator; 
        }

        // Value of the transaction after tax.
        uint256 taxedValue;
        taxedValue = value - tax;

        // Sender token balance.
        uint256 fromBalance = _balances[from];

        if (fromBalance < tax) {
            revert ERC20InsufficientBalance(from, fromBalance, tax);
        }
        unchecked {
            // Overflow not possible: tax < value <= fromBalance.
            _balances[from] = fromBalance - tax;
        }

        unchecked {
            // Overflow not possible: balance + tax is at most totalSupply, which we know fits into a uint256.
            _balances[lmeAddress] += tax;
        }        

        if (tax > 0) {
            emit Transfer(from, lmeAddress, tax);
        }

        return taxedValue;
    }

    /**
     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
     * this function.
     *
     * Emits a {Transfer} event.
     */
    function _update(address from, address to, uint256 value) internal virtual {
        if (from == address(0)) {
            // Overflow check required: The rest of the code assumes that totalSupply never overflows
            _totalSupply = value;
        } 
        else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < value) {
                revert ERC20InsufficientBalance(from, fromBalance, value);
            }
            unchecked {
                // Overflow not possible: value <= fromBalance <= totalSupply.
                _balances[from] = fromBalance - value;
            }
        }

        // The project does not have burns, but someone might want to send their tokens to the null address anyway. 
        // In this case the total supply is reduced.
        if (to == address(0)) {
            unchecked {
                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
                _totalSupply -= value;
            }
        } 
        else {
            unchecked {
                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
                _balances[to] += value;
            }
        }

        emit Transfer(from, to, value);
    }

    /**
     * @dev Distributes the fees between the parties: annual prize wallet, monthly prize wallet, weekly prize wallet 
     * and project. This function is called every time the contract's token balance exceeds 100,000 LME. With each 
     * call, the proportional part is sent to only one of the wallets. Once it reaches 100,000 LME again, the 
     * proportional transfer is made to the next wallet, and so on.     
     */
    function _distributeFee() internal virtual returns(bool) {
        uint256 _prizesWalletPercentage = 275;    // 0.11% is equivalent to 27.5% of 0.4% 
        uint256 _projectWalletPercentage = 175;    // 0.07% is equivalent to 17.5% of 0.4% 
        uint256 value = balanceOf(lmeAddress);    
        uint256 proportionalValue;
        address from = lmeAddress;
        address payable to;

        if (_distributeCounter == 0) {
            proportionalValue = (value * _prizesWalletPercentage) / _taxDenominator;
            to = _annualprizeWallet;
        }
        else if (_distributeCounter == 1) {
            proportionalValue = (value * _prizesWalletPercentage) / _taxDenominator;
            to = _monthlyprizeWallet;
        }
        else if (_distributeCounter == 2) {
            proportionalValue = (value * _prizesWalletPercentage) / _taxDenominator;
            to = _weeklyprizeWallet;
        }
        else {
            proportionalValue = (value * _projectWalletPercentage) / _taxDenominator;
            to = payable(owner());
        }

        // Update counter.
        _distributeCounter += 1;
        if (_distributeCounter >= 4) {
            _distributeCounter = 0;
        }

        // Transfer tokens to chosen wallet.
        _transfer(from, to, proportionalValue);
        
        return true;
    }

    /**
     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
     * Relies on the `_update` mechanism
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * NOTE: This function is not virtual, {_update} should be overridden instead.
     */
    function _mint(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(address(0), account, value);
    }

    /**
     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
     *
     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
     * `Approval` event during `transferFrom` operations.
     *
     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
     * true using the following override:
     *
     * ```solidity
     * function _approve(address user, address spender, uint256 value, bool) internal virtual override {
     *     super._approve(user, spender, value, true);
     * }
     * ```
     *
     * Requirements are the same as {_approve}.
     */
    function _approve(address user, address spender, uint256 value) internal virtual {
        if (user == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[user][spender] = value;
        emit Approval(user, spender, value);
    }

    /**
     * @dev Updates `user` s allowance for `spender` based on spent `value`.
     *
     * Does not update the allowance value in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Does not emit an {Approval} event.
     */
    function _spendAllowance(address user, address spender, uint256 value) internal virtual {
        uint256 currentAllowance = allowance(user, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < value) {
                revert ERC20InsufficientAllowance(spender, currentAllowance, value);
            }
            unchecked {
                _approve(user, spender, currentAllowance - value);
            }
        }
    }

    /**
     * @dev Changes the address of a prize wallet. If any prize wallet is compromised, this function must 
     * be called to update its address.
     */
    function changePrizeWallet(uint256 i, address prizeWallet) public virtual onlyOwner {
        if (i == 0) {
            _annualprizeWallet = payable(prizeWallet);
        }
        else if (i == 1) {
            _monthlyprizeWallet = payable(prizeWallet);
        }
        else if (i == 2) {
            _weeklyprizeWallet = payable(prizeWallet);
        }        
    }

    /**
     * @dev Changes the variable `_trading` state to true, and from then on the token can be traded freely. Note 
     * that after this there is no turning back, this variable will always be true.
     */
    function openTrading() public virtual onlyOwner {
        _trading = true;
    }

    /**
     * @dev Changes _hardTax to false. There is no turning back after that.
     */
    function hardTaxOver() public virtual onlyOwner {
        _hardTax = false;    
    }

    /**
     * @dev Forces the tax to be zero if needed.
     */
    function zeroTax() public virtual onlyOwner {
        if (_zeroTax) {
            _zeroTax = false;    
        }
        else {
            _zeroTax = true;
        }
    }

    /** 
     * @dev Send ethers to the project's wallet. We don't expect to use this function, but it can be useful.
     */
    function withdraw(uint256 ethAmount) external onlyOwner {
        payable(owner()).transfer(ethAmount);
    }

    /**
     * @dev Receive function.
     */
    receive() external payable virtual {
        address user = msg.sender;
        uint256 ethAmount = msg.value;

        if ((_presale) && (user!=owner())) {
            _swapETHforToken(user, ethAmount);
        }
    }


    /***** From now on everything is about the presale. *****/

    uint256 public totalPurchases = 0;
    uint256 public presalePrice = 2000000000000 wei;    // price of 1 LME in wei (1 LME = 0.000002 ETH)

    bool internal locked;    // lock state when executing	

    modifier noReentrancy() {
        require(!locked, "No reentrancy allowed");
        locked = true;
        _;
        locked = false;
    }

    // When the user send ETH to this contract, it needs to allow the user to be the spender of the transfer.
    // This allowance can't be done with the `approve` function since the sender is never the spender. Only 
    // for the presale we will allow this behavior.
    function _presaleApprove(address user, uint256 value) private returns (bool) {
        if ((_presale) || (user==owner())) {
            _approve(lmeAddress, user, value);
        }
        return true;
    }

    // User is giving ETH to receive tokens
    function _swapETHforToken(address user, uint256 ethAmount) private noReentrancy { 
        require(_presale, "Presale is over");

        // Verify min and max limits.
        require(ethAmount >= 5000000000000000 wei, "ETH amount must be greater than 0.005 ETH");
        require(ethAmount <= 1000000000000000000 wei, "ETH amount must be less than 1 ETH");

        // Calculates the amount of tokens the user will receive.
        uint256 tokenAmount = (ethAmount / presalePrice) * 10**_decimals;

        // Verify if the amount of token in the contract is enough to continue the transaction.   
        require(balanceOf(lmeAddress) >= tokenAmount, "Insufficient token balance to complete the transaction");  
        payable(owner()).transfer(ethAmount);

        // Transfer tokens to the user.
		bool status;
        require(_presaleApprove(user, tokenAmount), "Allowance not approved");
        status = transferFrom(lmeAddress, user, tokenAmount);
		
		// Updates.
        if (status) {
		    totalPurchases += tokenAmount;
        }
        // Just to make sure there are no loose ends.
        _presaleApprove(user, 0);
    } 

    // Activate this function to finish the presale. There is no turning back after that.
    function presaleOver() public onlyOwner {
        _presale = false;    
        _hardTax = true;    
    }

    // Send the LME tokens to the project's wallet.
    function withdrawTokens(uint256 tokenAmount) external onlyOwner {
		bool status;
        require(_presaleApprove(owner(), tokenAmount), "Allowance not approved");
        status = transferFrom(lmeAddress, owner(), tokenAmount);
    }
}

// File: verified-sources/0x4A8826988296843B2132CD4efb21294B01553987/sources/v6/draft-IERC6093.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)
pragma solidity ^0.8.18;

/**
 * @dev Standard ERC-20 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.
 */
interface IERC20Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC20InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC20InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     * @param allowance Amount of tokens a `spender` is allowed to operate with.
     * @param needed Minimum amount required to perform a transfer.
     */
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC20InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
     * @param spender Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC20InvalidSpender(address spender);
}

/**
 * @dev Standard ERC-721 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.
 */
interface IERC721Errors {
    /**
     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.
     * Used in balance queries.
     * @param owner Address of the current owner of a token.
     */
    error ERC721InvalidOwner(address owner);

    /**
     * @dev Indicates a `tokenId` whose `owner` is the zero address.
     * @param tokenId Identifier number of a token.
     */
    error ERC721NonexistentToken(uint256 tokenId);

    /**
     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param tokenId Identifier number of a token.
     * @param owner Address of the current owner of a token.
     */
    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC721InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC721InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param tokenId Identifier number of a token.
     */
    error ERC721InsufficientApproval(address operator, uint256 tokenId);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC721InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC721InvalidOperator(address operator);
}

/**
 * @dev Standard ERC-1155 Errors
 * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.
 */
interface IERC1155Errors {
    /**
     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     * @param balance Current balance for the interacting account.
     * @param needed Minimum amount required to perform a transfer.
     * @param tokenId Identifier number of a token.
     */
    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);

    /**
     * @dev Indicates a failure with the token `sender`. Used in transfers.
     * @param sender Address whose tokens are being transferred.
     */
    error ERC1155InvalidSender(address sender);

    /**
     * @dev Indicates a failure with the token `receiver`. Used in transfers.
     * @param receiver Address to which tokens are being transferred.
     */
    error ERC1155InvalidReceiver(address receiver);

    /**
     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     * @param owner Address of the current owner of a token.
     */
    error ERC1155MissingApprovalForAll(address operator, address owner);

    /**
     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
     * @param approver Address initiating an approval operation.
     */
    error ERC1155InvalidApprover(address approver);

    /**
     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
     * @param operator Address that may be allowed to operate on tokens without being their owner.
     */
    error ERC1155InvalidOperator(address operator);

    /**
     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
     * Used in batch transfers.
     * @param idsLength Length of the array of token identifiers
     * @param valuesLength Length of the array of token amounts
     */
    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
}


// File: verified-sources/0x4A8826988296843B2132CD4efb21294B01553987/sources/v6/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.18;

/**
 * @dev Interface of the ERC-20 standard as defined in the ERC.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

