
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/THLMMember.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {Pausable} from "@openzeppelin/contracts/security/Pausable.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract THLMMember is Ownable, Pausable, ReentrancyGuard {
    address public daoAddress;
    address public THMLTokenAddress;
    uint256 public deductionPercent;
    bool public emergencyUnstakeFlag;

    struct StakeInfo {
        uint256 stakeLevel;
        uint256 stakeAmount;
        uint256 stakeTimestamp;
    }

    mapping(address => StakeInfo) internal _stakeRecords;
  
    mapping(uint256 /* level */ => uint256 /* time */) internal _stakeLevels;

    event ThlmStake(address user, uint256 oldLevel, uint256 newLevel, uint256 oldStakeAmount, uint256 newStakeAmount,
                    uint256 oldStakeTimestamp,uint256 newStakeTimestamp,
                    uint256 oldUnstakeTimestamp, uint256 newUnstakeTimestamp);

    event ThlmUnstake(address user, uint256 level, uint256 unstakeAmount, uint256 userGetAmount, uint256 unstakeTimestamp);

    event LevelUpdated(uint256 level, uint256 stakeTime);

    modifier onlyEOA() {
        require(msg.sender.code.length == 0, "only EOA");
        _;
    }

    constructor(address THMLTokenAddress_, address daoAddress_) {
        THMLTokenAddress = THMLTokenAddress_;
        daoAddress = daoAddress_;

        emergencyUnstakeFlag = false;
        deductionPercent = 10;

        _stakeLevels[1] = 1; // 1 second
        _stakeLevels[2] = 30 days;
        _stakeLevels[3] = 90 days;
        _stakeLevels[4] = 180 days;
    }


    function updateDeductionPercent(uint256 percent) public onlyOwner {
        require(percent >= 0 && percent <= 100, "percent must be between 0 and 100");
        deductionPercent = percent;
    }
    
    function updateEmergeceUnstakeFlag(bool flag) public onlyOwner {
        emergencyUnstakeFlag = flag;
    }

    function updateDaoAddress(address daoAddress_) public onlyOwner {
        daoAddress = daoAddress_;
    }

    /* 初始设置如下：
        _stakeLevels[1] = 1; // 1 秒 , 活期
        _stakeLevels[2] = 30 days;
        _stakeLevels[3] = 90 days;
        _stakeLevels[4] = 180 days;
        设置时，需要满足level 越大， 时间越长的规则
    */
    function updateStakeLevelInfo(uint256 level, uint256 time) public onlyOwner {
        require(time > 0, "time must be greater than 0");
        _stakeLevels[level] = time;
        emit LevelUpdated(level, time);
    }

    function getUserStakeInfo(address user) public view returns(StakeInfo memory) {
        StakeInfo memory stakeRecord = _stakeRecords[user];
        return stakeRecord;
    }

    function getUnstakeTime(uint256 stakeTime, uint256 level) public view returns(uint256) {        
        return stakeTime + _stakeLevels[level];
    }

    function getStakeTime(uint256 level) public view returns(uint256) {
        return _stakeLevels[level];
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function stake(uint256 level, uint256 amount) public nonReentrant whenNotPaused onlyEOA {
        require(_stakeLevels[level] > 0, "invalid level");

        StakeInfo storage stakeRecord = _stakeRecords[msg.sender];
        uint256 oldLevel = stakeRecord.stakeLevel;
        uint256 oldAmount = stakeRecord.stakeAmount;
        uint256 oldStakeTimestamp = stakeRecord.stakeTimestamp;
        uint256 oldUnstakeTimestamp = getUnstakeTime(stakeRecord.stakeTimestamp, stakeRecord.stakeLevel);
        if(oldUnstakeTimestamp > block.timestamp) {
            require(level >= stakeRecord.stakeLevel, "new level shoule be greater than or equal to current level");
            if(level > stakeRecord.stakeLevel) {
                stakeRecord.stakeTimestamp = block.timestamp;
                stakeRecord.stakeLevel = level;
            }

            stakeRecord.stakeAmount += amount;
        }
        else {
            stakeRecord.stakeAmount += amount;
            stakeRecord.stakeLevel = level;
            stakeRecord.stakeTimestamp = block.timestamp;
        }
        if(amount > 0) {
            IERC20(THMLTokenAddress).transferFrom(msg.sender, address(this), amount);
        }
        
        uint256 newUnstakeTimestamp = getUnstakeTime(stakeRecord.stakeTimestamp, stakeRecord.stakeLevel);
        emit ThlmStake(msg.sender, oldLevel, level, oldAmount, stakeRecord.stakeAmount, 
            oldStakeTimestamp, stakeRecord.stakeTimestamp,
            oldUnstakeTimestamp,newUnstakeTimestamp);
    }

    function queryUnstake(address user) public view returns(uint256 userGetAmount, uint256 userLostAmount) {
        StakeInfo memory stakeRecord = _stakeRecords[user];
        uint256 unstatkeAmount = stakeRecord.stakeAmount;
        userGetAmount = unstatkeAmount;
        userLostAmount = 0;
        if(stakeRecord.stakeAmount > 0) {
            uint256 unstakeTimestamp = getUnstakeTime(stakeRecord.stakeTimestamp, stakeRecord.stakeLevel);
            if( unstakeTimestamp > block.timestamp) {
                uint256 leftTime = unstakeTimestamp - block.timestamp;
                uint256 maxStakeTime =  _stakeLevels[stakeRecord.stakeLevel];
                if(leftTime > maxStakeTime) {
                    leftTime = maxStakeTime;
                }
                userLostAmount = unstatkeAmount * deductionPercent  * leftTime /(maxStakeTime * 100);
                userGetAmount = unstatkeAmount - userLostAmount;
            }
        }
    }

    function unstake() public nonReentrant whenNotPaused {
        StakeInfo storage stakeRecord = _stakeRecords[msg.sender];
        uint256 unstatkeAmount = stakeRecord.stakeAmount;
        require(stakeRecord.stakeAmount > 0, "not stake yet");
        (uint256 userGetAmount, uint256 userLostAmount) = queryUnstake(msg.sender);        
        IERC20(THMLTokenAddress).transfer(msg.sender, userGetAmount);
        if(userLostAmount > 0) {
            IERC20(THMLTokenAddress).transfer(daoAddress, userLostAmount);
        }

        stakeRecord.stakeAmount = 0;
        stakeRecord.stakeTimestamp = 0;
        emit ThlmUnstake(msg.sender, stakeRecord.stakeLevel, unstatkeAmount, userGetAmount, block.timestamp);
    }

    /*
     *  紧急情况下，管理员可以通过修改设置，让用户可以提取所有的资金
     */
    function emergencyUnstake() public nonReentrant whenNotPaused {
        require(emergencyUnstakeFlag, "emergency unstake is not allowed");
        
        StakeInfo storage stakeRecord = _stakeRecords[msg.sender];
        uint256 unstatkeAmount = stakeRecord.stakeAmount;
        uint256 userGetAmount = unstatkeAmount;
        require(stakeRecord.stakeAmount > 0, "not stake yet");
        
        IERC20(THMLTokenAddress).transfer(msg.sender, unstatkeAmount);
        stakeRecord.stakeAmount = 0;
        stakeRecord.stakeTimestamp = 0;
    
        emit ThlmUnstake(msg.sender, stakeRecord.stakeLevel, unstatkeAmount, userGetAmount, block.timestamp);
    }
}


