
// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)

pragma solidity ^0.8.20;

import {IAccessControl} from "./IAccessControl.sol";
import {Context} from "../utils/Context.sol";
import {ERC165} from "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```solidity
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```solidity
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
 * to enforce additional security measures for this role.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address account => bool) hasRole;
        bytes32 adminRole;
    }

    mapping(bytes32 role => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with an {AccessControlUnauthorizedAccount} error including the required role.
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual returns (bool) {
        return _roles[role].hasRole[account];
    }

    /**
     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`
     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`
     * is missing `role`.
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert AccessControlUnauthorizedAccount(account, role);
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleGranted} event.
     */
    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleRevoked} event.
     */
    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `callerConfirmation`.
     *
     * May emit a {RoleRevoked} event.
     */
    function renounceRole(bytes32 role, address callerConfirmation) public virtual {
        if (callerConfirmation != _msgSender()) {
            revert AccessControlBadConfirmation();
        }

        _revokeRole(role, callerConfirmation);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleGranted} event.
     */
    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {
        if (!hasRole(role, account)) {
            _roles[role].hasRole[account] = true;
            emit RoleGranted(role, account, _msgSender());
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleRevoked} event.
     */
    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {
        if (hasRole(role, account)) {
            _roles[role].hasRole[account] = false;
            emit RoleRevoked(role, account, _msgSender());
            return true;
        } else {
            return false;
        }
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)

pragma solidity ^0.8.20;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev The `account` is missing a role.
     */
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);

    /**
     * @dev The caller of a function is not the expected one.
     *
     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.
     */
    error AccessControlBadConfirmation();

    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `callerConfirmation`.
     */
    function renounceRole(bytes32 role, address callerConfirmation) external;
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)

pragma solidity ^0.8.20;

import {IERC165} from "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    bool private _paused;

    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    /**
     * @dev The operation failed because the contract is paused.
     */
    error EnforcedPause();

    /**
     * @dev The operation failed because the contract is not paused.
     */
    error ExpectedPause();

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        if (paused()) {
            revert EnforcedPause();
        }
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        if (!paused()) {
            revert ExpectedPause();
        }
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/staking/BaseStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {Pausable} from "@openzeppelin/contracts/utils/Pausable.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";
import {Address} from "@openzeppelin/contracts/utils/Address.sol";
import "./IStaking.sol";

/** @title Base contract for staking
* @author Challenge.GG
* @dev Implements the mechanisms for staking tokens and earning rewards over time. 
* This abstract contract provides a foundation for different staking strategies through 
* derived contracts. It integrates with OpenZeppelin's security modules, including 
* ReentrancyGuard for preventing reentrancy attacks, AccessControl for role-based permissions, 
* and Pausable for emergency stop mechanisms. Stakers can stake and unstake tokens, 
* claim rewards based on their staked amount, and the contract's state can be paused or unpaused 
* by accounts with the manager role. The contract also allows for the recovery of erroneous 
* token transfers and the adjustment of key parameters by authorized roles.
*
* The staking logic includes an unstake fee mechanism to incentivize longer-term staking, 
* and the reward calculation is designed to distribute rewards fairly among all stakers 
* based on the duration of their stake and the amount staked. It supports updating reward 
* rates and duration, offering flexibility in how rewards are distributed.
* Roles:
* - Default Admin: Can manage other roles, set unstake fees, and pause/unpause the contract.
* - Manager: Can notify new reward amounts and pause/unpause the contract.
* 
* Key Features:
* - Flexible and updatable reward distribution
* - Secure staking and unstaking with fee option
* - Role-based function access for enhanced security
* - OpenZeppelin's ReentrancyGuard, AccessControl, and Pausable integrations
* 
* @notice Designed to be extended for specific staking strategies and token types. 
* It does not implement the `stake`,`unstake`and `setUnstakeFee` functions, leaving the specific 
* staking logic to be defined in derived contracts.
* Based on https://docs.synthetix.io/contracts/source/contracts/stakingrewards
*/
abstract contract BaseStaking is IStaking, ReentrancyGuard, AccessControl, Pausable {
    using SafeERC20 for IERC20;

    // Define roles
    bytes32 public constant MANAGER_ROLE = keccak256("MANAGER_ROLE");

    IERC20 public rewardsToken; //Token used for rewards 
    IERC20 public stakingToken; //Token used for staking
    uint256 public periodFinish = 0; //Timestamp when rewards duration finishes
    uint256 public rewardRate = 0; // Rate at which rewards are distributed per second to stakers.
    uint256 public rewardsDuration = 90 days; //The duration rewards will be paid out for, default 90 days
    uint256 public lastUpdateTime; // Timestamp of the last update to rewardPerTokenStored or reward distribution.
    uint256 public rewardPerTokenStored; // Accumulated reward per token, updated at each stake, unstake, or claim action.
    uint256 public unstakeFeePercentage = 0; //In percent, 0=0%, 5=5%
    uint256 public undistributedRewards = 0; // Variable to track undistributed rewards
    bool public pendingReward = false;  // Flag to track if there's a pending reward to be distributed
    uint256 private _totalFees; //Total fees collected
    uint256 private _totalSupply; // Total amount of tokens staked in the contract.  
    uint256 private _newReward; // New reward amount
    uint256 public _totalRewards; // Total deposited rewards

    mapping(address => uint256) public userRewardPerTokenPaid; // Tracks the amount of reward per token each user has been paid for, to calculate the pending rewards accurately.
    mapping(address => uint256) public rewards; // Stores the amount of rewards that each staker is entitled to claim.
    mapping(address => uint256) private _balances; // Records the amount of staking tokens each user has staked in the contract.   
    mapping(address => uint256) private _stakerIndex; // Mapping from staker to their index in the stakers array

    // Array of all stakers. We maintain an array of active stakers which doesn't contain any addresses with 0.
    //So to get number of stakes we can just check length of this array 
    address[] public stakers;

    //Events

    /// @notice Emitted when a new reward is added.
    /// @param reward The amount of the reward added.
    event RewardAdded(uint256 reward);

    /// @notice Emitted when the rewards period is started.
    /// @param reward The amount of the reward for the period.
    /// @param periodFinish The timestamp when the period will end.   
    event RewardPeriodStarted(uint256 reward, uint256 periodFinish);

    /// @notice Emitted when a user stakes tokens.
    /// @param user The address of the user who staked tokens.
    /// @param payer The address from which the tokens are being transferred.
    /// @param amount The amount of tokens staked.
    event Staked(address indexed user, address indexed payer, uint256 amount);

    /// @notice Emitted when a user unstakes tokens.
    /// @param user The address of the user who unstaked tokens.
    /// @param amount The amount of tokens unstaked.
    /// @param fee The fee deducted from the unstaked amount, if any.
    event Unstaked(address indexed user, uint256 amount, uint256 fee);

    /// @notice Emitted when rewards are paid to a user.
    /// @param user The address of the user who received the reward.
    /// @param reward The amount of the reward paid.
    event RewardPaid(address indexed user, uint256 reward);

    /// @notice Emitted when the rewards duration is updated.
    /// @param newDuration The new duration for rewards distribution.
    event RewardsDurationUpdated(uint256 newDuration);

    /// @notice Emitted when ERC20 tokens are recovered from the contract.
    /// @param token The address of the token recovered.
    /// @param amount The amount of the token recovered.
    event Recovered(address token, uint256 amount);
    
    /// @notice Emitted when fees are withdrawn from the contract.
    /// @param amount The amount of fees withdrawn.
    event FeesWithdrawn(uint256 amount);

    //Modifiers

    /// @notice Restricted to members of the admin role.
    modifier onlyAdmin()
    {
        require(isAdmin(msg.sender), "Restricted to admins");
        _;
    }  

    /// @notice Restricted to members of the Manager role.
    modifier onlyManager()
    {
        require(isManager(msg.sender), "Restricted to managers");
        _;
    } 

    /// @notice Updates the reward for a given account before executing the modified function.
    /// This modifier ensures that any function it is applied to will first update the account's reward calculation
    /// based on the latest state of the contract. This is crucial for functions that affect the rewards distribution,
    /// such as staking, unstaking, and claiming rewards, to ensure that the rewards are calculated accurately and fairly.
    /// @param account The address of the account for which rewards are to be updated.
    modifier updateReward(address account) {
       _updateReward(account);
       _;
    } 

    /**
     * @dev Initializes the contract with specific addresses for the rewards and staking tokens, 
     * an admin address for role management, and the unstake fee percentage. It sets up the necessary roles 
     * and ensures that the provided addresses and fee percentage are valid. 
     * The constructor performs checks to prevent common configuration errors, such as invalid addresses 
     * or an excessive unstake fee percentage.
     * 
     * Requirements:
     * - `_rewardsToken` and `_stakingToken` must be valid ERC20 token addresses.
     * - `_unstakeFeePercentage` must not exceed 5%, ensuring fees are kept within reasonable limits.
     * 
     * @param _multisigAdmin Address that will be granted the default admin role, capable of managing other roles.
     * @param _rewardsToken Address of the ERC20 token used for rewards.
     * @param _stakingToken Address of the ERC20 token that will be staked.
     * @param _unstakeFeePercentage The fee percentage charged when unstaking tokens. Expressed as a percentage of the unstaked amount.
     */
    constructor(
        address _multisigAdmin,
        address _rewardsToken,
        address _stakingToken,
        uint256 _unstakeFeePercentage
    ) {
        require(_rewardsToken != address(0), "Invalid rewards token");
        require(_stakingToken != address(0), "Invalid staking token");
        require(_unstakeFeePercentage <= 5, "Unstake fee percentage cannot be more than 5%");

        _grantRole(DEFAULT_ADMIN_ROLE, _multisigAdmin);
        _setRoleAdmin(MANAGER_ROLE, DEFAULT_ADMIN_ROLE);

        rewardsToken = IERC20(_rewardsToken);
        stakingToken = IERC20(_stakingToken);
        unstakeFeePercentage = _unstakeFeePercentage;
    }

    /// @notice Allows the contract to receive Ether directly without calling a function.
    receive() external payable {}

    //Update functions
  
    /// @dev Add an account to the Manager role. Restricted to admins.
    /// @param account Address to add
    function addManager(address account) external onlyAdmin
    {
        grantRole(MANAGER_ROLE, account);
    }

    /// @dev Remove an account from the Manager role. Restricted to admins.
    /// @param account Address to remove
    function removeManager(address account) external onlyAdmin
    {
        revokeRole(MANAGER_ROLE, account);
    }

    /// @dev Recovers ERC20 tokens sent to the contract by mistake. 
    /// @param tokenAddress Address of the token to recover 
    /// @param tokenAmount Amount of tokens to recover  
    /// @param to Address to send the recovered tokens to 
    function recoverERC20(address tokenAddress, uint256 tokenAmount, address to) external onlyAdmin {
        require(to != address(0), "Invalid address");
        require(tokenAddress != address(stakingToken), "Cannot withdraw the staking token");
        require(tokenAddress != address(rewardsToken), "Cannot withdraw the rewards token");
        IERC20(tokenAddress).safeTransfer(to, tokenAmount);
        emit Recovered(tokenAddress, tokenAmount);
    }

    /// @dev WIthdraws any fees collected by the contract.
    /// @param to Address to send the recovered fees to
    function withdrawFees(address to) external onlyAdmin {
        require(to != address(0), "Invalid address");
        require(_totalFees > 0, "No fees to recover");
        uint256 fees = _totalFees;
        _totalFees = 0;
        stakingToken.safeTransfer(to, fees);
        emit FeesWithdrawn(fees);
    }  

    /// @dev Withdraws ETH sent to contract by mistake
    /// @param to Address to send ETH to
    /// @param amount Amount to send
    function withdrawETH(address payable to, uint256 amount) external nonReentrant onlyAdmin { 
        require(to != address(0), "To wallet is the zero address");
        require(address(this).balance >= amount, "Insufficient ETH balance");
        Address.sendValue(to, amount);
    }

    /// @dev Pauses the contract, preventing staking.
    function pause() external onlyManager {
        _pause();
    }

    /// @dev Unpauses the contract, allowing staking to resume.
    function unpause() external onlyManager {
        _unpause();
    }

    function depositReward(uint256 amount) external onlyManager {
        require(amount > 0, "Amount must be greater than 0");
        
        // Transfer the deposited rewards from the manager's account to the contract.
        rewardsToken.safeTransferFrom(msg.sender, address(this), amount);
        
        // Update the total deposited rewards.
        _totalRewards += amount;
        // Update the new reward amount.
        _newReward += amount;

         emit RewardAdded(amount);
    }


    /// @dev Notifies the contract that a new reward amount is available.
    /// It updates the reward rate and the period finish time based on the new reward amount and the duration.
    function startRewardPeriod() external onlyManager updateReward(address(0)) {        
        require(block.timestamp > periodFinish, "Previous period must end before adding new rewards");
        require(_newReward > 0, "New reward must be greater than 0");
        uint256 newReward = _newReward + undistributedRewards; // Add any undistributed rewards from previous periods to the new reward
        require(newReward > rewardsDuration, "Reward must be greater than duration to avoid 0 reward rate");

        _newReward = 0; // Reset the new reward amount
        
        if (_totalSupply == 0) {
            // If there's no supply, simply update undistributedRewards without changing the rewardRate
            undistributedRewards = newReward;
            pendingReward = true;
            return; // Exit the function early
        }
        pendingReward = false; // Reset the pending reward flag as we're distributing rewards now
        
        rewardRate = newReward / rewardsDuration;
       
        // Recalculate the exact amount of rewards to be distributed based on the new reward rate
        uint256 exactRewardAmountDistributed = rewardRate * rewardsDuration;

        // Update undistributedRewards with the difference between the newReward and what will be distributed
        undistributedRewards = newReward - exactRewardAmountDistributed;

        lastUpdateTime = block.timestamp;
        periodFinish = block.timestamp + rewardsDuration;
        emit RewardPeriodStarted(exactRewardAmountDistributed, periodFinish);
    }   

    /// @dev Updates the duration of the rewards distribution period.
    /// @param _rewardsDuration The new duration for rewards distribution
    function setRewardsDuration(uint256 _rewardsDuration) external onlyManager {
        require(
            block.timestamp > periodFinish,
            "Previous rewards period must be complete before changing the duration for the new period"
        );
        rewardsDuration = _rewardsDuration;
        emit RewardsDurationUpdated(rewardsDuration);
    }

    /// @dev Stake function, should we implemented in derived contract
    /// @param amount Amount to stake
    function stake(uint256 amount) external virtual nonReentrant whenNotPaused  {      
    }

    /// @dev Unstake function, should we implemented in derived contract
    /// @param amount Amount to unstake
    function unstake(uint amount) external virtual nonReentrant{
    }


    /**
     * @notice Claims accrued rewards for the caller. 
     * This function calculates the current reward for the caller, updates their reward balance to zero, 
     * and transfers the calculated reward to their address. It ensures that rewards are only claimed 
     * for the actual amount earned based on the staked tokens and the duration of the stake.
     * The function is non-reentrant to prevent re-entrancy attacks and ensures the contract is not paused.
     *
     * Requirements:
     * - The caller must have a positive reward balance.
     * - There must be sufficient rewards in the contract to cover the claim.
     *
     * Emits a {RewardPaid} event indicating the caller and the amount of rewards claimed.
     */
    function claimReward() external nonReentrant updateReward(msg.sender) {
        uint256 reward = rewards[msg.sender];
        if (reward > 0) {
            require(_totalRewards >= reward, "Insufficient rewards");
            rewards[msg.sender] = 0;   
            _totalRewards -= reward;         
            rewardsToken.safeTransfer(msg.sender, reward);
            emit RewardPaid(msg.sender, reward);
        }
    }   

    //View

    /// @notice Returns the total supply of staked tokens. 
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /// @notice Returns the total number of unique stakers in the contract.
    function totalStakers() public view returns (uint256) {
        return stakers.length;
    }

     /// @notice Returns the balance of the rewards token held by the contract.
    function rewardTokenBalance() public view returns (uint256) {
        return _totalRewards;
    }

    /// @notice Returns the total rewards available for coming reward period, including any undistributed rewards.
    function upcomingRewards() public view returns (uint256) {
        return _newReward + undistributedRewards;
    }
    
    /// @notice Returns the staking balance of a specified address. 
    /// @param account The address of the staker whose balance is being queried.
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /// @notice Returns the latest timestamp for applicable rewards, either now or the end of the rewards period.
    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp < periodFinish ? block.timestamp : periodFinish;
    }

    /// @notice Calculates and returns the current reward per token staked, accounting for the time since last update.
    function rewardPerToken() public view returns (uint256) {
        if (_totalSupply == 0) {
            return rewardPerTokenStored;
        }
        return
            rewardPerTokenStored + ((lastTimeRewardApplicable()-lastUpdateTime) * rewardRate * 1e18 / _totalSupply);
    }

    /// @notice Calculates the amount of rewards an account has earned but not yet claimed.
    /// This function computes the earned rewards by taking into account the current reward per token,
    /// subtracting the amount already paid to the account, and adding any rewards previously accrued.
    /// @param account The address of the staker for whom to calculate the earned rewards.
    /// @return uint256 The total rewards earned by the account up to the current moment, ready to be claimed.
    function earned(address account) public view returns (uint256) {
        return (_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / 1e18) + rewards[account];
    }

     /// @notice Calculates the total rewards distributed by the contract over the entire rewards duration.
    function getRewardForDuration() public view returns (uint256) {
        return rewardRate * rewardsDuration;
    }

    /// @dev Checks if the account belongs to the admin role.
    /// @param account Address to check
    /// @return True if account belongs to 'ADMIN' role
    function isAdmin(address account) public view returns (bool)
    {
        return hasRole(DEFAULT_ADMIN_ROLE, account);
    }

    /// @dev Checks if the account belongs to the manager role.
    /// @param account Address to check
    /// @return True if account belongs to 'MANAGER' role
    function isManager(address account) public view returns (bool)
    {
        return hasRole(MANAGER_ROLE, account);
    }

    /// @notice Returns the total fees collected by the contract.
    function totalFees() external view returns (uint256) {
        return _totalFees;
    }
   
     /// @notice Returns staking information for a given account.
     /// @param account The address of the account for which to retrieve staking information.
     /// @return totalStaked Total supply of staked tokens in the contract.
     /// @return stakerCount Total number of unique stakers.
     /// @return currentRewardsDuration The duration rewards will be paid out for.
     /// @return currentPeriodFinish Timestamp when rewards duration finishes.
     /// @return currentRewardPerToken The current reward per token staked.
     /// @return rewardForDuration The total rewards distributed by the contract over the entire rewards duration.
     /// @return unstakeFee The current unstake fee percentage.
     /// @return accountBalance The staking balance of the specified account.
     /// @return accountEarned The total rewards earned by the specified account up to the current moment.

     
    function getAccountStakingInfo(address account)
        external
        view
        returns (
            uint256 totalStaked,
            uint256 stakerCount,
            uint256 currentRewardsDuration,
            uint256 currentPeriodFinish,
            uint256 currentRewardPerToken,
            uint256 rewardForDuration,
            uint256 unstakeFee,
            uint256 accountBalance,
            uint256 accountEarned

        )
    {
        totalStaked = totalSupply();
        stakerCount = totalStakers();
        currentRewardsDuration = rewardsDuration;
        currentPeriodFinish = periodFinish;
        currentRewardPerToken = rewardPerToken();
        rewardForDuration = getRewardForDuration();
        unstakeFee = unstakeFeePercentage;
        accountBalance = balanceOf(account);
        accountEarned = earned(account);
       
    }    

    /// @notice Returns staking information for a given account.
    /// @return totalStaked Total supply of staked tokens in the contract.
    /// @return stakerCount Total number of unique stakers.
    /// @return currentRewardsDuration The duration rewards will be paid out for.
    /// @return currentPeriodFinish Timestamp when rewards duration finishes.
    /// @return currentRewardPerToken The current reward per token staked.     
    /// @return rewardForDuration The total rewards distributed by the contract over the entire rewards duration.
    /// @return unstakeFee The current unstake fee percentage.
    function getGeneralStakingInfo()
        external
        view
        returns (
            uint256 totalStaked,
            uint256 stakerCount,
            uint256 currentRewardsDuration,
            uint256 currentPeriodFinish,
            uint256 currentRewardPerToken,
            uint256 rewardForDuration,
            uint256 unstakeFee
        )
    {
        totalStaked = totalSupply();
        stakerCount = totalStakers();
        currentRewardsDuration = rewardsDuration;
        currentPeriodFinish = periodFinish;
        currentRewardPerToken = rewardPerToken();
        rewardForDuration = getRewardForDuration();
        unstakeFee = unstakeFeePercentage;
    }    

    //Internal 

    /// @dev Internal function to handle the logic of staking tokens for a specified address.
    /// This function updates the total supply of staked tokens, the balance of the staker, and ensures
    /// the transfer of tokens into the contract. It is called by the public-facing stake function or
    /// other internal mechanisms that implement staking logic. This function also updates the reward
    /// calculation for the staker to accurately reflect their new staking balance.
    /// Emits a {Staked} event upon successful staking.
    /// @param amount The amount of tokens to be staked by the staker.
    /// @param stakerFor The address of the account performing the stake.
    /// @param payer The address from which the tokens are being transferred.
    function _stake(uint amount, address stakerFor, address payer) internal updateReward(stakerFor) {
        require(amount > 0, "Cannot stake 0");
        _totalSupply = _totalSupply + amount; 
        if(_balances[stakerFor] == 0){
            stakers.push(stakerFor);
            _stakerIndex[stakerFor] = stakers.length - 1;
        }
        _balances[stakerFor] = _balances[stakerFor] + amount;       
        stakingToken.safeTransferFrom(payer, address(this), amount);

        // Check if there is a pending reward to be distributed
        if (pendingReward) {
            _redistributeUndistributedRewards();
        }

        emit Staked(stakerFor, payer, amount);
    }

    /// @dev Internal function to handle the logic of unstaking tokens for a specified address.
    /// This function updates the total supply of staked tokens and the balance of the unstaker,
    /// ensuring the transfer of tokens back to the unstaker's address, minus any applicable fees.
    /// It is called by the public-facing unstake function or other internal mechanisms that implement
    /// unstaking logic. This function also updates the reward calculation for the unstaker to accurately
    /// reflect their new staking balance. In the case of unstaking, a fee may be applied, which is
    /// deducted from the unstaked amount as specified by the contract's unstake fee percentage.
    /// Emits an {Unstaked} event upon successful unstaking, including the amount unstaked and the fee applied.
    /// @param amount The amount of tokens to be unstaked by the unstaker.
    /// @param unstaker The address of the account performing the unstake.
    function _unstake(uint256 amount, address unstaker) internal updateReward(unstaker) {
        require(amount > 0, "Cannot unstake 0");
        require(_balances[unstaker] >= amount, "Cannot unstake more than the current stake"); //sub will check this but this is a better error message
                
        _totalSupply = _totalSupply - amount;
        _balances[unstaker] = _balances[unstaker] - amount;
        
        if(_balances[unstaker] == 0){
            // Unstaker has no more staked tokens, remove them from stakers array
            uint256 index = _stakerIndex[unstaker];
            uint256 lastIndex = stakers.length - 1;
            address lastStaker = stakers[lastIndex];
            
            // Swap unstaker with last staker in array
            stakers[index] = lastStaker;
            _stakerIndex[lastStaker] = index;
            
            // Remove last staker in array
            stakers.pop();
            delete _stakerIndex[unstaker];
        }
        
        uint256 fee = amount * unstakeFeePercentage / 100;
        uint256 amountAfterFee = amount - fee;
        _totalFees = _totalFees + fee;
        stakingToken.safeTransfer(unstaker, amountAfterFee);
        emit Unstaked(unstaker, amount,fee);
    }

    /// @dev Internal function to set the unstake fee percentage.
    /// This function updates the unstake fee percentage, ensuring that it adheres to the contract's
    /// policy on unstaking fees. It is designed to be called by privileged functions that manage
    /// contract parameters, providing a controlled way to adjust the fee that applies when stakers
    /// choose to unstake their tokens. This adjustment mechanism allows for dynamic modification
    /// of the fee structure based on governance decisions or contract management strategies.
    /// Emits a {UnstakeFeeUpdated} event upon successful update of the fee percentage.
    /// @param _unstakeFeePercentage The new unstake fee percentage to be set, expressed as a whole number
    /// (e.g., 5 for a 5% fee).
    function _setUnstakeFee(uint256 _unstakeFeePercentage) internal {
        require(_unstakeFeePercentage <= 5, "Unstake fee percentage cannot be more than 5%");
        unstakeFeePercentage = _unstakeFeePercentage;

    }       

    /// @dev Internal function to update the reward for a specific account.
    /// This function recalculates and updates the accumulated reward for an account based on the latest
    /// changes in the total staked amount, the reward rate, and the time elapsed since the last update.
    /// It ensures that each staker's rewards are accurately tracked and updated before any operation that
    /// could affect their rewards, such as staking, unstaking, or claiming rewards. 
    /// @param account The address of the staker whose rewards need updating. If the address is zero,
    /// it signifies a global update applicable to the entire system rather than an individual account.
    function _updateReward(address account) internal {
        rewardPerTokenStored = rewardPerToken();
        lastUpdateTime = lastTimeRewardApplicable();
        if (account != address(0)) {
            rewards[account] = earned(account);
            userRewardPerTokenPaid[account] = rewardPerTokenStored;
        }
    }

    /// @dev Internal function triggered on first stake if there is a pending rewards period.
    /// It updates the reward rate and the period finish time based on the new reward amount and the duration.
    function _redistributeUndistributedRewards() internal updateReward(address(0)) {
        pendingReward = false; // Reset the pending reward flag as we're distributing rewards now
      
        rewardRate = undistributedRewards / rewardsDuration;       

        // Recalculate the exact amount that will be distributed
        uint256 exactRewardAmountDistributed = rewardRate * rewardsDuration;
        // Update undistributedRewards to account for any rounding discrepancies
        undistributedRewards = undistributedRewards-exactRewardAmountDistributed;

        lastUpdateTime = block.timestamp;
        periodFinish = block.timestamp + rewardsDuration;
        emit RewardPeriodStarted(exactRewardAmountDistributed, periodFinish);
    }

}

// File: contracts/staking/FlexiStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

import "./BaseStaking.sol";
import '../util/TimeLock.sol';

/**
 * @title FlexiStaking Contract
 * @author Challenge.GG
 * @dev Extends BaseStaking with flexible unstake fee settings governed by a TimeLock contract.
 * Allows for secure, time-locked updates to unstake fee percentages, providing an additional layer of governance.
 * Stakers can stake and unstake tokens, with the unstake fee subject to scheduled changes approved through the TimeLock.
 * @notice Flexibel staking contract with no vesting schedules. Staking and unstaking can be done at any time. 
 * Unstaking is subject to a fee, which can be changed through the TimeLock contract.
 */
contract FlexiStaking is BaseStaking{

    TimeLock public timeLock; // TimeLock contract for unstake fee change

    /**
     * @dev Initializes the FlexiStaking contract linking staking logic with a TimeLock contract for governance.
     * Inherits initial settings from BaseStaking and sets the TimeLock contract used for managing unstake fee changes.
     * @param _multisigAdmin Address of the multisig admin with privileged control.
     * @param _rewardsToken Address of the ERC20 token used for rewards.
     * @param _stakingToken Address of the ERC20 token accepted for staking.
     * @param _timeLockContract Address of the TimeLock contract for governance actions.
     */
    constructor(
        address _multisigAdmin,
        address _rewardsToken,
        address _stakingToken,
        address _timeLockContract
    ) BaseStaking(_multisigAdmin,_rewardsToken,_stakingToken, 5) {
        require(_timeLockContract != address(0), "TimeLock address is the zero address");

        timeLock = TimeLock(_timeLockContract); 
    }
    
    /**
     * @notice Sets a new unstake fee percentage after a delay, governed by the TimeLock contract.
     * Can only be executed if the action has been scheduled in the TimeLock contract and the waiting period has passed.
     * Validates the actionId to ensure the action corresponds to the intended parameter change.
     * @dev Requires admin privileges. Ensures the actionId matches the scheduled change and the execution time has passed.
     * @param _unstakeFeePercentage New unstake fee percentage to be set.
     * @param actionId Unique identifier for the scheduled action in the TimeLock contract.
     */
    function setUnstakeFee(uint256 _unstakeFeePercentage,bytes32 actionId) external onlyAdmin{
        require(timeLock.getExecutionTime(actionId) != 0, "Action not scheduled");
        require(block.timestamp >= timeLock.getExecutionTime(actionId), "Action not ready");
        require(actionId == timeLock.generateActionId("setUnstakeFee", abi.encode(_unstakeFeePercentage), address(this)), "Invalid actionId");

        _setUnstakeFee(_unstakeFeePercentage);
         timeLock.clearAction(actionId);
    }
    
    /**
     * @notice Allows a user to stake a specified amount of the staking token.
     * @dev Stakes tokens for msg.sender, adhering to the BaseStaking implementation and nonReentrancy guard.
     * @param amount Amount of the staking token to stake.
     */
    function stake(uint256 amount) external override nonReentrant whenNotPaused  {
        _stake(amount,msg.sender,msg.sender);
    }    

    /**
     * @notice Allows a user to unstake a specified amount of the staking token.
     * @dev Unstakes tokens for msg.sender, adhering to the BaseStaking implementation and nonReentrancy guard.
     * @param amount Amount of the staking token to unstake.
     */
    function unstake(uint amount) public override nonReentrant{
         _unstake(amount,msg.sender);
    }    

   
}

// File: contracts/staking/IStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

// Modified version of https://docs.synthetix.io/contracts/source/interfaces/istakingrewards
interface IStaking {
    
    // Write

    function stake(uint256 amount) external;

    function unstake(uint256 amount) external;

    function claimReward() external;

    // Views

    function balanceOf(address account) external view returns (uint256);

    function earned(address account) external view returns (uint256);

    function getRewardForDuration() external view returns (uint256);

    function lastTimeRewardApplicable() external view returns (uint256);

    function rewardPerToken() external view returns (uint256);

    function totalSupply() external view returns (uint256);

   
}

// File: contracts/util/TimeLock.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";

/// @title Timelock contract
/// @author Challenge.GG
/// @dev The TimeLock contract is designed to enhance security and transparency of contract operations.  
/// This contract serves to enforce a mandatory delay (minDelay) on the execution of scheduled actions. 
/// Contract actions are scheduled by the admin role and can be cleared by the admin role or the contract role.
contract TimeLock  is AccessControl {

    bytes32 public constant CONTRACT_ROLE = keccak256("CONTRACT"); //CONTRACT role is required to increment ids
    
    uint public minDelay;
    mapping(bytes32 => uint) public timestampOf;

    /// Action scheduLed event
    event ActionScheduled(bytes32 indexed actionId, uint executionTime, string actionName, bytes data);

     /// @dev Restricted to members of the admin role.
    modifier onlyAdmin()
    {
        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Restricted to admins");
        _;
    }  

    /// @dev Restricted to members of the Contract role.
    modifier onlyContractOrAdmin()
    {
        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(CONTRACT_ROLE,  msg.sender), "Restricted to allowed contracts");
        _;
    }

    /// @dev Constructor
    /// @param delay Delay in seconds
    constructor(address multisigAdmin, uint delay) {        
        require(delay > 0, "Delay too short"); 
        minDelay = delay;
        _grantRole(DEFAULT_ADMIN_ROLE, multisigAdmin);
       _setRoleAdmin(CONTRACT_ROLE, DEFAULT_ADMIN_ROLE);
    }

    /// @dev Add an account to the Contract role. Restricted to admins.
    /// @param account Address to add
    function addContract(address account) external onlyAdmin
    {
        grantRole(CONTRACT_ROLE, account);
    }

    /// @dev Remove an account from the Contract role. Restricted to admins.
    /// @param account Address to remove
    function removeContract(address account) external onlyAdmin
    {
        revokeRole(CONTRACT_ROLE, account);
    }

    /// @dev Schedule an action to only be executed after the set delay
    /// @param actionName Name of the action
    /// @param parameters Parameters of the action
    /// @param initiator Address of the initiator
    /// @return actionId Id of the action
    function scheduleAction(string memory actionName, bytes memory parameters, address initiator) onlyAdmin external returns (bytes32) {
        bytes32 actionId = generateActionId(actionName, parameters, initiator);
        require(timestampOf[actionId] == 0, "Action already scheduled");
        uint executeAfter = block.timestamp + minDelay;
        timestampOf[actionId] = executeAfter;
        emit ActionScheduled(actionId, executeAfter, actionName, parameters);
        return actionId;
    }

    /// @dev Clear a scheduled action
    /// @param actionId Id of the action
    function clearAction(bytes32 actionId) onlyContractOrAdmin public {
        require(timestampOf[actionId] != 0, "Action not scheduled");
        require(block.timestamp >= timestampOf[actionId], "Action time not elapsed");
        timestampOf[actionId] = 0;
    }

    /// @dev Get the execution time of an action
    function getExecutionTime(bytes32 actionId) public view returns (uint) {
        return timestampOf[actionId];
    }

    /// @dev Get the id of an action
    /// @param actionName Name of the action
    /// @param parameters Parameters of the action
    /// @param initiator Address of the initiator
    /// @return actionId Id of the actio
    function generateActionId(string memory actionName, bytes memory parameters, address initiator) public pure returns (bytes32) {
        return keccak256(abi.encode(actionName, parameters, initiator));
    }
}
