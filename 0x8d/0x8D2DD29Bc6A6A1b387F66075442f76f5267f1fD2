
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/IPreSale.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface IpreSale{
    function getUserToken(address userAddress) external view returns (uint);
    function transferToStaking(uint amount) external returns(bool);
    function getEndTime() external view returns(uint);
}

// File: contracts/stakingTest.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "./IPreSale.sol";

contract DoggyAiStake is Ownable, ReentrancyGuard {
    IERC20 public stakingToken;
    uint256 public minStake = 10 * 10 ** 18;
    uint256 public stakePeriod;
    uint256 public totalStaked;
    uint public constantTotalFunds;
    uint public totalFund;
    uint public rewardRate;
    IpreSale preSaleData;

    event Staked(address indexed, uint256 amount);
    event Claimed(address indexed, uint256 amount);
    event Withdrawn(address indexed, uint256 amount);
    event PoolRefilled(
        address indexed,
        uint256 amount,
        uint256 newStakePeriod,
        uint256 amountMinStake
    );

    struct Stake {
        uint256 amount;
        uint256 startTime;
        uint256 lastClaimTimestamp;
    }
    struct RewardRateChange {
        uint256 timestamp;
        uint256 rewardRate;
        uint256 totalStaked;
    }

    RewardRateChange[]public rewardRateHistory;
    mapping(address => Stake[]) public stakes;
    mapping(address => uint256) public userTotalStaked;

    function _checkRewardRate() internal {
        if (totalStaked == 0) {
            rewardRate = (totalFund / stakePeriod) / (minStake / 1e18) ;
            rewardRateHistory.push(RewardRateChange({timestamp: block.timestamp + 1, rewardRate: rewardRate,totalStaked: minStake }));
        } else {
            rewardRate = (totalFund / stakePeriod) / (totalStaked / 1e18);
            rewardRateHistory.push(RewardRateChange({timestamp: block.timestamp + 1, rewardRate: rewardRate,totalStaked: totalStaked}));
        }
    }

    constructor(
        address DoggyAi,
        address initialOwner,
        uint256 _stakePeriod,
        uint amountToFill,
        uint _timestamp,
        address _preSaleData
    ) Ownable(initialOwner) {
        stakingToken = IERC20(DoggyAi);
        stakePeriod = _stakePeriod * 1 days;
        constantTotalFunds = amountToFill;
        totalFund = constantTotalFunds;
        rewardRate = ((totalFund /  stakePeriod) / (minStake / 1e18));
        preSaleData  =  IpreSale(_preSaleData);
        rewardRateHistory.push(RewardRateChange({timestamp: _timestamp, rewardRate: rewardRate, totalStaked: minStake }));
    }

    function getStakes(
        address user,
        uint stakesIndex
    ) public view returns (Stake memory) {
        return stakes[user][stakesIndex];
    }

    function setPresale(address _preSaleData) public onlyOwner{
        preSaleData = IpreSale(_preSaleData);
    }

    function calculateReward(
        address userAddress,
        uint256 stakeIndex
    ) public view returns (uint256) {
        Stake storage userStake = stakes[userAddress][stakeIndex];
        uint rewardSum;
        uint8 triger;
        for(uint i; i<rewardRateHistory.length; i++){
            unchecked{
                uint elapsedSeconds;
                if(rewardRateHistory[i].timestamp > userStake.lastClaimTimestamp){
                triger++;
                    if(triger == 1){
                    uint ternarResult = i == rewardRateHistory.length - 1? block.timestamp + 1: rewardRateHistory[i + 1].timestamp;
                    elapsedSeconds =  ternarResult - rewardRateHistory[i].timestamp;
                    uint rewardRateAct = (rewardRateHistory[i].rewardRate) * ((userStake.amount / (rewardRateHistory[i].totalStaked / 1e18))) / 1e18; 
                    rewardSum += (userStake.amount * elapsedSeconds * rewardRateAct) / 1e18;
                    } else if(i == rewardRateHistory.length - 1){
                    elapsedSeconds = block.timestamp + 1 - rewardRateHistory[i].timestamp;
                    uint rewardRateAct = (rewardRateHistory[i].rewardRate) * ((userStake.amount / (rewardRateHistory[i].totalStaked / 1e18))) / 1e18; 
                    rewardSum += (userStake.amount * elapsedSeconds * rewardRateAct) / 1e18;
                    } else {
                    elapsedSeconds = rewardRateHistory[i].timestamp - rewardRateHistory[i - 1].timestamp;
                    uint rewardRateAct = (rewardRateHistory[i].rewardRate) * ((userStake.amount / (rewardRateHistory[i].totalStaked / 1e18))) / 1e18; 
                    rewardSum += (userStake.amount * elapsedSeconds * rewardRateAct) / 1e18;
                    }
                }
            }
        }
        
    return rewardSum;
    }

    function getUserStakes(
        address userAddress
    ) external view returns (Stake[] memory userStakes) {
        return stakes[userAddress];
    }

    function setNewRewardToken(address newTokenAddress) external onlyOwner{
        stakingToken = IERC20(newTokenAddress);
    }
    
    function setStakers(address[] memory _stakerAddress, uint[] memory _amount, uint[] memory timestamp) public onlyOwner{
        require(_stakerAddress.length == _amount.length && _amount.length == timestamp.length, "All arrays length should be equal");
        for(uint i; i<_stakerAddress.length; i++){
            stakes[_stakerAddress[i]].push(Stake(_amount[i], timestamp[i], timestamp[i]));
            userTotalStaked[_stakerAddress[i]] += _amount[i];
            totalStaked += _amount[i];
            rewardRate = (totalFund / stakePeriod) / (totalStaked / 1e18);
            rewardRateHistory.push(RewardRateChange({timestamp: timestamp[i] + 1, rewardRate: rewardRate,totalStaked: totalStaked}));
        }
    }

    function transferPool() public onlyOwner{
        stakingToken.transfer(owner(), totalFund);
    }

    function stake(uint256 _amount) public {
        require(
            _amount >= minStake,
            "The amount must be greater than minimum 10 tokens"
        );
        require(
            preSaleData.transferToStaking(_amount),
            "Token transfer failed"
        );
        require(totalStaked + _amount <= totalFund, "You can't stake above than total fund");
        stakes[msg.sender].push(
            Stake(_amount, block.timestamp, block.timestamp)
        );
        totalStaked += _amount;
        userTotalStaked[msg.sender] += _amount;
        emit Staked(msg.sender, _amount);
        _checkRewardRate();
    }

    function calculatePoolPercentage() external view returns (uint256) {
        return (totalFund / constantTotalFunds) * 100;
    }

    function claimReward(uint256 stakeIndex) public {
        Stake storage userStake = stakes[msg.sender][stakeIndex];
        uint256 rewardAmount = calculateReward(msg.sender, stakeIndex);
        require(rewardAmount > 0, "No reward available");
        require(rewardAmount <= totalFund, "Not enough funds in contract");
        userStake.lastClaimTimestamp = block.timestamp;

        require(
            stakingToken.transfer(msg.sender, rewardAmount),
            "Token transfer failed"
        );
        totalFund -= rewardAmount;
        _checkRewardRate();
        emit Claimed(msg.sender, rewardAmount);
    }

    function claimAllRewards() external nonReentrant{
        require(block.timestamp >= preSaleData.getEndTime(), "Early claim is not allowed");
        Stake[] memory userStakes = stakes[msg.sender];
        for (uint256 i; i < userStakes.length; i++) {
            claimReward(i);
        }
    }

    function claimAndStake() public nonReentrant  {
        require(block.timestamp >= preSaleData.getEndTime(), "Early claim is not allowed");
        uint reward;
        for (uint256 i; i < stakes[msg.sender].length; i++) {
            reward += calculateReward(msg.sender, i);
            require(reward >= minStake, "Reward is too less to stake");
            require(reward > 0, "No reward available");
            require(
                totalStaked + reward <= totalFund,
                "Not enough funds in contract"
            );
        }
        stakes[msg.sender].push(
                Stake(reward, block.timestamp, block.timestamp)
            );
        totalFund -= reward;
        totalStaked += reward;
        userTotalStaked[msg.sender] += reward;
        _checkRewardRate();
    }

    function withdraw() public nonReentrant {
        require(block.timestamp >= preSaleData.getEndTime(), "Early claim is not allowed");
        Stake[] storage userStake = stakes[msg.sender];
        for (uint i; i < userStake.length; i++) {
            uint256 rewardAmount = calculateReward(msg.sender, i);
            require(
                stakingToken.transfer(
                    msg.sender,
                    userStake[i].amount + rewardAmount
                ),
                "Token transfer failed"
            );
            totalStaked -= userStake[i].amount;
            userTotalStaked[msg.sender] -= userStake[i].amount;
            totalFund -= rewardAmount;
            emit Withdrawn(msg.sender, userStake[i].amount + rewardAmount);
            delete stakes[msg.sender];
        }
        _checkRewardRate();
    }

    function refillPool(
        uint256 amountToRefill,
        uint256 newStakePeriod,
        uint256 newMinStake
    ) public onlyOwner {
        require(
            newStakePeriod > 0,
            "New stake period should be greater than 0"
        );
        require(amountToRefill > 0, "Amount to refill must be greater than 0");
        require(
            stakingToken.transferFrom(
                msg.sender,
                address(this),
                amountToRefill
            ),
            "Your transaction is not valid"
        );
        stakePeriod = newStakePeriod * 1 days;
        setMinStake(minStake);
        constantTotalFunds = amountToRefill + totalFund;
        totalFund = constantTotalFunds;
        _checkRewardRate();
        emit PoolRefilled(
            msg.sender,
            amountToRefill,
            newStakePeriod,
            newMinStake
        );

    }


    function setMinStake(uint256 newMinStake) public onlyOwner {
        minStake = newMinStake;
    }
}

