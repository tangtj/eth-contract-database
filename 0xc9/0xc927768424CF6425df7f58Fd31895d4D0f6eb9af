
// File: contracts/Dependencies/Base.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract Base {
    // --- Registered contracts ---

    enum Contract {
        ETHKey,
        ETHMI,
        Treasury
    }
}


// File: contracts/Registry.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./Dependencies/Base.sol";
import "./Dependencies/Ownable.sol";
import "./Interfaces/IRegistry.sol";

contract Registry is IRegistry, Ownable {
    // --- Data ---

    mapping(Base.Contract => address) private contracts;
    int256 counter = 0;

    // --- Constructor ---

    constructor() Ownable(msg.sender) {}

    // --- External Functions ---

    //This initializes the contract and locks in the system forever
    function setupContractAddress(Base.Contract name, address _addr)
        external
        override
        onlyOwner
    {
        //This locks contract after setting initial values
        require(counter < 3, "Contracts already registered");
        contracts[name] = _addr;
        counter += 1;
    }

    function getContractAddress(Base.Contract name)
        external
        view
        override
        returns (address)
    {
        return contracts[name];
    }
}


// File: contracts/Dependencies/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * Based on OpenZeppelin's Ownable contract:
 * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol
 *
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable {
  address private _owner;

  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );

  /**
   * @dev Initializes the contract setting the deployer as the initial owner.
   */
  constructor(address _address) {
    _owner = _address;
    emit OwnershipTransferred(address(0), _address);
  }

  /**
   * @dev Returns the address of the current owner.
   */
  function owner() public view returns (address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(isOwner(), "Ownable: caller is not the owner");
    _;
  }

  /**
   * @dev Returns true if the caller is the current owner.
   */
  function isOwner() public view returns (bool) {
    return msg.sender == _owner;
  }

  /**
   * @dev Leaves the contract without owner. It will not be possible to call
   * `onlyOwner` functions anymore.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   *
   * NOTE: This function is not safe, as it doesnâ€™t check owner is calling it.
   * Make sure you check it before calling it.
   */
  function _renounceOwnership() internal {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }
}


// File: contracts/Interfaces/IRegistry.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../Dependencies/Base.sol";

/**
 * @notice Manages contracts registry
 */
interface IRegistry {
  // --- Functions --

  function setupContractAddress(Base.Contract name, address _addr) external;

  function getContractAddress(Base.Contract name)
    external
    view
    returns (address);
}

// File: contracts/Treasury.sol
// SPDX-License-Identifier: MIT

import "./Dependencies/Context.sol";
import "./Dependencies/DSMath.sol";
import "./Interfaces/IETHKey.sol";
import "./Interfaces/IETHMicro.sol";
import "./Interfaces/IRegistry.sol";

pragma solidity ^0.8.0;

contract Treasury is Context, DSMath {
    uint256 private initializationCount;
    uint256 private excessETHKeySupply;

    IETHMicro public ethmi;
    IETHKey public ethKey;
    IRegistry public registry;

    constructor(uint256 excess) {
        initializationCount = 0;
        excessETHKeySupply = excess;
    }

    event Deposit(address indexed _from, uint256 _ethmi, uint256 _ethKey);

    event Withdrawl(address indexed _to, uint256 _ether);

    //Initialize initial addresses and then lock it forever
    function initializeContract(address ethmiAddress, address ethKeyAddress) external {
        require(
            initializationCount == 0,
            "Contract can only be initialized once"
        );

        //initialize ethmi contract
        ethmi = IETHMicro(ethmiAddress);

        //initialize ethKey contract
        ethKey = IETHKey(ethKeyAddress);

        initializationCount += 1;
    }

    function getExcessETHKey() external view returns (uint256){
        return excessETHKeySupply;
    }

    function deposit() external payable {
        uint256 tokenCount = (msg.value * 1000);

        uint256 depositTxFee = (tokenCount * 2) / 100;

        ethmi.mint(msg.sender, tokenCount, depositTxFee);

        if (excessETHKeySupply > 0) {
            uint256 tier1 = 85000000 ether;
            uint256 tier3 = 4;
            uint256 tier4 = 3;
            uint256 tier5 = 2;
            if (
                excessETHKeySupply <= 100000000 ether &&
                excessETHKeySupply > 15000000 ether
            ) {
                ethKey.mint(msg.sender, tokenCount + tier1, depositTxFee);
                excessETHKeySupply -= tier1;
            } else if (
                excessETHKeySupply <= 15000000 ether &&
                excessETHKeySupply > 10000000 ether
            ) {
                ethKey.mint(msg.sender, tokenCount * tier3, depositTxFee);
                excessETHKeySupply -= ((tokenCount * tier3) - tokenCount);
            } else if (
                excessETHKeySupply <= 10000000 ether &&
                excessETHKeySupply > 5000000 ether
            ) {
                ethKey.mint(msg.sender, tokenCount * tier4, depositTxFee);
                excessETHKeySupply -= ((tokenCount * tier4) - tokenCount);
            }
            else if (
                excessETHKeySupply <= 5000000 ether &&
                excessETHKeySupply > 0 ether
            ) {
                if (excessETHKeySupply >= ((tokenCount * tier5) - tokenCount)) {
                    ethKey.mint(msg.sender, tokenCount * tier5, depositTxFee);
                    excessETHKeySupply -= ((tokenCount * tier5) - tokenCount);
                } else {
                    ethKey.mint(msg.sender, tokenCount + excessETHKeySupply, depositTxFee);
                    excessETHKeySupply = 0;
                }
            }
        } else {
            ethKey.mint(msg.sender, tokenCount, depositTxFee);
        }

        emit Deposit(msg.sender, (tokenCount - depositTxFee), tokenCount);
    }

    function withdraw(uint256 amount) external {
        address payable sender = payable(msg.sender);

        require(
            ethmi.balanceOf(sender) >= amount,
            "Insufficient ETH Micro balance"
        );
        require(
            ethKey.balanceOf(sender) >= amount,
            "Insufficient ETH Key Balance"
        );

        ethmi.burn(sender, amount);
        ethKey.burn(sender, amount);

        sender.transfer(amount / 1000);

        emit Withdrawl(sender, (amount / 1000));
    }
}


// File: contracts/Dependencies/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: contracts/Dependencies/DSMath.sol
// SPDX-License-Identifier: GNU

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

pragma solidity >0.4.13;

contract DSMath {
    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require((z = x + y) >= x, "ds-math-add-overflow");
    }

    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");
    }

    uint256 constant WAD = 10**18;

    //rounds to zero if x*y < WAD / 2
    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = add(mul(x, y), WAD / 2) / WAD;
    }

    //rounds to zero if x*y < WAD / 2
    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = add(mul(x, WAD), y / 2) / y;
    }
}


// File: contracts/Interfaces/IETHKey.sol
// SPDX-License-Identifier: MIT

import "./IERC20.sol";

pragma solidity ^0.8.0;

interface IETHKey is IERC20 {
    // --- Events ---

    // --- Functions ---

    function mint(
        address _account,
        uint256 _amount,
        uint256 _mintFee
    ) external;

    function burn(address _account, uint256 _amount) external;

    function setRate(uint256 amount) external;
}


// File: contracts/Interfaces/IETHMicro.sol
// SPDX-License-Identifier: MIT

import "./IERC20.sol";

pragma solidity ^0.8.0;

interface IETHMicro is IERC20 {
    // --- Events ---

    // --- Functions ---

    function mint(
        address _account,
        uint256 _amount,
        uint256 _mintFee
    ) external;

    function burn(address _account, uint256 _amount) external;

    function transferRewards(address recipient, uint256 amount)
        external
        returns (bool);
}


// File: contracts/Interfaces/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: contracts/ETHMicro.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./Interfaces/IETHMicro.sol";
import "./Interfaces/IRegistry.sol";
import "./Interfaces/IETHKey.sol";
import "./Dependencies/DSMath.sol";
import "./Interfaces/ITreasury.sol";
import "./Dependencies/Context.sol";
import "./Dependencies/Base.sol";

pragma solidity ^0.8.0;

contract ETHMicro is IETHMicro, Context, DSMath {
    mapping(address => uint256) private _balances;
    mapping(address => uint256) private _reflectedBalances;
    mapping(address => uint256) private _rates;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    uint256 private globalRate;

    uint256 private initializationCount;

    IETHKey public ethKey;
    ITreasury public treasury;
    IRegistry public registry;

    string private _name = "ETH Micro";
    string private _symbol = "ETHMI";

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor() {
        initializationCount = 0;
        globalRate = 1 ether;
    }

    function initializeContract(address ethKeyAddress, address treasuryAddress) external {
        require(
            initializationCount == 0,
            "Contract can only be initialized once"
        );
        ethKey = IETHKey(ethKeyAddress);
        treasury = ITreasury(treasuryAddress);
        initializationCount += 1;
    }

    function mint(
        address account,
        uint256 amount,
        uint256 mintFee
    ) external override onlyTreasury {
        assert(account != address(0));
        _mint(account, amount, mintFee);
    }

    function burn(address account, uint256 amount)
        external
        override
        onlyTreasury
    {
        assert(account != address(0));
        _burn(account, amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function getRate(address account) public view returns (uint256) {
        if (account != address(ethKey) && account != address(this)) {
            return (globalRate - _rates[account]);
        } else {
            return 1 ether;
        }

    }


    function getGlobalRate() public view returns (uint256) {
        return globalRate;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        if (account == address(this) || account == address(ethKey)) {
            return _reflectedBalances[account];
        }
        return wmul(_balances[account], globalRate - _rates[account]);
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function transferRewards(address recipient, uint256 amount)
        public
        virtual
        override
        onlyETHKey
        returns (bool)
    {
        _transferRewards(address(ethKey), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(
            currentAllowance >= amount,
            "ERC20: transfer amount exceeds allowance"
        );
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender] + addedValue
        );
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(
            currentAllowance >= subtractedValue,
            "ERC20: decreased allowance below zero"
        );
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != sender, "ERC20: recipient cannot be the same as sender");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(
            _reflectedBalances[sender] >= amount,
            "ERC20: transfer amount exceeds balance"
        );

        uint256 senderRate = _rates[sender];
        uint256 recipientRate = _rates[recipient];
        if (recipientRate == 0 && _reflectedBalances[recipient] == 0) {
            recipientRate = globalRate - 1 ether;
        }

        uint256 contractBalance = _reflectedBalances[address(this)];
        uint256 ethKeyContractBalance = _reflectedBalances[address(ethKey)];

        uint256 txFee = amount / 160;
        uint256 microShare = (txFee / 100) * 60;
        uint256 keyShare = (txFee / 100) * 40;

        contractBalance += microShare;
        ethKeyContractBalance += keyShare;


        uint256 recipientBalance = _balances[recipient];
        uint256 senderBalance = _balances[sender];
        recipientBalance += (wdiv(( amount - txFee),(globalRate - recipientRate)));
        senderBalance -= wdiv(amount, (globalRate - senderRate));

        uint256 effectiveSupply = _totalSupply -
        contractBalance -
        ethKeyContractBalance - recipientBalance;

        if (senderBalance < effectiveSupply) {
            effectiveSupply -= senderBalance;
            globalRate +=  wdiv(microShare, effectiveSupply);
            recipientRate +=  wdiv(microShare, effectiveSupply);
            senderRate +=  wdiv(microShare, effectiveSupply);
        }


        ethKey.setRate(keyShare);
        _rates[sender] = senderRate;
        _rates[recipient] = recipientRate;


        _reflectedBalances[sender] -= amount;
        _balances[sender] = senderBalance;
        _balances[recipient] = recipientBalance;
        _reflectedBalances[recipient] += ((amount - txFee));
        _reflectedBalances[address(this)] = contractBalance;
        _reflectedBalances[address(ethKey)] = ethKeyContractBalance;

        emit Transfer(sender, recipient, amount);
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transferRewards(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 effectiveRate = globalRate - _rates[recipient];
        _balances[recipient] += wdiv(amount,effectiveRate);
        _reflectedBalances[recipient] += (amount);
        _reflectedBalances[sender] -= amount;
        
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(
        address account,
        uint256 amount,
        uint256 mintFee
    ) internal virtual {
        require(account != address(0), "ERC20: cannot mint to the zero address");
        require(amount != 0, "Cannot mint 0 tokens");

        uint256 userAmount = amount - mintFee;
        
        if (_rates[account] == 0 && _reflectedBalances[account] == 0) {
            _rates[account] = globalRate - 1 ether;
        }

        uint256 effectiveRate = globalRate - _rates[account];
        _balances[account] += wdiv(userAmount,effectiveRate);
            
        _reflectedBalances[account] += userAmount;

        _reflectedBalances[address(ethKey)] += mintFee;

        _totalSupply += amount;

        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        require(
            _reflectedBalances[account] >= amount,
            "ERC20: burn amount exceeds balance"
        );

        uint256 baseAmount;
        uint256 tempRate = _rates[account];
        uint256 tempGlobalRate = globalRate;

        if (tempRate <= (tempGlobalRate - 1 ether)) {
            baseAmount = wdiv(amount, (tempGlobalRate - tempRate));
        } else {
            baseAmount = amount;
            tempRate = tempGlobalRate - 1 ether;
        }

        _reflectedBalances[account] -= amount;
        _balances[account] -= baseAmount;

        _reflectedBalances[address(this)] -= (amount - baseAmount);
        _totalSupply -= amount;

        if (_balances[account] == 0) {
            _rates[account] = globalRate - 1 ether;
        } else {
            _rates[account] = tempRate;
        }

        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Ensure that msg.sender === Treasury contract address.
     */
    modifier onlyTreasury() {
        require(msg.sender == address(treasury), "Access Denied");
        _;
    }

    /**
     * @dev Ensure that msg.sender === ETHKey contract address.
     */
    modifier onlyETHKey() {
        require(msg.sender == address(ethKey), "Access Denied");
        _;
    }
}


// File: contracts/Interfaces/ITreasury.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the Treasury Contract
 */
interface ITreasury {
    function deposit() payable external;

    function withdraw(uint amount) payable external;
}

// File: contracts/ETHKey.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./Interfaces/IETHKey.sol";
import "./Interfaces/ITreasury.sol";
import "./Interfaces/IRegistry.sol";
import "./Interfaces/IETHMicro.sol";
import "./Dependencies/Context.sol";
import "./Dependencies/DSMath.sol";
import "./Dependencies/Base.sol";

pragma solidity ^0.8.0;

contract ETHKey is IETHKey, Context, DSMath {
    mapping(address => uint256) private _balances;
    mapping(address => uint256) private _rates;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    string private _name = "ETH Key";
    string private _symbol = "ETHKEY";

    uint256 private globalRate;
    int256 private initializationCount;

    IETHMicro public ethmi;
    IRegistry public registry;
    ITreasury public treasury;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor() {
        globalRate = 0;
        initializationCount = 0;
    }

    function initializeContract(address ethmiAddress, address treasuryAddress) external {
        require(
            initializationCount == 0,
            "Contract can only be initialized once"
        );
        ethmi = IETHMicro(ethmiAddress);
        treasury = ITreasury(treasuryAddress);
        initializationCount += 1;
    }

    function mint(
        address account,
        uint256 amount,
        uint256 mintFee
    ) external override onlyTreasury {
        assert(account != address(0));

        _mint(account, amount, mintFee);
        emit Transfer(address(0), account, amount);
    }

    function burn(address account, uint256 amount)
        external
        override
        onlyTreasury
    {
        assert(account != address(0));
        _burn(account, amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function getRate(address account) public view returns (uint256) {
        return (globalRate - _rates[account]);
    }

    function setRate(uint256 amount) public override onlyETHMI {
        _setRate(amount);
    }

    function getRewardsBalance(address account) public view returns (uint256) {
        return wmul(_balances[account], (globalRate - _rates[account]));
    }

    function getGlobalRate() public view returns (uint256) {
        return globalRate;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(
            currentAllowance >= amount,
            "ERC20: transfer amount exceeds allowance"
        );
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender] + addedValue
        );
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(
            currentAllowance >= subtractedValue,
            "ERC20: decreased allowance below zero"
        );
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev sets new globalRate with `amount`.
     *
     * This internal function is used to set the global rate
     *
     *
     * Requirements:
     *
     * - `amount` must be positive.
     */
    function _setRate(uint256 amount) internal virtual {
        (globalRate += wdiv(amount, _totalSupply));
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != sender, "ERC20: recipient cannot be the same as sender");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(
            senderBalance >= amount,
            "ERC20: transfer amount exceeds balance"
        );


        if (_rates[recipient] == 0 && _balances[recipient] == 0) {
            _rates[recipient] = globalRate;
        }

        uint256 senderEffectiveRate = (globalRate - _rates[sender]);
        uint256 recipientBalance = _balances[recipient];
        uint256 senderRewards = wmul(senderEffectiveRate, amount);

        uint256 effectiveSupply;
        uint256 senderReceiverBalances = senderBalance + recipientBalance;
        uint256 capitalAdjustment;

        //If the receiver and sender are the only holders of ETHKey
        //Then we dont move any rates and just burn the rewards
        if (senderReceiverBalances >= _totalSupply) {
            effectiveSupply = 0;
            capitalAdjustment = 0;
        } else {
            effectiveSupply = _totalSupply - senderReceiverBalances;
            capitalAdjustment = wdiv(senderRewards, effectiveSupply);
        }

        _balances[recipient] += amount;
        _balances[sender] -= amount;

        globalRate += capitalAdjustment;
        _rates[recipient] += capitalAdjustment;

        if (_balances[sender] != 0) {
            _rates[sender] += capitalAdjustment;
        } else {
            _rates[sender] = globalRate;
        }

        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(
        address account,
        uint256 amount,
        uint256 mintFee
    ) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");
        require(amount != 0, "You cannot mint 0 tokens");

        uint256 accountBalance = _balances[account];
        if (_rates[account] == 0 && accountBalance == 0) {
            _rates[account] = globalRate;
        }

        uint256 capitalAdjustment;
        uint256 tempGlobalRate = globalRate;



        uint256 effectiveRate = tempGlobalRate - _rates[account];
        uint256 effectiveSupply = _totalSupply - accountBalance;
        uint256 rewards = wmul(accountBalance, effectiveRate);

        if (effectiveSupply != 0) {
            capitalAdjustment = wdiv((mintFee), effectiveSupply);
        } else {
            if (_totalSupply == 0) {
                capitalAdjustment = wdiv((mintFee), amount);
            } else {
                capitalAdjustment= wdiv((mintFee), _totalSupply);
            }
        }
        
        tempGlobalRate += capitalAdjustment;
        accountBalance += amount;

        if (rewards != 0) {
            _rates[account] = tempGlobalRate - wdiv(rewards, accountBalance);
        } else {
            _rates[account] = tempGlobalRate;
        }

        _totalSupply += (amount);
        _balances[account] = (accountBalance);
        globalRate = tempGlobalRate;

        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        require(
            _balances[account] >= amount,
            "ERC20: burn amount exceeds balance"
        );

        //Temporary variables for rates and rewards amounts
        uint256 tempGlobalRate = globalRate;
        uint256 tempRate = _rates[account];
        uint256 effectiveRate = tempGlobalRate - tempRate;
        uint256 effectiveRewardsAmount = wmul(amount, effectiveRate);

        //Update balances
        _balances[account] -= amount;
        _totalSupply -= amount;

        //figure redemption fee, get effective supply and figure capital adjustment
        uint256 redemptionFee = (effectiveRewardsAmount / 10);
        uint256 effectiveSupply = (_totalSupply - _balances[account]);
        uint256 capitalAdjustment;
        if (effectiveSupply != 0) {
            capitalAdjustment = wdiv(redemptionFee, effectiveSupply);
        } else {
            capitalAdjustment = 0;
        }

        //Update global rate by capital adjustment to distribute rewards
        tempGlobalRate += capitalAdjustment;


        //If the account balance is over 0 then update their rate accordingly to keep their same effective rate
        //If it is 0 then reset their effective rate to 0
        if (_balances[account] != 0) {
            _rates[account] += capitalAdjustment;
        } else {
            _rates[account] = tempGlobalRate;
        }

        globalRate = tempGlobalRate;
        //Finally transfer out the rewards
        ethmi.transferRewards(account, (effectiveRewardsAmount - redemptionFee));

        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Ensure that msg.sender === Treasury contract address.
     */
    modifier onlyTreasury() {
        require(msg.sender == address(treasury), "Access Denied");
        _;
    }

    /**
     * @dev Ensure that msg.sender === ETHMI contract address.
     */
    modifier onlyETHMI() {
        require(msg.sender == address(ethmi), "Access Denied");
        _;
    }
}

