
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
        external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success,) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage)
        internal
        returns (bytes memory)
    {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage)
        internal
        returns (bytes memory)
    {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage)
        internal
        view
        returns (bytes memory)
    {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage)
        internal
        returns (bytes memory)
    {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage)
        internal
        pure
        returns (bytes memory)
    {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.0;

import "../Strings.sol";

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        } else if (error == RecoverError.InvalidSignatureV) {
            revert("ECDSA: invalid signature 'v' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {
        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
        uint8 v = uint8((uint256(vs) >> 255) + 27);
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }
        if (v != 27 && v != 28) {
            return (address(0), RecoverError.InvalidSignatureV);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from `s`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: contracts/BKBridgeAccess.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

import '@openzeppelin/contracts/access/Ownable.sol';
import '@openzeppelin/contracts/security/Pausable.sol';
import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '@openzeppelin/contracts/security/ReentrancyGuard.sol';
import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';
import './libs/TransferHelper.sol';
import './interfaces/IBKBridgeAccess.sol';
import './interfaces/IBKBridgeErrors.sol';

contract BKBridgeAccess is IBKBridgeAccess, IBKBridgeErrors, Ownable, Pausable, ReentrancyGuard {
    using ECDSA for bytes32;
    using SafeERC20 for IERC20;

    address public safe;
    address public operator;
    address public signer;
    address public vault;
    address public vaultToken;
    mapping(address => bool) public isRelayer;
    mapping(address => bool) public isRouter;
    mapping(uint256 => uint256) private nonceBitmap;

    event RescueETH(address recipient, uint256 amount);
    event RescueERC20(address asset, address recipient, uint256 amount);
    event SetSafe(address newSafe);
    event SetOperator(address newOperator);
    event SetSigner(address newSigner);
    event SetVault(address newVault);
    event SetVaultToken(address newValutToken);
    event SetRelayers(address[] relayers, bool isTrue);
    event SetRouters(address[] routers, bool isTrue);

    modifier onlyOperator() {
        _checkOperator();
        _;
    }

    modifier onlySender(address _orderSender) {
        _checkSender(_orderSender);
        _;
    }

    modifier onlyRelayer() {
        _checkRelayer();
        _;
    }

    function setAccess(AccessType _accessType, bytes calldata _inputs) external onlyOwner {
        if (_accessType > AccessType.SET_ROUTERS) {
            revert AccessTypeNotAvailable();
        }
        if (_accessType <= AccessType.SET_VAULT_TOKEN) {
            address addr = abi.decode(_inputs, (address));
            _checkZero(addr);

            if (_accessType == AccessType.SET_SAFE) {
                safe = addr;
                emit SetSafe(addr);
            } else if (_accessType == AccessType.SET_OPERATOR) {
                operator = addr;
                emit SetOperator(addr);
            } else if (_accessType == AccessType.SET_SINGER) {
                signer = addr;
                emit SetSigner(addr);
            } else if (_accessType == AccessType.SET_VAULT) {
                vault = addr;
                emit SetVault(addr);
            } else if (_accessType == AccessType.SET_VAULT_TOKEN) {
                vaultToken = addr;
                emit SetVaultToken(addr);
            }
        } else {
            (address[] memory addrs, bool isTrue) = abi.decode(_inputs, (address[], bool));

            bool isSetRelayer = _accessType == AccessType.SET_RELAYERS;
            uint256 length = addrs.length;
            for (uint256 i = 0; i < length;) {
                address addr = addrs[i];
                _checkZero(addr);

                if (isSetRelayer) {
                    isRelayer[addr] = isTrue;
                } else {
                    isRouter[addr] = isTrue;
                }
                unchecked {
                    ++i;
                }
            }
            if (isSetRelayer) {
                emit SetRelayers(addrs, isTrue);
            } else {
                emit SetRouters(addrs, isTrue);
            }
        }
    }

    function checkBridgeReady() external view returns (bool) {
        if (safe == address(0)) {
            revert NotSafe();
        } else if (operator == address(0)) {
            revert NotOperator();
        } else if (signer == address(0)) {
            revert NotSigner();
        } else if (vault == address(0)) {
            revert NotVault();
        } else if (vaultToken == address(0)) {
            revert NotVaultToken();
        }
        return true;
    }

    function pause() external onlyOperator {
        _pause();
    }

    function unpause() external onlyOperator {
        _unpause();
    }

    function rescueERC20(address asset) external onlyOperator {
        _checkZero(safe);
        uint256 amount = IERC20(asset).balanceOf(address(this));
        TransferHelper.safeTransfer(asset, safe, amount);
        emit RescueERC20(asset, safe, amount);
    }

    function rescueETH() external onlyOperator {
        _checkZero(safe);
        uint256 amount = address(this).balance;
        TransferHelper.safeTransferETH(safe, amount);
        emit RescueETH(safe, amount);
    }

    function _checkOperator() internal view {
        if (msg.sender != operator) {
            revert NotOperator();
        }
    }

    function _checkSender(address orderSender) internal view {
        if (msg.sender != orderSender) {
            revert NotSender();
        }
    }

    function _checkRelayer() internal view {
        if (!isRelayer[msg.sender]) {
            revert NotRelayer();
        }
    }

    function _checkZero(address _address) internal pure {
        if (_address == address(0)) {
            revert InvalidAddress();
        }
    }

    function _checkVaultToken(address _vaultToken) internal view {
        if (_vaultToken != vaultToken) {
            revert NotVaultToken();
        }
    }

    function _checkVaultReceiver(address _vaultReceiver) internal view {
        if (_vaultReceiver != vault) {
            revert NotVault();
        }
    }

    function _checkSwapReceiver(address _targetReceiver, address _swapReceiver) internal pure {
        if (_targetReceiver != _swapReceiver) {
            revert SwapReceiverMisMatch();
        }
    }

    function _checkRouter(address _router) internal view {
        if (!isRouter[_router]) {
            revert NotRouter();
        }
    }

    function _checkSigner(uint256 _nonce, bytes calldata _signature, bytes32 _transferId, uint256 _dstChainId) internal {
        _useUnorderedNonce(_nonce);

        bytes32 msgHash = keccak256(abi.encodePacked(_nonce, block.chainid, address(this), msg.sender, _transferId, _dstChainId));

        bytes32 finalMsgHash = msgHash.toEthSignedMessageHash();

        address signer_ = finalMsgHash.recover(_signature);

        if (signer_ != signer) {
            revert NotSigner();
        }
    }

    /// @notice Checks whether a nonce is taken and sets the bit at the bit position in the bitmap at the word position
    /// @param nonce The nonce to spend
    function _useUnorderedNonce(uint256 nonce) internal {
        (uint256 wordPos, uint256 bitPos) = bitmapPositions(nonce);
        uint256 bit = 1 << bitPos;
        uint256 flipped = nonceBitmap[wordPos] ^= bit;

        if (flipped & bit == 0) revert InvalidNonce();
    }

    /// @notice Returns the index of the bitmap and the bit position within the bitmap. Used for unordered nonces
    /// @param nonce The nonce to get the associated word and bit positions
    /// @return wordPos The word position or index into the nonceBitmap
    /// @return bitPos The bit position
    /// @dev The first 248 bits of the nonce value is the index of the desired bitmap
    /// @dev The last 8 bits of the nonce value is the position of the bit in the bitmap
    function bitmapPositions(uint256 nonce) internal pure returns (uint256 wordPos, uint256 bitPos) {
        wordPos = uint248(nonce >> 8);
        bitPos = uint8(nonce);
    }
}


// File: contracts/BKBridgeRouter.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

import './libs/BKBridgeHandler.sol';
import './interfaces/IBKBridgeRouter.sol';
import './BKBridgeAccess.sol';

contract BKBridgeRouter is IBKBridgeRouter, BKBridgeAccess {
    mapping(bytes32 => uint256) public orderStatus;
    mapping(bytes32 => uint256) public orderAmount;

    event BKBridge(
        uint256 indexed orderStatus,
        bytes32 indexed transferId,
        address vaultReceiver,
        address sender,
        address receiver,
        address srcToken,
        address dstToken,
        uint256 srcChainId,
        uint256 dstChainId,
        uint256 amount,
        uint256 timestamp
    );

    constructor(address _owner) BKBridgeAccess() {
        _checkZero(_owner);
        _transferOwnership(_owner);
    }

    receive() external payable {}

    function send(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo)
        external
        payable
        whenNotPaused
        nonReentrant
        onlySender(_orderInfo.sender)
    {
        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);
        _checkVaultReceiver(_orderInfo.vaultReceiver);
        _checkVaultToken(_orderInfo.srcToken);
        HandlerCallBack memory _callback = BKBridgeHandler.send(_orderInfo, orderStatus, orderAmount);
        _emitEvent(_orderInfo, _callback);
    }

    function sendV1(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, SwapV1Info calldata _swapV1Info)
        external
        payable
        whenNotPaused
        nonReentrant
        onlySender(_orderInfo.sender)
    {
        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);
        _checkVaultReceiver(_orderInfo.vaultReceiver);
        _checkVaultToken(_swapV1Info.path[_swapV1Info.path.length - 1]);
        _checkRouter(_swapV1Info.bkSwapV1Router);
        _checkSwapReceiver(vault, _swapV1Info.to);
        HandlerCallBack memory _callback = BKBridgeHandler.sendV1(_orderInfo, _swapV1Info, orderStatus, orderAmount);
        _emitEvent(_orderInfo, _callback);
    }

    function sendV2(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, SwapV2Info calldata _swapV2Info)
        external
        payable
        whenNotPaused
        nonReentrant
        onlySender(_orderInfo.sender)
    {
        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);
        _checkVaultReceiver(_orderInfo.vaultReceiver);
        _checkVaultToken(_swapV2Info.toTokenAddress);
        _checkRouter(_swapV2Info.bkSwapV2Router);
        _checkSwapReceiver(vault, _swapV2Info.to);
        HandlerCallBack memory _callback = BKBridgeHandler.sendV2(_orderInfo, _swapV2Info, orderStatus, orderAmount);
        _emitEvent(_orderInfo, _callback);
    }

    function relay(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, uint256 _relayAmount)
        external
        payable
        whenNotPaused
        nonReentrant
        onlyRelayer
    {
        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);
        _checkVaultReceiver(_orderInfo.vaultReceiver);
        _checkVaultToken(_orderInfo.dstToken);
        HandlerCallBack memory _callback = BKBridgeHandler.relay(_orderInfo, _relayAmount, orderStatus);
        _emitEvent(_orderInfo, _callback);
    }

    function relayV1(
        SignInfo calldata _signInfo,
        OrderInfo calldata _orderInfo,
        SwapV1Info calldata _swapV1Info,
        uint256 _relayAmount
    ) external payable whenNotPaused nonReentrant onlyRelayer {
        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);
        _checkVaultReceiver(_orderInfo.vaultReceiver);
        _checkVaultToken(_swapV1Info.path[0]);
        _checkRouter(_swapV1Info.bkSwapV1Router);
        _checkSwapReceiver(_orderInfo.receiver, _swapV1Info.to);
        HandlerCallBack memory _callback = BKBridgeHandler.relayV1(_orderInfo, _swapV1Info, _relayAmount, orderStatus);
        _emitEvent(_orderInfo, _callback);
    }

    function relayV2(
        SignInfo calldata _signInfo,
        OrderInfo calldata _orderInfo,
        SwapV2Info calldata _swapV2Info,
        uint256 _relayAmount
    ) external payable whenNotPaused nonReentrant onlyRelayer {
        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);
        _checkVaultReceiver(_orderInfo.vaultReceiver);
        _checkVaultToken(_swapV2Info.fromTokenAddress);
        _checkRouter(_swapV2Info.bkSwapV2Router);
        _checkSwapReceiver(_orderInfo.receiver, _swapV2Info.to);
        HandlerCallBack memory _callback = BKBridgeHandler.relayV2(_orderInfo, _swapV2Info, _relayAmount, orderStatus);
        _emitEvent(_orderInfo, _callback);
    }

    function cancel(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo)
        external
        payable
        whenNotPaused
        nonReentrant
        onlyRelayer
    {
        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);
        HandlerCallBack memory _callback = BKBridgeHandler.cancel(_orderInfo, orderStatus);
        _emitEvent(_orderInfo, _callback);
    }

    function refund(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, uint256 _refundAmount)
        external
        payable
        whenNotPaused
        nonReentrant
        onlyRelayer
    {
        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);
        HandlerCallBack memory _callback =
            BKBridgeHandler.refund(_orderInfo, _refundAmount, vaultToken, orderStatus, orderAmount);
        _emitEvent(_orderInfo, _callback);
    }

    function _emitEvent(OrderInfo calldata _orderInfo, HandlerCallBack memory _callback) internal {
        emit BKBridge(
            _callback.status,
            _orderInfo.transferId,
            _orderInfo.vaultReceiver,
            _orderInfo.sender,
            _orderInfo.receiver,
            _orderInfo.srcToken,
            _orderInfo.dstToken,
            block.chainid,
            _orderInfo.dstChainId,
            _callback.amount,
            _orderInfo.timestamp
        );
    }
}


// File: contracts/interfaces/IBKBridgeAccess.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

import {AccessType} from './IBKBridgeParams.sol';

interface IBKBridgeAccess {
    function setAccess(AccessType _accessType, bytes calldata _inputs) external;

    function checkBridgeReady() external view returns (bool);

    function pause() external;

    function unpause() external;

    function rescueETH() external;

    function rescueERC20(address asset) external;

    // function paused() external view returns(bool);

    // function transferOwnership(address newOwner) external;

    // function owner() external view returns(address);

    // function safe() external view returns(address);

    // function operator() external view returns(address);

    // function signer() external view returns(address);

    // function vault() external view returns(address);

    // function vaultToken() external view returns(address);

    // function isRelayer(address _addr) external view returns(bool);

    // function isRouter(address _addr) external view returns(bool);
}


// File: contracts/interfaces/IBKBridgeErrors.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

interface IBKBridgeErrors {
    error AccessTypeNotAvailable();
    error TransferFailed();
    error InvalidAddress();
    error InvalidNonce();
    error NotSafe();
    error NotOperator();
    error NotSigner();
    error NotVault();
    error NotVaultToken();
    error NotSender();
    error NotRelayer();
    error NotRouter();
    error OrderAlreadyExist();
    error OrderNotSend();
    error OrderAlreadySend();
    error EthBalanceNotEnough();
    error WrongVaultReceiveToken();
    error WrongRefundAmount();
    error WrongRelayAmount();
    error SwapInsuffenceOutPut();
    error SwapReceiverMisMatch();
}


// File: contracts/interfaces/IBKBridgeParams.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

enum AccessType {
    SET_SAFE,
    SET_OPERATOR,
    SET_SINGER,
    SET_VAULT,
    SET_VAULT_TOKEN,
    SET_RELAYERS,
    SET_ROUTERS
}

struct SignInfo {
    uint256 nonce;
    bytes signature;
}

struct OrderInfo {
    address vaultReceiver;
    bytes32 transferId;
    address sender;
    address receiver;
    address srcToken;
    address dstToken;
    uint256 srcChainId;
    uint256 dstChainId;
    uint256 amount;
    uint256 timestamp;
}

struct SwapV1Info {
    address bkSwapV1Router;
    address handlerAddress;
    address router;
    address[] path;
    uint24[] poolFee;
    uint256 amountIn;
    uint256 minAmountOut;
    address to;
}

struct SwapV2Info {
    address bkSwapV2Router;
    address fromTokenAddress;
    address toTokenAddress;
    address to;
    uint256 amountInTotal;
    uint256 minAmountOut;
    bytes data;
}

struct HandlerCallBack {
    uint256 amount;
    uint256 status;
}


// File: contracts/interfaces/IBKBridgeRouter.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

import {SignInfo, OrderInfo, SwapV1Info, SwapV2Info, HandlerCallBack} from './IBKBridgeParams.sol';

interface IBKBridgeRouter {
    function orderStatus(bytes32 _key) external view returns (uint256);
    function orderAmount(bytes32 _key) external view returns (uint256);

    function send(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo) external payable;

    function sendV1(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, SwapV1Info calldata _swapV1Info)
        external
        payable;

    function sendV2(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, SwapV2Info calldata _swapV2Info)
        external
        payable;

    function relay(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, uint256 _relayAmount) external payable;

    function relayV1(
        SignInfo calldata _signInfo,
        OrderInfo calldata _orderInfo,
        SwapV1Info calldata _swapV1Info,
        uint256 _relayAmount
    ) external payable;

    function relayV2(
        SignInfo calldata _signInfo,
        OrderInfo calldata _orderInfo,
        SwapV2Info calldata _swapV2Info,
        uint256 _relayAmount
    ) external payable;

    function cancel(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo) external payable;

    function refund(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, uint256 _refundAmount)
        external
        payable;
}


// File: contracts/interfaces/swap/IBKSwap.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.17;

interface IBKSwap {
    function swap(
        address payable _handlerAddress,
        address _router,
        address[] memory _path,
        uint24[] memory _poolFee,
        uint256 _amountIn,
        uint256 _minAmountOut,
        address _to
    ) external payable returns (uint256);
}


// File: contracts/interfaces/swap/IBKSwapRouter.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.17;

interface IBKSwapRouter {
    struct SwapParams {
        address fromTokenAddress;
        uint256 amountInTotal;
        bytes data;
    }

    function swap(SwapParams calldata swapParams) external payable;
}


// File: contracts/libs/BKBridgeHandler.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '../interfaces/swap/IBKSwap.sol';
import '../interfaces/swap/IBKSwapRouter.sol';
import './TransferHelper.sol';
import './BKBridgeKey.sol';
import '../interfaces/IBKBridgeErrors.sol';
import {OrderInfo, SignInfo, SwapV1Info, SwapV2Info, HandlerCallBack} from '../interfaces/IBKBridgeParams.sol';

library BKBridgeHandler {
    using SafeERC20 for IERC20;

    uint256 private constant _INEXIST = 0;
    uint256 private constant _SEND = 1;
    uint256 private constant _RELAY = 2;
    uint256 private constant _CANCEL = 3;
    uint256 private constant _REFUND = 4;

    function send(
        OrderInfo calldata _orderInfo,
        mapping(bytes32 => uint256) storage orderStatus,
        mapping(bytes32 => uint256) storage orderAmount
    ) external returns (HandlerCallBack memory callback) {
        bytes32 key = BKBridgeKey.keyOf(_orderInfo);
        if (orderStatus[key] != _INEXIST) {
            revert IBKBridgeErrors.OrderAlreadyExist();
        }

        IERC20 iVaultToken = IERC20(_orderInfo.srcToken);
        uint256 vaultBeforeBalance = iVaultToken.balanceOf(_orderInfo.vaultReceiver);

        orderAmount[key] = _orderInfo.amount;
        orderStatus[key] = _SEND;
        TransferHelper.safeTransferFrom(_orderInfo.srcToken, msg.sender, _orderInfo.vaultReceiver, _orderInfo.amount);

        if (iVaultToken.balanceOf(_orderInfo.vaultReceiver) - vaultBeforeBalance != _orderInfo.amount) {
            revert IBKBridgeErrors.WrongVaultReceiveToken();
        }

        callback.amount = _orderInfo.amount;
        callback.status = _SEND;
    }

    function sendV1(
        OrderInfo calldata _orderInfo,
        SwapV1Info calldata _swapV1Info,
        mapping(bytes32 => uint256) storage orderStatus,
        mapping(bytes32 => uint256) storage orderAmount
    ) external returns (HandlerCallBack memory callback) {
        address swapTokenOut = _swapV1Info.path[_swapV1Info.path.length - 1];
        bytes32 key = BKBridgeKey.keyOf(_orderInfo);
        if (orderStatus[key] != _INEXIST) {
            revert IBKBridgeErrors.OrderAlreadyExist();
        }

        IERC20 iSwapTokenOut = IERC20(swapTokenOut);
        uint256 vaultBeforeBalance = iSwapTokenOut.balanceOf(_orderInfo.vaultReceiver);

        orderStatus[key] = _SEND;
        _bridgeForSwapV1(_swapV1Info);

        uint256 valutTokenAmount = iSwapTokenOut.balanceOf(_orderInfo.vaultReceiver) - vaultBeforeBalance;
        if (valutTokenAmount < _swapV1Info.minAmountOut) {
            revert IBKBridgeErrors.WrongVaultReceiveToken();
        }

        orderAmount[key] = valutTokenAmount;

        callback.amount = valutTokenAmount;
        callback.status = _SEND;
    }

    function sendV2(
        OrderInfo calldata _orderInfo,
        SwapV2Info calldata _swapV2Info,
        mapping(bytes32 => uint256) storage orderStatus,
        mapping(bytes32 => uint256) storage orderAmount
    ) external returns (HandlerCallBack memory callback) {
        bytes32 key = BKBridgeKey.keyOf(_orderInfo);
        if (orderStatus[key] != _INEXIST) {
            revert IBKBridgeErrors.OrderAlreadyExist();
        }

        IERC20 iSwapTokenOut = IERC20(_swapV2Info.toTokenAddress);
        uint256 vaultBeforeBalance = iSwapTokenOut.balanceOf(_orderInfo.vaultReceiver);

        orderStatus[key] = _SEND;
        _bridgeForSwapV2(_swapV2Info);

        uint256 valutTokenAmount = iSwapTokenOut.balanceOf(_orderInfo.vaultReceiver) - vaultBeforeBalance;
        if (valutTokenAmount < _swapV2Info.minAmountOut) {
            revert IBKBridgeErrors.WrongVaultReceiveToken();
        }

        orderAmount[key] = valutTokenAmount;
        
        callback.amount = valutTokenAmount;
        callback.status = _SEND;
    }

    function relay(OrderInfo calldata _orderInfo, uint256 _relayAmount, mapping(bytes32 => uint256) storage orderStatus)
        external
        returns (HandlerCallBack memory callback)
    {
        bytes32 key = BKBridgeKey.keyOf(_orderInfo);
        if (orderStatus[key] != _INEXIST) {
            revert IBKBridgeErrors.OrderAlreadyExist();
        }
        IERC20 iVaultToken = IERC20(_orderInfo.dstToken);
        uint256 vaultBeforeBalance = iVaultToken.balanceOf(msg.sender);

        orderStatus[key] = _RELAY;
        TransferHelper.safeTransferFrom(_orderInfo.dstToken, msg.sender, _orderInfo.receiver, _relayAmount);
        if (vaultBeforeBalance - iVaultToken.balanceOf(msg.sender) != _relayAmount) {
            revert IBKBridgeErrors.WrongRelayAmount();
        }

        callback.amount = _relayAmount;
        callback.status = _RELAY;
    }

    function relayV1(
        OrderInfo calldata _orderInfo,
        SwapV1Info calldata _swapV1Info,
        uint256 _relayAmount,
        mapping(bytes32 => uint256) storage orderStatus
    ) external returns (HandlerCallBack memory callback) {
        address swapTokenIn = _swapV1Info.path[0];
        bytes32 key = BKBridgeKey.keyOf(_orderInfo);
        if (orderStatus[key] != _INEXIST) {
            revert IBKBridgeErrors.OrderAlreadyExist();
        }

        IERC20 iSwapTokenIn = IERC20(swapTokenIn);
        uint256 vaultBeforeBalance = iSwapTokenIn.balanceOf(msg.sender);

        address SwapTokenOutAddress = _swapV1Info.path[_swapV1Info.path.length - 1];
        uint256 receiverBeforeBalance; 
        if(TransferHelper.isETH(SwapTokenOutAddress)) {
            receiverBeforeBalance = _orderInfo.receiver.balance;
        } else {
            receiverBeforeBalance = IERC20(SwapTokenOutAddress).balanceOf(_orderInfo.receiver);
        }

        orderStatus[key] = _RELAY;
        _bridgeForSwapV1(_swapV1Info);

        uint256 valutTokenAmount = vaultBeforeBalance - iSwapTokenIn.balanceOf(msg.sender);
        if (_relayAmount != valutTokenAmount) {
            revert IBKBridgeErrors.WrongRelayAmount();
        }

        if(TransferHelper.isETH(SwapTokenOutAddress)) {
            if ((_orderInfo.receiver.balance - receiverBeforeBalance) < _swapV1Info.minAmountOut) {
                revert IBKBridgeErrors.SwapInsuffenceOutPut();
            } 
        } else {
            if ((IERC20(SwapTokenOutAddress).balanceOf(_orderInfo.receiver) - receiverBeforeBalance) < _swapV1Info.minAmountOut) {
                revert IBKBridgeErrors.SwapInsuffenceOutPut();
            } 
        }

        callback.amount = _relayAmount;
        callback.status = _RELAY;
    }

    function relayV2(
        OrderInfo calldata _orderInfo,
        SwapV2Info calldata _swapV2Info,
        uint256 _relayAmount,
        mapping(bytes32 => uint256) storage orderStatus
    ) external returns (HandlerCallBack memory callback) {
        bytes32 key = BKBridgeKey.keyOf(_orderInfo);
        if (orderStatus[key] != _INEXIST) {
            revert IBKBridgeErrors.OrderAlreadyExist();
        }

        IERC20 iSwapTokenIn = IERC20(_swapV2Info.fromTokenAddress);
        uint256 vaultBeforeBalance = iSwapTokenIn.balanceOf(msg.sender);

        address SwapTokenOutAddress = _swapV2Info.toTokenAddress;
        uint256 receiverBeforeBalance; 
        if(TransferHelper.isETH(SwapTokenOutAddress)) {
            receiverBeforeBalance = _orderInfo.receiver.balance;
        } else {
            receiverBeforeBalance = IERC20(SwapTokenOutAddress).balanceOf(_orderInfo.receiver);
        }
        
        orderStatus[key] = _RELAY;
        _bridgeForSwapV2(_swapV2Info);

        uint256 valutTokenAmount = vaultBeforeBalance - iSwapTokenIn.balanceOf(msg.sender);
        if (_relayAmount != valutTokenAmount) {
            revert IBKBridgeErrors.WrongRelayAmount();
        }

        if(TransferHelper.isETH(SwapTokenOutAddress)) {
            if ((_orderInfo.receiver.balance - receiverBeforeBalance) < _swapV2Info.minAmountOut) {
                revert IBKBridgeErrors.SwapInsuffenceOutPut();
            } 
        } else {
            if ((IERC20(SwapTokenOutAddress).balanceOf(_orderInfo.receiver) - receiverBeforeBalance) < _swapV2Info.minAmountOut) {
                revert IBKBridgeErrors.SwapInsuffenceOutPut();
            } 
        }

        callback.amount = _relayAmount;
        callback.status = _RELAY;
    }

    function cancel(OrderInfo calldata _orderInfo, mapping(bytes32 => uint256) storage orderStatus)
        external
        returns (HandlerCallBack memory callback)
    {
        bytes32 key = BKBridgeKey.keyOf(_orderInfo);
        if (orderStatus[key] != _INEXIST) {
            revert IBKBridgeErrors.OrderAlreadyExist();
        }

        orderStatus[key] = _CANCEL;
        callback.amount = 0;
        callback.status = _CANCEL;
    }

    function refund(
        OrderInfo calldata _orderInfo,
        uint256 _refundAmount,
        address _vaultToken,
        mapping(bytes32 => uint256) storage orderStatus,
        mapping(bytes32 => uint256) storage orderAmount
    ) external returns (HandlerCallBack memory callback) {
        bytes32 key = BKBridgeKey.keyOf(_orderInfo);
        if (orderStatus[key] != _SEND) {
            revert IBKBridgeErrors.OrderNotSend();
        }
        if (_refundAmount > orderAmount[key]) {
            revert IBKBridgeErrors.WrongRefundAmount();
        }
        orderAmount[key] = 0;
        orderStatus[key] = _REFUND;
        TransferHelper.safeTransferFrom(_vaultToken, msg.sender, _orderInfo.sender, _refundAmount);
        callback.amount = _refundAmount;
        callback.status = _REFUND;
    }

    function _bridgeForSwapV1(SwapV1Info calldata _swapV1Info) internal {
        address swapTokenIn = _swapV1Info.path[0];

        if (TransferHelper.isETH(swapTokenIn)) {
            if (msg.value < _swapV1Info.amountIn) {
                revert IBKBridgeErrors.EthBalanceNotEnough();
            }
        } else {
            TransferHelper.safeTransferFrom(swapTokenIn, msg.sender, address(this), _swapV1Info.amountIn);
            TransferHelper.approveMax(IERC20(swapTokenIn), _swapV1Info.bkSwapV1Router, _swapV1Info.amountIn);
        }

        IBKSwap(_swapV1Info.bkSwapV1Router).swap{value: msg.value}(
            payable(_swapV1Info.handlerAddress),
            _swapV1Info.router,
            _swapV1Info.path,
            _swapV1Info.poolFee,
            _swapV1Info.amountIn,
            _swapV1Info.minAmountOut,
            _swapV1Info.to
        );
    }

    function _bridgeForSwapV2(SwapV2Info calldata _swapV2Info) internal {
        address swapTokenIn = _swapV2Info.fromTokenAddress;
        if (TransferHelper.isETH(swapTokenIn)) {
            if (msg.value < _swapV2Info.amountInTotal) {
                revert IBKBridgeErrors.EthBalanceNotEnough();
            }
        } else {
            TransferHelper.safeTransferFrom(swapTokenIn, msg.sender, address(this), _swapV2Info.amountInTotal);
            TransferHelper.approveMax(IERC20(swapTokenIn), _swapV2Info.bkSwapV2Router, _swapV2Info.amountInTotal);
        }

        IBKSwapRouter(_swapV2Info.bkSwapV2Router).swap{value: msg.value}(
            IBKSwapRouter.SwapParams(_swapV2Info.fromTokenAddress, _swapV2Info.amountInTotal, _swapV2Info.data)
        );
    }
}


// File: contracts/libs/BKBridgeKey.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

import {OrderInfo} from '../interfaces/IBKBridgeParams.sol';

library BKBridgeKey {
    bytes16 internal constant BRIDGE_SALT0 = 'BitKeep bridge';
    bytes16 internal constant BRIDGE_SALT1 = 'Version 1.0.0';

    function keyOf(OrderInfo calldata _orderInfo) internal pure returns (bytes32 key) {
        key = keccak256(
            abi.encodePacked(
                _orderInfo.transferId,
                _orderInfo.vaultReceiver,
                _orderInfo.sender,
                _orderInfo.receiver,
                _orderInfo.srcToken,
                BRIDGE_SALT0,
                _orderInfo.dstToken,
                _orderInfo.srcChainId,
                _orderInfo.dstChainId,
                BRIDGE_SALT1,
                _orderInfo.amount,
                _orderInfo.timestamp
            )
        );
    }
}


// File: contracts/libs/TransferHelper.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.18;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';

library TransferHelper {
    using SafeERC20 for IERC20;

    /// @notice Transfers tokens from the targeted address to the given destination
    /// @notice Errors with 'STF' if transfer fails
    /// @param token The contract address of the token to be transferred
    /// @param from The originating address from which the tokens will be transferred
    /// @param to The destination address of the transfer
    /// @param value The amount to be transferred
    function safeTransferFrom(address token, address from, address to, uint256 value) internal {
        (bool success, bytes memory data) =
            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');
    }

    /// @notice Transfers tokens from msg.sender to a recipient
    /// @dev Errors with ST if transfer fails
    /// @param token The contract address of the token which will be transferred
    /// @param to The recipient of the transfer
    /// @param value The value of the transfer
    function safeTransfer(address token, address to, uint256 value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');
    }

    /// @notice Approves the stipulated contract to spend the given allowance in the given token
    /// @dev Errors with 'SA' if transfer fails
    /// @param token The contract address of the token to be approved
    /// @param to The target of the approval
    /// @param value The amount of the given token the target will be allowed to spend
    function safeApprove(address token, address to, uint256 value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');
    }

    /// @notice Transfers ETH to the recipient address
    /// @dev Fails with `STE`
    /// @param to The destination of the transfer
    /// @param value The value to be transferred
    function safeTransferETH(address to, uint256 value) internal {
        (bool success,) = to.call{value: value}(new bytes(0));
        require(success, 'STE');
    }

    function approveMax(IERC20 _token, address _spender, uint256 _amount) internal {
        uint256 allowance = _token.allowance(address(this), address(_spender));
        if (allowance < _amount) {
            if (allowance > 0) {
                _token.safeApprove(address(_spender), 0);
            }
            _token.safeApprove(address(_spender), type(uint256).max);
        }
    }

    function isETH(address _tokenAddress) internal pure returns (bool) {
        return (_tokenAddress == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)
            || (_tokenAddress == 0x0000000000000000000000000000000000000000);
    }
}

