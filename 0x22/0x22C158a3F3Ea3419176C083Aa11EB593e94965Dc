{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}"},"main.sol":{"content":"/* Quantum Cloak - QTC\r\n\r\nWebsite: http://www.quantumcloak.network/\r\nTelegram: https://t.me/Quantum_Cloak\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./ownable.sol\";\r\nimport \"./UniswapV2.sol\";\r\n\r\ncontract QuantumCloak is Context, IERC20, Ownable {\r\n\r\n    string private constant _name = \"Quantum Cloak\";\r\n    string private constant _symbol = \"QTC\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 180000000 * 10**_decimals;\r\n\r\n    mapping(address =\u003e uint256) private _balance;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e uint256) private _ExcludedWallets;\r\n\r\n    uint256 private constant onePercent = (_totalSupply)/100;\r\n    uint256 private constant minimumSwapAmount = onePercent/20;\r\n\r\n    uint256 private maxSwap = onePercent / 2;\r\n\r\n    uint256 public MaxTX = onePercent;\r\n    uint256 public MaxWallet = onePercent;\r\n\r\n    uint256 private InitialBlockNo;\r\n\r\n    uint256 public buyTax = 30;\r\n    uint256 public sellTax = 55;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public DevWallet;\r\n    address public OperationWallet;\r\n    address public MarketingWallet;\r\n\r\n    bool private launch = false;\r\n\r\n    constructor() {\r\n        DevWallet  = 0x8196AcA069A180069c39313F61C1C0c8E5B3039E; //58\r\n        OperationWallet = 0xF97bf6D3B02D1fC1Fa38835bf65268C3d0DedF39; //37\r\n        MarketingWallet = 0x01Ec1626933f684B931e750396dEe4e78014B199; //5\r\n\r\n        _balance[msg.sender] = _totalSupply;\r\n\r\n        _ExcludedWallets[msg.sender] = 1;\r\n        _ExcludedWallets[address(this)] = 1;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)public override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if(currentAllowance != type(uint256).max) { \r\n            require(\r\n                currentAllowance \u003e= amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function EnableTrading() external onlyOwner {\r\n        require(!launch,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        \r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        launch = true;\r\n        InitialBlockNo = block.number;\r\n    }\r\n\r\n    function _ExcludedWallet(address wallet, uint256 value) external onlyOwner {\r\n        _ExcludedWallets[wallet] = value;\r\n    }\r\n\r\n    function ChangeTaxWallet(address NewDevWallet, address NewOperationWallet, address NewMarketWallet) external onlyOwner {\r\n        DevWallet = NewDevWallet;\r\n        OperationWallet = NewOperationWallet;\r\n        MarketingWallet = NewMarketWallet;\r\n    }\r\n\r\n    function RemoveLimits() external onlyOwner {\r\n        MaxTX = _totalSupply;\r\n        MaxWallet = _totalSupply;\r\n    }\r\n\r\n    function EditTaxes(uint256 newBuyTax, uint256 newSellTax) external onlyOwner {\r\n        require(newBuyTax \u003c= buyTax \u0026\u0026 newSellTax \u003c= sellTax, \"Tax cannot be increased\");\r\n        buyTax = newBuyTax;\r\n        sellTax = newSellTax;\r\n    }\r\n\r\n    function ChangeSettings(uint256 newMaxWalletX10, uint256 newMaxTrxX10, uint256 newMaxSwapX10) external onlyOwner {\r\n        require(newMaxSwapX10 \u003c= 30, \"can\u0027t be more than 3%\");\r\n\r\n        MaxWallet = newMaxWalletX10*(onePercent/10); //type 10 if 1%\r\n        MaxTX = newMaxTrxX10*(onePercent/10);\r\n        maxSwap = newMaxSwapX10*(onePercent/10);\r\n    }\r\n\r\n    function _tokenTransfer(address from, address to, uint256 amount, uint256 _tax) private {\r\n        uint256 taxTokens = (amount * _tax) / 100;\r\n        uint256 transferAmount = amount - taxTokens;\r\n\r\n        _balance[from] = _balance[from] - amount;\r\n        _balance[to] = _balance[to] + transferAmount;\r\n        _balance[address(this)] = _balance[address(this)] + taxTokens;\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount \u003e 0, \"ERC20: no tokens transferred\");\r\n        uint256 _tax = 0;\r\n        if (_ExcludedWallets[from] == 0 \u0026\u0026 _ExcludedWallets[to] == 0)\r\n        {\r\n            require(launch, \"Trading not open\");\r\n            require(amount \u003c= MaxTX, \"MaxTx Enabled at launch\");\r\n            if (to != uniswapV2Pair \u0026\u0026 to != address(0xdead)) require(balanceOf(to) + amount \u003c= MaxWallet, \"MaxWallet Enabled at launch\");\r\n            if (block.number \u003c InitialBlockNo + 3) {\r\n                _tax = (from == uniswapV2Pair) ? 30 : 55;\r\n            } else {\r\n                if (from == uniswapV2Pair) {\r\n                    _tax = buyTax;\r\n                } else if (to == uniswapV2Pair) {\r\n                    uint256 tokensToSwap = balanceOf(address(this));\r\n                    if (tokensToSwap \u003e minimumSwapAmount) { \r\n                        uint256 mxSw = maxSwap;\r\n                        if (tokensToSwap \u003e amount) tokensToSwap = amount;\r\n                        if (tokensToSwap \u003e mxSw) tokensToSwap = mxSw;\r\n                        swapTokensForEth(tokensToSwap);\r\n                    }\r\n                    _tax = sellTax;\r\n                }\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount, _tax);\r\n    }\r\n\r\n    function RescueETH() external onlyOwner {\r\n        bool success;\r\n        (success, ) = owner().call{value: address(this).balance}(\"\");\r\n    } \r\n\r\n    function ManualSwap(uint256 percent) external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 amtswap = (percent*contractBalance)/100;\r\n        swapTokensForEth(amtswap);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        bool success;\r\n\r\n        uint256 devtax = address(this).balance *58/100;\r\n        uint256 operationtax = address(this).balance *37/100;\r\n        uint256 markettax = address(this).balance *5/100;\r\n\r\n        (success, ) = DevWallet.call{value: devtax}(\"\");\r\n        (success, ) = OperationWallet.call{value: operationtax}(\"\");\r\n        (success, ) =  MarketingWallet.call{value: markettax}(\"\");\r\n    }\r\n    receive() external payable {}\r\n}"},"ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}"},"UniswapV2.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}"}}