
// File: /contracts/SKYLAND.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.8.1;

import "./ROCK3SHIELD.sol";

/*

 ____  _          _                    _ 
/ ___|| | ___   _| |    __ _ _ __   __| |
\___ \| |/ / | | | |   / _` | '_ \ / _` |
 ___) |   <| |_| | |__| (_| | | | | (_| |
|____/|_|\_\\__, |_____\__,_|_| |_|\__,_|
            |___/                        
            
*/

contract SKYLAND is ROCK3SHIELD {

  constructor(string memory name_, string memory symbol_) ROCK3SHIELD(name_, symbol_) payable { 

      _decimals = 0;
      
   }

}


// File: /contracts/TokenSwapSimpleData.sol
// SPDX-License-Identifier: Gemini Foundation

/*
TTTTTT     k              SSS                
  TT       k k           S                   
  TT   ooo kk   eee nnn   SSS  w   w  aa ppp 
  TT   o o k k  e e n  n     S w w w a a p  p
  TT   ooo k  k ee  n  n SSSS   w w  aaa ppp 
                                         p   
                                         p   

*/


pragma solidity >=0.8.1;


import "@openzeppelin/contracts/token/ERC20/IERC20.sol";




///////////////////////// TOKENSWAP & PEERSALE  COMPLETE



contract TokenSwapSimpleData {

  uint256  public  _swapPrice = 10*59;
  address  public  _swapCurrency = address(0);
  uint256  _swapForSale = 0;

}


// File: /contracts/TokenSwapInterface.sol
// SPDX-License-Identifier: Gemini Foundation


/*
TTTTTT     k              SSS                
  TT       k k           S                   
  TT   ooo kk   eee nnn   SSS  w   w  aa ppp 
  TT   o o k k  e e n  n     S w w w a a p  p
  TT   ooo k  k ee  n  n SSSS   w w  aaa ppp 
                                         p   
                                         p   

*/

pragma solidity >=0.8.1;

import "./TokenSwapHEADER.sol";


interface TokenSwapInterface {

  /*
   Multi use parameterization

   tokenParam:    tokenId               snft,sqare
   amount:        price (value)         snft,sqare   (auction)
   sub:           multiwallet
  */

  // Passive
  function paws( address owner, uint256 tokenParam, uint256 amount, uint160 sub ) payable external  returns (bool);

  // Active
  function swap( address tokenAddress, uint256 tokenParam, uint256 amount, uint160 sub  ) external;

  // detect what we support
  function supportsInterface(bytes4 interfaceId) external view returns (bool);

  // Price for fast Selling
  function setSwap(uint256 tokenParam, address currency, uint256 price) external;
  function getSwaps(uint256 tokenParam) external view returns ( swapSet[] memory);
  function delSwap(uint256 tokenParam) external;

  // support for Multi Balance Module
  function transferBalance(address sender, address recipient, uint256 amount, uint160 sub  ) external  returns (bool);
  function availableBalances() external returns (uint256);

}


// File: /contracts/TokenSwapHEADER.sol
// SPDX-License-Identifier: Gemini Foundation



/*
TTTTTT     k              SSS                
  TT       k k           S                   
  TT   ooo kk   eee nnn   SSS  w   w  aa ppp 
  TT   o o k k  e e n  n     S w w w a a p  p
  TT   ooo k  k ee  n  n SSSS   w w  aaa ppp 
                                         p   
                                         p   

*/


pragma solidity >=0.8.1;

struct swapSet {
  address token;
  uint256 price;
}


// File: /contracts/TokenSwap.sol
// SPDX-License-Identifier: Gemini Foundation


/*
TTTTTT     k              SSS                
  TT       k k           S                   
  TT   ooo kk   eee nnn   SSS  w   w  aa ppp 
  TT   o o k k  e e n  n     S w w w a a p  p
  TT   ooo k  k ee  n  n SSSS   w w  aaa ppp 
                                         p   
                                         p   

*/


pragma solidity >=0.8.1;


import "./TokenSwapInterface.sol";


interface TokenSwap is TokenSwapInterface {

 

  // Passive
  function paws( address owner, uint256 tokenParam, uint256 amount, uint160 sub ) payable external  returns (bool);

  // Active
  function swap( address tokenAddress, uint256 tokenParam, uint256 amount, uint160 sub  ) external;


  // detect what we support
  function supportsInterface(bytes4 interfaceId) external view returns (bool);

  // Price for fast Selling
  function setSwap(uint256 tokenParam, address currency, uint256 price) external;
  function getSwaps(uint256 tokenParam) external view returns ( swapSet[] memory);
  function delSwap(uint256 tokenParam) external;

  // support for Multi Balance Module
  function transferBalance(address sender, address recipient, uint256 amount, uint160 sub  ) external  returns (bool);
  function availableBalances() external returns (uint256);


}


// File: /contracts/Shield3Stub.sol
// SPDX-License-Identifier: Gemini Foundation

/*
                                                                                
                                                                                
                                                                                
                           -                                                    
                           -@#+=:.  .-==:.                                      
                            :*@@@@@@#*--*%#-                                    
                     -#@@@@@@@@@@@@@@@@%-+%%#. +.                               
                       .:-=+---=++#@@@@@@#%%%# *#- ..                           
                     :-+*%%- *@@@@@%@@@@@@@@%%-### :+++=-:.                     
                 :#%@@@@*-  *@*   :+%@@@@@@@@%%%%#    .:-=====-                 
                 -%%@*:     +@*      -@@@@@@@@@%%:          :==                 
                 -%%-:+#*:   %@* .#=:.*@@@@@@@@@%+.         :+=                 
                 -%%*%*..+:   +@@+:-*%%%##***%@@@%.         :+=                 
                 -%%%+ -%: :+#%@@@@%=  ==:=+ #@@@@%+:       :*+                 
                 :#%+ :%#=%@@%*+=--:-. :@@@@*=*%@@@@@%+:    :*+                 
                 :#%. *%%%#-  :.   :-.  .=#@@@@@%@@@@@%%#:  -*+                 
                 :##  *%#- :*#:-+%@@= =@@@@@@@@@@@@@%....:  -#*                 
                 :##  -*  +%%*%%%@@-  =@@@@@@@@@@@@@@@+: :. -#*                 
                 .##.    :%%%%+ *%%     :---=@@@@@@@@@@+.@- +%+                 
                  *#-  +.:%%%+  *@#     :   @@@@@@@@@@% *#  %%-                 
                  -#* +#- *%%.  -%%.  -@#   +@@@@@@@@+  +  -@%                  
                   *#+###  *%.   *%#  @@@#.  .=+**+- :*.   %@=                  
                   :*####+  =-    %%%-@@@@@*.    -=*%@%   *@#                   
                    :*####- .     =%%%%@@@@@@#.  .*@@%   *@%                    
                     :**##*.*     .%%%%%%@%+@@@:   .=. .#@#                     
                      .+**#+#. +. :%%%##%%%:.%@-      =@@+                      
                        -**##.+##.*%%%- #%%= +-     -%@#.                       
                          -**########+  #%%.      -%@%-                         
                            -*#####*-  =*=     .+%@*:                           
                              :=***:        .=#%#=.                             
                                 :+##+-  :=#%#=:                                
                                    :=*###*=.                                   
                                       .:                                       
                                                                                
                                                                              
*/

pragma solidity ^0.8.0;


abstract contract Shield3Stub  {


  event Log(string _msg);

  mapping(uint => address)  delegateAddress;
  mapping(uint => address)  suggestedAddress;

  uint8 delegateCode = 0;



  function _getDelegate(uint code) internal view returns (address impl) {
    return delegateAddress[code];
  }

  function _setDelegate(uint code) internal {
        delegateAddress[code] = suggestedAddress[code];
  }

  function _suggestDelegate(uint code, address logic) internal {
        suggestedAddress[code] = logic;
  }

  function _getCode() internal pure virtual returns  (uint8) {
    return 10;
  }

  receive() external payable  {
  }

  fallback() external payable {
      address i = delegateAddress[_getCode()];
      
      require( i != address(0), "operator out of service");

      assembly {
          calldatacopy(0, 0, calldatasize())

          let result := delegatecall(gas(), i, 0, calldatasize(), 0, 0)

          switch result
            case  0 { /* error */
                let ptr := mload(0x40)
                let size := returndatasize()
                returndatacopy(ptr, 0, size)

                log1(ptr, size, 0x1eed3d85d210d6177e32a91b294b3cf81c04fa2dbc07efb90d69587c69075b78)
                revert(ptr, size)
            }
            default {
                returndatacopy(0, 0, returndatasize())
                return(0, returndatasize())
            }

      }

  }


}


// File: /contracts/Shield3.sol
// SPDX-License-Identifier: Gemini Foundation

/*
                                                                                
                                                                                
                                                                                
                           -                                                    
                           -@#+=:.  .-==:.                                      
                            :*@@@@@@#*--*%#-                                    
                     -#@@@@@@@@@@@@@@@@%-+%%#. +.                               
                       .:-=+---=++#@@@@@@#%%%# *#- ..                           
                     :-+*%%- *@@@@@%@@@@@@@@%%-### :+++=-:.                     
                 :#%@@@@*-  *@*   :+%@@@@@@@@%%%%#    .:-=====-                 
                 -%%@*:     +@*      -@@@@@@@@@%%:          :==                 
                 -%%-:+#*:   %@* .#=:.*@@@@@@@@@%+.         :+=                 
                 -%%*%*..+:   +@@+:-*%%%##***%@@@%.         :+=                 
                 -%%%+ -%: :+#%@@@@%=  ==:=+ #@@@@%+:       :*+                 
                 :#%+ :%#=%@@%*+=--:-. :@@@@*=*%@@@@@%+:    :*+                 
                 :#%. *%%%#-  :.   :-.  .=#@@@@@%@@@@@%%#:  -*+                 
                 :##  *%#- :*#:-+%@@= =@@@@@@@@@@@@@%....:  -#*                 
                 :##  -*  +%%*%%%@@-  =@@@@@@@@@@@@@@@+: :. -#*                 
                 .##.    :%%%%+ *%%     :---=@@@@@@@@@@+.@- +%+                 
                  *#-  +.:%%%+  *@#     :   @@@@@@@@@@% *#  %%-                 
                  -#* +#- *%%.  -%%.  -@#   +@@@@@@@@+  +  -@%                  
                   *#+###  *%.   *%#  @@@#.  .=+**+- :*.   %@=                  
                   :*####+  =-    %%%-@@@@@*.    -=*%@%   *@#                   
                    :*####- .     =%%%%@@@@@@#.  .*@@%   *@%                    
                     :**##*.*     .%%%%%%@%+@@@:   .=. .#@#                     
                      .+**#+#. +. :%%%##%%%:.%@-      =@@+                      
                        -**##.+##.*%%%- #%%= +-     -%@#.                       
                          -**########+  #%%.      -%@%-                         
                            -*#####*-  =*=     .+%@*:                           
                              :=***:        .=#%#=.                             
                                 :+##+-  :=#%#=:                                
                                    :=*###*=.                                   
                                       .:                                       
                                                                                
                                                                              
*/


pragma solidity >=0.8.1;

import "./AxxessControl3.sol";
import "./Shield3Stub.sol";

// MEMORY:   Shield3Stub | AxxessControl3Data | 

abstract contract Shield3 is Shield3Stub, AxxessControl3  {


    constructor() payable AxxessControl3() {}

    modifier ifAdmin() {
        if (msg.sender == _admin()) {
            _;
        } else {
            emit Log("no admin");
        }
    }
    modifier ifOperator() {
        if (msg.sender == _operator()) {
            _;
        } else {
            emit Log("no operator");
        }
    }
    modifier ifMaster() {
        if (msg.sender == _master()) {
            _;
        } else {
            emit Log("no master"); 
        }
    }

    function authorize(uint code) public ifMaster {
        emit Log("Authorized.");
        _setDelegate(code);
    }

    function authorized(uint code) public  view returns (address logic)  {
        return _getDelegate(code);
    }

    function register(uint code, address logic ) public ifOperator {
        emit Log("Registered.");
        _suggestDelegate(code, logic);
    }

}


// File: /contracts/ROCK3SHIELD.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.8.1;


/*

              ,----..                     ,--.  .--,-``-.    
,-.----.     /   /   \    ,----..     ,--/  /| /   /     '.  
\    /  \   /   .     :  /   /   \ ,---,': / '/ ../        ; 
;   :    \ .   /   ;.  \|   :     ::   : '/ / \ ``\  .`-    '
|   | .\ :.   ;   /  ` ;.   |  ;. /|   '   ,   \___\/   \   :
.   : |: |;   |  ; \ ; |.   ; /--` '   |  /         \   :   |
|   |  \ :|   :  | ; | ';   | ;    |   ;  ;         /  /   / 
|   : .  /.   |  ' ' ' :|   : |    :   '   \        \  \   \ 
;   | |  \'   ;  \; /  |.   | '___ |   |    '   ___ /   :   |
|   | ;\  \\   \  ',  / '   ; : .'|'   : |.  \ /   /\   /   :
:   ' | \.' ;   :    /  '   | '/  :|   | '_\.'/ ,,/  ',-    .
:   : :-'    \   \ .'   |   :    / '   : |    \ ''\        ; 
|   |.'       `---`      \   \ .'  ;   |,'     \   \     .'  
`---'                     `---`    '---'        `--`-,,-'    

*/


// Interfaces
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

// Gemini Shield Implementation
import "./Shield3.sol";

// Enums
import "./ROCK3ENUM.sol";

// Data
import "./TokenSwapSimpleData.sol";
import "./AddressTree3Data.sol";

import "./ROCK3DATA.sol";

// Interfaces
import "./TokenSwap.sol";
import "./DigInterface.sol";
import "./ROCK3INTERFACE.sol";
import "./MiniERC20.sol";

import "./Context2.sol";

//                      Shield3 is Shield3Stub, AxxessControl3Helper 
//                                              AxxessControl3Helper is AxxessControl3Data 

contract ROCK3SHIELD is Shield3,  /* */   AddressTree3Data, TokenSwapSimpleData, ROCK3DATA, ROCK3INTERFACE, Context2 {


    constructor(string memory name_, string memory symbol_) Shield3() ROCK3DATA(name_, symbol_) AddressTree3Data() { 
            delegateCode = 10;
    }



    /* Basic ERC 20 Meta Functionality */


    function name() public view override returns (string memory) {
      return _name;
    }
    function symbol() public view override returns (string memory) {
      return _symbol;
    }

    function decimals() public view override returns (uint8) {
      return _decimals;
    }


    function totalSupply() public view override returns (uint256) {
      return _totalSupplyERC20 + _totalSupplyBlocked;
    }


    function balanceOf(address account) public  view returns (uint256) {
    if (r[account].b[uint8(Balance.isNoticed)] > 0) {
      return r[account].b[uint8(Balance.erc20)];
    }
    return 0;
    }






    ////////// Gemini's Real Time Provisioning Implementation  - helpers ///////////////////////////


    function hasDig(address sender) public view  returns (bool) {
     return r[sender].dCount>0;
    }


    function getPrice() public  view returns ( uint256 price, address currency, uint8 decimal, uint256 forSale) {
     return (
       _digPrice,
       _digCurrency,
       _digDecimals,
       _digForSale
     );
    }



    ////////// Gemini's SelfStaking / Rocking Implementation  - helpers ///////////////////////////


    function getAPY() public  view returns (uint256) {
       return _apy;
    }

    function getAPY( uint256 now_ ) public   view returns (uint256 rate, uint256 from, uint256 till, bool valid ) {
      uint256 _apyTillDate = _apySetDate + _apyValid;
      return (
        _apy,
        _apySetDate,
        _apyTillDate,
        now_ >= _apyTillDate
      );
    }






    ////////// ISD's  ROCK Implementation - specific helpers ///////////////////////////


    function deployedBy() public pure returns (string memory) {
        return "Interactive Software Development LLC";
    }


    function getTimeStamp() public view  returns (uint256) {
        return block.timestamp;
    }


    function totalFlow(address currency) public view  returns (uint) {
        return _totalFlow[currency];
    }
    function totalBalance() public view  returns (uint256) {
        return (payable(address(this))).balance;
    }


    function isProtected(address account) public view  returns (bool) {
      if (r[account].b[uint8(Balance.isNoticed)] > 0) {
        return r[account].b[uint8(Balance.protected)] != 0;
      }
      return false;
    }


      function totals() public view   returns (uint256 [5] memory) {
          return [
          _totalSupplyERC20,
          _totalSupplyBlocked,
          _totalSummarized,
          _totalSummarizedAPY,
          _totalDigged
        ];
      }

      function notice(address account, bool f) internal {
        RockEntry storage rm = r[ account ];
        if (rm.b[uint8(Balance.isNoticed)] == 0) {
          rm.b[uint8(Balance.isNoticed)] = block.timestamp;
          if (f == true) {
            balancedAddress.push(account);
          }
        }
      }

      function balancesOf( address account) public view  returns (uint256 [16] memory b) {

        for (uint8 i =0; i< 16; i++) {

          // member or naked => if protected, we do not show these values
          if (r[account].b[uint8(Balance.protected)]>0 && msg.sender != account) {
            if (  i >= uint8(Balance.blocked) && i <= uint8(Balance.blocked)+6 ) {
                // keep balance zero
                continue;
            }
          }

          // regged member
          if (mExists[account] == true){
            b[i] = r[account].b[i];
            continue;
          }

          // naked
          if ( i == uint8(Balance.erc20)
            || i == uint8(Balance.blocked) ) {
              b[i] = r[account].b[i];
              continue;
            }
        }

        return b;
      }


     function getFee() public  view returns (uint256 fee, uint96 unit){
       return ( _rockFee, _rockFeeUnit); // ETHEREUM
     }

     function lastBlockingOf(address account) public  view returns (uint256) {
       if (r[account].b[uint8(Balance.isNoticed)] > 0) {
         if (r[account].b[uint8(Balance.protected)]==0 || msg.sender == account) {
           uint256 r = r[account].b[uint8(Balance.blocked)+6];
           return r;
         }
       }
       return block.timestamp;
     }




    ////////// OpenZeppelin's ERC20 Implementation ///////////////////////////


    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public override view returns (uint256) {
        if (block.timestamp - r[owner].allowancesTime[spender] > _maxAllowanceTime) {
          return 0;
        }
        return r[owner].allowances[spender];
    }

    function approve(address spender, uint256 amount) public virtual returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }



    function transferFrom(        address sender,        address recipient,        uint256 amount    ) public override returns (bool) {
        _transfer(sender, recipient, amount);

        require(block.timestamp - r[sender].allowancesTime[_msgSender()] <= _maxAllowanceTime, "eRC20: transfer amount exceeds allowance time");

        uint256 currentAllowance = r[sender].allowances[_msgSender()];
        require(currentAllowance >= amount, "eRC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }


    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {
        _approve(_msgSender(), spender, r[_msgSender()].allowances[spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {
        uint256 currentAllowance = r[_msgSender()].allowances[spender];
        require(currentAllowance >= subtractedValue, "XRC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }



    function _transfer(        address sender,        address recipient,        uint256 amount    ) internal virtual {
        require(sender != address(0), "IERC20: transfer from the zero address");
        require(recipient != address(0), "IERC20: transfer to the zero address");

        //      _beforeTokenTransfer(sender, recipient, amount);
        require(block.timestamp > r[sender].b[uint8(Balance.locked)], "eRC20: transfer locked ");

        uint256 senderBalance = r[sender].b[uint8(Balance.erc20)];
        require(senderBalance >= amount, "IERC20: transfer amount exceeds balance");
        unchecked {
            r[sender].b[uint8(Balance.erc20)] = senderBalance - amount;
        }


        /* WARNING: notice() registers balance for new unseen addresses */
        notice(recipient, true); // rescue relevant

        r[recipient].b[uint8(Balance.erc20)] += amount;

        emit Transfer(sender, recipient, amount);

       //      _afterTokenTransfer(sender, recipient, amount);
    }



    function _approve(        address owner,        address spender,        uint256 amount    ) internal virtual {
        require(owner != address(0), "eRC20: approve from the zero address");
        require(spender != address(0), "eRC20: approve to the zero address");

        r[owner].allowancesTime[spender] = block.timestamp;
        r[owner].allowances[spender] = amount;
        emit Approval(owner, spender, amount);
    }





  }


// File: /contracts/ROCK3INTERFACE.sol
// SPDX-License-Identifier: MIT


pragma solidity ^0.8.0;

import "./ROCK3HEADER.sol";


/*

              ,----..                     ,--.  .--,-``-.    
,-.----.     /   /   \    ,----..     ,--/  /| /   /     '.  
\    /  \   /   .     :  /   /   \ ,---,': / '/ ../        ; 
;   :    \ .   /   ;.  \|   :     ::   : '/ / \ ``\  .`-    '
|   | .\ :.   ;   /  ` ;.   |  ;. /|   '   ,   \___\/   \   :
.   : |: |;   |  ; \ ; |.   ; /--` '   |  /         \   :   |
|   |  \ :|   :  | ; | ';   | ;    |   ;  ;         /  /   / 
|   : .  /.   |  ' ' ' :|   : |    :   '   \        \  \   \ 
;   | |  \'   ;  \; /  |.   | '___ |   |    '   ___ /   :   |
|   | ;\  \\   \  ',  / '   ; : .'|'   : |.  \ /   /\   /   :
:   ' | \.' ;   :    /  '   | '/  :|   | '_\.'/ ,,/  ',-    .
:   : :-'    \   \ .'   |   :    / '   : |    \ ''\        ; 
|   |.'       `---`      \   \ .'  ;   |,'     \   \     .'  
`---'                     `---`    '---'        `--`-,,-'    

*/


interface ROCK3INTERFACE  {


  function name() external view  returns (string memory) ;
  function symbol() external view  returns (string memory) ;
  function decimals() external view  returns (uint8) ;
  function totalSupply() external view returns (uint256) ;
  function balanceOf(address account) external view returns (uint256) ;

  function transfer(address recipient, uint256 amount) external returns (bool) ;
  function allowance(address owner, address spender) external view returns (uint256) ;

  function approve(address spender, uint256 amount) external returns (bool) ;
  function transferFrom( address sender, address recipient,       uint256 amount   ) external returns (bool) ;
  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) ;
  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) ;




}


// File: /contracts/ROCK3HEADER.sol
// SPDX-License-Identifier: MIT

// 1795284 gas

pragma solidity ^0.8.0;

/*

              ,----..                     ,--.  .--,-``-.    
,-.----.     /   /   \    ,----..     ,--/  /| /   /     '.  
\    /  \   /   .     :  /   /   \ ,---,': / '/ ../        ; 
;   :    \ .   /   ;.  \|   :     ::   : '/ / \ ``\  .`-    '
|   | .\ :.   ;   /  ` ;.   |  ;. /|   '   ,   \___\/   \   :
.   : |: |;   |  ; \ ; |.   ; /--` '   |  /         \   :   |
|   |  \ :|   :  | ; | ';   | ;    |   ;  ;         /  /   / 
|   : .  /.   |  ' ' ' :|   : |    :   '   \        \  \   \ 
;   | |  \'   ;  \; /  |.   | '___ |   |    '   ___ /   :   |
|   | ;\  \\   \  ',  / '   ; : .'|'   : |.  \ /   /\   /   :
:   ' | \.' ;   :    /  '   | '/  :|   | '_\.'/ ,,/  ',-    .
:   : :-'    \   \ .'   |   :    / '   : |    \ ''\        ; 
|   |.'       `---`      \   \ .'  ;   |,'     \   \     .'  
`---'                     `---`    '---'        `--`-,,-'    

*/


import "./AddressTree3Header.sol";

struct HashList {
//    address next;
    uint256 value;
    uint256 paid;
}


struct Calcs {
    uint256 start;
    uint256 end;
    uint256 volume;
}

struct Digs {
    uint256 timestamp;
    uint256 units;

    uint sIndex;

    address currency;
    uint256 price;
    uint256 decimals;
}

struct Rocking {
    address currency;
    uint256 price;
    uint256 decimals;

    uint256 apy;
    uint256 from;
    uint256 till;
    uint256 limit;

    uint256 q;
    uint256 r;
}


struct RockEntryLight {
  address delegatePaymentToAddress;

  uint[ 25 ] b;
  uint dCount;
  uint cCount;

}

struct RockEntry {
  address delegatePaymentToAddress;

  uint[ 25 ] b;
  uint dCount;
  uint cCount;

  mapping(uint => Digs) d;
  mapping(uint => Calcs) c;
  mapping(address => uint256) allowances;
  mapping(address => uint256) allowancesTime;
  mapping(uint256 => uint256) deadStore;

}


struct Price {
  uint256 price;
  address currency;
  uint256 forSale;
  uint8   decimals;

  uint256 endSale;
  uint256 limitByVolume;
}

// update 3

struct Earnings {
  uint256 amount;
  uint256 totals;
  uint256 digSum;
  uint256 digCap;
  uint256 digHodl;
  uint256 time;

  uint256 snap;

//  mapping( address => HashList ) distri;
}

struct DigHistoryEntry {
  address digger; // wallet
  uint idx;  // dignumber of wallet
  uint q;    // factor
  uint e;    // max
  uint r;    // reserved
}

// output
struct DigLog {
    uint256 timestamp;
    uint256 units;
//    uint256 calcs;

    uint sIndex;

    address digger;
    uint256 idx;
  
    uint e;    // max
    uint r;    // reserved

    uint[] q;    // factor, each per period  
    uint[] p;    // payout effective 
    uint[] b;    // last digbalance;
    uint[] x;    // quote;
    uint[] c;
    uint[] u;
    uint[] i;
} 

struct PayHistoryEntry {
    uint256 timestamp;
    
    uint256 amount;
    address currency;
    uint8   decimals;

    uint256 pebbles;
    uint256 earnings;
}


// File: /contracts/ROCK3ENUM.sol
// SPDX-License-Identifier: Gemini Contract License


pragma solidity ^0.8.0;

/*

              ,----..                     ,--.  .--,-``-.    
,-.----.     /   /   \    ,----..     ,--/  /| /   /     '.  
\    /  \   /   .     :  /   /   \ ,---,': / '/ ../        ; 
;   :    \ .   /   ;.  \|   :     ::   : '/ / \ ``\  .`-    '
|   | .\ :.   ;   /  ` ;.   |  ;. /|   '   ,   \___\/   \   :
.   : |: |;   |  ; \ ; |.   ; /--` '   |  /         \   :   |
|   |  \ :|   :  | ; | ';   | ;    |   ;  ;         /  /   / 
|   : .  /.   |  ' ' ' :|   : |    :   '   \        \  \   \ 
;   | |  \'   ;  \; /  |.   | '___ |   |    '   ___ /   :   |
|   | ;\  \\   \  ',  / '   ; : .'|'   : |.  \ /   /\   /   :
:   ' | \.' ;   :    /  '   | '/  :|   | '_\.'/ ,,/  ',-    .
:   : :-'    \   \ .'   |   :    / '   : |    \ ''\        ; 
|   |.'       `---`      \   \ .'  ;   |,'     \   \     .'  
`---'                     `---`    '---'        `--`-,,-'    

*/


enum Balance {
  isNoticed,
  protected,
  erc20,
  blocked,
  reserved0,
  reserved1,
  reserved2,
  reserved3,
  reserved4,
  reserved5,
  reserved6,
  reserved7,
  reserved8,
  reserved9,
  reservedA,
  reservedB,
  reservedC,
  reservedD,
  reservedE,
  reservedF,
  reservedG,
  claimable,
  locked
}


// File: /contracts/ROCK3DATA.sol
// SPDX-License-Identifier: MIT


pragma solidity ^0.8.0;


import "./ROCK3HEADER.sol";




abstract contract ROCK3DATA  {

  // Events

  event Transfer(address indexed from, address indexed to, uint256 value);

  event Approval(address indexed owner, address indexed spender, uint256 value);

  event Rocked(bytes32 id);


  // IDs
  bytes4 constant _INTERFACE_ID_SWAP = 0x83838383;

  bytes4 constant _INTERFACE_ID_PAWS = 0x38383838;



  // RockManagement

  mapping(address => RockEntry) r;

  mapping(uint256 => uint256) _deadBox;

  mapping(uint => mapping(uint => Rocking)) s;
  mapping(uint => uint) sCount;
  uint sIndex = 0;

  uint256 _maxAllowanceTime = 15*60; // 15 min


  // dig params

  uint256 digQualChildCountMin = 5;
  uint256 digSumChildMin = 10 * 10 * 10**_decimals;
  uint256 digSumNorm     =       5 * 10**_decimals;
  uint256 digSumMin      =       1 * 10**_decimals;

  // deprecated  => use offer[currency] instead */

  uint256 _digPrice = 0.001 * ( 10**18);
  address _digCurrency = address(0);
  uint256 _digForSale = 1;
  uint8   _digDecimals = 18;


  // rt prov params

  uint256 _rate = 100;
  uint256 _keep = 0; //85 + 45;
  uint256 _prate = 500;


  // rock params

  uint256 _rockPrice = 0.001 * ( 10**18);
  address _rockCurrency = address(0);
  uint256 _rockToPayout = 0;
  uint8   _rockDecimals = 18;

  uint256 _rockFee = 0.001 *  10**18;
  uint96  _rockFeeUnit = 1000;

  uint256 _apy = 0;  // former 85
  uint256 _apySetDate;
  uint256 _apyValid;


  uint256 public y2s = 365 * 24 * 60 * 60;


  // stats

  address[] balancedAddress;


  // totals

  uint256 _totalSupplyERC20 = 0;
  uint256 _totalSupplyBlocked = 0;
  uint256 _totalSummarized = 0;
  uint256 _totalSummarizedAPY = 0;
  uint256 _totalDigged = 0;
  uint256 _totalSale = 0;

  // money on the contract

  mapping( address => uint ) _totalFlow;


  // misc

  address[6] chargeAddresses;
  uint[6] chargeRates;

  // disabling may enables a bug  
  bool chainPayEnabled;

  uint256 controlSeed = 0;
  uint256 lastrn = 1;



  // ts param

  bool _swapAllowed = false;


  // basics

  string public _name;
  string public _symbol;

  uint8 _decimals = 10;

  uint8 dummy = 0;

  mapping(address => Price) offer;

  address offerDefault;

  mapping( address => mapping( address => uint256)) allowancesVault;
  mapping( uint => Earnings) e;

  uint256 _digLimit;
  bool digMgntEnabled;  // = true;

  uint256 _totalDiggedCapped;

  uint256 _totalDiggedHodled;

  uint256 eIndex;


  // dig history

  uint256 digIndex = 0;
  mapping(uint256 => DigHistoryEntry) digHistory;

  // backresolver 

  mapping(address => uint256) _mLookup;

  // payout history

  uint256 snapIdx = 0;
  mapping(uint => mapping(address => uint256)) snap;

  address delegatePlus;
  mapping(address => mapping( uint => PayHistoryEntry)) payHistory;

  address provisionCurrency;

  // some extensions
  
  uint8 public constant CRYPT_MODULE = 10;
  uint8 public constant OP_MODULE    = 11;
  uint8 public constant PLUS_MODULE  = 12;
  uint8 public constant EXT_MODULE   = 13;         // dummy



  // flags

  //  bool chainPayEnabled; // = 1;
  bool agioEnabled; // = 1;
  bool claimEnabled; // = 1;
  bool provQualEnabled; // = 1;
  bool rockEnabled; // = 1;
  bool preSaleEnabled;
  bool claimBlocked;

  // presale management
  uint32[] preSaleSlots;  // timeslots
  uint preSaleStep = 0;   // pricestep
  uint256 _totalPreSale = 0;
  uint256 _totalPreSaleVolume = 0;
  uint claimLockTime = 0;

  uint32[] discountVolume;
  uint32[] discountQuote;


  constructor(string memory name_, string memory symbol_) payable {

      _name = name_;
      _symbol = symbol_;

      y2s = 365 * 24 * 60 * 60;

      _apySetDate = block.timestamp;
      _apyValid   = y2s;

      chainPayEnabled = true;
      agioEnabled = true;
      claimEnabled = true;
      claimBlocked = true;
      provQualEnabled = true;
      rockEnabled = true;
      digMgntEnabled = true;
      preSaleEnabled = false;

      _totalFlow[address(0)] += msg.value;

      claimLockTime = y2s;
  }

}


// File: /contracts/MiniERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.8.1;


interface MiniERC20 {

      function decimals() external view returns (uint8);
      function balanceOf(address account) external view returns (uint256);

}


// File: /contracts/DigInterface.sol
// SPDX-License-Identifier: MIT


pragma solidity ^0.8.0;


interface DigInterface  {
  /* dig and trade */

  function dig( uint256 amount, address promotedByAddress ) payable external returns (bool);

  function dig( uint256 amount, address promotedByAddress, address currency ) payable external returns (bool);

  function digOp(address to, uint256 amount, address promotedByAddress, address currency ) payable external returns (bool);

  function digTrade(address to, uint256 amount, address promotedByAddress, address currency ) payable external returns (bool);

  function digEstimate( uint256 amount, address promotedByAddress,address currency) external view returns (uint256);

  function payOutValue(address account) external view returns (uint256);

  function payOut() external payable;

  function claimValue(address account) external view returns (uint256);

  function claim() external payable ;

  /* rock */
  function rock32( bytes32 w, bytes32 x, bytes32 y, bytes32 z) external payable;

  /* live price */
  function syncPrice( uint256 p, address currency) external;
  
}


// File: /contracts/Context2.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context2 {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: /contracts/AxxessControl3Helper.sol
// SPDX-License-Identifier: Gemini Contract License

pragma solidity ^0.8.0;


import "./AxxessControl3Data.sol";


/**
 * @title AxxessControl2
 */
abstract contract AxxessControl3Helper is AxxessControl3Data {


  constructor()  {
    _setMaster(msg.sender);
    _setAdmin(msg.sender);
    _setOperator(msg.sender);
  }

  function msgSender() public view virtual returns (address) {
      return msg.sender;
  }

  function msgData() public view virtual returns (bytes calldata) {
      return msg.data;
  }


  function _setAdmin(address newAdmin) internal {
      AdminAddress = newAdmin;
  }
  function _setOperator(address newOperator) internal {
      OperatorAddress = newOperator;
  }

  function _setMaster(address newMaster) internal {
      MasterAddress = newMaster;
  }





  function _admin() internal view returns (address adm) {
      return AdminAddress;
  }

  function _operator() internal view returns (address op) {
      return OperatorAddress;
  }

  function _master() internal view returns (address m) {
      return MasterAddress;
  }


  modifier onlyAdmin() {
    require(
      msgSender() == _admin()
    , "AC: c.i.n.  Admin");
    _;
  }
 
  modifier onlyOperator() {
    require(
      msgSender() == _operator()
    , "AC: c.i.n.  Operator");
    _;
  }
 
  modifier onlyMaster() {
    require(
      msgSender() == _master()  
    , "AC: c.i.n.  Master");
    _;
  }
 
  modifier onlyMasterOrOperator() {
    require(
      msgSender() == _operator() ||
      msgSender() == _master()  
    , "AC: c.i.n.  Master nor Operator");
    _;
  }

  modifier onlyChiefLevel() {
    require(
      msgSender() == _operator() ||
      msgSender() == _master()   ||
      msgSender() == _admin()
    , "AC: c.i.n.  Master nor Admin nor Operator");
    _;
  }


  modifier onlyMasterOrOperatorOrDelegate() {
    require(
      msgSender() == _operator() ||
      msgSender() == _master()   ||
      msgSender() == address(this)   
    , "AC: c.i.n.  Master nor Operator or D");
    _;
  }

  modifier onlyMasterOrAdmin() {
    require(
      msgSender() == _admin() ||
      msgSender() == _master()  
    , "AC: c.i.n.  Master nor Admin");
    _;
  }



}


// File: /contracts/AxxessControl3Data.sol
// SPDX-License-Identifier:  Gemini Contract License

pragma solidity ^0.8.0;


abstract contract AxxessControl3Data  {

  /**
   * @notice Master's address FOOBAR
   */
  address   MasterAddress;

  /**
   * @notice Admin's address
   */
  address   AdminAddress;

  /**
   * @notice Operator's address
   */
  address   OperatorAddress;






  // mem test
  uint8 public xs = 9;


}


// File: /contracts/AxxessControl3.sol
// SPDX-License-Identifier: Gemini Contract License

pragma solidity ^0.8.0;

import "./AxxessControl3Helper.sol";

/**
 * @title AxxessControl3
 */
abstract contract AxxessControl3 is AxxessControl3Helper {


  event AdminChanged(address previousAdmin, address newAdmin);
  event OperatorChanged(address previousOperator, address newOperator);
  event MasterChanged(address previousMaster, address newMaster);


  constructor() AxxessControl3Helper() {
  }


  function admin() external payable  onlyMasterOrAdmin returns (address) {
        return _admin();
  }








  // test access
  function getAccess(address testAddress) public view  returns (bool [4] memory) {
     address caller = testAddress;
     return [
       caller == _master() || caller == _admin() || caller == _operator(),
       caller == _master(),
       caller == _admin(),
       caller == _operator()
     ];
   }

  // show access
  function getAccessWallets() public view  returns (address [3] memory) {
    return [
      _master(),
      _admin(),
      _operator()
     ];
   }


  function setAdmin(address newAdmin) external onlyOperator {
      require(newAdmin != address(0), "as is null");
      emit AdminChanged(_admin(), newAdmin);
      _setAdmin(newAdmin);
  }
  function setOperator(address newOperator) external onlyOperator {
      require(newOperator != address(0), "as is null");
      emit OperatorChanged(_operator(), newOperator);
      _setOperator(newOperator);
  }
  function setMaster(address newMaster) external onlyMaster {
      require(newMaster != address(0), "as is null");
      emit MasterChanged(_master(), newMaster);
      _setMaster(newMaster);
  }

}


// File: /contracts/AddressTree3Header.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;


struct Entry {

  uint256 id;

  address promotedByAddress;
  address walletAddress;

  address[] childs;

}


// File: /contracts/AddressTree3Data.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./AddressTree3Header.sol";



abstract contract AddressTree3Data {

  // database
  mapping(address => Entry) m;

  // database entry helper
  mapping(address => bool) mExists;

  // reverse lookup
  mapping(address => address) mPromotedBy;

  //array of all stakers
  address[] _mAddress;



  bool simpleMode = false;

  uint256 globalMemberId = 0;



  uint8 _maxDepth = 6;

  uint8 _balanceMax = 20;

  uint8 public max = 17;


  constructor() {

    address promotedByAddress = address(0);

    mExists[ promotedByAddress ] = true;
  }

}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

