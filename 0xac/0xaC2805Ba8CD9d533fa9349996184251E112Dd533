
// File: src/Solstice.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @author: yungwknd

import "@openzeppelin/contracts/utils/introspection/ERC165.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IIdentityVerifier is IERC165 {
    function verify(
        uint40 listingId,
        address identity,
        address tokenAddress,
        uint256 tokenId,
        uint24 requestCount,
        uint256 requestAmount,
        address requestERC20,
        bytes calldata data
    ) external returns (bool);
}

interface IIdentityVerifierCheck is IERC165 {
    function checkVerify(
        address marketplaceAddress,
        uint40 listingId,
        address identity,
        address tokenAddress,
        uint256 tokenId,
        uint24 requestCount,
        uint256 requestAmount,
        address requestERC20,
        bytes calldata data
    ) external view returns (bool);
}

interface IPriceEngine is IERC165 {
    function price(
        uint256 assetId,
        uint256 alreadyMinted,
        uint24 count
    ) external view returns (uint256);
}

interface ILazyDelivery is IERC165 {
    function deliver(
        uint40 listingId,
        address to,
        uint256 assetId,
        uint24 payableCount,
        uint256 payableAmount,
        address payableERC20,
        uint256 index
    ) external;
}

interface ILazyDeliveryMetadata is IERC165 {
    function assetURI(uint256 assetId) external view returns (string memory);
}

interface IERC1155CreatorCore is IERC165 {
    function mintExtensionExisting(
        address[] calldata to,
        uint256[] calldata tokenIds,
        uint256[] calldata amounts
    ) external;

    function mintExtensionNew(
        address[] calldata to,
        uint256[] calldata amounts,
        string[] calldata uris
    ) external returns (uint256[] memory);
}

interface ICreatorExtensionTokenURI is IERC165 {
    function tokenURI(
        address creator,
        uint256 tokenId
    ) external view returns (string memory);
}

contract Solstice is
    Ownable,
    IIdentityVerifier,
    IIdentityVerifierCheck,
    IPriceEngine,
    ILazyDelivery,
    ILazyDeliveryMetadata,
    ICreatorExtensionTokenURI
{
    address public _marketplace;
    uint40 public _listingId;
    uint256 public _collectorsPrice;
    uint256 public _nonCollectorsPrice;

    address public _creatorCoreContract;
    string public _tokenURI;
    uint public _tokenId;

    mapping(address => bool) public _existingCollectors;
    mapping(address => bool) public _newCollectors;

    constructor() Ownable(msg.sender) {}

    function supportsInterface(
        bytes4 interfaceId
    ) public view virtual override(IERC165) returns (bool) {
        return
            interfaceId == type(IIdentityVerifier).interfaceId ||
            interfaceId == type(IIdentityVerifierCheck).interfaceId ||
            interfaceId == type(IPriceEngine).interfaceId ||
            interfaceId == type(ILazyDelivery).interfaceId ||
            interfaceId == type(ILazyDeliveryMetadata).interfaceId ||
            interfaceId == type(ICreatorExtensionTokenURI).interfaceId ||
            interfaceId == type(IERC165).interfaceId ||
            supportsInterface(interfaceId);
    }

    function setExistingCollectors(
        address[] memory existingCollectors
    ) public onlyOwner {
        for (uint i = 0; i < existingCollectors.length; i++) {
            _existingCollectors[existingCollectors[i]] = true;
        }
    }

    function setNewCollectors(address[] memory newCollectors) public onlyOwner {
        for (uint i = 0; i < newCollectors.length; i++) {
            _newCollectors[newCollectors[i]] = true;
        }
    }

    function setTokenInfo(
        address creatorCoreContract,
        string memory newTokenURI
    ) public onlyOwner {
        require(_tokenId == 0, "Token already minted");
        _creatorCoreContract = creatorCoreContract;
        _tokenURI = newTokenURI;

        address[] memory to = new address[](1);
        to[0] = msg.sender;

        uint[] memory amounts = new uint[](1);
        amounts[0] = 1;

        string[] memory uris = new string[](1);
        uris[0] = "";

        uint[] memory tokenIds = IERC1155CreatorCore(_creatorCoreContract)
            .mintExtensionNew(to, amounts, uris);

        _tokenId = tokenIds[0];
    }

    function updateTokenURI(string memory newTokenURI) public onlyOwner {
        _tokenURI = newTokenURI;
    }

    function setListingInfo(
        uint40 listingId,
        uint collectorsPrice,
        uint nonCollectorsPrice,
        address marketplace
    ) public onlyOwner {
        _listingId = listingId;
        _collectorsPrice = collectorsPrice;
        _nonCollectorsPrice = nonCollectorsPrice;
        _marketplace = marketplace;
    }

    function giftMint(address to) public onlyOwner {
        require(_tokenId != 0, "Token not minted");

        address[] memory tos = new address[](1);
        tos[0] = to;

        uint256[] memory tokenIds = new uint256[](1);
        tokenIds[0] = _tokenId;

        uint256[] memory amounts = new uint256[](1);
        amounts[0] = 1;

        IERC1155CreatorCore(_creatorCoreContract).mintExtensionExisting(
            tos,
            tokenIds,
            amounts
        );
    }

    function deliver(
        uint40 listingId,
        address to,
        uint256,
        uint24 payableCount,
        uint256,
        address,
        uint256
    ) external {
        require(
            msg.sender == _marketplace && listingId == _listingId,
            "Unauthorized"
        );

        address[] memory tos = new address[](1);
        tos[0] = to;

        uint256[] memory tokenIds = new uint256[](1);
        tokenIds[0] = _tokenId;

        uint256[] memory amounts = new uint256[](1);
        amounts[0] = uint256(payableCount);

        IERC1155CreatorCore(_creatorCoreContract).mintExtensionExisting(
            tos,
            tokenIds,
            amounts
        );
    }

    function assetURI(uint256) external view returns (string memory) {
        return _tokenURI;
    }

    function tokenURI(address, uint256) external view returns (string memory) {
        return _tokenURI;
    }

    function price(
        uint256,
        uint256,
        uint24 count
    ) external view returns (uint256) {
        if (_existingCollectors[tx.origin]) {
            return _collectorsPrice * count;
        }
        return _nonCollectorsPrice * count;
    }

    function verify(
        uint40,
        address identity,
        address,
        uint256,
        uint24,
        uint256,
        address,
        bytes calldata
    ) public view override returns (bool) {
        return _existingCollectors[identity] || _newCollectors[identity];
    }

    function checkVerify(
        address,
        uint40,
        address,
        address,
        uint256,
        uint24,
        uint256,
        address,
        bytes calldata
    ) public pure override returns (bool) {
        return true;
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)

pragma solidity ^0.8.20;

import {IERC165} from "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

