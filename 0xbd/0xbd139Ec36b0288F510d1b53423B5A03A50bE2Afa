
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/IERC20.sol";


// File: @openzeppelin/contracts/interfaces/IERC721Enumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../token/ERC721/extensions/IERC721Enumerable.sol";


// File: @openzeppelin/contracts/interfaces/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)

pragma solidity ^0.8.0;

import "../token/ERC721/IERC721Receiver.sol";


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: contracts/IERC721Payable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import '@openzeppelin/contracts/utils/introspection/IERC165.sol';

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721Payable is IERC165 {
	/**
	 * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
	 */
	event Transfer(
		address indexed from,
		address indexed to,
		uint256 indexed tokenId
	);

	/**
	 * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
	 */
	event Approval(
		address indexed owner,
		address indexed approved,
		uint256 indexed tokenId
	);

	/**
	 * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
	 */
	event ApprovalForAll(
		address indexed owner,
		address indexed operator,
		bool approved
	);

	/**
	 * @dev Returns the number of tokens in ``owner``'s account.
	 */
	function balanceOf(address owner) external view returns (uint256 balance);

	/**
	 * @dev Returns the owner of the `tokenId` token.
	 *
	 * Requirements:
	 *
	 * - `tokenId` must exist.
	 */
	function ownerOf(uint256 tokenId) external view returns (address owner);

	/**
	 * @dev Safely transfers `tokenId` token from `from` to `to`.
	 *
	 * Requirements:
	 *
	 * - `from` cannot be the zero address.
	 * - `to` cannot be the zero address.
	 * - `tokenId` token must exist and be owned by `from`.
	 * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
	 * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
	 *
	 * Emits a {Transfer} event.
	 */
	function safeTransferFrom(
		address from,
		address to,
		uint256 tokenId,
		bytes calldata data
	) external payable;

	/**
	 * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
	 * are aware of the ERC721 protocol to prevent tokens from being forever locked.
	 *
	 * Requirements:
	 *
	 * - `from` cannot be the zero address.
	 * - `to` cannot be the zero address.
	 * - `tokenId` token must exist and be owned by `from`.
	 * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
	 * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
	 *
	 * Emits a {Transfer} event.
	 */
	function safeTransferFrom(
		address from,
		address to,
		uint256 tokenId
	) external payable;

	/**
	 * @dev Transfers `tokenId` token from `from` to `to`.
	 *
	 * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
	 * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
	 * understand this adds an external call which potentially creates a reentrancy vulnerability.
	 *
	 * Requirements:
	 *
	 * - `from` cannot be the zero address.
	 * - `to` cannot be the zero address.
	 * - `tokenId` token must be owned by `from`.
	 * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
	 *
	 * Emits a {Transfer} event.
	 */
	function transferFrom(
		address from,
		address to,
		uint256 tokenId
	) external payable;

	/**
	 * @dev Gives permission to `to` to transfer `tokenId` token to another account.
	 * The approval is cleared when the token is transferred.
	 *
	 * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
	 *
	 * Requirements:
	 *
	 * - The caller must own the token or be an approved operator.
	 * - `tokenId` must exist.
	 *
	 * Emits an {Approval} event.
	 */
	function approve(address to, uint256 tokenId) external;

	/**
	 * @dev Approve or remove `operator` as an operator for the caller.
	 * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
	 *
	 * Requirements:
	 *
	 * - The `operator` cannot be the caller.
	 *
	 * Emits an {ApprovalForAll} event.
	 */
	function setApprovalForAll(address operator, bool _approved) external;

	/**
	 * @dev Returns the account approved for `tokenId` token.
	 *
	 * Requirements:
	 *
	 * - `tokenId` must exist.
	 */
	function getApproved(
		uint256 tokenId
	) external view returns (address operator);

	/**
	 * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
	 *
	 * See {setApprovalForAll}
	 */
	function isApprovedForAll(
		address owner,
		address operator
	) external view returns (bool);
}


// File: contracts/Worm1000/IWorm1000Artwork.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

/* 
 * @title IWorm1000Artwork
 * @author minimizer <me@minimizer.art>; https://minimizer.art/ 
 * 
 * Interface for the Worm1000Artwork, to be used by the Token Contract
 */

interface IWorm1000Artwork {
    
    function tokenURI(uint mainDiscipleNumber, uint[4] memory numberOfLightsByLumenLevel, bool animationView) external view returns (string memory);
    
    function royaltyRecipient() external view returns (address);
}


// File: contracts/WormXMinimizer.sol
// SPDX-License-Identifier: CC0
pragma solidity ^0.8.9;

import './Worm1000/IWorm1000Artwork.sol';
import './IERC721Payable.sol';

import '@openzeppelin/contracts/interfaces/IERC20.sol';
import '@openzeppelin/contracts/interfaces/IERC721Receiver.sol';
import '@openzeppelin/contracts/interfaces/IERC721Enumerable.sol';

import '@openzeppelin/contracts/access/Ownable.sol';
import '@openzeppelin/contracts/utils/Address.sol';

contract WormXMinimizer is IERC721Payable, Ownable {
	using Address for address;

	// ============================================================
	// STORAGE
	// ============================================================

	// Address of the Original Worm contract
	IERC721Enumerable edwormContract;
	// Address of the Resurrected Worm contract
	IERC721Enumerable edwoneContract;
	// Address of the Worm Vigils contract
	IWormVigils vigilsContract;
	// Address of the Worm 1000 Artwork contract
	IWorm1000Artwork artContract;

	// The next token ID to be minted
	uint private _currentIndex;

	// Mapping from token ID to frozen lights
	mapping(uint => uint[4]) private _lights;

	// Mapping from token ID to owner address
	mapping(uint => address) private _owners;

	// Mapping owner address to token count
	mapping(address => uint) private _balances;

	// Mapping from token ID to approved address
	mapping(uint => address) private _tokenApprovals;

	// Mapping from owner to operator approvals
	mapping(address => mapping(address => bool)) private _operatorApprovals;

	// ============================================================
	// CONSTRUCTOR
	// ============================================================

	constructor(
		IERC721Enumerable _edwormContract,
		IERC721Enumerable _edwoneContract,
		IWormVigils _vigilsContract,
		IWorm1000Artwork _artContract
	) {
		edwormContract = _edwormContract;
		edwoneContract = _edwoneContract;
		vigilsContract = _vigilsContract;
		artContract = _artContract;
	}

	// ============================================================
	// ERC721 - NFT
	// ============================================================

	// In the interest of saving gas and being responsible stewards
	// of the Ethereum environment, we have chosen not to duplicate
	// data stored in other contracts. Because the Blessing is only
	// being sent to Disciples, we can reference those contracts to
	// get the addresses of Disciples and skip storing balances and
	// owners. Only when a token is transferred is the data stored.
	// This reduces the cost of minting by ~93% and further enables
	// all 1000 Blessings to be airdropped in a single transaction.
	function bless(uint quantity) external onlyOwner {
		require(
			_currentIndex + quantity <= 1000,
			'All 1000 blessings have been minted.'
		);

		unchecked {
			for (uint i = 0; i < quantity; i++) {
				// Increment FIRST so it starts at 1
				_currentIndex++;

				// Get the address to mint to (from Edworm or Edwone contracts)
				address to = discipleAddress(_currentIndex);

				// NOTE: we are NOT storing balances OR owners to save gas
				// _balances[to] += 1;
				// _owners[_currentIndex] = to;

				emit Transfer(address(0), to, _currentIndex);
			}
		}
	}

	function totalSupply() public view returns (uint) {
		return _currentIndex;
	}

	// This function is different because of the optimizations
	function balanceOf(address owner) public view returns (uint) {
		// If they're a disciple under 1000, then we add 1 to their balance
		// because we're not storing their balance when we mint to save gas
		bool isSubKilo = isSubKiloDisciple(owner);
		uint balance = _balances[owner];

		// Unchecked to allow overflows to offset the balance
		unchecked {
			if (isSubKilo) {
				balance += 1;
			}
		}

		return balance;
	}

	function isSubKiloDisciple(address owner) public view returns (bool) {
		// First we check to see if they're an Edworm disciple
		bool isEdwormDisciple = IERC721Enumerable(edwormContract).balanceOf(
			owner
		) == 1;

		// If they are, then they're under a 1000
		if (isEdwormDisciple) {
			return true;
		}

		// If not, we check to see if they're an Edwone disciple
		bool isEdwoneDisciple = IERC721Enumerable(edwoneContract).balanceOf(
			owner
		) == 1;

		// If they are, then we check to see if they're under 1000
		if (isEdwoneDisciple) {
			uint discipleId = IERC721Enumerable(edwoneContract).tokenOfOwnerByIndex(
				owner,
				0
			);

			return discipleId < 1001;
		}

		// Otherwise, they're not
		return false;
	}

	// This function is different because of the optimizations
	function ownerOf(uint tokenId) public view returns (address) {
		_requireMinted(tokenId);

		address owner = _owners[tokenId];

		// If the owner is 0 that means the disciple still owns the
		// the blessing so then we return the disciple as the owner
		if (owner == address(0)) {
			return discipleAddress(tokenId);
		}
		// However, if the owner is NOT 0- meaning the owner has been
		// stored on transfer then return the owner as normal
		else {
			return owner;
		}
	}

	// Given a token ID, returns the address of the disciple
	function discipleAddress(uint tokenId) public view returns (address) {
		// If the token ID is less than 273 then we lookup using Edworm
		if (tokenId < 273) {
			return IERC721Enumerable(edwormContract).ownerOf(tokenId);
		}
		// Otherwise we lookup using Edwone
		else {
			return IERC721Enumerable(edwoneContract).ownerOf(tokenId);
		}
	}

	// Given a token ID, returns the lights owned by the disciple
	function discipleLights(
		uint tokenId
	) public view returns (uint[4] memory lightsByLumenLevel) {
		// Check to see if the lights are frozen
		// (They are frozen if there is an owner)
		if (_owners[tokenId] != address(0)) {
			return _lights[tokenId];
		}

		// Prepare the array to return
		uint[4] memory lights;

		// Get the disciple address
		address disciple = discipleAddress(tokenId);

		// Get the disciple light balance
		uint lightsOwned = vigilsContract.balanceOf(disciple);

		// Return early if no lights are owned
		if (lightsOwned == 0) {
			return lights;
		}

		// Loop through the lights
		for (uint i; i < lightsOwned; i++) {
			// Get the light ID
			uint lightId = vigilsContract.tokenOfOwnerByIndex(disciple, i);

			// Get the light data
			(, uint64 lumenLevel, ) = vigilsContract.getCandleData(lightId);

			// Tabulate the light according to brightness
			if (lumenLevel == 3) {
				lights[3] += 1;
			} else if (lumenLevel == 2) {
				lights[2] += 1;
			} else if (lumenLevel == 1) {
				lights[1] += 1;
			} else {
				lights[0] += 1;
			}
		}

		return lights;
	}

	// ============================================================
	// ERC721 - Metadata
	// ============================================================

	function name() public pure returns (string memory) {
		return 'The Worm x minimizer';
	}

	function symbol() public pure returns (string memory) {
		return 'WxM';
	}

	// Get the JSON & SVG from minimizer's brilliant contract
	function tokenURI(uint discipleId) public view returns (string memory) {
		uint[4] memory lightsByLumenLevel = discipleLights(discipleId);

		return artContract.tokenURI(discipleId, lightsByLumenLevel, false);
	}

	// ============================================================
	// ERC721 - Management
	// ============================================================

	// Split all revenue between theworm.eth & minimizer.eth
	receive() external payable {
		uint half = msg.value / 2;

		payable(owner()).transfer(half);
		payable(IWorm1000Artwork(artContract).royaltyRecipient()).transfer(
			msg.value - half
		);
	}

	// Split all revenue between theworm.eth & minimizer.eth
	function withdrawTokens(IERC20 token) external {
		uint balance = token.balanceOf(address(this));
		uint half = balance / 2;

		token.transfer(owner(), half);
		token.transfer(
			IWorm1000Artwork(artContract).royaltyRecipient(),
			balance - half
		);
	}

	// ============================================================
	// ERC721 - Approvals
	// ============================================================

	function approve(address to, uint tokenId) external {
		address owner = ownerOf(tokenId);
		require(to != owner, 'ERC721: approval to current owner');

		require(
			msg.sender == owner || isApprovedForAll(owner, msg.sender),
			'ERC721: approve caller is not token owner or approved for all'
		);

		_tokenApprovals[tokenId] = to;
		emit Approval(owner, to, tokenId);
	}

	function getApproved(uint tokenId) public view returns (address operator) {
		_requireMinted(tokenId);

		return _tokenApprovals[tokenId];
	}

	function isApprovedForAll(
		address owner,
		address operator
	) public view returns (bool) {
		return _operatorApprovals[owner][operator];
	}

	function setApprovalForAll(address operator, bool approved) external {
		require(msg.sender != operator, 'ERC721: approve to caller');
		_operatorApprovals[msg.sender][operator] = approved;
		emit ApprovalForAll(msg.sender, operator, approved);
	}

	function _requireMinted(uint tokenId) internal view virtual {
		require(
			tokenId > 0 && tokenId <= _currentIndex,
			'ERC721: invalid token ID'
		);
	}

	// ============================================================
	// ERC721 - Transfers
	// ============================================================

	function safeTransferFrom(
		address from,
		address to,
		uint tokenId
	) public payable override {
		safeTransferFrom(from, to, tokenId, '');
	}

	function safeTransferFrom(
		address from,
		address to,
		uint tokenId,
		bytes memory data
	) public payable override {
		transferFrom(from, to, tokenId);

		require(
			_checkOnERC721Received(from, to, tokenId, data),
			'ERC721: transfer to non ERC721Receiver implementer'
		);
	}

	function transferFrom(
		address from,
		address to,
		uint tokenId
	) public payable override {
		require(to != address(0), 'ERC721: transfer to the zero address');
		require(ownerOf(tokenId) == from, 'ERC721: transfer from incorrect owner');
		require(
			_isApprovedOrOwner(msg.sender, tokenId),
			'ERC721: caller is not token owner or approved'
		);

		// Check if transferring away from disciple
		// If so, freeze the lights, store the owner
		if (to != discipleAddress(tokenId)) {
			_lights[tokenId] = discipleLights(tokenId);
			_owners[tokenId] = to;
		}
		// Otherwise returning back to the disciple
		// So delete the lights and owner
		else {
			delete _lights[tokenId];
			delete _owners[tokenId];
		}

		// Clear approvals from the previous owner
		delete _tokenApprovals[tokenId];

		unchecked {
			// `_balances[from]` WILL underflow for disciples
			// but then we add 1 when checking their balance
			_balances[from] -= 1;
			// `_balances[to]` won't overflow since we're limiting supply to 1000
			_balances[to] += 1;
		}

		emit Transfer(from, to, tokenId);
	}

	function _isApprovedOrOwner(
		address spender,
		uint tokenId
	) internal view virtual returns (bool) {
		address owner = ownerOf(tokenId);
		return (spender == owner ||
			isApprovedForAll(owner, spender) ||
			getApproved(tokenId) == spender);
	}

	// Copied from OpenZeppelin ERC721.sol
	function _checkOnERC721Received(
		address from,
		address to,
		uint tokenId,
		bytes memory data
	) private returns (bool) {
		if (to.isContract()) {
			try
				IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data)
			returns (bytes4 retval) {
				return retval == IERC721Receiver.onERC721Received.selector;
			} catch (bytes memory reason) {
				if (reason.length == 0) {
					revert('ERC721: transfer to non ERC721Receiver implementer');
				} else {
					/// @solidity memory-safe-assembly
					assembly {
						revert(add(32, reason), mload(reason))
					}
				}
			}
		} else {
			return true;
		}
	}

	// ============================================================
	// ERC2981 - Royalty
	// ============================================================

	function royaltyInfo(
		uint,
		uint _salePrice
	) external view returns (address receiver, uint royaltyAmount) {
		// It's 10%
		uint royalty = (_salePrice * 1000) / 10000;
		return (address(this), royalty);
	}

	// ============================================================
	// ERC165 - Interfaces
	// ============================================================

	function supportsInterface(bytes4 interfaceId) public pure returns (bool) {
		return
			// ERC165 interface ID for ERC165.
			interfaceId == 0x01ffc9a7 ||
			// ERC165 interface ID for ERC721.
			interfaceId == 0x80ac58cd ||
			// ERC165 interface ID for ERC721Metadata.
			interfaceId == 0x5b5e139f ||
			// ERC2981 interface ID for royalties.
			interfaceId == 0x2a55205a;
	}
}

interface IWormVigils is IERC721Enumerable {
	function getCandleData(
		uint _tokenId
	) external view returns (uint128 _discipleId, uint64 _level, uint64 _vigil);
}

