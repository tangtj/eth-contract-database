// Sources flattened with hardhat v2.22.1 https://hardhat.org


// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.6

// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File @openzeppelin/contracts/interfaces/IERC20.sol@v4.9.6

// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;


// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol@v4.9.6

// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File @openzeppelin/contracts/utils/Address.sol@v4.9.6

// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.9.6

// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;



/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File contracts/interface/IDatabase.sol

pragma solidity ^0.8.0;

interface IDatabase {
    enum STATUS {
        NOTAUDITED,
        PENDING,
        PASSED,
        FAILED,
        REFUNDED
    }

    function HYACINTH_FEE() external view returns (uint256);

    function USDC() external view returns (address);

    function owner() external view returns (address);

    function audits(uint256 auditId_) external view returns (address, address, STATUS, string memory, uint256, bool);

    function auditors(address auditor_) external view returns (uint256, uint256, uint256, uint256);

    function approvedAuditor(address auditor_) external view returns (bool isAuditor_);

    function hyacinthWallet() external view returns (address);

    function beingAudited() external;

    function mintPOD() external returns (uint256 id_, address developerWallet_);

    function addApprovedAuditor(address[] calldata auditors_) external;

    function removeApprovedAuditor(address[] calldata auditors_) external;

    function giveAuditorFeedback(uint256 auditId_, bool positive_) external;

    function refundBounty(uint256 auditId_) external;

    function submitResult(uint256 auditId_, STATUS result_, string memory description_) external;

    function rollOverExpired(uint256 auditId_) external;

    function levelsCompleted(address auditor_) external view returns (uint256[4] memory);

    function auditStatus(address contractAddress_) external view returns (STATUS status_);
}


// File contracts/reatiner/HyacinthRetainer.sol

pragma solidity 0.8.14;



/// @title   Hyacinth Retainer
/// @author  Hyacinth
contract HyacinthRetainer {
    /// DEPENDENCIES ///

    using SafeERC20 for IERC20;

    /// STATE VARIABLES ///

    /// @notice Address of project
    address public immutable project;
    /// @notice Address of auditor
    address public immutable auditor;

    /// @notice Address of Hyacinth Database
    IDatabase public constant HYACINTH_DATABSE = IDatabase(0x879Cf19800308eC7ccc673B68cFeaF3c6c08CCc2);

    /// @notice Array of payout tokens
    address[] public payoutTokens;
    /// @notice Array of tokens per pay period
    uint256[] public tokensPerPayoutPeriod;

    /// @notice Timestamp retainer started
    uint256 public immutable retainerStart;
    /// @notice Payout period
    uint256 public immutable payoutPeriod;

    /// @notice Timestmap retainer ends
    uint256 public retainerEnd;
    /// @notice Timestmap last payout period claimed
    uint256 public lastInteraction;
    /// @notice Array length
    uint256 public immutable arrayLength;

    /// @notice Bool if retainer has been severed
    bool public severed;
    /// @notice Bool if retainer has ended
    bool public retainerEnded;

    /// EVENTS ///

    /// @notice Emitted after retainer has ended
    event RetainerEnded();
    /// @notice Emitted after retainer has been severed
    event RetainerSevered();

    /// CONSTRUCTOR ///

    constructor(
        address _project,
        address _auditor,
        address[] memory _payoutTokens,
        uint256[] memory _tokensPerPeriod,
        uint256 _payoutPeriod,
        uint256 _periodsForRetainer
    ) {
        project = _project;
        auditor = _auditor;
        payoutTokens = _payoutTokens;
        tokensPerPayoutPeriod = _tokensPerPeriod;
        payoutPeriod = _payoutPeriod;
        retainerStart = block.timestamp;
        lastInteraction = block.timestamp;
        retainerEnd = block.timestamp + (_payoutPeriod * _periodsForRetainer);
        arrayLength = _payoutTokens.length;
    }

    /// PROJECT FUNCTIONS ///

    /// @notice Increase payout amount
    function increaseAmount(uint256 index, uint256 newAmount) external {
        require(msg.sender == project, "Not project");
        require(index <= arrayLength - 1, "Invalid index");
        require(periodsCanClaim() == 0, "Can not increase for previous periods");
        require(newAmount > tokensPerPayoutPeriod[index], "Invalid new payout amount");

        tokensPerPayoutPeriod[index] = newAmount;
    }

    /// @notice Upfront payment for auditor
    function upFrontPayment(address[] calldata _tokens, uint256[] calldata _amounts) external {
        require(msg.sender == project, "Not project");
        require(_tokens.length == _amounts.length, "Different lengths");

        for (uint256 i; i < _tokens.length; ++i) {
            uint256 fee = (_amounts[i] * HYACINTH_DATABSE.HYACINTH_FEE()) / 100;
            IERC20(_tokens[i]).safeTransfer(auditor, _amounts[i] - fee);
            IERC20(_tokens[i]).safeTransfer(HYACINTH_DATABSE.hyacinthWallet(), fee);
        }
    }

    /// @notice Extend retainer
    function extendPeriods(uint256 _periodsToExtend, uint256 _periodsToFund) external {
        require(msg.sender == project, "Not project");
        require(_periodsToExtend > 0, "Can not extend by 0 periods");
        require(activeRetainer(), "Not an active retainer");

        retainerEnd += payoutPeriod * _periodsToExtend;

        if (_periodsToFund > 0) {
            for (uint256 i; i < payoutTokens.length; ++i) {
                uint256 totalToFund = tokensPerPayoutPeriod[i] * _periodsToFund;
                IERC20(payoutTokens[i]).safeTransferFrom(msg.sender, address(this), totalToFund);
            }
        }
    }

    /// @notice Withdraw non payout token
    function withdrawTokens(address _token, uint256 _amount) external {
        require(msg.sender == project, "Not project");
        if (activeRetainer()) {
            for (uint256 i; i < payoutTokens.length; ++i) {
                require(_token != payoutTokens[i], "Cannot withdraw payout token");
            }
        }
        IERC20(_token).safeTransfer(project, _amount);
    }

    /// AUDITOR FUNCTIONS ///

    /// @notice Claim `_periodsToClaim` of retainer
    function claim(uint256 _periodsToClaim) public {
        require(activeRetainer(), "Retainer not active");
        require(_periodsToClaim > 0, "Can not claim 0 periods");
        require(msg.sender == auditor || msg.sender == HYACINTH_DATABSE.owner(), "Not owner or Hyacinth");

        uint256 _periodCanClaim = periodsCanClaim();

        require(_periodCanClaim >= _periodsToClaim, "More than periods can claim");

        lastInteraction += (_periodsToClaim * payoutPeriod);

        for (uint256 i; i < payoutTokens.length; ++i) {
            uint256 totalToSend = tokensPerPayoutPeriod[i] * _periodsToClaim;
            uint256 fee = (totalToSend * HYACINTH_DATABSE.HYACINTH_FEE()) / 100;
            IERC20(payoutTokens[i]).safeTransfer(auditor, totalToSend - fee);
            IERC20(payoutTokens[i]).safeTransfer(HYACINTH_DATABSE.hyacinthWallet(), fee);
        }

        if (block.timestamp >= retainerEnd) {
            retainerEnded = true;
            emit RetainerEnded();
        }
    }

    /// VIEW FUNCTIONS ///

    /// @notice Returns how many pay periods can be claimed
    function periodsCanClaim() public view returns (uint256 _canClaim) {
        uint256 timeSince;
        if (block.timestamp <= retainerEnd) {
            timeSince = block.timestamp - lastInteraction;
        } else {
            timeSince = retainerEnd - lastInteraction;
        }
        _canClaim = timeSince / payoutPeriod;
    }

    /// @notice Returns how many pay periods are currently funded
    function periodsFunded() public view returns (uint256 _periodsFunded) {
        for (uint256 i; i < payoutTokens.length; ++i) {
            if (i == 0) {
                _periodsFunded = IERC20(payoutTokens[i]).balanceOf(address(this)) / tokensPerPayoutPeriod[i];
            } else {
                uint256 _fundedForToken = IERC20(payoutTokens[i]).balanceOf(address(this)) / tokensPerPayoutPeriod[i];
                if (_periodsFunded > _fundedForToken) {
                    _periodsFunded = _fundedForToken;
                }
            }
        }
    }

    /// @notice Returns if retainer is currently active
    function activeRetainer() public view returns (bool _active) {
        if (!severed && !retainerEnded) return true;
    }

    /// HYACINTH ///

    /// @notice Severeing of retainer
    function sever(uint256 _additionalSeverance) external {
        require(msg.sender == HYACINTH_DATABSE.owner(), "Not Hyacinth");
        uint256 periodsToClaim = periodsCanClaim();
        uint256 _periodsFunded = periodsFunded();
        if (_periodsFunded < periodsToClaim) periodsToClaim = _periodsFunded;
        if (periodsToClaim > 0) claim(periodsToClaim);

        if (_additionalSeverance > 0) {
            for (uint256 i; i < payoutTokens.length; ++i) {
                IERC20 token = IERC20(payoutTokens[i]);
                uint256 totalToSend = tokensPerPayoutPeriod[i] * _additionalSeverance;
                uint256 fee = (totalToSend * HYACINTH_DATABSE.HYACINTH_FEE()) / 100;
                token.safeTransfer(auditor, totalToSend - fee);
                token.safeTransfer(HYACINTH_DATABSE.hyacinthWallet(), fee);
                token.safeTransfer(project, token.balanceOf(address(this)));
            }
        } else {
            for (uint256 i; i < payoutTokens.length; ++i) {
                IERC20 token = IERC20(payoutTokens[i]);
                token.safeTransfer(project, token.balanceOf(address(this)));
            }
        }

        severed = true;
        emit RetainerSevered();
    }

    /// @notice Emergency sever of retainer
    function emergecnySever() external {
        require(msg.sender == HYACINTH_DATABSE.owner(), "Not Hyacinth");
        severed = true;
        emit RetainerSevered();
    }
}