{"Citizen.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract CitizenToken is IERC20 {\r\n    string public constant name = \"Citizen\";\r\n    string public constant symbol = \"Citizen\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public override totalSupply = 1500000000 * 10**decimals;\r\n    \r\n    mapping (address =\u003e uint256) balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) allowances;\r\n    \r\n    constructor() {\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    \r\n    function balanceOf(address account) external view override returns(uint256 balance) {\r\n        balance = balances[account];\r\n    }\r\n    \r\n    function allowance(address account, address spender) external view override returns(uint256){\r\n        return allowances[account][spender];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns(bool success) {\r\n        require(amount \u003e 0, \"HLK: amount must be greater than 0\");\r\n        require(balances[msg.sender] \u003e= amount, \"HLK: Insufficient balance\");\r\n        \r\n        balances[msg.sender] -= amount;\r\n        balances[recipient] += amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        success = true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) external override returns(bool success) {\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        success = true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns(bool success){\r\n        require(amount \u003e 0, \"HLK: amount must be greater than 0\");\r\n        require(allowances[sender][msg.sender] \u003e= amount, \"HLK:Insufficient authorization\");\r\n        require(balances[sender] \u003e= amount, \"HLK:Insufficient balance\");\r\n        \r\n        allowances[sender][msg.sender] -= amount;\r\n        balances[sender] -= amount;\r\n        balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        success = true;\r\n    }\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"}}