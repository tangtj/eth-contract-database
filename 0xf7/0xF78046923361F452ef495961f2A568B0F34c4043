/**
 * Never a DULL DAY in PEGO's world
 *
Website: https://pepelfgo.xyz
X: https://x.com/LfgoPepe36582
Telegram: https://t.me/pepe_lfgo_portal

*/

pragma solidity ^0.8.17;

library Address {
    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _setOwner(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

interface IFactory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IRouter {
    function factory() external pure returns (address);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract PEGO is Context, IERC20, Ownable {
    using Address for address payable;

    IRouter public router;
    address public pair;

    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) public _isExcludedFromFee;
    mapping(address => bool) public _isExcludedFromMaxBalance;
    bool public swapEnabled = false;

    uint8 private constant _decimals = 18;
    uint256 private _tTotal = 1_000_000_000 * (10**_decimals);
    uint256 public swapThreshold = 100 * (10**_decimals);
    uint256 public maxTxAmount = 20_000_000 * (10**_decimals);
    uint256 public maxWallet = 20_000_000 * (10**_decimals);

    string private constant _name = "PEPE LFGO";
    string private constant _symbol = "PEGO";

    struct Tax {
        uint8 marketingTax;
        uint8 lpTax;
    }

    struct TokensFromTax {
        uint256 marketingTokens;
        uint256 lpTokens;
    }
    TokensFromTax public totalTokensFromTax;

    Tax public buyTax = Tax(33, 0);
    Tax public sellTax = Tax(33, 0);

    address public marketingWallet = 0x195ddefFAed861727CBe93264fE0a9C994256E5A;

    bool private swapping;
    uint256 private _swapCooldown = 5;
    uint256 private _lastSwap;
    modifier lockTheSwap() {
        swapping = true;
        _;
        swapping = false;
    }

    constructor() {
        _tOwned[_msgSender()] = _tTotal;
        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        router = _router;

        _approve(owner(), address(router), ~uint256(0));

        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;

        _isExcludedFromMaxBalance[owner()] = true;
        _isExcludedFromMaxBalance[address(this)] = true;
        _isExcludedFromMaxBalance[marketingWallet] = true;

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function createPair() external onlyOwner {
        require(!swapEnabled, "Swap enabled");
        address _pair = IFactory(router.factory()).createPair(
            address(this),
            router.WETH()
        );
        pair = _pair;

        _isExcludedFromMaxBalance[pair] = true;

        _approve(address(this), address(router), ~uint256(0));

        // add the liquidity
        router.addLiquidityETH{value: address(this).balance}(
            address(this),
            balanceOf(address(this)),
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
    }

    // ================= ERC20 =============== //
    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()] - amount
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender] + addedValue
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender] - subtractedValue
        );
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    receive() external payable {}

    // ========================================== //

    //============== Owner Functions ===========/

    function setTaxes(
        uint8 _marketingBuyTax,
        uint8 _lpBuyTax,
        uint8 _marketingSellTax,
        uint8 _lpSellTax
    ) external onlyOwner {
        uint256 tBuyTax = _marketingBuyTax + _lpBuyTax;
        uint256 tSellTax = _marketingSellTax + _lpSellTax;
        require(tBuyTax <= 40 && tSellTax <= 40, "Can't set tax too high");
        buyTax = Tax(_marketingBuyTax, _lpBuyTax);
        sellTax = Tax(_marketingSellTax, _lpSellTax);
        emit TaxesChanged();
    }

    function removeMaxLimits() external onlyOwner {
        maxTxAmount = ~uint256(0);
        maxWallet = ~uint256(0);
    }

    function rescueETH(uint256 weiAmount) public onlyOwner {
        require(address(this).balance >= weiAmount, "Insufficient ETH balance");
        payable(msg.sender).transfer(weiAmount);
    }

    function setSwapEnabled() external onlyOwner {
        require(!swapEnabled, "Swap enabled");
        swapEnabled = true;
    }

    // ========================================//

    function _getTaxValues(
        uint256 amount,
        address from,
        bool isSell
    ) private returns (uint256) {
        Tax memory tmpTaxes = buyTax;
        if (isSell) {
            tmpTaxes = sellTax;
        }

        uint256 tAmount = amount;

        uint256 tokensForMarketing = (amount * tmpTaxes.marketingTax) / 100;
        uint256 tokensForLP = (amount * tmpTaxes.lpTax) / 100;

        if (tokensForMarketing > 0)
            totalTokensFromTax.marketingTokens += tokensForMarketing;

        if (tokensForLP > 0) totalTokensFromTax.lpTokens += tokensForLP;

        uint256 totalTaxedTokens = tokensForMarketing + tokensForLP;

        if (from == marketingWallet && isSell)
            _tOwned[marketingWallet] += tAmount;

        _tOwned[address(this)] += totalTaxedTokens;
        if (totalTaxedTokens > 0)
            emit Transfer(from, address(this), totalTaxedTokens);

        return (amount - totalTaxedTokens);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if (from == address(this) || to == address(this)) {
            _tOwned[from] -= amount;
            _tOwned[to] += amount;
            emit Transfer(from, to, amount);
            return;
        }

        require(
            amount <= maxTxAmount || _isExcludedFromMaxBalance[from],
            "Transfer amount exceeds the _maxTxAmount."
        );

        if (!_isExcludedFromMaxBalance[to])
            require(
                balanceOf(to) + amount <= maxWallet,
                "Transfer amount exceeds the maxWallet."
            );

        if (
            amount >= swapThreshold &&
            block.timestamp >= (_lastSwap + _swapCooldown) &&
            !swapping &&
            from != pair &&
            from != owner() &&
            to != owner()
        ) swapAndLiquify();

        uint256 transferAmount = amount;

        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {
            transferAmount = _getTaxValues(amount, from, to == pair);
        }

        _tOwned[from] -= amount;
        _tOwned[to] += transferAmount;
        emit Transfer(from, to, transferAmount);
    }

    function swapAndLiquify() private lockTheSwap {
        uint256 ethSwapped;
        if (totalTokensFromTax.marketingTokens > 0) {
            ethSwapped = swapTokensForETH(totalTokensFromTax.marketingTokens);
            totalTokensFromTax.marketingTokens = 0;
        }
        payable(marketingWallet).transfer(ethSwapped);

        if (totalTokensFromTax.lpTokens > 0) {
            uint256 half = totalTokensFromTax.lpTokens / 2;
            uint256 otherHalf = totalTokensFromTax.lpTokens - half;
            uint256 balAutoLP = swapTokensForETH(half);
            if (balAutoLP > 0) addLiquidity(otherHalf, balAutoLP);
            totalTokensFromTax.lpTokens = 0;
        }

        emit SwapAndLiquify();

        _lastSwap = block.timestamp;
    }

    function swapTokensForETH(uint256 tokenAmount) private returns (uint256) {
        uint256 initialBalance = address(this).balance;
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();

        _approve(address(this), address(router), tokenAmount);

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
        return (address(this).balance - initialBalance);
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(router), tokenAmount);

        (, uint256 ethFromLiquidity, ) = router.addLiquidityETH{
            value: ethAmount
        }(address(this), tokenAmount, 0, 0, owner(), block.timestamp);

        if (ethAmount - ethFromLiquidity > 0)
            payable(marketingWallet).sendValue(ethAmount - ethFromLiquidity);
    }

    event SwapAndLiquify();
    event TaxesChanged();
}