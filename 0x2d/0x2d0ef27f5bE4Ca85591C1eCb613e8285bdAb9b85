{"Dependencies.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    // /**\n    //  * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n    //  * `recipient`, forwarding all available gas and reverting on errors.\n    //  *\n    //  * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n    //  * of certain opcodes, possibly making contracts go over the 2300 gas limit\n    //  * imposed by `transfer`, making them unable to receive funds via\n    //  * `transfer`. {sendValue} removes this limitation.\n    //  *\n    //  * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n    //  *\n    //  * IMPORTANT: because control is transferred to `recipient`, care must be\n    //  * taken to not create reentrancy vulnerabilities. Consider using\n    //  * {ReentrancyGuard} or the\n    //  * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n    //  */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    // /**\n    //  * @dev Performs a Solidity function call using a low level `call`. A\n    //  * plain `call` is an unsafe replacement for a function call: use this\n    //  * function instead.\n    //  *\n    //  * If `target` reverts with a revert reason, it is bubbled up by this\n    //  * function (like regular Solidity function calls).\n    //  *\n    //  * Returns the raw returned data. To convert to the expected return value,\n    //  * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - `target` must be a contract.\n    //  * - calling `target` with `data` must not revert.\n    //  *\n    //  * _Available since v3.1._\n    //  */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n    //  * `errorMessage` as a fallback revert reason when `target` reverts.\n    //  *\n    //  * _Available since v3.1._\n    //  */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    //  * but also transferring `value` wei to `target`.\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - the calling contract must have an ETH balance of at least `value`.\n    //  * - the called Solidity function must be `payable`.\n    //  *\n    //  * _Available since v3.1._\n    //  */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    // *\n    //  * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n    //  * with `errorMessage` as a fallback revert reason when `target` reverts.\n    //  *\n    //  * _Available since v3.1._\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    //  * but performing a static call.\n    //  *\n    //  * _Available since v3.3._\n    //  */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n    //  * but performing a static call.\n    //  *\n    //  * _Available since v3.3._\n    //  */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    //  * but performing a delegate call.\n    //  *\n    //  * _Available since v3.4._\n    //  */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n    //  * but performing a delegate call.\n    //  *\n    //  * _Available since v3.4._\n    //  */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    // /**\n    //  * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n    //  * revert reason using the provided one.\n    //  *\n    //  * _Available since v4.3._\n    //  */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    // Don\u0027t need these\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 =\u003e address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address =\u003e uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length \u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n"},"OperatorFiltererDependencies.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n\ninterface IOperatorFilterRegistry {\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external;\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address\u0027s filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address addr) external;\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    /**\n     * @notice Subscribe an address to another registrant\u0027s filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription\u0027s existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external returns (address[] memory);\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    /**\n     * @notice Returns true if the hash of an address\u0027s code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address addr) external returns (bool);\n\n    /**\n     * @dev Convenience method to compute the code hash of an arbitrary contract\n     */\n    function codeHashOf(address addr) external returns (bytes32);\n}\n\n\n/**\n * @title  UpdatableOperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant\u0027s entries in the OperatorFilterRegistry. This contract allows the Owner to update the\n *         OperatorFilterRegistry address via updateOperatorFilterRegistryAddress, including to the zero address,\n *         which will bypass registry checks.\n *         Note that OpenSea will still disable creator earnings enforcement if filtered operators begin fulfilling orders\n *         on-chain, eg, if the registry is revoked or bypassed.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n */\nabstract contract UpdatableOperatorFilterer {\n    /// @dev Emitted when an operator is not allowed.\n    error OperatorNotAllowed(address operator);\n    /// @dev Emitted when someone other than the owner is trying to call an only owner function.\n    error OnlyOwner();\n\n    event OperatorFilterRegistryAddressUpdated(address newRegistry);\n\n    IOperatorFilterRegistry public operatorFilterRegistry;\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address _registry, address subscriptionOrRegistrantToCopy, bool subscribe) {\n        IOperatorFilterRegistry registry = IOperatorFilterRegistry(_registry);\n        operatorFilterRegistry = registry;\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(registry).code.length \u003e 0) {\n            if (subscribe) {\n                registry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    registry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    registry.register(address(this));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev A helper function to check if the operator is allowed.\n     */\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if the operator approval is allowed.\n     */\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\n     *         address, checks will be bypassed. OnlyOwner.\n     */\n    function updateOperatorFilterRegistryAddress(address newRegistry) public virtual {\n        if (msg.sender != owner()) {\n            revert OnlyOwner();\n        }\n        operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\n        emit OperatorFilterRegistryAddressUpdated(newRegistry);\n    }\n\n    /**\n     * @dev Assume the contract has an owner, but leave specific Ownable implementation up to inheriting contract.\n     */\n    function owner() public view virtual returns (address);\n\n    /**\n     * @dev A helper function to check if the operator is allowed.\n     */\n    function _checkFilterOperator(address operator) internal view virtual {\n        IOperatorFilterRegistry registry = operatorFilterRegistry;\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(registry) != address(0) \u0026\u0026 address(registry).code.length \u003e 0) {\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\n            if (!registry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n\n"},"SequelsAuction.sol":{"content":"// SPDX-License-Identifier: MIT\n// Copyright (c) 2022 Fellowship\n// contract by steviep.eth\n\n/*\n\n███████ ███████  ██████  ██    ██ ███████ ██      ███████\n██      ██      ██    ██ ██    ██ ██      ██      ██\n███████ █████   ██    ██ ██    ██ █████   ██      ███████\n     ██ ██      ██ ▄▄ ██ ██    ██ ██      ██           ██\n███████ ███████  ██████   ██████  ███████ ███████ ███████\n                    ▀▀\n\n █████  ██    ██  ██████ ████████ ██  ██████  ███    ██\n██   ██ ██    ██ ██         ██    ██ ██    ██ ████   ██\n███████ ██    ██ ██         ██    ██ ██    ██ ██ ██  ██\n██   ██ ██    ██ ██         ██    ██ ██    ██ ██  ██ ██\n██   ██  ██████   ██████    ██    ██  ██████  ██   ████\n\n*/\n\nimport \"./SequelsBase.sol\";\n\npragma solidity ^0.8.17;\n\ninterface FPP {\n  function logPassUse(uint256 tokenId, uint256 projectId) external;\n  function ownerOf(uint256 tokenId) external returns (address);\n}\n\ninterface IWETH {\n  function deposit() external payable;\n  function withdraw(uint256 wad) external;\n  function transfer(address to, uint256 value) external returns (bool);\n}\n\ncontract SequelsAuction {\n  uint256 public immutable PROJECT_START_TIME;\n  uint256 public immutable PROJECT_END_TIME;\n  address public immutable weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n  address public fpp = 0xA8A425864dB32fCBB459Bf527BdBb8128e6abF21;\n  uint256 public fppProjectId = 2;\n  address public beneficiary1;\n  address public beneficiary2;\n\n  uint256 public bidIncreaseBps = 1000;\n  uint256 public mintPassRebateBps = 1000;\n  uint256 public minBid = 0.01 ether;\n  bool public paused;\n\n  event BidMade(uint256 indexed day, address bidder, uint256 amount, uint256 timestamp);\n  event Settled(uint256 indexed day, uint256 timestamp);\n\n  struct Bid {\n    uint128 amount;\n    uint128 timestamp;\n    address bidder;\n    bool usesMintPass;\n    uint256 mintPassId;\n  }\n\n  mapping(uint256 =\u003e Bid) public auctions;\n  mapping(uint256 =\u003e bool) public auctionSettlements;\n\n  SequelsBase public sequelsBase;\n\n  constructor(SequelsBase _sequelsBase, uint256 startTime, uint256 endTime) {\n    sequelsBase = _sequelsBase;\n    beneficiary1 = msg.sender;\n    beneficiary2 = msg.sender;\n    PROJECT_START_TIME = startTime;\n    PROJECT_END_TIME = endTime;\n  }\n\n  function bid(uint256 day) external payable {\n    bid(day, false, 0);\n  }\n\n  function bidWithMintPass(uint256 day, uint256 mintPassId) external payable {\n    require(FPP(fpp).ownerOf(mintPassId) == msg.sender, \u0027Caller is not the owner of FPP\u0027);\n    bid(day, true, mintPassId);\n  }\n\n  function bid(uint256 day, bool usesMintPass, uint256 mintPassId) private {\n    require(isAuctionActive(day), \u0027Auction for this day is not active\u0027);\n    require(!paused, \u0027Bidding is paused\u0027);\n\n    Bid storage highestBid = auctions[day];\n\n    require(\n      msg.value \u003e= (highestBid.amount * (10000 + bidIncreaseBps) / 10000)\n      \u0026\u0026 msg.value \u003e= minBid,\n      \u0027Bid not high enough\u0027\n    );\n\n    uint256 refundAmount;\n    address refundBidder;\n\n    if (highestBid.timestamp \u003e 0) {\n      refundAmount = highestBid.amount;\n      refundBidder = highestBid.bidder;\n    }\n\n    highestBid.timestamp = uint128(block.timestamp);\n    highestBid.amount = uint128(msg.value);\n    highestBid.bidder = msg.sender;\n    highestBid.usesMintPass = usesMintPass;\n    highestBid.mintPassId = mintPassId;\n\n    emit BidMade(day, msg.sender, msg.value, block.timestamp);\n\n    if (refundAmount \u003e 0) _safeTransferETH(refundBidder, refundAmount);\n  }\n\n  function settleAuction(uint256 day) external payable {\n    require(!auctionSettlements[day], \u0027Auction has already been settled\u0027);\n    require(currentDay() \u003e= day, \u0027Auction for this day has not started\u0027);\n    require(!isAuctionActive(day), \u0027Auction for this day is still active\u0027);\n\n    Bid storage highestBid = auctions[day];\n\n    auctionSettlements[day] = true;\n\n    uint256 amountToPay = highestBid.amount;\n\n    if (highestBid.timestamp \u003e 0) {\n      sequelsBase.mint(highestBid.bidder, day);\n\n    } else {\n      require(msg.sender == owner(), \u0027Ownable: caller is not the owner\u0027);\n      require(msg.value \u003e= minBid, \u0027Bid not high enough\u0027);\n      amountToPay = msg.value;\n\n      sequelsBase.mint(msg.sender, day);\n    }\n\n    emit Settled(day, block.timestamp);\n\n    bool mintPassStillOwned = FPP(fpp).ownerOf(highestBid.mintPassId) == highestBid.bidder;\n\n    uint256 totalRebate = 0;\n    if (highestBid.usesMintPass \u0026\u0026 mintPassStillOwned) {\n      FPP(fpp).logPassUse(highestBid.mintPassId, fppProjectId);\n      totalRebate = amountToPay * (mintPassRebateBps) / 10000;\n    }\n\n    if (totalRebate \u003e 0) {\n      _safeTransferETH(highestBid.bidder, totalRebate);\n      payable(beneficiary2).transfer(amountToPay - totalRebate);\n    } else {\n      payable(beneficiary1).transfer(amountToPay);\n    }\n  }\n\n  function owner() public view returns (address) {\n    return sequelsBase.owner();\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner(), \u0027Ownable: caller is not the owner\u0027);\n    _;\n  }\n\n  function setBidIncreaseBps(uint256 _bidIncreaseBps) external onlyOwner {\n    bidIncreaseBps = _bidIncreaseBps;\n  }\n\n  function setMintPassRebateBps(uint256 _mintPassRebateBps) external onlyOwner {\n    mintPassRebateBps = _mintPassRebateBps;\n  }\n\n  function setMinBid(uint256 _minBid) external onlyOwner {\n    minBid = _minBid;\n  }\n\n  function setBeneficiary(address _beneficiary1, address _beneficiary2) external onlyOwner {\n    beneficiary1 = _beneficiary1;\n    beneficiary2 = _beneficiary2;\n  }\n\n  function setFpp(address _fpp, uint256 _fppProjectId) external onlyOwner {\n    fpp = _fpp;\n    fppProjectId = _fppProjectId;\n  }\n\n  function setPaused(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  function isAuctionActive(uint256 day) public view returns (bool) {\n    uint256 startTime = (day * 1 days) + PROJECT_START_TIME;\n    uint256 endTime = startTime + 1 days;\n\n    return (\n      block.timestamp \u003e= startTime\n      \u0026\u0026 (\n        block.timestamp \u003c endTime\n        || block.timestamp \u003c auctions[day].timestamp + 10 minutes\n      )\n    );\n  }\n\n  function currentDay() public view returns (uint256) {\n    if (block.timestamp \u003c PROJECT_START_TIME) {\n      return 0;\n\n    } else if (block.timestamp \u003e PROJECT_END_TIME) {\n      return (PROJECT_END_TIME - PROJECT_START_TIME) / 1 days;\n\n    } else {\n      return (block.timestamp - PROJECT_START_TIME) / 1 days;\n    }\n  }\n\n  /**\n   * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\n   */\n  function _safeTransferETHWithFallback(address to, uint256 amount) internal {\n    if (!_safeTransferETH(to, amount)) {\n      IWETH(weth).deposit{ value: amount }();\n      IWETH(weth).transfer(to, amount);\n    }\n  }\n\n  /**\n   * @notice Transfer ETH and return the success status.\n   * @dev This function only forwards 30,000 gas to the callee.\n   */\n  function _safeTransferETH(address to, uint256 value) internal returns (bool) {\n    (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\n    return success;\n  }\n}\n"},"SequelsBase.sol":{"content":"// SPDX-License-Identifier: MIT\n// Copyright (c) 2022 Fellowship\n// contract by steviep.eth\n\n/*\n\n███████ ███████  ██████  ██    ██ ███████ ██      ███████\n██      ██      ██    ██ ██    ██ ██      ██      ██\n███████ █████   ██    ██ ██    ██ █████   ██      ███████\n     ██ ██      ██ ▄▄ ██ ██    ██ ██      ██           ██\n███████ ███████  ██████   ██████  ███████ ███████ ███████\n                    ▀▀\n\n*/\n\nimport \"./Dependencies.sol\";\nimport \"./SequelsMetadata.sol\";\nimport \"./OperatorFiltererDependencies.sol\";\n\npragma solidity ^0.8.17;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n\nabstract contract OperatorFilterer is UpdatableOperatorFilterer {\n  constructor() UpdatableOperatorFilterer(\n    CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS,\n    CANONICAL_CORI_SUBSCRIPTION,\n    true\n  ) {}\n}\n\n\ncontract SequelsBase is ERC721, Ownable, OperatorFilterer {\n  uint256 public constant maxSupply = 3652;\n  uint256 private _totalSupply = 0;\n  SequelsMetadata private _metadataContract;\n  address public minter;\n\n  address private royaltyBenificiary;\n  uint16 private royaltyBasisPoints = 500;\n\n  constructor() ERC721(\u0027Sequels\u0027, \u0027JMS\u0027) {\n    royaltyBenificiary = msg.sender;\n    _metadataContract = new SequelsMetadata(this);\n  }\n\n  function mint(address to, uint256 tokenId) external {\n    require(minter == msg.sender, \u0027Caller is not the minting address\u0027);\n    require(_totalSupply \u003c= maxSupply, \u0027Cannot exceed max supply\u0027);\n    _mint(to, tokenId);\n    _totalSupply++;\n  }\n\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    return _metadataContract.tokenURI(tokenId);\n  }\n\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function exists(uint256 tokenId) external view returns (bool) {\n    return _exists(tokenId);\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\n    // ERC2981\n    return interfaceId == bytes4(0x2a55205a) || super.supportsInterface(interfaceId);\n  }\n\n  function metadataContract() external view returns (address) {\n    return address(_metadataContract);\n  }\n\n  function setMetadataContract(address _addr) external onlyOwner {\n    _metadataContract = SequelsMetadata(_addr);\n  }\n\n  function setMinter(address _addr) external onlyOwner {\n    minter = _addr;\n  }\n\n  function setRoyaltyInfo(\n    address _royaltyBenificiary,\n    uint16 _royaltyBasisPoints\n  ) external onlyOwner {\n    royaltyBenificiary = _royaltyBenificiary;\n    royaltyBasisPoints = _royaltyBasisPoints;\n  }\n\n  function royaltyInfo(uint256, uint256 _salePrice) external view returns (address, uint256) {\n    return (royaltyBenificiary, _salePrice * royaltyBasisPoints / 10000);\n  }\n\n\n  event ProjectEvent(\n    address indexed poster,\n    string indexed eventType,\n    string content\n  );\n  event TokenEvent(\n    address indexed poster,\n    uint256 indexed tokenId,\n    string indexed eventType,\n    string content\n  );\n\n  function emitProjectEvent(string calldata eventType, string calldata content) external onlyOwner {\n    emit ProjectEvent(_msgSender(), eventType, content);\n  }\n\n  function emitTokenEvent(uint256 tokenId, string calldata eventType, string calldata content) external {\n    require(\n      owner() == _msgSender() || ERC721.ownerOf(tokenId) == _msgSender(),\n      \u0027Only project or token owner can emit token event\u0027\n    );\n    emit TokenEvent(_msgSender(), tokenId, eventType, content);\n  }\n\n\n  /// Operator Filterer\n\n  function owner() public view virtual override(UpdatableOperatorFilterer, Ownable) returns (address) {\n    return super.owner();\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n   */\n  function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\n    super.setApprovalForAll(operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n   */\n  function approve(address operator, uint256 tokenId) public override onlyAllowedOperatorApproval(operator) {\n    super.approve(operator, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n   */\n  function transferFrom(address from, address to, uint256 tokenId) public override onlyAllowedOperator(from) {\n    super.transferFrom(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n   */\n  function safeTransferFrom(address from, address to, uint256 tokenId) public override onlyAllowedOperator(from) {\n    super.safeTransferFrom(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\n   */\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\n    public\n    override\n    onlyAllowedOperator(from)\n  {\n    super.safeTransferFrom(from, to, tokenId, data);\n  }\n}\n"},"SequelsMetadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// Copyright (c) 2022 Fellowship\n// contract by steviep.eth\n\n/*\n\n███████ ███████  ██████  ██    ██ ███████ ██      ███████\n██      ██      ██    ██ ██    ██ ██      ██      ██\n███████ █████   ██    ██ ██    ██ █████   ██      ███████\n     ██ ██      ██ ▄▄ ██ ██    ██ ██      ██           ██\n███████ ███████  ██████   ██████  ███████ ███████ ███████\n                    ▀▀\n\n███    ███ ███████ ████████  █████  ██████   █████  ████████  █████\n████  ████ ██         ██    ██   ██ ██   ██ ██   ██    ██    ██   ██\n██ ████ ██ █████      ██    ███████ ██   ██ ███████    ██    ███████\n██  ██  ██ ██         ██    ██   ██ ██   ██ ██   ██    ██    ██   ██\n██      ██ ███████    ██    ██   ██ ██████  ██   ██    ██    ██   ██\n\n*/\n\nimport \"./SequelsBase.sol\";\nimport \"./Dependencies.sol\";\n\npragma solidity ^0.8.17;\n\ncontract SequelsMetadata {\n  using Strings for uint256;\n\n  SequelsBase public sequelsBase;\n  string public ipfsCid;\n\n  constructor(SequelsBase _sequelsBase) {\n    sequelsBase = _sequelsBase;\n  }\n\n  function owner() public view returns (address) {\n    return sequelsBase.owner();\n  }\n\n  function setIpfsCid(string calldata cid) external {\n    require(msg.sender == owner(), \"Ownable: caller is not the owner\");\n    ipfsCid = cid;\n  }\n\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\n    return string(abi.encodePacked(\u0027ipfs://\u0027, ipfsCid, \u0027/\u0027, tokenId.toString()));\n  }\n}\n"}}