// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

// Abstract contract to provide context functions
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// IERC20 interface
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// Ownable contract to manage ownership
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor (address initialOwner) {
        require(initialOwner != address(0), "Ownable: new owner is the zero address");
        _owner = initialOwner;
        emit OwnershipTransferred(address(0), initialOwner);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract Airdroptest is Ownable {
    event AirdropExecuted(address indexed token, address indexed recipient, uint256 amount);
    event TokensRecovered(address indexed token, uint256 amount);

    // Constructor to set the initial owner
    constructor(address initialOwner) Ownable(initialOwner) {}

    // Function to airdrop a fixed amount of tokens to multiple recipients
    function airdropEqual(address token, address[] calldata recipients, uint256 amount) external onlyOwner {
        IERC20 tokenContract = IERC20(token);
        uint256 totalAmount = amount * recipients.length;

        // Check if the contract has enough balance
        require(tokenContract.balanceOf(address(this)) >= totalAmount, "Insufficient contract balance");

        // Transfer tokens to each recipient
        for (uint i = 0; i < recipients.length; i++) {
            require(tokenContract.transfer(recipients[i], amount), "Transfer failed");
            emit AirdropExecuted(token, recipients[i], amount);
        }
    }

    // Function to airdrop different amounts of tokens to multiple recipients
    function airdropVariable(address token, address[] calldata recipients, uint256[] calldata amounts) external onlyOwner {
        require(recipients.length == amounts.length, "Recipients and amounts length mismatch");

        IERC20 tokenContract = IERC20(token);
        uint256 totalAmount = 0;

        // Calculate total amount required
        for (uint i = 0; i < amounts.length; i++) {
            totalAmount += amounts[i];
        }

        // Check if the contract has enough balance
        require(tokenContract.balanceOf(address(this)) >= totalAmount, "Insufficient contract balance");

        // Transfer tokens to each recipient
        for (uint i = 0; i < recipients.length; i++) {
            require(tokenContract.transfer(recipients[i], amounts[i]), "Transfer failed");
            emit AirdropExecuted(token, recipients[i], amounts[i]);
        }
    }

    // Function to recover tokens from the contract
    function recoverTokens(address token, uint256 amount) external onlyOwner {
        IERC20 tokenContract = IERC20(token);
        require(tokenContract.transfer(owner(), amount), "Token recovery failed");
        emit TokensRecovered(token, amount);
    }
}