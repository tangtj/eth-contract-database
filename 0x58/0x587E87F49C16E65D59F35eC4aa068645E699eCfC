
// File: contracts/SabaiStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./IERC20.sol";
import "./Ownable.sol";
import "./Context.sol";
import "./SafeMath.sol";

contract SabaiStaking is Ownable {
    using SafeMath for uint256;
    
    IERC20 immutable private _token;
    uint256 immutable private percentageOfEarnings;
    uint256 immutable private penaltyPercentage;
    uint256 immutable private minDeposit;
    uint256 immutable private depositDuration;
    uint256 private planExpired;

    struct Deposit {        
        uint256 startTS;
        uint256 endTS;        
        uint256 amount; 
        uint256 claimed;
        bool get;     
    }
    
    mapping(bytes32 => Deposit) deposits;
    mapping(uint256 => bytes32) depositsCounter;

    mapping(address => bool) users;
    address[] usersArray;
    mapping (address => bytes32[]) usersDeposits;
    mapping (bytes32 => address) depositsUsers;

    address public SabaiRewarderAddress;
    address public SabaiManager;

    uint totalDepositsCount;

    event DepositCreated(address _user, uint256 _amount, bytes32 _depositId);
    event DepositCreatedTo(address _user, uint256 _amount, bytes32 _depositId);
    event DepositClosed(address _user, uint256 _amount, bytes32 _depositId, bool _status);

    constructor(address _tokenAddress, uint256 _planExpired, uint256 _percentageOfEarnings, uint256 _penaltyPercentage, uint256 _minDeposit, uint256 _depositDuration, address _SabaiRewarderAddress, address _SabaiManager) {
        require(_tokenAddress != address(0x0));
        require(_SabaiRewarderAddress != address(0x0));
        require(_SabaiManager != address(0x0));

        _token = IERC20(_tokenAddress);

        planExpired = block.timestamp + _planExpired;
        
        percentageOfEarnings = _percentageOfEarnings;
        penaltyPercentage = _penaltyPercentage;
        minDeposit = _minDeposit;
        depositDuration = _depositDuration;
        SabaiRewarderAddress = _SabaiRewarderAddress;
        SabaiManager = _SabaiManager;
    }

    function ChangeSabaiRewarderAddress(address _newSabaiRewarderAddress) public onlyOwner {
        require(_newSabaiRewarderAddress != address(0x0));
        SabaiRewarderAddress = _newSabaiRewarderAddress;
    }

    function ChangeSabaiManager(address _newSabaiManager) public onlyOwner {
        require(_newSabaiManager != address(0x0));
        SabaiManager = _newSabaiManager;
    }

    function _checkUserDeposit(address _address, bytes32 _deposit_id) internal view returns(bool) {
        return depositsUsers[_deposit_id] == _address;
    }

    function getCurrentTime() private view returns(uint){
        return block.timestamp;
    }

    // Create a new deposit for an address
    function createDeposit(uint256 _amount) public {
        uint256 timestamp = getCurrentTime();

        require(timestamp < planExpired, "Offer has expired");
        require(_amount >= minDeposit, "Deposit amount is too small");
        require(_token.allowance(msg.sender, address(this)) >= _amount, "No permission to transfer tokens");
        require(_token.transferFrom(_msgSender(), address(this), _amount), "Problem with tokens transfer");

        bytes32 depositId = generateDepositId(msg.sender);
        deposits[depositId] = Deposit(timestamp, timestamp+depositDuration, _amount, 0, false);

        depositsCounter[totalDepositsCount] = depositId;
        totalDepositsCount = totalDepositsCount + 1;
        
        usersDeposits[msg.sender].push(depositId);

        depositsUsers[depositId] = msg.sender;

        if (!users[msg.sender]) {
            users[msg.sender] = true;
            usersArray.push(msg.sender);
        }

        emit DepositCreated(msg.sender, _amount, depositId);
    }

    // Create a new deposit by moderator
    function createDepositTo(address _to, uint256 _amount) public {
        uint256 timestamp = getCurrentTime();
        require(msg.sender == SabaiManager, "You are not a contract manager");
        require(timestamp < planExpired, "Offer has expired");
        require(_amount >= minDeposit, "Deposit amount is too small");
        require(_token.allowance(msg.sender, address(this)) >= _amount, "No permission to transfer tokens");
        require(_token.transferFrom(_msgSender(), address(this), _amount), "Problem with tokens transfer");

        bytes32 depositId = generateDepositId(_to);
        deposits[depositId] = Deposit(timestamp, timestamp+depositDuration, _amount, 0, false);

        depositsCounter[totalDepositsCount] = depositId;
        totalDepositsCount = totalDepositsCount + 1;
        
        usersDeposits[_to].push(depositId);

        depositsUsers[depositId] = _to;

        if (!users[_to]) {
            users[_to] = true;
            usersArray.push(_to);
        }

        emit DepositCreatedTo(_to, _amount, depositId);
    }

    function getReward(bytes32 _depositId) public {
        require(_checkUserDeposit(msg.sender, _depositId), "You are not the owner of the deposit"); 
        require(deposits[_depositId].get == false, "You have already taken a deposit");

        // If the deposit time is over - address receives a reward, otherwise a penalty
        if (getCurrentTime() > deposits[_depositId].endTS) {
            uint256 _claimedAmount = deposits[_depositId].amount.sub(deposits[_depositId].claimed); // Checking if the user has already tried to collect the reward, but did not receive it in full or not receive a rewards

            if (_claimedAmount > 0) {
                require(_token.transfer(msg.sender, _claimedAmount), "Problem with tokens transfer");
                deposits[_depositId].claimed.add(_claimedAmount);
            }

            uint256 _rewardAmount = deposits[_depositId].amount.mul(percentageOfEarnings).div(100);
            if (_token.allowance(SabaiRewarderAddress, address(this)) >= _rewardAmount) {
                require(_token.transferFrom(SabaiRewarderAddress, msg.sender, _rewardAmount), "Problem with tokens transfer");
            
                deposits[_depositId].get = true;

                emit DepositClosed(msg.sender, deposits[_depositId].amount, _depositId, true);
            }

        } else { // If the deposit is closed ahead of schedule (penalty)
            uint256 _claimedAmount = deposits[_depositId].amount.sub(deposits[_depositId].amount.mul(penaltyPercentage).div(100));
            require(_token.transfer(msg.sender, _claimedAmount), "Problem with tokens transfer");

            deposits[_depositId].claimed = _claimedAmount;
            deposits[_depositId].get = true;

            uint256 _penaltyAmount = deposits[_depositId].amount.sub(_claimedAmount);
            require(_token.transfer(SabaiRewarderAddress, _penaltyAmount), "Problem with tokens transfer");

            emit DepositClosed(msg.sender, deposits[_depositId].amount, _depositId, false);
        }
    }

    function generateDepositId(address _address) private view returns (bytes32) {
        return bytes32(keccak256(abi.encodePacked(_address, block.timestamp)));
    }

    // Get deposit ids by address
    function getDepositIdsByAddress(address _address) public view returns (bytes32[] memory) { 
        return usersDeposits[_address];
    }

    // Get information about the deposit by deposit id
    function getDepositDataById(bytes32 _depositId) public view returns (Deposit memory) {
        return deposits[_depositId];
    }

    function getUsersArray() public view returns (address[] memory) {
        return usersArray;
    }

    // The amount of tokens on the contract without deposits
    function getContractBalance() public view returns(uint256) {
        return _token.balanceOf(address(this));
    }

    // It is necessary for the correct calculation of future rewards and right approval
    function getRestOfDeposits() public view returns (uint256) {
        uint256 totalActualRewardsAmount = 0;
        for (uint i = 0; i < totalDepositsCount; i++) {
            if (deposits[depositsCounter[i]].get == false) {
                totalActualRewardsAmount = totalActualRewardsAmount.add(deposits[depositsCounter[i]].amount.mul(percentageOfEarnings).div(100));
            }
        }

        return totalActualRewardsAmount;
    }

    // Stop offers now (emergency)
    function stop() external onlyOwner {
        planExpired = getCurrentTime();
    }
}

// File: contracts/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: contracts/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "./Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

