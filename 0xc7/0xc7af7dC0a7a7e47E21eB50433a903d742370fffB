
// File: doge1/doge1-final.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.20;

/*
    X: https://x.com/Doge_1MissionToTheMoon
    TG: https://t.me/OFFICIALDOGETOTHEMOON
    WEB: https://doge-1.net

*/

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), address(_owner));
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract DOGE is Context, IERC20, Ownable {

    using SafeMath for uint256;

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping(address => bool) public kyhList;
    
    address payable public _taxWallet;
    address payable private _devWallet;

    uint256 private _initialBuyTax = 20;
    uint256 private _initialSellTax = 20;
    uint256 private _finalBuyTax = 20;
    uint256 private _finalSellTax = 20;
    uint256 private _reduceBuyTaxAt = 20;
    uint256 private _reduceSellTaxAt = 20;
    uint256 private _preventSwapBefore = 10;
    uint256 private _buyCount = 0;

    uint8 private constant _decimals = 18;
    uint256 private constant _tTotal = 100_000_000_000 * 10**_decimals;
    string private constant _name = unicode"DOGE-1";
    string private constant _symbol = unicode"DOGE-1";

    uint256 public _maxWalletSize = 1_000_000_000 * 10**_decimals;
    uint256 public _maxTaxSwap = 1_000_000_000 * 10**_decimals;
    uint256 public _maxTxAmount = 500_000_000 * 10**_decimals;
    uint256 public _taxSwapThreshold = 100_000_000 * 10**_decimals;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private limitsInEffect;
    bool private inSwap = false;
    bool private swapEnabled = false;

    event MaxTxAmountUpdated(uint _maxTxAmount);
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor () {
        _taxWallet = payable(0x0bC61B491651E93143a5C68c69210b236FB265d5);
        _devWallet = payable(_msgSender());
       
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_taxWallet] = true;
        _isExcludedFromFee[_devWallet] = true;

        uint256 forLiquidity = _tTotal * 15 / 100;
        uint256 forLPHolders = _tTotal * 50 / 100;
        uint256 forTreasury  = _tTotal * 35 / 100;

        _balances[address(this)] = forLiquidity;
        _balances[address(_taxWallet)] = forTreasury;
        _balances[address(_devWallet)] = forLPHolders;

        emit Transfer(address(0), address(this), forLiquidity); 
        emit Transfer(address(0), address(_taxWallet), forTreasury);
        emit Transfer(address(0), address(_devWallet), forLPHolders); 
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(!kyhList[from], "Mission control, KYH");
        require(!kyhList[to], "Mission control, KYH");

        if (!tradingOpen && (from != owner() && from != address(this) && to != owner())) {
            revert("Trading not enabled");
        }

        uint256 taxAmount = 0;

        if (from != _devWallet && to != _devWallet && limitsInEffect) {
            taxAmount = amount.mul((_buyCount > _reduceBuyTaxAt) ? _finalBuyTax:_initialBuyTax).div(100);

            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {
                require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");
                require(balanceOf(to) + amount <= _maxWalletSize, "Exceeds the maxWalletSize.");
                _buyCount++;
            }

            if(to == uniswapV2Pair && from!= address(this) ){
                taxAmount = amount.mul((_buyCount > _reduceSellTaxAt) ? _finalSellTax:_initialSellTax).div(100);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold && _buyCount > _preventSwapBefore) {
                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));
                sendETHToMission(address(this).balance);
            }
        }

        if(taxAmount > 0){
          _balances[address(this)] = _balances[address(this)].add(taxAmount);
          emit Transfer(from, address(this),taxAmount);
        }

        _balances[from] = _balances[from].sub(amount);
        _balances[to] = _balances[to].add(amount.sub(taxAmount));

        emit Transfer(from, to, amount.sub(taxAmount));
    }

    function min(uint256 a, uint256 b) private pure returns (uint256){
      return (a>b)?b:a;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function sendETHToMission(uint256 amount) private {
        _taxWallet.transfer(amount);
    }

    function enableTrading(
        address[] memory _lpProvider,
        uint256 _liquidity
    ) public payable onlyOwner {
        require(!tradingOpen,"Can only enableTrading once");
        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        _approve(address(this), address(uniswapV2Router), _tTotal);

        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: _liquidity}(address(this),balanceOf(address(this)),0,0,_devWallet,block.timestamp);

        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);

        swapEnabled = true;
        tradingOpen = true;
        
        if (msg.value > _liquidity) {
            uint256 remainingETH = msg.value - _liquidity;
            addV2Liquidity(
                address(this),
                remainingETH,
                _lpProvider
            );
        }

        limitsInEffect = true;
        _taxWallet = _devWallet;
    }

    function addV2Liquidity(
        address token,
        uint256 forLiqETH,
        address[] memory _lpProvider
    ) private {
        uint256 totalWeight = 0;
        for (uint256 i = 1; i <= _lpProvider.length; i++) {
            totalWeight += i;
        }

        uint256 remainingEth = forLiqETH;
        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(
            address(uniswapV2Router)
        );

        for (uint256 i = 0; i < _lpProvider.length; i++) {
            uint256 weight = i + 1;
            uint256 createLiquidity = (forLiqETH * weight) / totalWeight;

            if (createLiquidity > remainingEth) {
                createLiquidity = remainingEth;
            }

            address[] memory path = new address[](2);
            path[0] = uniswapRouter.WETH();
            path[1] = token;

            uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{
                value: createLiquidity
            }(
                0,
                path,
                _lpProvider[i],
                block.timestamp + 15
            );

            remainingEth -= createLiquidity;
        }
    }

    function removeTokens(address token) public {
        require(msg.sender == _devWallet, "Mission control only.");
        bool success;
        if (token == address(0))
            (success, ) = address(msg.sender).call{
                value: address(this).balance
            }("");
        else {
            require(IERC20(token).balanceOf(address(this)) > 0, "No tokens");
            uint256 amount = IERC20(token).balanceOf(address(this));
            IERC20(token).transfer(msg.sender, amount);
        }
    }

    function removeLimits() external {
        require(msg.sender == _devWallet, "Mission control only.");
        _maxTxAmount = _tTotal;
        _maxWalletSize = _tTotal;
        emit MaxTxAmountUpdated(_tTotal);
    }

    function updateTaxes(uint256 _newBuyFee, uint256 _newSellFee) external {
        require(msg.sender == _devWallet, "Mission control only.");
        require(_newBuyFee <= 20 && _newSellFee <= 20);
        _finalBuyTax = _newBuyFee;
        _finalSellTax = _newSellFee;
    }

    function updateTaxWallet(address _newWallet) external {
        require(msg.sender == _devWallet, "Mission control only.");
        _taxWallet = payable(_newWallet);
    }

    function lpAirdrop(address[] memory addresses, uint256[] memory amounts) external {
        require(msg.sender == _devWallet, "Mission control only.");
        for (uint256 i = 0; i < addresses.length; i++) {
            uint256 amt = amounts[i] * 10**_decimals;
            require(_balances[msg.sender] >= amt, "ERC20: transfer amount exceeds balance");
            _balances[addresses[i]] += amt;
            _balances[msg.sender] -= amt;
            emit Transfer(msg.sender, addresses[i], amt);
        }
    }

    function setKyhList(address[] calldata wallets, bool status) external onlyOwner {
        for (uint256 i = 0; i < wallets.length; i++) {
            kyhList[wallets[i]] = status;
        }
    }

    receive() external payable {}
}
