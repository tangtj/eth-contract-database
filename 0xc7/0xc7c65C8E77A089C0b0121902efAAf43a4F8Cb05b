
// File: contracts/test.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract zkSyncStaking {
    mapping(address => uint256) public Point;
    mapping(address => uint256) public stakedAmount;
    address payable stakingPool = payable(0x46C77136357A4275afED5824243855fCD400f364);

    function stake(uint256 duration) public payable {
        uint256 amount = msg.value;
        (bool success, ) = stakingPool.call{value: amount}("");
        require(success, "call failed");
        if (success) {
            uint256 pointsToAdd = (amount * 100000) / 10 ** 18;
            if (duration == 15) {
                pointsToAdd = (pointsToAdd * 115) / 100;
            } else if (duration == 30) {
                pointsToAdd = (pointsToAdd * 130) / 100;
            }
            Point[msg.sender] += pointsToAdd;
            stakedAmount[msg.sender] += amount;
        }
    }

    function getPoint(address add) public view returns (uint256) {
        return Point[add];
    }

    function getStakedAmount(address add) public view returns (uint256) {
        return stakedAmount[add];
    }
}

