
// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)

pragma solidity ^0.8.20;

import {IAccessControl} from "./IAccessControl.sol";
import {Context} from "../utils/Context.sol";
import {ERC165} from "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```solidity
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```solidity
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
 * to enforce additional security measures for this role.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address account => bool) hasRole;
        bytes32 adminRole;
    }

    mapping(bytes32 role => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with an {AccessControlUnauthorizedAccount} error including the required role.
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual returns (bool) {
        return _roles[role].hasRole[account];
    }

    /**
     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`
     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`
     * is missing `role`.
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert AccessControlUnauthorizedAccount(account, role);
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleGranted} event.
     */
    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleRevoked} event.
     */
    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `callerConfirmation`.
     *
     * May emit a {RoleRevoked} event.
     */
    function renounceRole(bytes32 role, address callerConfirmation) public virtual {
        if (callerConfirmation != _msgSender()) {
            revert AccessControlBadConfirmation();
        }

        _revokeRole(role, callerConfirmation);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleGranted} event.
     */
    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {
        if (!hasRole(role, account)) {
            _roles[role].hasRole[account] = true;
            emit RoleGranted(role, account, _msgSender());
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleRevoked} event.
     */
    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {
        if (hasRole(role, account)) {
            _roles[role].hasRole[account] = false;
            emit RoleRevoked(role, account, _msgSender());
            return true;
        } else {
            return false;
        }
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)

pragma solidity ^0.8.20;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev The `account` is missing a role.
     */
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);

    /**
     * @dev The caller of a function is not the expected one.
     *
     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.
     */
    error AccessControlBadConfirmation();

    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `callerConfirmation`.
     */
    function renounceRole(bytes32 role, address callerConfirmation) external;
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)

pragma solidity ^0.8.20;

import {IERC165} from "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/PremiusMarket.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.16;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";

struct Token {
    address token;
    uint48 settleTime;
    uint48 settleDuration;
    uint152 settleRate; // number of token per point
    uint8 status; //
}

struct Offer {
    uint8 offerType;
    bytes32 tokenId;
    address exToken;
    uint256 amount;
    uint256 value;
    uint256 collateral;
    uint256 filledAmount;
    uint8 status;
    address offeredBy;
    bool fullMatch;
}

struct Order {
    uint256 offerId;
    uint256 amount;
    address seller;
    address buyer;
    uint8 status;
}

struct Config {
    uint256 pledgeRate;
    uint256 feeRefund;
    uint256 feeSettle;
    address feeWallet;
}

contract PremiusMarket is AccessControl, ReentrancyGuard {
    using SafeERC20 for IERC20;

    uint256 constant WEI6 = 10 ** 6;
    uint8 constant OFFER_BUY = 1;
    uint8 constant OFFER_SELL = 2;

    // Status
    // Offer status
    uint8 constant STATUS_OFFER_OPEN = 1;
    uint8 constant STATUS_OFFER_FILLED = 2;
    uint8 constant STATUS_OFFER_CANCELLED = 3;

    // Order Status
    uint8 constant STATUS_ORDER_OPEN = 1;
    uint8 constant STATUS_ORDER_SETTLE_FILLED = 2;
    uint8 constant STATUS_ORDER_SETTLE_CANCELLED = 3;
    uint8 constant STATUS_ORDER_CANCELLED = 3;

    // token status
    uint8 constant STATUS_TOKEN_ACTIVE = 1;
    uint8 constant STATUS_TOKEN_INACTIVE = 2;
    uint8 constant STATUS_TOKEN_SETTLE = 3;

    bytes32 public constant OPERATOR_ROLE = keccak256("OPERATOR_ROLE");

    mapping(address => bool) public acceptedTokens;
    mapping(bytes32 => bool) public tokenCreated;
    mapping(bytes32 => Token) public tokens;
    mapping(uint256 => Offer) public offers;
    uint256 public lastOfferId;
    mapping(uint256 => Order) public orders;
    uint256 public lastOrderId;
    Config public config;

    // event
    event NewOffer(
        uint256 id,
        uint8 offerType,
        bytes32 tokenId,
        address exToken,
        uint256 amount,
        uint256 value,
        uint256 collateral,
        bool fullMatch,
        address doer
    );
    event NewToken(bytes32 tokenId, uint256 settleDuration);
    event NewOrder(uint256 id, uint256 offerId, uint256 amount, address seller, address buyer);

    event SettleFilled(uint256 orderId, uint256 value, uint256 fee, address doer);
    event SettleCancelled(uint256 orderId, uint256 value, uint256 fee, address doer);

    event CancelOrder(uint256 orderId, address doer);
    event CancelOffer(uint256 offerId, uint256 refundValue, uint256 refundFee, address doer);

    event UpdateAcceptedTokens(address[] tokens, bool isAccepted);

    event CloseOffer(uint256 offerId, uint256 refundAmount);

    event UpdateConfig(
        address oldFeeWallet,
        uint256 oldFeeSettle,
        uint256 oldFeeRefund,
        uint256 oldPledgeRate,
        address newFeeWallet,
        uint256 newFeeSettle,
        uint256 newFeeRefund,
        uint256 newPledgeRate
    );

    event TokenToSettlePhase(bytes32 tokenId, address token, uint256 settleRate, uint256 settleTime);
    event UpdateTokenStatus(bytes32 tokenId, uint8 oldValue, uint8 newValue);
    event TokenForceCancelSettlePhase(bytes32 tokenId);

    event Settle2Steps(uint256 orderId, bytes32 hash, address doer);

    event UpdateTokenSettleDuration(bytes32 tokenId, uint48 oldValue, uint48 newValue);

    constructor(address adminAddress, address feeWalletAddress) {
        require(adminAddress != address(0), "Admin address cannot be the zero address");
        require(feeWalletAddress != address(0), "Fee wallet address cannot be the zero address");

        _grantRole(DEFAULT_ADMIN_ROLE, adminAddress);
        _grantRole(OPERATOR_ROLE, adminAddress);

        config.pledgeRate = WEI6; // 1:1
        config.feeWallet = feeWalletAddress;
        config.feeSettle = WEI6 / 50; // 2.0%
        config.feeRefund = WEI6 / 200; // 0.5%
    }

    ///////////////////////////
    ////// SYSTEM ACTION //////
    ///////////////////////////

    /**
     * @dev Creates a new token. Only addresses with the OPERATOR_ROLE role can call this function.
     * @param tokenId The unique identifier of the token.
     * @param settleDuration The duration of the settlement, in seconds, representing the time from the start of the transaction to when it can be settled.
     */
    function createToken(bytes32 tokenId, uint48 settleDuration) external onlyRole(OPERATOR_ROLE) {
        require(settleDuration >= 24 * 60 * 60, "createToken: Minimum 24h for settling"); //+
        require(!tokenCreated[tokenId], "createToken: Token already exists");
        tokenCreated[tokenId] = true;
        Token storage _token = tokens[tokenId];
        _token.settleDuration = settleDuration;
        _token.status = STATUS_TOKEN_ACTIVE;
        emit NewToken(tokenId, settleDuration);
    }

    /**
     * @dev Moves a token to the settlement phase. Only addresses with the OPERATOR_ROLE role can call this function.
     * @param tokenId The unique identifier of the token.
     * @param tokenAddress The contract address of the token.
     * @param settleRate The settlement rate, representing how many tokens can be exchanged for 1M points.
     */
    function tokenToSettlePhase(
        bytes32 tokenId,
        address tokenAddress,
        uint152 settleRate // how many token for 1M points
    ) external onlyRole(OPERATOR_ROLE) {
        Token storage _token = tokens[tokenId];
        require(tokenAddress != address(0), "tokenToSettlePhase: Invalid Token Address");
        require(settleRate > 0, "tokenToSettlePhase:Invalid Settle Rate");
        require(
            _token.status == STATUS_TOKEN_ACTIVE || _token.status == STATUS_TOKEN_INACTIVE,
            "tokenToSettlePhase:Invalid Token Status"
        );
        _token.token = tokenAddress;
        _token.settleRate = settleRate;
        // update token settle status & time
        _token.status = STATUS_TOKEN_SETTLE;
        _token.settleTime = uint48(block.timestamp);

        emit TokenToSettlePhase(tokenId, tokenAddress, settleRate, block.timestamp);
    }

    /**
     * @param tokenId The unique identifier of the token.
     */
    function tokenToggleActivation(bytes32 tokenId) external onlyRole(OPERATOR_ROLE) {
        Token storage _token = tokens[tokenId];
        uint8 fromStatus = _token.status;
        uint8 toStatus = fromStatus == STATUS_TOKEN_ACTIVE ? STATUS_TOKEN_INACTIVE : STATUS_TOKEN_ACTIVE;

        require(fromStatus == STATUS_TOKEN_ACTIVE || fromStatus == STATUS_TOKEN_INACTIVE, "Cannot Change Token Status");

        _token.status = toStatus;
        emit UpdateTokenStatus(tokenId, fromStatus, toStatus);
    }

    /**
     * @param tokenId The unique identifier of the token.
     */
    function tokenForceCancelSettlePhase(bytes32 tokenId) external onlyRole(OPERATOR_ROLE) {
        Token storage _token = tokens[tokenId];
        require(_token.status == STATUS_TOKEN_SETTLE, "Invalid Token Status");
        _token.status = STATUS_TOKEN_INACTIVE;
        emit TokenForceCancelSettlePhase(tokenId);
    }

    /**
     * @param tokenId The unique identifier of the token.
     * @param newValue The new settle duration value in seconds.
     */
    function updateSettleDuration(bytes32 tokenId, uint48 newValue) external onlyRole(OPERATOR_ROLE) {
        require(newValue >= 24 * 60 * 60, "Minimum 24h for settling");
        Token storage _token = tokens[tokenId];
        uint48 oldValue = _token.settleDuration;
        _token.settleDuration = newValue;
        emit UpdateTokenSettleDuration(tokenId, oldValue, newValue);
    }

    /**
     * @param orderId The ID of the order to be canceled.
     */
    function forceCancelOrder(uint256 orderId) public nonReentrant onlyRole(OPERATOR_ROLE) {
        Order storage order = orders[orderId];
        Offer storage offer = offers[order.offerId];
        require(order.status == STATUS_OFFER_OPEN, "Invalid Order Status");
        // PMA-3
        uint8 targetDecimals;
        if (offer.exToken == address(0)) {
            targetDecimals = 18;
        } else {
            targetDecimals = IERC20Metadata(offer.exToken).decimals();
        }

        // calculate refund value
        uint256 buyerRefundValue = convertDecimals(
            (order.amount * offer.value) / offer.amount,
            18, // source decimals
            targetDecimals
        );
        uint256 sellerRefundValue = convertDecimals(
            (order.amount * offer.collateral) / offer.amount,
            18, // source decimals
            targetDecimals
        );
        address buyer = order.buyer;
        address seller = order.seller;

        // refund
        if (offer.exToken == address(0)) {
            // refund ETH
            if (buyerRefundValue > 0 && buyer != address(0)) {
                (bool success,) = buyer.call{value: buyerRefundValue}("");
                require(success, "Transfer Funds to Seller Fail");
            }
            if (sellerRefundValue > 0 && seller != address(0)) {
                (bool success,) = seller.call{value: sellerRefundValue}("");
                require(success, "Transfer Funds to Seller Fail");
            }
        } else {
            IERC20 iexToken = IERC20(offer.exToken);
            if (buyerRefundValue > 0 && buyer != address(0)) {
                iexToken.safeTransfer(buyer, buyerRefundValue);
            }
            if (sellerRefundValue > 0 && seller != address(0)) {
                iexToken.safeTransfer(seller, sellerRefundValue);
            }
        }

        order.status = STATUS_ORDER_CANCELLED;
        emit CancelOrder(orderId, _msgSender());
    }

    /**
     * @param orderId The ID of the order being settled.
     * @param hash A hash representing transaction details or verification information, used for additional security or validation.
     */
    function settle2Steps(uint256 orderId, bytes32 hash) public nonReentrant onlyRole(OPERATOR_ROLE) {
        Order storage order = orders[orderId];
        Offer storage offer = offers[order.offerId];
        Token storage token = tokens[offer.tokenId];

        // check condition
        require(token.status == STATUS_TOKEN_SETTLE, "Invalid Status");
        require(token.token != address(0) && token.settleRate > 0, "Token Not Set");
        //PMA-5
        require(token.settleTime > 0, "Settling Time Not Started");
        require(order.status == STATUS_ORDER_OPEN, "Invalid Order Status");

        uint8 targetDecimals;
        if (offer.exToken == address(0)) {
            targetDecimals = 18;
        } else {
            targetDecimals = IERC20Metadata(offer.exToken).decimals();
        }

        // calculate and adjust the precision of the settlement value
        uint256 collateral = convertDecimals((order.amount * offer.collateral) / offer.amount, 18, targetDecimals);
        uint256 value = convertDecimals((order.amount * offer.value) / offer.amount, 18, targetDecimals);

        // transfer liquid to seller
        uint256 settleFee = (value * config.feeSettle) / WEI6;
        uint256 totalValue = value + collateral - settleFee;
        if (offer.exToken == address(0)) {
            // by ETH
            (bool success1,) = order.seller.call{value: totalValue}("");
            (bool success2,) = config.feeWallet.call{value: settleFee}("");
            require(success1 && success2, "Transfer Funds Fail");
        } else {
            // by exToken
            IERC20 iexToken = IERC20(offer.exToken);
            iexToken.safeTransfer(order.seller, totalValue);
            iexToken.safeTransfer(config.feeWallet, settleFee);
        }

        order.status = STATUS_ORDER_SETTLE_FILLED;

        emit Settle2Steps(orderId, hash, _msgSender());
        emit SettleFilled(orderId, totalValue, settleFee, _msgSender());
    }

    /**
     * @param orderIds An array of order IDs to be settled.
     * @param hashes An array of hashes, each corresponding to a transaction in the `orderIds` array for verification.
     */
    function settle2StepsBatch(uint256[] memory orderIds, bytes32[] memory hashes) external {
        require(orderIds.length == hashes.length, "Invalid Input");
        for (uint256 i = 0; i < orderIds.length; i++) {
            settle2Steps(orderIds[i], hashes[i]);
        }
    }

    /////////////////////////
    ////// USER ACTION //////
    /////////////////////////

    /**
     * @param offerType Specifies the type of offer: 1 for buy, 2 for sell.
     * @param tokenId The unique identifier of the token for which the offer is being made.
     * @param amount The amount of tokens being offered for buy/sell.
     * @param value The total value (in exchange token or ETH) that the offerer is willing to pay or receive.
     * @param exToken The token address against which the offer is being made. Address(0) if the offer is in ETH.
     * @param fullMatch A boolean indicating if the offer must be fully matched (true) or can be partially filled (false).
     */
    function newOffer(uint8 offerType, bytes32 tokenId, uint256 amount, uint256 value, address exToken, bool fullMatch)
        external
        nonReentrant
    {
        Token storage token = tokens[tokenId];
        require(token.status == STATUS_TOKEN_ACTIVE, "Invalid Token");
        require(exToken != address(0) && acceptedTokens[exToken], "Invalid Offer Token");
        require(amount > 0 && value > 0, "Invalid Amount or Value");

        uint8 targetDecimals = IERC20Metadata(exToken).decimals();
        uint256 adjustedValue = convertDecimalsCeil(value, 18, targetDecimals);
        uint256 collateral = (value * config.pledgeRate) / WEI6;
        uint256 adjustedCollateral = convertDecimalsCeil(collateral, 18, targetDecimals);

        uint256 _transferAmount = offerType == OFFER_BUY ? adjustedValue : adjustedCollateral;
        IERC20 iexToken = IERC20(exToken);
        iexToken.safeTransferFrom(_msgSender(), address(this), _transferAmount);

        // create new offer
        _newOffer(offerType, tokenId, exToken, amount, value, collateral, fullMatch);
    }

    /**
     * @param offerType, tokenId, amount, value, and fullMatch parameters have the same definitions as in `newOffer`.
     */
    function newOfferETH(uint8 offerType, bytes32 tokenId, uint256 amount, uint256 value, bool fullMatch)
        external
        payable
        nonReentrant
    {
        Token storage token = tokens[tokenId];
        require(token.status == STATUS_TOKEN_ACTIVE, "Invalid Token");
        require(amount > 0 && value > 0, "Invalid Amount or Value");
        // collateral
        uint256 collateral = (value * config.pledgeRate) / WEI6;

        uint256 _ethAmount = offerType == OFFER_BUY ? value : collateral;
        require(_ethAmount <= msg.value, "Insufficient Funds");
        // (PMA-1)If the sent ETH is more than required, refund the excess
        if (msg.value > _ethAmount) {
            uint256 excessAmount = msg.value - _ethAmount;
            (bool refundSuccess,) = msg.sender.call{value: excessAmount}("");
            require(refundSuccess, "Refund of excess ETH failed");
        }
        // create new offer
        _newOffer(offerType, tokenId, address(0), amount, value, collateral, fullMatch);
    }

    /**
     * @param offerId The ID of the offer being filled.
     * @param amount The amount of the offer the filler wishes to fulfill. Must not exceed the available amount in the offer.
     */
    function fillOffer(uint256 offerId, uint256 amount) external nonReentrant {
        Offer storage offer = offers[offerId];
        Token storage token = tokens[offer.tokenId];

        require(offer.status == STATUS_OFFER_OPEN, "Invalid Offer Status");
        require(token.status == STATUS_TOKEN_ACTIVE, "Invalid token Status");
        require(amount > 0, "Invalid Amount");
        require(offer.amount - offer.filledAmount >= amount, "Insufficient Allocations");
        require(offer.fullMatch == false || offer.amount == amount, "FullMatch required");
        require(offer.exToken != address(0), "Invalid Offer Token");

        // transfer value or collateral
        IERC20 iexToken = IERC20(offer.exToken);
        uint256 _transferAmount;
        address buyer;
        address seller;
        uint8 targetDecimals = IERC20Metadata(offer.exToken).decimals();
        if (offer.offerType == OFFER_BUY) {
            uint256 collateralAmount = (offer.collateral * amount) / offer.amount;
            _transferAmount = convertDecimalsCeil(collateralAmount, 18, targetDecimals);
            buyer = offer.offeredBy;
            seller = _msgSender();
        } else {
            uint256 valueAmount = (offer.value * amount) / offer.amount;
            _transferAmount = convertDecimalsCeil(valueAmount, 18, targetDecimals);
            buyer = _msgSender();
            seller = offer.offeredBy;
        }
        iexToken.safeTransferFrom(_msgSender(), address(this), _transferAmount);

        // new order
        _fillOffer(offerId, amount, buyer, seller);
    }

    /**
     * @param offerId The ID of the offer to be filled.
     * @param amount The amount of the offer that the user wishes to fulfill.
     */
    function fillOfferETH(uint256 offerId, uint256 amount) external payable nonReentrant {
        Offer storage offer = offers[offerId];
        Token storage token = tokens[offer.tokenId];

        require(offer.status == STATUS_OFFER_OPEN, "Invalid Offer Status");
        require(token.status == STATUS_TOKEN_ACTIVE, "Invalid token Status");
        require(amount > 0, "Invalid Amount");
        require(offer.amount - offer.filledAmount >= amount, "Insufficient Allocations");
        require(offer.fullMatch == false || offer.amount == amount, "FullMatch required");
        require(offer.exToken == address(0), "Invalid Offer Token");

        // transfer value or collecteral
        uint256 _ethAmount;
        address buyer;
        address seller;
        if (offer.offerType == OFFER_BUY) {
            _ethAmount = (offer.collateral * amount) / offer.amount;
            buyer = offer.offeredBy;
            seller = _msgSender();
        } else {
            _ethAmount = (offer.value * amount) / offer.amount;
            buyer = _msgSender();
            seller = offer.offeredBy;
        }
        require(msg.value >= _ethAmount, "Insufficient Funds");

        // (PMA-1)Refund excess ETH
        if (msg.value > _ethAmount) {
            uint256 excessAmount = msg.value - _ethAmount;
            (bool refundSuccess,) = msg.sender.call{value: excessAmount}("");
            require(refundSuccess, "Refund of excess ETH failed");
        }

        // new order
        _fillOffer(offerId, amount, buyer, seller);
    }

    /**
     * @param offerId The ID of the offer to be cancelled.
     */
    function cancelOffer(uint256 offerId) public nonReentrant {
        Offer storage offer = offers[offerId];

        require(offer.offeredBy == _msgSender(), "Offer Owner Only");
        require(offer.status == STATUS_OFFER_OPEN, "Invalid Offer Status");

        uint256 refundAmount = offer.amount - offer.filledAmount;
        require(refundAmount > 0, "Insufficient Allocations");

        // calculate refund
        uint8 targetDecimals;
        if (offer.exToken == address(0)) {
            targetDecimals = 18;
        } else {
            targetDecimals = IERC20Metadata(offer.exToken).decimals();
        }

        uint256 refundValue;
        if (offer.offerType == OFFER_BUY) {
            refundValue = convertDecimals(
                (refundAmount * offer.value) / offer.amount,
                18, // source decimals
                targetDecimals
            );
        } else {
            refundValue = convertDecimals(
                (refundAmount * offer.collateral) / offer.amount,
                18, // source decimals
                targetDecimals
            );
        }
        uint256 refundFee = (refundValue * config.feeRefund) / WEI6;
        refundValue -= refundFee;

        // refund
        if (offer.exToken == address(0)) {
            // refund ETH
            (bool success1,) = offer.offeredBy.call{value: refundValue}("");
            (bool success2,) = config.feeWallet.call{value: refundFee}("");
            require(success1 && success2, "Transfer Funds Fail");
        } else {
            IERC20 iexToken = IERC20(offer.exToken);
            iexToken.safeTransfer(offer.offeredBy, refundValue);
            iexToken.safeTransfer(config.feeWallet, refundFee);
        }

        offer.status = STATUS_OFFER_CANCELLED;
        emit CancelOffer(offerId, refundValue, refundFee, _msgSender());
    }

    /**
     * @param orderId The ID of the order to settle.
     */
    function settleFilled(uint256 orderId) public nonReentrant {
        Order storage order = orders[orderId];
        Offer storage offer = offers[order.offerId];
        Token storage token = tokens[offer.tokenId];

        // check condition
        require(token.status == STATUS_TOKEN_SETTLE, "Invalid Status");
        require(token.token != address(0) && token.settleRate > 0, "Token Not Set");
        //PMA-5
        require(token.settleTime > 0, "Settling Time Not Started");
        require(order.seller == _msgSender(), "Seller Only");
        require(order.status == STATUS_ORDER_OPEN, "Invalid Order Status");

        uint8 exTokenDecimals;
        if (offer.exToken == address(0)) {
            exTokenDecimals = 18;
        } else {
            exTokenDecimals = IERC20Metadata(offer.exToken).decimals();
        }

        uint256 collateral = convertDecimals((order.amount * offer.collateral) / offer.amount, 18, exTokenDecimals);
        uint256 value = convertDecimals((order.amount * offer.value) / offer.amount, 18, exTokenDecimals);

        // transfer token to buyer
        IERC20 iToken = IERC20(token.token);
        uint8 tokenDecimals = IERC20Metadata(token.token).decimals();
        // calculate token amount
        uint256 tokenAmount = convertDecimals((order.amount * token.settleRate) / WEI6, 18, tokenDecimals);
        uint256 tokenAmountFee = (tokenAmount * config.feeSettle) / WEI6;
        // transfer order fee in token to fee wallet
        iToken.safeTransferFrom(order.seller, config.feeWallet, tokenAmountFee);
        // transfer token after fee to buyer
        iToken.safeTransferFrom(order.seller, order.buyer, tokenAmount - tokenAmountFee);

        // transfer liquid to seller
        uint256 settleFee = (value * config.feeSettle) / WEI6;
        uint256 totalValue = value + collateral - settleFee;
        if (offer.exToken == address(0)) {
            // by ETH
            (bool success1,) = order.seller.call{value: totalValue}("");
            (bool success2,) = config.feeWallet.call{value: settleFee}("");
            require(success1 && success2, "Transfer Funds Fail");
        } else {
            // by exToken
            IERC20 iexToken = IERC20(offer.exToken);
            iexToken.safeTransfer(order.seller, totalValue);
            iexToken.safeTransfer(config.feeWallet, settleFee);
        }

        order.status = STATUS_ORDER_SETTLE_FILLED;

        emit SettleFilled(orderId, totalValue, settleFee, _msgSender());
    }

    /**
     * @param orderId The ID of the order to cancel settlement for.
     */
    function settleCancelled(uint256 orderId) public nonReentrant {
        Order storage order = orders[orderId];
        Offer storage offer = offers[order.offerId];
        Token storage token = tokens[offer.tokenId];

        // check condition
        require(token.status == STATUS_TOKEN_SETTLE, "Invalid Status");
        require(block.timestamp > token.settleTime + token.settleDuration, "Settling Time Not Ended Yet");
        require(order.status == STATUS_ORDER_OPEN, "Invalid Order Status");
        require(order.buyer == _msgSender() || hasRole(OPERATOR_ROLE, _msgSender()), "Buyer or Operator Only");

        uint8 exTokenDecimals;
        if (offer.exToken == address(0)) {
            exTokenDecimals = 18;
        } else {
            exTokenDecimals = IERC20Metadata(offer.exToken).decimals();
        }

        uint256 collateral = convertDecimals((order.amount * offer.collateral) / offer.amount, 18, exTokenDecimals);
        uint256 value = convertDecimals((order.amount * offer.value) / offer.amount, 18, exTokenDecimals);

        // transfer liquid to buyer
        uint256 settleFee = (collateral * config.feeSettle * 2) / WEI6;
        uint256 totalValue = value + collateral - settleFee;
        if (offer.exToken == address(0)) {
            // by ETH
            (bool success1,) = order.buyer.call{value: totalValue}("");
            (bool success2,) = config.feeWallet.call{value: settleFee}("");
            require(success1 && success2, "Transfer Funds Fail");
        } else {
            // by exToken
            IERC20 iexToken = IERC20(offer.exToken);
            iexToken.safeTransfer(order.buyer, totalValue);
            iexToken.safeTransfer(config.feeWallet, settleFee);
        }

        order.status = STATUS_ORDER_SETTLE_CANCELLED;

        emit SettleCancelled(orderId, totalValue, settleFee, _msgSender());
    }

    /**
     * @param orderIds An array of order IDs to be forcibly cancelled.
     */
    function forceCancelOrders(uint256[] memory orderIds) external {
        for (uint256 i = 0; i < orderIds.length; i++) {
            forceCancelOrder(orderIds[i]);
        }
    }

    /**
     * @param offerIds An array of offer IDs that the user wishes to cancel.
     */
    function cancelOffers(uint256[] memory offerIds) external {
        for (uint256 i = 0; i < offerIds.length; i++) {
            cancelOffer(offerIds[i]);
        }
    }

    /**
     * @param orderIds An array of order IDs to be settled.
     */
    function settleFilleds(uint256[] memory orderIds) external {
        for (uint256 i = 0; i < orderIds.length; i++) {
            settleFilled(orderIds[i]);
        }
    }

    /**
     * @param orderIds An array of order IDs for which settlement is to be cancelled.
     */
    function settleCancelleds(uint256[] memory orderIds) external {
        for (uint256 i = 0; i < orderIds.length; i++) {
            settleCancelled(orderIds[i]);
        }
    }

    /**
     * @param offerIds An array of offer IDs to be filled.
     * @param amounts An array of amounts, each corresponding to an offer in the `offerIds` array.
     */
    function fillOffers(uint256[] memory offerIds, uint256[] memory amounts) external nonReentrant {
        require(offerIds.length == amounts.length, "Invalid Input");
        for (uint256 i = 0; i < offerIds.length; i++) {
            uint256 offerId = offerIds[i];
            uint256 amount = amounts[i];
            Offer storage offer = offers[offerId];
            Token storage token = tokens[offer.tokenId];

            require(offer.status == STATUS_OFFER_OPEN, "Invalid Offer Status");
            require(token.status == STATUS_TOKEN_ACTIVE, "Invalid token Status");
            require(amount > 0, "Invalid Amount");
            require(offer.amount - offer.filledAmount >= amount, "Insufficient Allocations");
            require(offer.fullMatch == false || offer.amount == amount, "FullMatch required");
            require(offer.exToken != address(0), "Invalid Offer Token");

            // transfer value or collateral
            IERC20 iexToken = IERC20(offer.exToken);
            uint256 _transferAmount;
            address buyer;
            address seller;
            uint8 targetDecimals = IERC20Metadata(offer.exToken).decimals();
            if (offer.offerType == OFFER_BUY) {
                uint256 collateralAmount = (offer.collateral * amount) / offer.amount;
                _transferAmount = convertDecimalsCeil(collateralAmount, 18, targetDecimals);
                buyer = offer.offeredBy;
                seller = _msgSender();
            } else {
                uint256 valueAmount = (offer.value * amount) / offer.amount;
                _transferAmount = convertDecimalsCeil(valueAmount, 18, targetDecimals);
                buyer = _msgSender();
                seller = offer.offeredBy;
            }
            iexToken.safeTransferFrom(_msgSender(), address(this), _transferAmount);
            // new order
            _fillOffer(offerId, amount, buyer, seller);
        }
    }

    /**
     * @param offerIds An array of offer IDs to be filled.
     * @param amounts An array of amounts, each corresponding to an offer in the `offerIds` array.
     */
    function fillOffersETH(uint256[] memory offerIds, uint256[] memory amounts) external payable nonReentrant {
        require(offerIds.length == amounts.length, "Invalid Input");
        uint256 totalEthAmount = 0;
        for (uint256 i = 0; i < offerIds.length; i++) {
            uint256 offerId = offerIds[i];
            uint256 amount = amounts[i];
            Offer storage offer = offers[offerId];
            Token storage token = tokens[offer.tokenId];

            require(offer.status == STATUS_OFFER_OPEN, "Invalid Offer Status");
            require(token.status == STATUS_TOKEN_ACTIVE, "Invalid token Status");
            require(amount > 0, "Invalid Amount");
            require(offer.amount - offer.filledAmount >= amount, "Insufficient Allocations");
            require(offer.fullMatch == false || offer.amount == amount, "FullMatch required");
            require(offer.exToken == address(0), "Invalid Offer Token");
            uint256 _ethAmount;
            if (offer.offerType == OFFER_BUY) {
                _ethAmount = (offer.collateral * amount) / offer.amount;
            } else {
                _ethAmount = (offer.value * amount) / offer.amount;
            }
            totalEthAmount += _ethAmount;
            // Assuming _fillOffer handles the logic for each offer correctly
            _fillOffer(offerId, amount, offer.offeredBy, _msgSender());
        }
        require(msg.value >= totalEthAmount, "Insufficient Funds");

        // (PMA-1)Refund excess ETH
        if (msg.value > totalEthAmount) {
            uint256 excessAmount = msg.value - totalEthAmount;
            (bool refundSuccess,) = msg.sender.call{value: excessAmount}("");
            require(refundSuccess, "Refund of excess ETH failed");
        }
    }

    ///////////////////////////
    ///////// SETTER //////////
    ///////////////////////////

    /**
     * @param feeWallet_ The address of the wallet where transaction fees are collected.
     * @param feeSettle_ The fee percentage charged upon the successful settlement of an order.
     * @param feeRefund_ The fee percentage charged when an offer is cancelled and funds are refunded.
     * @param pledgeRate_ The required collateral percentage for creating sell offers.
     */
    function updateConfig(address feeWallet_, uint256 feeSettle_, uint256 feeRefund_, uint256 pledgeRate_)
        external
        onlyRole(OPERATOR_ROLE)
    {
        require(feeWallet_ != address(0), "Invalid Address");
        require(feeSettle_ <= WEI6 / 10, "Settle Fee <= 10%");
        require(feeRefund_ <= WEI6 / 10, "Cancel Fee <= 10%");
        //PMA-2 limit pledge rate from 1% to 100%.
        require(pledgeRate_ >= WEI6 / 100 && pledgeRate_ <= WEI6, "Pledge Rate out of range");
        emit UpdateConfig(
            config.feeWallet,
            config.feeSettle,
            config.feeRefund,
            config.pledgeRate,
            feeWallet_,
            feeSettle_,
            feeRefund_,
            pledgeRate_
        );
        // update
        config.feeWallet = feeWallet_;
        config.feeSettle = feeSettle_;
        config.feeRefund = feeRefund_;
        config.pledgeRate = pledgeRate_;
    }

    /**
     * @param tokenAddresses An array of token addresses to be updated.
     * @param isAccepted Boolean flag indicating whether the tokens should be accepted (true) or not (false).
     */
    function setAcceptedTokens(address[] memory tokenAddresses, bool isAccepted) external onlyRole(OPERATOR_ROLE) {
        for (uint256 i = 0; i < tokenAddresses.length; i++) {
            acceptedTokens[tokenAddresses[i]] = isAccepted;
        }
        emit UpdateAcceptedTokens(tokenAddresses, isAccepted);
    }

    ///////////////////////////
    ///////// GETTER //////////
    ///////////////////////////

    /**
     * @param offerId The unique identifier of the offer.
     */
    function offerAmount(uint256 offerId) external view returns (uint256) {
        return offers[offerId].amount;
    }

    /**
     * @param offerId The unique identifier of the offer.
     */
    function offerAmountAvailable(uint256 offerId) external view returns (uint256) {
        return offers[offerId].amount - offers[offerId].filledAmount;
    }

    /**
     * @param offerId The unique identifier of the offer.
     */
    function offerValue(uint256 offerId) external view returns (uint256) {
        return offers[offerId].value;
    }

    /**
     * @param offerId The unique identifier of the offer.
     */
    function offerExToken(uint256 offerId) external view returns (address) {
        return offers[offerId].exToken;
    }

    /**
     * @param offerId The unique identifier of the offer.
     */
    function isBuyOffer(uint256 offerId) external view returns (bool) {
        return offers[offerId].offerType == OFFER_BUY;
    }

    /**
     * @param offerId The unique identifier of the offer.
     */
    function isSellOffer(uint256 offerId) external view returns (bool) {
        return offers[offerId].offerType == OFFER_SELL;
    }

    /**
     * @param offerId The unique identifier of the offer.
     */
    function offerStatus(uint256 offerId) external view returns (uint256) {
        return offers[offerId].status;
    }

    /**
     * @param orderId The unique identifier of the order.
     */
    function orderStatus(uint256 orderId) external view returns (uint256) {
        return orders[orderId].status;
    }

    /**
     * @param id The unique identifier of the token, typically derived from its properties or a hash of its metadata.
     */
    function tokensInfo(bytes32 id) external view returns (Token memory tokenInfo) {
        return tokens[id];
    }

    /**
     * @param id The unique identifier of the offer.
     */
    function offersInfo(uint256 id) external view returns (Offer memory) {
        return offers[id];
    }

    /**
     * @param id The unique identifier of the order.
     */
    function ordersInfo(uint256 id) external view returns (Order memory) {
        return orders[id];
    }

    /**
     * Accesses the current configuration settings of the platform, including fees and the pledge rate.
     */
    function configInfo() external view returns (Config memory) {
        return config;
    }

    /**
     * Checks whether a specific token is accepted for trading on the platform.
     * @param token The address of the token in question.
     */
    function isAcceptedToken(address token) external view returns (bool) {
        return acceptedTokens[token];
    }

    /**
     * Retrieves the identifier of the last offer made in the market, indicative of the total number of offers created.
     */
    function lastOfferIdInfo() external view returns (uint256) {
        return lastOfferId;
    }

    /**
     * Returns the identifier of the last order processed in the system, serving as a measure of the platform's trading volume.
     */
    function lastOrderIdInfo() external view returns (uint256) {
        return lastOrderId;
    }

    ///////////////////////////
    //////// INTERNAL /////////
    ///////////////////////////

    /**
     * @param offerType Specifies whether it's a buy or sell offer.
     * @param tokenId The unique identifier for the token being traded.
     * @param exToken The address of the exchange token or ETH used for the trade.
     * @param amount The amount of the token being offered.
     * @param value The total value (in exToken or ETH) of the offer.
     * @param collateral The required collateral for the offer, applicable for sell offers.
     * @param fullMatch Indicates whether the offer requires to be filled in its entirety.
     */
    function _newOffer(
        uint8 offerType,
        bytes32 tokenId,
        address exToken,
        uint256 amount,
        uint256 value,
        uint256 collateral,
        bool fullMatch
    ) internal {
        // create new offer
        offers[++lastOfferId] =
            Offer(offerType, tokenId, exToken, amount, value, collateral, 0, STATUS_OFFER_OPEN, _msgSender(), fullMatch);

        emit NewOffer(lastOfferId, offerType, tokenId, exToken, amount, value, collateral, fullMatch, _msgSender());
    }

    /**
     * @param offerId The ID of the offer being filled.
     * @param amount The amount of the offer that is being fulfilled.
     * @param buyer The address of the buyer in the transaction.
     * @param seller The address of the seller.
     */
    function _fillOffer(uint256 offerId, uint256 amount, address buyer, address seller) internal {
        Offer storage offer = offers[offerId];
        // new order
        orders[++lastOrderId] = Order(offerId, amount, seller, buyer, STATUS_ORDER_OPEN);

        // check if offer is fullfilled
        offer.filledAmount += amount;
        if (offer.filledAmount == offer.amount) {
            offer.status = STATUS_OFFER_FILLED;
            emit CloseOffer(offerId, 0);
        }

        emit NewOrder(lastOrderId, offerId, amount, seller, buyer);
    }

    /**
     * @dev Withdraws stuck tokens from the contract. Only addresses with the UPGRADER_ROLE role can call this function.
     * @param _token The address of the token to withdraw.
     * @param _to The address to receive the withdrawn tokens.
     * @notice Use this function with caution to avoid accidentally moving funds.
     */
    function withdrawStuckToken(address _token, address _to) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(_token != address(0) && !acceptedTokens[_token], "Invalid Token Address");
        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));
        IERC20(_token).safeTransfer(_to, _contractBalance);
    }

    /**
     * @dev Convert value from sourceDecimals to targetDecimals.
     */
    function convertDecimals(uint256 value, uint8 sourceDecimals, uint8 targetDecimals)
        internal
        pure
        returns (uint256 result)
    {
        if (sourceDecimals == targetDecimals) {
            result = value;
        } else if (sourceDecimals < targetDecimals) {
            result = value * (10 ** (targetDecimals - sourceDecimals));
        } else {
            result = value / (10 ** (sourceDecimals - targetDecimals));
        }
    }

    /**
     * @dev Convert value from sourceDecimals to targetDecimals, rounded up.
     */
    function convertDecimalsCeil(uint256 value, uint8 sourceDecimals, uint8 targetDecimals)
        internal
        pure
        returns (uint256 result)
    {
        if (sourceDecimals == targetDecimals) {
            result = value;
        } else if (sourceDecimals < targetDecimals) {
            result = value * (10 ** (targetDecimals - sourceDecimals));
        } else {
            uint256 temp = 10 ** (sourceDecimals - targetDecimals);
            result = value / temp;
            if (value % temp != 0) {
                result += 1;
            }
        }
    }
}


// File: contracts/Token.sol
// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >=0.8.0;

/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.
/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)
/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)
/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.
abstract contract ERC20 {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event Transfer(address indexed from, address indexed to, uint256 amount);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 amount
    );

    /*//////////////////////////////////////////////////////////////
                            METADATA STORAGE
    //////////////////////////////////////////////////////////////*/

    string public name;

    string public symbol;

    uint8 public immutable decimals;

    /*//////////////////////////////////////////////////////////////
                              ERC20 STORAGE
    //////////////////////////////////////////////////////////////*/

    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;

    mapping(address => mapping(address => uint256)) public allowance;

    /*//////////////////////////////////////////////////////////////
                            EIP-2612 STORAGE
    //////////////////////////////////////////////////////////////*/

    uint256 internal immutable INITIAL_CHAIN_ID;

    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;

    mapping(address => uint256) public nonces;

    /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(string memory _name, string memory _symbol, uint8 _decimals) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;

        INITIAL_CHAIN_ID = block.chainid;
        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
    }

    /*//////////////////////////////////////////////////////////////
                               ERC20 LOGIC
    //////////////////////////////////////////////////////////////*/

    function approve(
        address spender,
        uint256 amount
    ) public virtual returns (bool) {
        allowance[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);

        return true;
    }

    function transfer(
        address to,
        uint256 amount
    ) public virtual returns (bool) {
        balanceOf[msg.sender] -= amount;

        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }

        emit Transfer(msg.sender, to, amount);

        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual returns (bool) {
        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.

        if (allowed != type(uint256).max)
            allowance[from][msg.sender] = allowed - amount;

        balanceOf[from] -= amount;

        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }

        emit Transfer(from, to, amount);

        return true;
    }

    /*//////////////////////////////////////////////////////////////
                             EIP-2612 LOGIC
    //////////////////////////////////////////////////////////////*/

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) public virtual {
        require(deadline >= block.timestamp, "PERMIT_DEADLINE_EXPIRED");

        // Unchecked because the only math done is incrementing
        // the owner's nonce which cannot realistically overflow.
        unchecked {
            address recoveredAddress = ecrecover(
                keccak256(
                    abi.encodePacked(
                        "\x19\x01",
                        DOMAIN_SEPARATOR(),
                        keccak256(
                            abi.encode(
                                keccak256(
                                    "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
                                ),
                                owner,
                                spender,
                                value,
                                nonces[owner]++,
                                deadline
                            )
                        )
                    )
                ),
                v,
                r,
                s
            );

            require(
                recoveredAddress != address(0) && recoveredAddress == owner,
                "INVALID_SIGNER"
            );

            allowance[recoveredAddress][spender] = value;
        }

        emit Approval(owner, spender, value);
    }

    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {
        return
            block.chainid == INITIAL_CHAIN_ID
                ? INITIAL_DOMAIN_SEPARATOR
                : computeDomainSeparator();
    }

    function computeDomainSeparator() internal view virtual returns (bytes32) {
        return
            keccak256(
                abi.encode(
                    keccak256(
                        "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
                    ),
                    keccak256(bytes(name)),
                    keccak256("1"),
                    block.chainid,
                    address(this)
                )
            );
    }

    /*//////////////////////////////////////////////////////////////
                        INTERNAL MINT/BURN LOGIC
    //////////////////////////////////////////////////////////////*/

    function _mint(address to, uint256 amount) internal virtual {
        totalSupply += amount;

        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }

        emit Transfer(address(0), to, amount);
    }

    function _burn(address from, uint256 amount) internal virtual {
        balanceOf[from] -= amount;

        // Cannot underflow because a user's balance
        // will never be larger than the total supply.
        unchecked {
            totalSupply -= amount;
        }

        emit Transfer(from, address(0), amount);
    }
}

contract Token is ERC20 {
    string constant TokenName = "LuckyToken";
    string constant Symbol = "LT";
    uint8 constant Decimals = 6;
    uint256 public immutable initSupply = 100000000 ether;
    address public immutable owner;
    uint256 public constant MINT_ONCE = 10000 ether;

    constructor() ERC20(TokenName, Symbol, Decimals) {
        _mint(msg.sender, initSupply);
        owner = msg.sender;
    }

    function publicMint() external {
        _mint(msg.sender, MINT_ONCE);
    }

    function mintTo(address _to, uint256 _amount) external {
        require(msg.sender == owner, "onlyOwner");
        _mint(_to, _amount);
    }
}

