
// File: undefined/TYPHOONSTAKING.sol
/// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TYPHOONStaking is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    enum StakingTier {
        Flexible,
        LockedFirstTier,
        LockedSecondTier,
        LockedThirdTier
    }

    struct StakingDetails {
        uint256 lockDuration;
        uint256 claimRewardsDuration;
        uint256 rewardsAPR;
        uint256 minStakeAmount;
    }

    struct userStakingInfo {
        uint256 stakingTier;
        uint256 stakingIndex;
        uint256 stakedAmount;
        uint256 stakingStartTime;
        uint256 stakingEndTime;
        uint256 lastClaimTime;
    }

    struct Round {
        uint256 startTime;
        uint256 endTime;
        uint256 rewardAmount;
        uint256 totalTickets;
        uint256 totalParticipants;
        address[] participantList;
        address[] winners;
        bool isStarted;
        bool isEnded;
    }

    struct UserLotteryParams {
        uint256 tierOneTotalStaking;
        uint256 tierTwoTotalStaking;
        uint256 tierThreeTotalStaking;
        uint256 totalStaked;
        uint256 tickets;
    }

    mapping(uint256 => Round) private lotteryRounds;
    mapping(address => UserLotteryParams) private userLotteryParams;

    mapping(StakingTier => StakingDetails) private stakingTiers;

    //user => tier => stakingIndex => amount
    mapping(address => mapping(StakingTier => userStakingInfo[]))
        private userStakes;

    mapping(address => mapping(StakingTier => uint256))
        private userStakingInTier;

    mapping(address => uint256) private userWholeStaking;
    mapping(address => mapping(StakingTier => uint256))
        private userTierClaimedRewards;

    IERC20 public TYPHOONToken;
    uint256 public TYPHOONTotalSupply;
    uint256 public totalStaked;
    uint256 public currentRoundId = 1;

    uint256[] public tierOneLimits = new uint256[](2);
    uint256[] public tierTwoLimits = new uint256[](2);
    uint256[] public tierThreeLimits = new uint256[](2);

    uint256 public tierOneBaseTickets = 1;
    uint256 public tierTwoBaseTickets = 2;
    uint256 public tierThreeBaseTickets = 4;

    event Staked(address indexed user, StakingTier tier, uint256 amount);
    event Unstaked(address indexed user, StakingTier tier, uint256 amount);
    event RewardsClaimed(
        address indexed user,
        StakingTier tier,
        uint256 amount
    );
    event StakingDetailsUpdated(
        StakingTier tier,
        uint256 newLockDuration,
        uint256 newAPY
    );

    constructor(address _TYPHOONToken) Ownable(msg.sender) {
        TYPHOONToken = IERC20(_TYPHOONToken);
        TYPHOONTotalSupply = TYPHOONToken.totalSupply();

        tierOneLimits[0] = (TYPHOONTotalSupply * 25) / 100000; //0.025 %
        tierOneLimits[1] = (TYPHOONTotalSupply * 5) / 10000; //0.05 %
        tierTwoLimits[0] = (TYPHOONTotalSupply * 1) / 1000; //0.1 %
        tierTwoLimits[1] = (TYPHOONTotalSupply * 25) / 10000; //0.25 %
        tierThreeLimits[0] = (TYPHOONTotalSupply * 5) / 1000; //0.5 %
        tierThreeLimits[1] = (TYPHOONTotalSupply * 1) / 100; //1 %
        stakingTiers[StakingTier.Flexible] = StakingDetails(
            0 days,
            24 hours,
            30,
            1 * 10**18
        );
        stakingTiers[StakingTier.LockedFirstTier] = StakingDetails(
            7 days,
            7 days,
            50,
            1 * 10**18
        );
        stakingTiers[StakingTier.LockedSecondTier] = StakingDetails(
            14 days,
            14 days,
            75,
            1 * 10**18
        );
        stakingTiers[StakingTier.LockedThirdTier] = StakingDetails(
            28 days,
            28 days,
            100,
            1 * 10**18
        );
    }

    function getStakingDetails(StakingTier tier)
        external
        view
        returns (
            uint256 stakingDuration,
            uint256 claimRewardsCycle,
            uint256 rewardsAPR,
            uint256 minStakeAmount
        )
    {
        return (
            stakingTiers[tier].lockDuration,
            stakingTiers[tier].claimRewardsDuration,
            stakingTiers[tier].rewardsAPR,
            stakingTiers[tier].minStakeAmount
        );
    }

    function getUserStake(StakingTier tier, address user)
        public
        view
        returns (userStakingInfo[] memory)
    {
        return userStakes[user][tier];
    }

    function getStakeStartTime(
        StakingTier tier,
        address user,
        uint256 stakingIndex
    ) public view returns (uint256) {
        return userStakes[user][tier][stakingIndex].stakingStartTime;
    }

    function getStakeEndTime(
        StakingTier tier,
        address user,
        uint256 stakingIndex
    ) public view returns (uint256) {
        return
            userStakes[user][tier][stakingIndex].stakingStartTime +
            stakingTiers[tier].lockDuration;
    }

    function getStakeAmountAndTime(
        StakingTier tier,
        address user,
        uint256 stakingIndex
    )
        public
        view
        returns (
            uint256 stakingStartTime,
            uint256 stakingEndTime,
            uint256 stakedAmount
        )
    {
        return (
            userStakes[user][tier][stakingIndex].stakingStartTime,
            userStakes[user][tier][stakingIndex].stakingStartTime +
                stakingTiers[tier].lockDuration,
            userStakes[user][tier][stakingIndex].stakedAmount
        );
    }

    function getUserTierClaimedRewards(StakingTier tier, address user)
        external
        view
        returns (uint256)
    {
        return userTierClaimedRewards[user][tier];
    }

    function getUserNoOfStakes(StakingTier tier, address user)
        public
        view
        returns (uint256)
    {
        return userStakes[user][tier].length;
    }

    function getUserStakingInTier(address user, StakingTier tier)
        public
        view
        returns (uint256)
    {
        return userStakingInTier[user][tier];
    }

    function getUserWholeStaking(address user) public view returns (uint256) {
        return userWholeStaking[user];
    }

    function setTYPHOONTokenAddress(address _TYPHOONToken) external onlyOwner {
        TYPHOONToken = IERC20(_TYPHOONToken);
        TYPHOONTotalSupply = TYPHOONToken.totalSupply();
    }

    function updateStakingDetails(
        StakingTier tier,
        uint256 newLockDuration,
        uint256 newAPR
    ) public onlyOwner {
        StakingDetails storage details = stakingTiers[tier];
        details.lockDuration = newLockDuration;
        details.rewardsAPR = newAPR;
        emit StakingDetailsUpdated(tier, newLockDuration, newAPR);
    }

    function getLOtteryRoundData(uint256 roundId)
        external
        view
        returns (Round memory)
    {
        return lotteryRounds[roundId];
    }

    function getUserLotteryParams(address user)
        external
        view
        returns (UserLotteryParams memory)
    {
        return userLotteryParams[user];
    }

    function stake(StakingTier tier, uint256 amount) external nonReentrant {
        require(
            stakingTiers[tier].claimRewardsDuration > 0,
            "Invalid staking tier"
        );
        require(
            amount >= stakingTiers[tier].minStakeAmount,
            "Below minimum stake amount"
        );

        TYPHOONToken.safeTransferFrom(msg.sender, address(this), amount);

        uint256 stakingIndex = userStakes[msg.sender][tier].length;
        userStakingInfo memory stakeInfo = userStakingInfo({
            stakingTier: uint256(tier),
            stakingIndex: stakingIndex,
            stakedAmount: amount,
            stakingStartTime: block.timestamp,
            stakingEndTime: block.timestamp + stakingTiers[tier].lockDuration,
            lastClaimTime: block.timestamp
        });

        if (
            block.timestamp > lotteryRounds[currentRoundId].endTime &&
            lotteryRounds[currentRoundId].isStarted
        ) {
            finalizeLotteryRound();
        } else if (
            !lotteryRounds[currentRoundId].isStarted &&
            !lotteryRounds[currentRoundId].isEnded
        ) {
            Round storage round = lotteryRounds[currentRoundId];
            round.startTime = block.timestamp;
            round.endTime = block.timestamp + 3 days;
            round.rewardAmount = 40000 * 10**18;
            round.isStarted = true;
        }

        userStakes[msg.sender][tier].push(stakeInfo);
        userStakingInTier[msg.sender][tier] += amount;
        userWholeStaking[msg.sender] += amount;
        totalStaked += amount;
        addUserLotteryStakings(msg.sender, tier, amount);

        emit Staked(msg.sender, tier, amount);
    }

    function unstake(StakingTier tier, uint256 stakingIndex)
        external
        nonReentrant
    {
        require(
            stakingTiers[tier].claimRewardsDuration > 0,
            "Invalid staking tier"
        );
        require(
            userStakes[msg.sender][tier].length > stakingIndex,
            "Invalid index"
        );
        require(
            userStakes[msg.sender][tier][stakingIndex].stakedAmount > 0,
            "No stake to unstake"
        );

        uint256 unlockTime = userStakes[msg.sender][tier][stakingIndex]
            .stakingStartTime + stakingTiers[tier].lockDuration;
        require(block.timestamp > unlockTime, "Staking still locked");

        uint256 stakedAmount = userStakes[msg.sender][tier][stakingIndex]
            .stakedAmount;

        uint256 rewards = calculateTierStakingIndexRewards(
            msg.sender,
            tier,
            stakingIndex
        );
        require(
            TYPHOONToken.balanceOf(address(this)) > stakedAmount + rewards,
            "Staking contract balance is insufficient"
        );
        if (rewards > 0) {
            userTierClaimedRewards[msg.sender][tier] += rewards;
            TYPHOONToken.safeTransfer(msg.sender, rewards);
        }
        userStakingInTier[msg.sender][tier] -= stakedAmount;
        userWholeStaking[msg.sender] -= stakedAmount;
        totalStaked -= stakedAmount;
        removeUserLotteryStakings(msg.sender, tier, stakedAmount);
        TYPHOONToken.safeTransfer(msg.sender, stakedAmount);

        uint256 lastIndex = userStakes[msg.sender][tier].length - 1;
        if (stakingIndex != lastIndex) {
            userStakes[msg.sender][tier][stakingIndex] = userStakes[msg.sender][
                tier
            ][lastIndex];
            userStakes[msg.sender][tier][stakingIndex]
                .stakingIndex = stakingIndex;
            userStakes[msg.sender][tier].pop();
        } else {
            userStakes[msg.sender][tier].pop();
        }

        emit Unstaked(msg.sender, tier, stakedAmount);
    }

    function extecuteLottery() external onlyOwner {
        if (
            block.timestamp > lotteryRounds[currentRoundId].endTime &&
            lotteryRounds[currentRoundId].isStarted
        ) {
            finalizeLotteryRound();
        }
    }

    function random(uint256 seed) private view returns (uint256) {
        require(seed != 0, "Seed must be greater than 0");
        return
            uint256(
                keccak256(
                    abi.encodePacked(block.prevrandao, block.timestamp, seed)
                )
            ) % seed;
    }

    function claimRewards(StakingTier tier) public nonReentrant {
        require(
            stakingTiers[tier].claimRewardsDuration > 0,
            "Invalid staking tier"
        );

        require(
            userStakes[msg.sender][tier].length > 0,
            "No stake to claim rewards"
        );
        uint256 index = userStakes[msg.sender][tier][0].stakingIndex;
        require(
            block.timestamp >
                userStakes[msg.sender][tier][index].lastClaimTime +
                    stakingTiers[tier].claimRewardsDuration,
            "Next claim time not reached"
        );
        uint256 rewards = calculateAndUpdateTierRewards(tier, msg.sender);
        if (rewards > 0) {
            userTierClaimedRewards[msg.sender][tier] += rewards;
            TYPHOONToken.safeTransfer(msg.sender, rewards);
        }

        emit RewardsClaimed(msg.sender, tier, rewards);
    }

    function calculateRewards(StakingTier tier, address user)
        public
        view
        returns (uint256)
    {
        uint256 stakingLength = getUserNoOfStakes(tier, user);
        uint256 claimableRewards;
        for (uint256 index = 0; index < stakingLength; index++) {
            claimableRewards += calculateTierStakingIndexRewards(
                user,
                tier,
                index
            );
        }
        return claimableRewards;
    }

    function finalizeLotteryRound() private {
        lotteryRounds[currentRoundId].isEnded = true;

        Round storage round = lotteryRounds[currentRoundId];

        if (round.totalParticipants >= 10) {
            uint256 totalTickets = round.totalTickets;
            address[] memory winners = new address[](5);
            address[] memory alreadyPicked = new address[](5);

            uint256 winnersCount = 0;
            while (winnersCount < 5) {
                uint256 winningTicket = random(totalTickets);
                uint256 count = 0;

                for (uint256 j = 0; j < round.totalParticipants; j++) {
                    address participant = round.participantList[j];
                    count += userLotteryParams[participant].tickets;

                    if (
                        count >= winningTicket &&
                        !isAlreadyPicked(
                            alreadyPicked,
                            participant,
                            winnersCount
                        )
                    ) {
                        winners[winnersCount] = participant;
                        alreadyPicked[winnersCount] = participant;
                        winnersCount++;
                        break;
                    }
                }
            }

            round.winners = winners;

            for (uint256 i = 0; i < winnersCount; i++) {
                TYPHOONToken.transfer(winners[i], round.rewardAmount);
            }
        }

        currentRoundId += 1;
        Round storage nextRound = lotteryRounds[currentRoundId];
        nextRound.startTime = block.timestamp;
        nextRound.endTime = block.timestamp + 3 days;
        nextRound.rewardAmount = 40000 * 10**18;
        nextRound.isStarted = true;
        nextRound.participantList = round.participantList;
    }

    // Helper function to check if a participant has already been picked as a winner
    function isAlreadyPicked(
        address[] memory alreadyPicked,
        address participant,
        uint256 count
    ) private pure returns (bool) {
        for (uint256 i = 0; i < count; i++) {
            if (alreadyPicked[i] == participant) {
                return true;
            }
        }
        return false;
    }

    function removeFromParticipantList(address user, Round storage round)
        private
    {
        uint256 length = round.participantList.length;
        for (uint256 i = 0; i < length; i++) {
            if (round.participantList[i] == user) {
                round.participantList[i] = round.participantList[length - 1];
                round.participantList.pop();
                break;
            }
        }
    }

    function addUserLotteryStakings(
        address user,
        StakingTier tier,
        uint256 amount
    ) private {
        if (tier != StakingTier.Flexible) {
            UserLotteryParams storage params = userLotteryParams[user];
            Round storage round = lotteryRounds[currentRoundId];
            // Update total staked amount
            if (amount > 0) {
                params.totalStaked += amount;
            }

            if (tier == StakingTier.LockedFirstTier) {
                params.tierOneTotalStaking += amount;
            } else if (tier == StakingTier.LockedSecondTier) {
                params.tierTwoTotalStaking += amount;
            } else if (tier == StakingTier.LockedThirdTier) {
                params.tierThreeTotalStaking += amount;
            }

            uint256 previousTickets = params.tickets;
            uint256 newTickets = calculateLotteryTickets(params);
            round.totalTickets += newTickets - previousTickets;

            uint256 difference = 0;
            if (newTickets > previousTickets) {
                difference = newTickets - previousTickets;
            }
            round.totalTickets += difference;
            if (previousTickets == 0 && newTickets > 0) {
                round.totalParticipants += 1;
                round.participantList.push(user);
            }

            params.tickets = newTickets;
        }
    }

    function removeUserLotteryStakings(
        address user,
        StakingTier tier,
        uint256 amount
    ) private {
        if (tier != StakingTier.Flexible) {
            UserLotteryParams storage params = userLotteryParams[user];
            Round storage round = lotteryRounds[currentRoundId];

            // Update total staked amount
            if (amount > 0) {
                params.totalStaked -= amount;
            }

            if (tier == StakingTier.LockedFirstTier) {
                params.tierOneTotalStaking -= amount;
            } else if (tier == StakingTier.LockedSecondTier) {
                params.tierTwoTotalStaking -= amount;
            } else if (tier == StakingTier.LockedThirdTier) {
                params.tierThreeTotalStaking -= amount;
            }

            uint256 previousTickets = params.tickets;
            uint256 newTickets = calculateLotteryTickets(params);
            uint256 difference = 0;
            if (previousTickets > newTickets) {
                difference = previousTickets - newTickets;
            }
            round.totalTickets -= difference;
            if (previousTickets - newTickets == 0) {
                round.totalParticipants -= 1;
                removeFromParticipantList(user, round);
            }

            params.tickets = newTickets;
        }
    }

    function calculateLotteryTickets(UserLotteryParams storage params)
        private
        view
        returns (uint256)
    {
        uint256 tickets = 0;
        uint256 tierPoints;
        if (
            params.tierThreeTotalStaking > params.tierOneTotalStaking &&
            params.tierThreeTotalStaking > params.tierTwoTotalStaking
        ) {
            tierPoints = tierThreeBaseTickets;
        }
        if (
            params.tierTwoTotalStaking > params.tierOneTotalStaking &&
            params.tierTwoTotalStaking > params.tierThreeTotalStaking
        ) {
            tierPoints = tierTwoBaseTickets;
        }
        if (
            params.tierOneTotalStaking > params.tierTwoTotalStaking &&
            params.tierOneTotalStaking > params.tierThreeTotalStaking
        ) {
            tierPoints = tierThreeBaseTickets;
        }

        if (params.totalStaked >= tierThreeLimits[1]) {
            tickets += tierPoints * 13; //x13
        }

        if (
            params.totalStaked >= tierThreeLimits[0] &&
            params.totalStaked < tierThreeLimits[1]
        ) {
            tickets += tierPoints * 10; //x10
        }
        if (
            params.totalStaked >= tierTwoLimits[1] &&
            params.totalStaked < tierThreeLimits[0]
        ) {
            tickets += tierPoints * 7; //x7
        }

        if (
            params.totalStaked >= tierTwoLimits[0] &&
            params.totalStaked < tierTwoLimits[1]
        ) {
            tickets += tierPoints * 4; //x4
        }

        if (
            params.totalStaked >= tierOneLimits[1] &&
            params.totalStaked < tierTwoLimits[0]
        ) {
            tickets += tierPoints * 2; //x2
        }
        if (
            params.totalStaked >= tierOneLimits[0] &&
            params.totalStaked < tierOneLimits[1]
        ) {
            tickets += tierPoints * 1; // x1
        }

        return tickets;
    }

    function calculateTierStakingIndexRewards(
        address user,
        StakingTier tier,
        uint256 stakingIndex
    ) public view returns (uint256) {
        uint256 minStakedTime = userStakes[user][tier][stakingIndex]
            .lastClaimTime + stakingTiers[tier].claimRewardsDuration;
        if (block.timestamp < minStakedTime) {
            return 0;
        }
        uint256 stakedTime = block.timestamp -
            userStakes[user][tier][stakingIndex].lastClaimTime;
        uint256 rewards = (userStakes[user][tier][stakingIndex].stakedAmount *
            stakingTiers[tier].rewardsAPR *
            stakedTime) / (31536000 * 100);
        return rewards;
    }

    function calculateAndUpdateTierRewards(StakingTier tier, address user)
        internal
        returns (uint256)
    {
        uint256 stakingLength = getUserNoOfStakes(tier, user);
        uint256 claimableRewards;
        for (uint256 index = 0; index < stakingLength; index++) {
            uint256 rewards = calculateTierStakingIndexRewards(
                user,
                tier,
                index
            );
            if (rewards > 0) {
                userStakes[user][tier][index].lastClaimTime = block.timestamp;
            }
            claimableRewards += rewards;
        }
        return claimableRewards;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

