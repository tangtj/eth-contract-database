
// File: contracts/TreasuryWallet.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

contract TreasuryWallet {
    address payable public address1;
    address payable public address2;
    address payable public address3;
    address payable public address4;
    address payable public address5;

    address payable admin;

    uint256[] public amounts = [11, 11, 11, 11, 56];

    constructor(address payable _address1, address payable _address2, address payable _address3, address payable _address4, address payable _address5) {
        address1 = _address1;
        address2 = _address2;
        address3 = _address3;
        address4 = _address4;
        address5 = _address5;
        admin = payable(msg.sender);
    }

    receive() external payable {
        // Fallback function that accepts incoming Ether
    }
    modifier onlyAdmin() {
        require(msg.sender == admin, "Ownable: caller is not the owner");
        _;
    }
    function changeAdmin(address payable _admin) external onlyAdmin {
        admin = _admin;
    }
    function changeAddress1(address payable _address1) external onlyAdmin {
        address1 = _address1;
    }
    function changeAddress2(address payable _address2) external onlyAdmin {
        address2 = _address2;
    }
    function changeAddress3(address payable _address3) external onlyAdmin {
        address3 = _address3;
    }
    function changeAddress4(address payable _address4) external onlyAdmin {
        address4 = _address4;
    }
    function changeAddress5(address payable _address5) external onlyAdmin {
        address5 = _address5;
    }
    function changeAmounts(uint256[] memory _amounts) external onlyAdmin {
        require(_amounts.length == 5, "MainWallet: amounts array must have 5 elements");
        // require to sum to be equal to 100
        require(_amounts[0] + _amounts[1] + _amounts[2] + _amounts[3] + _amounts[4] == 100, "MainWallet: amounts must sum to 100");
        amounts = _amounts;
    }

    function withdraw() external {
        uint256 balance = address(this).balance;
        uint256 amount1 = balance * amounts[0] / 100;
        uint256 amount2 = balance * amounts[1] / 100;
        uint256 amount3 = balance * amounts[2] / 100;
        uint256 amount4 = balance * amounts[3] / 100;

        (bool ok1, ) = address1.call{value: amount1}("");
        require(ok1, "Transfer 1 failed.");
        (bool ok2, ) = address2.call{value: amount2}("");
        require(ok2, "Transfer 2 failed.");
        (bool ok3, ) = address3.call{value: amount3}("");
        require(ok3, "Transfer 3 failed.");
        (bool ok4, ) = address4.call{value: amount4}("");
        require(ok4, "Transfer 4 failed.");
        (bool ok5, ) = address5.call{value: balance - amount1 - amount2 - amount3 - amount4}("");
        require(ok5, "Transfer 5 failed.");
    }
}

