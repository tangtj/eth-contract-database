
// File: src/RFRMStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.23;

/**
 * @title RFRM Staking Contract
 * @dev A staking contract that allows users to stake tokens and earn rewards.
 * @author Reform DAO
 * @notice This contract allows users to stake tokens, participate in liquidity pools, and earn rewards.
 * @dev The contract supports NFT pools, lock periods, and vesting of rewards.
 */
import { IERC20, SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";
import { ReentrancyGuard } from "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import { IERC721Receiver } from "@openzeppelin/contracts/interfaces/IERC721Receiver.sol";

import { EnumerableSet } from "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";

import { IVesting } from "./interface/IVesting.sol";

interface IERC721 {
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
}

contract RFRMStaking is Ownable, ReentrancyGuard, IERC721Receiver {
    using SafeERC20 for IERC20;
    using EnumerableSet for EnumerableSet.UintSet;

    // Info of each user.
    struct UserInfo {
        uint256 totalDeposit;
        uint256 rewardDebt;
        uint256 totalClaimed;
        uint256 depositTime;
        EnumerableSet.UintSet deposits;
    }

    // Info of each pool.
    struct PoolInfo {
        bool isInputNFT; //Is NFT pool or not
        bool isVested; //Is reward vested or not
        uint32 totalInvestors;
        address input; // Address of input token.
        uint256 allocPoint; // How many allocation points assigned to this pool. RFRMs to distribute per block.
        uint256 lastRewardBlock; // Last block number that RFRMs distribution occurs.
        uint256 accTknPerShare; // Accumulated RFRMs per share, times 1e12. See below.
        uint256 startIdx; //Start index of NFT (if applicable)
        uint256 endIdx; //End index of NFT (if applicable)
        uint256 totalDeposit;
        EnumerableSet.UintSet deposits;
    }

    struct PoolLockInfo {
        uint32 multi; //4 decimal precision
        uint32 claimFee; //2 decimal precision
        uint32 lockPeriodInSeconds; //Lock period for staked tokens
        bool forcedUnlockEnabled; //Whether forced unlock is enabled for this pool
    }

    struct UserLockInfo {
        bool isWithdrawed;
        uint32 depositTime;
        uint256 actualDeposit;
    }

    // The REWARD TOKEN!
    IERC20 public immutable reward;
    //Percentage distributed per day. 2 decimals / 100000
    uint32 public percPerDay = 1;
    //Address where reward token is stored
    address public rewardWallet;
    //Address where fees are sent
    address public feeWallet;
    //Vesting contract address
    IVesting public vestingCont;

    //Number of blocks per day
    uint16 internal constant BLOCKS_PER_DAY = 7150;
    //Divisor
    uint16 internal constant DIVISOR = 10000;

    // Info of each pool.
    PoolInfo[] internal pools;
    //Info of each lock term
    mapping(uint256 => PoolLockInfo) public poolLockInfo;
    // Info of each user that stakes tokens.
    mapping(uint256 => mapping(address => UserInfo)) internal users;
    // Info of users who staked tokens from bonding contract
    mapping(uint8 => mapping(address => UserLockInfo[])) public userLockInfo;
    // Total allocation points. Must be the sum of all allocation points in all pools.
    uint256 public totalAllocPoint = 0;
    //Actual deposit in lock pool
    uint256 public totalActualDeposit;
    // The block number when REWARDing starts.
    uint256 public startBlock;

    event Deposit(address indexed user, uint256 indexed pid, uint8 indexed lid, uint256[] amounts);
    event Withdraw(address indexed user, uint256 indexed pid, uint8 indexed lid, uint256[] amounts);
    event RewardClaimed(address indexed user, uint256 indexed pid, uint256 amount);
    event PoolAdded(
        bool _isInputNFT,
        bool _isVested,
        uint256 _allocPoint,
        address _input,
        uint256 _startIdx,
        uint256 _endIdx
    );
    event PoolChanged(uint256 pid, uint256 allocPoint, bool isVested, uint256 startIdx, uint256 endIdx);
    event PoolLockChanged(uint256 lid, uint32 multi, uint32 claimFee, uint32 lockPeriod);
    event PoolUpdated(uint256 pid);
    event WalletsChanged(address reward, address feeWallet);
    event RewardChanged(uint32 perc);
    event VestingContractChanged(address vesting);

    error ZeroAddress();
    error InvalidNFTId();
    error InvalidAmount();
    error InvalidLockId();
    error AlreadyWithdrawed();
    error ForcedUnlockDisabled();
    error InvalidInput();
    error DepositNotFound();

    /**
     * @dev Initializes the RFRMStaking contract with the specified parameters.
     * @param _reward The address of the REWARD token.
     * @param _rewardWallet The address where REWARD tokens are stored.
     * @param _feeWallet The address where fees are sent.
     * @param _startBlock The block number when REWARDing starts.
     * @notice All parameters must be non-zero addresses.
     */
    constructor(address _reward, address _rewardWallet, address _feeWallet, uint256 _startBlock) {
        if (_reward == address(0) || _rewardWallet == address(0) || _feeWallet == address(0)) revert ZeroAddress();
        reward = IERC20(_reward);
        rewardWallet = _rewardWallet;
        feeWallet = _feeWallet;
        startBlock = _startBlock;
    }

    /**
     * @dev Returns the number of pools available for staking.
     * @return The number of pools.
     */
    function poolLength() external view returns (uint256) {
        return pools.length;
    }

    /**
     * @dev Adds a new pool to the contract. Can only be called by the owner.
     * @param _isInputNFT True if the input is an NFT, false otherwise.
     * @param _isVested True if the rewards are vested, false otherwise.
     * @param _allocPoint The allocation points for the new pool.
     * @param _input The address of the input token or NFT.
     * @param _startIdx The starting index for NFTs (if _isInputNFT is true).
     * @param _endIdx The ending index for NFTs (if _isInputNFT is true).
     */
    function add(
        bool _isInputNFT,
        bool _isVested,
        uint256 _allocPoint,
        address _input,
        uint256 _startIdx,
        uint256 _endIdx
    ) external onlyOwner {
        if (_input == address(0)) revert ZeroAddress();
        massUpdatePools();

        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
        totalAllocPoint = totalAllocPoint + _allocPoint;
        PoolInfo storage newPool = pools.push();

        newPool.allocPoint = _allocPoint;
        newPool.input = _input;
        newPool.isInputNFT = _isInputNFT;
        newPool.isVested = _isVested;
        newPool.lastRewardBlock = lastRewardBlock;

        if (_isInputNFT) {
            newPool.startIdx = _startIdx;
            newPool.endIdx = _endIdx;
        }

        emit PoolAdded(_isInputNFT, _isVested, _allocPoint, _input, _startIdx, _endIdx);
    }

    /**
     * @dev Updates an existing pool. Can only be called by the owner.
     * @param _pid The ID of the pool to be updated.
     * @param _allocPoint The new allocation points for the pool.
     * @param _isVested True if the rewards are vested, false otherwise.
     * @param _startIdx The new starting index for NFTs (if pool is for NFTs).
     * @param _endIdx The new ending index for NFTs (if pool is for NFTs).
     */
    function set(
        uint256 _pid,
        uint256 _allocPoint,
        bool _isVested,
        uint256 _startIdx,
        uint256 _endIdx
    ) external onlyOwner {
        massUpdatePools();
        PoolInfo storage pool = pools[_pid];

        totalAllocPoint = totalAllocPoint - pool.allocPoint + _allocPoint;
        pool.allocPoint = _allocPoint;
        pool.isVested = _isVested;

        if (pool.isInputNFT) {
            pool.startIdx = _startIdx;
            pool.endIdx = _endIdx;
        }

        emit PoolChanged(_pid, _allocPoint, _isVested, _startIdx, _endIdx);
    }

    /**
     * @dev Sets lock parameters for a specific pool.
     * @param _lid The ID of the lock pool.
     * @param _multi The multiplier for the lock pool.
     * @param _claimFee The claim fee for the lock pool.
     * @param _lockPeriod The lock period in seconds for the lock pool.
     */
    function setPoolLock(uint256 _lid, uint32 _multi, uint32 _claimFee, uint32 _lockPeriod) external onlyOwner {
        PoolLockInfo storage pool = poolLockInfo[_lid];

        pool.claimFee = _claimFee;
        pool.lockPeriodInSeconds = _lockPeriod;
        pool.multi = _multi;

        emit PoolLockChanged(_lid, _multi, _claimFee, _lockPeriod);
    }

    /**
     * @dev View function to see pending rewards for a user in a specific pool.
     * @param _pid The ID of the pool.
     * @param _user The user's address.
     * @return The pending rewards for the user.
     */
    function pendingTkn(uint256 _pid, address _user) external view returns (uint256) {
        PoolInfo storage pool = pools[_pid];
        UserInfo storage user = users[_pid][_user];
        uint256 accTknPerShare = pool.accTknPerShare;
        uint256 total = pool.totalDeposit;
        if (block.number > pool.lastRewardBlock && total != 0) {
            uint256 multi = block.number - pool.lastRewardBlock;
            uint256 rewardPerBlock = getRewardPerBlock();
            uint256 tknReward = (multi * rewardPerBlock * pool.allocPoint) / totalAllocPoint;
            accTknPerShare = accTknPerShare + ((tknReward * 1e12) / total);
        }
        return (user.totalDeposit * accTknPerShare) / 1e12 - user.rewardDebt;
    }

    /**
     * @dev Deposits tokens into staking for reward allocation.
     * @param _pid The ID of the pool.
     * @param _lid The ID of the lock pool (if applicable).
     * @param _benificiary The address of the beneficiary.
     * @param _amounts The amounts to deposit (for NFTs or tokens).
     */
    function deposit(
        uint256 _pid,
        uint8 _lid,
        address _benificiary,
        uint256[] calldata _amounts
    ) external nonReentrant {
        PoolInfo storage pool = pools[_pid];
        UserInfo storage user = users[_pid][_benificiary];
        updatePool(_pid);
        if (user.totalDeposit > 0) {
            _claimReward(_pid, _benificiary);
        } else {
            pool.totalInvestors++;
        }

        if (pool.isInputNFT) {
            IERC721 nft = IERC721(pool.input);
            uint256 len = _amounts.length;
            uint256 id;

            for (uint256 i = 0; i < len; ) {
                id = _amounts[i];
                if (id < pool.startIdx || id > pool.endIdx) revert InvalidNFTId();
                nft.safeTransferFrom(msg.sender, address(this), id);
                pool.deposits.add(id);
                user.deposits.add(id);
                unchecked {
                    i++;
                }
            }
            user.totalDeposit = user.totalDeposit + len;
            pool.totalDeposit = pool.totalDeposit + len;
        } else {
            if (_amounts.length != 1) revert InvalidAmount();
            uint256 amount = _amounts[0];
            IERC20(pool.input).safeTransferFrom(msg.sender, address(this), amount);

            if (_pid == 0) {
                PoolLockInfo storage poolLock = poolLockInfo[_lid];
                UserLockInfo storage userLock = userLockInfo[_lid][_benificiary].push();

                if (poolLock.multi <= 0) revert InvalidLockId();

                userLock.depositTime = uint32(block.timestamp);
                userLock.actualDeposit = amount;
                totalActualDeposit += amount;

                uint256 weightedAmount = (amount * poolLock.multi) / DIVISOR;
                user.totalDeposit += weightedAmount;
                pool.totalDeposit += weightedAmount;
                vestingCont.mint(_benificiary, amount);
            } else {
                user.totalDeposit = user.totalDeposit + amount;
                pool.totalDeposit = pool.totalDeposit + amount;
            }
        }

        user.rewardDebt = (user.totalDeposit * pool.accTknPerShare) / 1e12;
        user.depositTime = block.timestamp;
        emit Deposit(_benificiary, _pid, _lid, _amounts);
    }

    /**
     * @dev Withdraws tokens from staking.
     * @param _pid The ID of the pool.
     * @param _lid The ID of the lock pool (if applicable).
     * @param _did The ID of the user's deposit (if applicable).
     * @param _amounts The amounts to withdraw (for NFTs or tokens).
     */
    function withdraw(uint256 _pid, uint8 _lid, uint256 _did, uint256[] calldata _amounts) external nonReentrant {
        PoolInfo storage pool = pools[_pid];
        UserInfo storage user = users[_pid][msg.sender];

        updatePool(_pid);
        _claimReward(_pid, msg.sender);

        if (pool.isInputNFT) {
            IERC721 nft = IERC721(pool.input);
            uint256 len = _amounts.length;

            for (uint256 i = 0; i < len; ) {
                uint256 id = _amounts[i];
                if (!user.deposits.contains(id)) revert InvalidNFTId();
                nft.safeTransferFrom(address(this), msg.sender, id);

                user.deposits.remove(id);
                pool.deposits.remove(id);

                unchecked {
                    i++;
                }
            }
            user.totalDeposit = user.totalDeposit - _amounts.length;
            pool.totalDeposit = pool.totalDeposit - _amounts.length;
        } else {
            IERC20 token = IERC20(pool.input);
            uint256 amount = _amounts[0];

            if (_pid == 0) {
                PoolLockInfo storage poolLock = poolLockInfo[_lid];
                UserLockInfo storage userLock = userLockInfo[_lid][msg.sender][_did];
                amount = userLock.actualDeposit;

                if (userLock.isWithdrawed) revert AlreadyWithdrawed();
                uint256 weightedAmount = (amount * poolLock.multi) / DIVISOR;
                user.totalDeposit -= weightedAmount;
                pool.totalDeposit -= weightedAmount;

                userLock.isWithdrawed = true;
                totalActualDeposit -= amount;

                vestingCont.burn(msg.sender, amount);

                if (canWithdraw(_lid, _did, msg.sender)) {
                    token.safeTransfer(msg.sender, amount);
                } else {
                    if (!poolLock.forcedUnlockEnabled) revert ForcedUnlockDisabled();
                    uint256 feeAmount = (amount * poolLock.claimFee) / DIVISOR;
                    token.safeTransfer(feeWallet, feeAmount);
                    amount = amount - feeAmount;
                    token.safeTransfer(msg.sender, amount);
                }
            } else {
                if (user.totalDeposit < amount) revert InvalidAmount();

                user.totalDeposit = user.totalDeposit - amount;
                pool.totalDeposit = pool.totalDeposit - amount;

                token.safeTransfer(msg.sender, amount);
            }
        }

        user.rewardDebt = (user.totalDeposit * pool.accTknPerShare) / 1e12;
        emit Withdraw(msg.sender, _pid, _lid, _amounts);
    }

    /**
     * @dev Claims rewards for a specific pool.
     * @param _pid The ID of the pool.
     */
    function claimReward(uint256 _pid) external {
        _claimReward(_pid, msg.sender);
    }

    /**
     * @dev Sets the reward and fee wallets.
     * @param _reward The address of the reward wallet.
     * @param _feeWallet The address of the fee wallet.
     */
    function setWallets(address _reward, address _feeWallet) external onlyOwner {
        if (_reward == address(0) || _feeWallet == address(0)) revert ZeroAddress();
        rewardWallet = _reward;
        feeWallet = _feeWallet;
        emit WalletsChanged(_reward, _feeWallet);
    }

    /**
     * @dev Sets the percentage per day for rewards.
     * @param _perc The percentage per day.
     */
    function setPercentagePerDay(uint32 _perc) external onlyOwner {
        percPerDay = _perc;
        emit RewardChanged(_perc);
    }

    /**
     * @dev Sets the Vesting contract address.
     * @param _vesting The address of the Vesting contract.
     */
    function setVesting(address _vesting) external onlyOwner {
        if (_vesting == address(0)) revert ZeroAddress();
        vestingCont = IVesting(_vesting);
        emit VestingContractChanged(_vesting);
    }

    /**
     * @dev Sets the forced unlock state for multiple lock pools.
     * @param _lid The array of lock pool IDs.
     * @param _state The array of forced unlock states.
     */
    function setForcedUnlockState(uint256[] calldata _lid, bool[] calldata _state) external onlyOwner {
        if (_lid.length != _state.length) revert InvalidInput();
        uint256 length = _lid.length;
        for (uint256 i = 0; i < length; i++) {
            poolLockInfo[_lid[i]].forcedUnlockEnabled = _state[i];
        }
    }

    /**
     * @dev Sets the allocation points for multiple pools.
     * @param _pids The array of pool IDs.
     * @param _allocPoints The array of allocation points.
     */
    function setBulkAllocPoints(uint256[] calldata _pids, uint256[] calldata _allocPoints) external onlyOwner {
        if (_pids.length != _allocPoints.length || _pids.length != pools.length) revert InvalidInput();
        uint256 length = _pids.length;
        uint256 total = 0;
        massUpdatePools();
        for (uint256 i = 0; i < length; i++) {
            total += _allocPoints[i];
            pools[_pids[i]].allocPoint = _allocPoints[i];
        }
        totalAllocPoint = total;
    }

    /**
     * @dev Gets the deposited NFT IDs of a user in a specific pool.
     * @param _pid The ID of the pool.
     * @param _user The user's address.
     * @return An array of deposited NFT IDs.
     */
    function getDepositedIdsOfUser(uint256 _pid, address _user) external view returns (uint256[] memory) {
        return users[_pid][_user].deposits.values();
    }

    /**
     * @dev Gets the lock terms of a user in a specific lock pool.
     * @param _user The user's address.
     * @param _lid The ID of the lock pool.
     * @return count The number of lock terms and an array of UserLockInfo.
     */
    function getLockTermsOfUser(
        address _user,
        uint8 _lid
    ) external view returns (uint256 count, UserLockInfo[] memory) {
        return (userLockInfo[_lid][_user].length, userLockInfo[_lid][_user]);
    }

    /**
     * @dev Retrieves information about a pool.
     * @param _pid The ID of the pool.
     * @return isInputNFT Is pool for NFTs or not.
     * @return isVested Is reward vested or not.
     * @return totalInvestors Total investors in the pool.
     * @return input Address of input token.
     * @return allocPoint Allocation points for the pool.
     * @return lastRewardBlock Last block number that RFRMs distribution occurs.
     * @return accTknPerShare Accumulated RFRMs per share, times 1e12.
     * @return startIdx Start index of NFT (if applicable).
     * @return endIdx End index of NFT (if applicable).
     * @return totalDeposit Total deposits in the pool.
     */
    function poolInfo(
        uint256 _pid
    )
        external
        view
        returns (
            bool isInputNFT,
            bool isVested,
            uint32 totalInvestors,
            address input,
            uint256 allocPoint,
            uint256 lastRewardBlock,
            uint256 accTknPerShare,
            uint256 startIdx,
            uint256 endIdx,
            uint256 totalDeposit
        )
    {
        PoolInfo storage pool = pools[_pid];
        isInputNFT = pool.isInputNFT;
        isVested = pool.isVested;
        allocPoint = pool.allocPoint;
        lastRewardBlock = pool.lastRewardBlock;
        accTknPerShare = pool.accTknPerShare;
        totalDeposit = pool.totalDeposit;
        startIdx = pool.startIdx;
        endIdx = pool.endIdx;
        input = pool.input;
        totalInvestors = pool.totalInvestors;
    }

    /**
     * @dev Retrieves user information for a specific pool and user.
     * @param _pid The ID of the pool.
     * @param _user The user's address.
     * @return totalDeposit Total deposits of the user.
     * @return rewardDebt Reward debt of the user.
     * @return totalClaimed Total claimed rewards of the user.
     * @return depositTime Deposit time of the user.
     */
    function userInfo(
        uint256 _pid,
        address _user
    ) external view returns (uint256 totalDeposit, uint256 rewardDebt, uint256 totalClaimed, uint256 depositTime) {
        UserInfo storage user = users[_pid][_user];
        totalDeposit = user.totalDeposit;
        rewardDebt = user.rewardDebt;
        totalClaimed = user.totalClaimed;
        depositTime = user.depositTime;
    }

    /**
     * @dev Updates reward variables for all pools. Be careful of gas spending!
     */
    function massUpdatePools() public {
        uint256 length = pools.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            updatePool(pid);
        }
    }

    /**
     * @dev Updates reward variables of a specific pool to be up-to-date.
     * @param _pid The ID of the pool to be updated.
     */
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = pools[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        uint256 total = pool.totalDeposit;
        if (total == 0 || pool.allocPoint == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 multi = block.number - pool.lastRewardBlock;
        uint256 rewardPerBlock = getRewardPerBlock();
        uint256 tknReward = (multi * rewardPerBlock * pool.allocPoint) / totalAllocPoint;
        reward.safeTransferFrom(rewardWallet, address(this), tknReward);
        pool.accTknPerShare = pool.accTknPerShare + ((tknReward * 1e12) / total);
        pool.lastRewardBlock = block.number;
        emit PoolUpdated(_pid);
    }

    /**
     * @dev ERC721 receiver function to accept NFT deposits.
     * param operator The address that sent the NFT.
     * param from The address that transferred the NFT.
     * param tokenId The ID of the received NFT.
     * param data Additional data (not used in this contract).
     * @return The ERC721_RECEIVED selector.
     */
    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {
        return this.onERC721Received.selector;
    }

    /**
     * @dev Gets the reward per block.
     * @return rpb The reward per block.
     */
    function getRewardPerBlock() public view returns (uint256 rpb) {
        uint256 total = reward.balanceOf(rewardWallet);
        uint256 rewardPerDay = (total * percPerDay) / DIVISOR;
        rewardPerDay = rewardPerDay / 10; //Additional precision
        rpb = rewardPerDay / BLOCKS_PER_DAY;
    }

    /**
     * @dev Checks if a user can withdraw from a specific lock pool.
     * @param _lid The ID of the lock pool.
     * @param _did The ID of the user's deposit in the lock pool.
     * @param _user The user's address.
     * @return True if the user can withdraw, false otherwise.
     */
    function canWithdraw(uint8 _lid, uint256 _did, address _user) public view returns (bool) {
        return (block.timestamp >=
            userLockInfo[_lid][_user][_did].depositTime + poolLockInfo[_lid].lockPeriodInSeconds);
    }

    /**
     * @dev Internal function to claim rewards for a specific pool and user.
     * @param _pid The ID of the pool.
     * @param _user The user's address.
     */
    function _claimReward(uint256 _pid, address _user) internal {
        updatePool(_pid);
        UserInfo storage user = users[_pid][_user];

        if (user.totalDeposit == 0) {
            return;
        }
        uint256 pending = (user.totalDeposit * pools[_pid].accTknPerShare) / 1e12 - user.rewardDebt;

        if (pending > 0) {
            user.totalClaimed = user.totalClaimed + pending;
            user.rewardDebt = (user.totalDeposit * pools[_pid].accTknPerShare) / 1e12;
            if (pools[_pid].isVested) {
                vestingCont.addVesting(_user, pending);
                reward.safeTransfer(address(vestingCont), pending);
            } else {
                reward.safeTransfer(_user, pending);
            }
        }

        emit RewardClaimed(_user, _pid, pending);
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)

pragma solidity ^0.8.0;

import "../token/ERC721/IERC721Receiver.sol";


// File: lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)
// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 *
 * [WARNING]
 * ====
 * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure
 * unusable.
 * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.
 *
 * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an
 * array of EnumerableSet.
 * ====
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastValue;
                // Update the index for the moved value
                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        bytes32[] memory store = _values(set._inner);
        bytes32[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }
}


// File: src/interface/IVesting.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.23;

interface IVesting {
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function hasRole(bytes32 role, address account) external view returns (bool);

    function rfrm() external view returns (address);

    function isStakingContract(address _address) external view returns (bool);

    function lockPeriod() external view returns (uint256);

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function unlockDisabledUntil() external view returns (uint256);

    function vesting(address, uint256) external view returns (uint256 time, uint256 amount, bool claimed);

    function removeStakingContract(address _address) external;

    function grantRole(bytes32 role, address account) external;

    function removeStuckToken(address _address) external;

    function renounceRole(bytes32 role, address account) external;

    function revokeRole(bytes32 role, address account) external;

    function transfer(address to, uint256 amount) external returns (bool);

    function transferAdmin(address _newAdmin) external;

    function claimUserVesting(uint256 _id) external;

    function transferFrom(address from, address to, uint256 amount) external returns (bool);

    function addStakingContract(address _address) external;

    function addVesting(address _wallet, uint256 _amount) external;

    function mint(address _wallet, uint256 _amount) external;

    function burn(address _wallet, uint256 _amount) external;
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: lib/openzeppelin-contracts/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

