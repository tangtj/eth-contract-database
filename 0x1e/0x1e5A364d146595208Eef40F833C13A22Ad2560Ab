
// File: src/Vesting.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import {Ownable} from "@openzeppelin/access/Ownable.sol";
import {IERC20} from "@openzeppelin/interfaces/IERC20.sol";

error InvalidAmount();
error InsufficientTokens();
error InvalidCliff();
error InvalidDuration();
error NotEnoughVestedTokens();
error NotEnoughWithdrawableFunds();
error ScheduleInProgress();

/// @title Vesting
/// @author Protectorate
/// @notice Vesting contract for PRTC.
contract Vesting is Ownable {
    event Collect(address indexed beneficiary, uint256 amount);
    event CreateSchedule(
        address indexed beneficiary, uint256 start, uint256 duration, uint256 cliff, uint256 amount
    );
    event Withdraw(uint256 amount);

    struct Schedule {
        /// @notice When vesting starts.
        uint256 start;
        /// @notice Duration of vesting period in seconds.
        uint256 duration;
        /// @notice When the beneficiary can start to claim (absolute timestamp).
        uint256 cliff;
        /// @notice Total amount of tokens to be released at the end of vesting.
        uint256 amount;
        /// @notice Current amount of tokens released.
        uint256 released;
    }

    uint256 private constant SLICE_PERIOD = 30 days;

    IERC20 private immutable prtc;

    mapping(address => Schedule) public schedules;

    uint256 public totalAmountScheduled;

    constructor(IERC20 _prtc) {
        prtc = _prtc;
    }

    /// @dev Return amount of tokens that can be withdrawn by owner.
    /// @return Withdrawable amount of tokens.
    function withdrawableAmount() public view returns (uint256) {
        return prtc.balanceOf(address(this)) - totalAmountScheduled;
    }

    /// @notice Create a new vesting schedule for a given beneficiary.
    /// @param _beneficiary Address of beneficiary.
    /// @param _duration Duration of vesting period in seconds.
    /// @param _cliff Cliff period in seconds.
    /// @param _amount Total amount of tokens to be released at the end of vesting.
    function createSchedule(
        address _beneficiary,
        uint256 _duration,
        uint256 _cliff,
        uint256 _amount
    ) external onlyOwner {
        if (_duration == 0 || _duration > (365 days * 5)) revert InvalidDuration();
        if (_cliff > _duration) revert InvalidCliff();
        if (_amount == 0) revert InvalidAmount();
        if (_amount > withdrawableAmount()) revert InsufficientTokens();
        if (schedules[_beneficiary].amount != schedules[_beneficiary].released) {
            revert ScheduleInProgress();
        }

        uint256 cliff = block.timestamp + _cliff;

        schedules[_beneficiary] = Schedule(block.timestamp, _duration, cliff, _amount, 0);

        totalAmountScheduled += _amount;

        emit CreateSchedule(_beneficiary, block.timestamp, _duration, cliff, _amount);
    }

    /// @notice Collect vested tokens for a given beneficiary.
    /// @param _beneficiary Address of beneficiary.
    /// @dev Anyone can call this function. It does not hurt the user.
    /// If `_who` does not exist, `_computeReleasableAmount` will return zero.
    function collect(address _beneficiary) external {
        Schedule storage schedule = schedules[_beneficiary];

        uint256 vestedAmount = _computeReleasableAmount(schedule);

        if (vestedAmount == 0) revert NotEnoughVestedTokens();

        totalAmountScheduled -= vestedAmount;
        schedule.released += vestedAmount;

        emit Collect(_beneficiary, vestedAmount);

        prtc.transfer(_beneficiary, vestedAmount);
    }

    /// @notice Withdraw an amount of tokens if available for owner.
    /// @param _amount Token amount to withdraw.
    function withdraw(uint256 _amount) external onlyOwner {
        if (_amount > withdrawableAmount()) revert NotEnoughWithdrawableFunds();

        emit Withdraw(_amount);

        prtc.transfer(owner(), _amount);
    }

    /// @notice Compute amount of tokens that can be released for a given beneficiary.
    /// @param _beneficiary Address of beneficiary.
    /// @return Releasable amount of tokens.
    function computeReleasableAmount(address _beneficiary) external view returns (uint256) {
        Schedule storage schedule = schedules[_beneficiary];

        return _computeReleasableAmount(schedule);
    }

    /// @dev It is impossible for a beneficiary to exist if `schedule.amount`
    /// is zero and once it is set it will never go back.
    function isBeneficiary(address _beneficiary) external view returns (bool) {
        return schedules[_beneficiary].amount != 0;
    }

    /// @notice Compute amount of tokens that can be released for a given schedule.
    /// @param _schedule Vesting schedule.
    /// @dev If a `_schedule` has not been created yet, it will return zero.
    /// @return Amount of releasable tokens.
    function _computeReleasableAmount(Schedule memory _schedule) internal view returns (uint256) {
        // If current `block.timestamp` is before cliff or schedule is revoked,
        // no tokens are releasable.
        if (block.timestamp < _schedule.cliff) {
            return 0;
        }
        // If current time is after vesting period, all tokens are releasable,
        // minus amount already released.
        else if (block.timestamp >= _schedule.start + _schedule.duration) {
            return _schedule.amount - _schedule.released;
        }
        // Otherwise, some tokens are releasable.
        // Compute number of full vesting periods that have elapsed.
        else {
            uint256 timeFromStart = block.timestamp - _schedule.start;
            uint256 vestedSeconds = (timeFromStart / SLICE_PERIOD) * SLICE_PERIOD;
            // Compute amount of tokens that are vested.
            uint256 vestedAmount = (_schedule.amount * vestedSeconds) / _schedule.duration;

            // Subtract amount already released and return.
            return vestedAmount - _schedule.released;
        }
    }
}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/IERC20.sol";


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

