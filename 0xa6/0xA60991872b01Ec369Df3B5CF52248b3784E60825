pragma solidity 0.8.23;

// SPDX-License-Identifier: MIT

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract CoinracerEthSplitter is Ownable {
    
    address public operationsAddress = address(0x832bb8DC475F4cF9C0e19Fb4118F7A57e893147e);
    address public developmentAddress = address(0x7e4a3A32Ba63a473D647689581FeFd326F8E9ac6);
    address public marketingAddress = address(0xDB233359F1C375c0e976820858baba823Ddba5C3);

    uint256 public constant FEE_DIVISOR = 10000;

    
    struct DistributionPercentages {
        uint24 operationsPerc;
        uint24 developmentPerc;
        uint24 marketingPerc;
    }

    DistributionPercentages public distributionPercs;

    constructor(){
        distributionPercs.operationsPerc = 3750;
        distributionPercs.developmentPerc = 3750;
        distributionPercs.marketingPerc = 2500;
        require(distributionPercs.operationsPerc + distributionPercs.developmentPerc + distributionPercs.marketingPerc == FEE_DIVISOR, "Must equal 100%");
    }
    

    receive() external payable {
        distributeETH();
    }

    function updateOperationsAddress(address _address) external onlyOwner {
        require(_address != address(0), "cannot set to 0 address");
        operationsAddress = _address;
    }

    function updateDevelopmentAddress(address _address) external onlyOwner {
        require(_address != address(0), "cannot set to 0 address");
        developmentAddress = _address;
    }

    function updateMarketingAddress(address _address) external onlyOwner {
        require(_address != address(0), "cannot set to 0 address");
        marketingAddress = _address;
    }

    function updateDistribution(uint24 _operations, uint24 _development, uint24 _marketing) external onlyOwner {
        DistributionPercentages memory distributionPercsMem;
        distributionPercsMem.operationsPerc = _operations;
        distributionPercsMem.developmentPerc = _development;
        distributionPercsMem.marketingPerc = _marketing;
        distributionPercs = distributionPercsMem;
        require(distributionPercs.operationsPerc + distributionPercs.developmentPerc + distributionPercs.marketingPerc == FEE_DIVISOR, "Must equal 100%");
    }
    
    function distributeETH() internal {
        DistributionPercentages memory distributionPercsMem = distributionPercs;
        uint256 balance = address(this).balance;
        uint256 operationsAmount = balance * distributionPercsMem.operationsPerc / FEE_DIVISOR;
        uint256 developmentAmount = balance * distributionPercsMem.developmentPerc / FEE_DIVISOR;
        uint256 marketingAmount = balance * distributionPercsMem.marketingPerc / FEE_DIVISOR;
        
        bool success;

        if(operationsAmount > 0){
            (success,) = payable(operationsAddress).call{value: operationsAmount}("");
        }

        if(developmentAmount > 0){
            (success,) = payable(developmentAddress).call{value: developmentAmount}("");
        }

        if(marketingAmount > 0){
            (success,) = payable(marketingAddress).call{value: marketingAmount}("");
        }
    }

    function withdrawStuckETH() external onlyOwner {
        bool success;
        (success,) = payable(msg.sender).call{value: address(this).balance}("");
    }
    
}