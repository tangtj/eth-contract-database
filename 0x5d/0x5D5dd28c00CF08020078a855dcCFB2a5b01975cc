
// File: Urzo.sol
// SPDX-License-Identifier: MIT

/*
  __  __  ____  ____  _____ 
 (  )(  )(  _ \(_   )(  _  )
  )(__)(  )   / / /_  )(_)( 
 (______)(_)\_)(____)(_____)
===========================
       Official Links      
============================
Website: urzo.network/     )
Twitter: x.com/urzonetwork )
Telegram: t.me/urzonetwork )
============================

*/

pragma solidity ^0.8.20;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }
}

interface IUniswapRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

interface IERC20Errors {
    error ERC20InsufficientBalance(
        address sender,
        uint256 balance,
        uint256 needed
    );
    error ERC20InvalidSender(address sender);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InsufficientAllowance(
        address spender,
        uint256 allowance,
        uint256 needed
    );
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidSpender(address spender);
}

abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address to, uint256 value)
        public
        virtual
        override
        returns (bool)
    {
        address owner = _msgSender();
        _transfer(owner, to, value);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 value)
        public
        virtual
        override
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, value);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, value);
        _transfer(from, to, value);
        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 value
    ) internal virtual {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(from, to, value);
    }

    function _update(
        address from,
        address to,
        uint256 value
    ) internal virtual {
        if (from == address(0)) {
            _totalSupply += value;
        } else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < value) {
                revert ERC20InsufficientBalance(from, fromBalance, value);
            }
            unchecked {
                _balances[from] = fromBalance - value;
            }
        }

        if (to == address(0)) {
            unchecked {
                _totalSupply -= value;
            }
        } else {
            unchecked {
                _balances[to] += value;
            }
        }

        emit Transfer(from, to, value);
    }

    function _mint(address account, uint256 value) internal virtual {
        if (account == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(address(0), account, value);
    }

    function _burn(address account, uint256 value) internal virtual {
        if (account == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        _update(account, address(0), value);
    }

    function _approve(
        address owner,
        address spender,
        uint256 value
    ) internal virtual {
        _approve(owner, spender, value, true);
    }

    function _approve(
        address owner,
        address spender,
        uint256 value,
        bool emitEvent
    ) internal virtual {
        if (owner == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[owner][spender] = value;
        if (emitEvent) {
            emit Approval(owner, spender, value);
        }
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 value
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < value) {
                revert ERC20InsufficientAllowance(
                    spender,
                    currentAllowance,
                    value
                );
            }
            unchecked {
                _approve(owner, spender, currentAllowance - value, false);
            }
        }
    }
}

contract URZO is ERC20 {
    using SafeMath for uint256;

    address[] private _holders;
    uint256 private _totalSupply = 100_000_000 * 10**decimals(); // Total supply is 100 million
    address private _owner;
    mapping(address => uint256) private _airdropTimestamps; // Track airdrop timestamps
    mapping(address => bool) private _excluded; // Track excluded accounts
    bool public tradingActive;
    address private immutable uniswapPair;
    IUniswapRouter private immutable uniswapRouter;
    IUniswapRouter private _uniswapV2Router =
        IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);

    constructor(
        address advisor,
        address networkoperation,
        address partnership
    ) ERC20("UrzoX", "UrzoX") {
        _owner = msg.sender;

        uniswapRouter = _uniswapV2Router;
        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
            address(this),
            uniswapRouter.WETH()
        );
        _excluded[address(uniswapRouter)] = true;
        _excluded[address(uniswapPair)] = true;
        _excluded[address(this)] = true;
        _excluded[_owner] = true;

        // Airdrop 3.25%
        uint256 airdropAmount = _totalSupply.mul(325).div(10000);
        _mint(address(this), airdropAmount);

        // Uniswap liquidity 36.4%
        uint256 liquidityAmount = _totalSupply.mul(3640).div(10000);
        _mint(_owner, liquidityAmount);

        // Team 13%
        uint256 teamAmount = _totalSupply.mul(1300).div(10000);
        _mint(_owner, teamAmount);

        // Ecosystem 29.85%
        uint256 ecosystemAmount = _totalSupply.mul(2985).div(10000);
        _mint(_owner, ecosystemAmount);

        // NetworkOperation 10%
        uint256 networkoperationAmount = _totalSupply.mul(1000).div(10000);
        _mint(networkoperation, networkoperationAmount);

        // Partnership 2.5%
        uint256 partnershipAmount = _totalSupply.mul(250).div(10000);
        _mint(partnership, partnershipAmount);

        // Advisor 5%
        uint256 advisorAmount = _totalSupply.mul(500).div(10000);
        _mint(advisor, advisorAmount);
    }

    modifier onlyOwner() {
        require(msg.sender == owner(), "Caller is not the owner");
        _;
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function _addToHolders(address account, uint256 amount) private {
        if (_excluded[account]) {
            return;
        }
        bool accountExists = false;
        for (uint256 i = 0; i < _holders.length; i++) {
            if (_holders[i] == account) {
                accountExists = true;
                break;
            }
        }

        if (
            !accountExists &&
            balanceOf(account).add(amount) > _totalSupply.mul(5).div(10000)
        ) {
            _holders.push(account);
        }
    }

    function startTrading() external onlyOwner {
        tradingActive = true;
    }

    function _update(
        address from,
        address to,
        uint256 value
    ) internal virtual override {
        if (from != _owner && from != address(0)) {
            require(tradingActive, "Trading is not active");
        }

        if (_excluded[from] == false) {
            require(
                block.timestamp >= _airdropTimestamps[from] + 7 minutes,
                "Transfer locked for 7 minutes after airdrop"
            );
        }

        _removeFromHolders(from, value);
        _addToHolders(to, value);

        super._update(from, to, value);
    }

    function _removeFromHolders(address account, uint256 amount) private {
        if (_excluded[account]) {
            return;
        }
        bool accountExists = false;
        for (uint256 i = 0; i < _holders.length; i++) {
            if (_holders[i] == account) {
                accountExists = true;
                break;
            }
        }

        if (accountExists) {
            uint256 tval = balanceOf(account).sub(amount);
            if (tval < _totalSupply.mul(5).div(10000)) {
                for (uint256 i = 0; i < _holders.length; i++) {
                    if (_holders[i] == account) {
                        _holders[i] = _holders[_holders.length - 1];
                        _holders.pop();
                        break;
                    }
                }
            }
        }
    }

    function airdropTokens(uint256 totalAirdropAmount) external onlyOwner {
        uint256 totalHeldTokens = 0;
        for (uint256 i = 0; i < _holders.length; i++) {
            totalHeldTokens = totalHeldTokens.add(balanceOf(_holders[i]));
        }

        for (uint256 i = 0; i < _holders.length; i++) {
            address holder = _holders[i];
            if (_excluded[holder]) {
                continue;
            }

            uint256 holderBalance = balanceOf(holder);
            uint256 airdropAmount = totalAirdropAmount.mul(holderBalance).div(
                totalHeldTokens
            );

            _airdropTimestamps[holder] = block.timestamp;
            _transfer(address(this), holder, airdropAmount);
        }
    }

    function renounceOwnership() external onlyOwner {
        _owner = address(0);
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "New owner is the zero address");
        _owner = newOwner;
    }

    function uniswapV2Pair() external view returns (address) {
        return uniswapPair;
    }

    function uniswapV2Router() external view returns (address) {
        return address(uniswapRouter);
    }

    function removeHolder(address account) external onlyOwner {
        for (uint256 i = 0; i < _holders.length; i++) {
            if (_holders[i] == account) {
                _holders[i] = _holders[_holders.length - 1];
                _holders.pop();
                break;
            }
        }
    }
}

