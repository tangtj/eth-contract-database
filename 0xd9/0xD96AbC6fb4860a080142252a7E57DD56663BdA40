
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: @openzeppelin/contracts/utils/structs/EnumerableMap.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)
// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.

pragma solidity ^0.8.20;

import {EnumerableSet} from "./EnumerableSet.sol";

/**
 * @dev Library for managing an enumerable variant of Solidity's
 * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]
 * type.
 *
 * Maps have the following properties:
 *
 * - Entries are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Entries are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```solidity
 * contract Example {
 *     // Add the library methods
 *     using EnumerableMap for EnumerableMap.UintToAddressMap;
 *
 *     // Declare a set state variable
 *     EnumerableMap.UintToAddressMap private myMap;
 * }
 * ```
 *
 * The following map types are supported:
 *
 * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0
 * - `address -> uint256` (`AddressToUintMap`) since v4.6.0
 * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0
 * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0
 * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0
 *
 * [WARNING]
 * ====
 * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure
 * unusable.
 * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.
 *
 * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an
 * array of EnumerableMap.
 * ====
 */
library EnumerableMap {
    using EnumerableSet for EnumerableSet.Bytes32Set;

    // To implement this library for multiple types with as little code repetition as possible, we write it in
    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,
    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.
    // This means that we can only create new EnumerableMaps for types that fit in bytes32.

    /**
     * @dev Query for a nonexistent map key.
     */
    error EnumerableMapNonexistentKey(bytes32 key);

    struct Bytes32ToBytes32Map {
        // Storage of keys
        EnumerableSet.Bytes32Set _keys;
        mapping(bytes32 key => bytes32) _values;
    }

    /**
     * @dev Adds a key-value pair to a map, or updates the value for an existing
     * key. O(1).
     *
     * Returns true if the key was added to the map, that is if it was not
     * already present.
     */
    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {
        map._values[key] = value;
        return map._keys.add(key);
    }

    /**
     * @dev Removes a key-value pair from a map. O(1).
     *
     * Returns true if the key was removed from the map, that is if it was present.
     */
    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {
        delete map._values[key];
        return map._keys.remove(key);
    }

    /**
     * @dev Returns true if the key is in the map. O(1).
     */
    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {
        return map._keys.contains(key);
    }

    /**
     * @dev Returns the number of key-value pairs in the map. O(1).
     */
    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {
        return map._keys.length();
    }

    /**
     * @dev Returns the key-value pair stored at position `index` in the map. O(1).
     *
     * Note that there are no guarantees on the ordering of entries inside the
     * array, and it may change when more entries are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {
        bytes32 key = map._keys.at(index);
        return (key, map._values[key]);
    }

    /**
     * @dev Tries to returns the value associated with `key`. O(1).
     * Does not revert if `key` is not in the map.
     */
    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {
        bytes32 value = map._values[key];
        if (value == bytes32(0)) {
            return (contains(map, key), bytes32(0));
        } else {
            return (true, value);
        }
    }

    /**
     * @dev Returns the value associated with `key`. O(1).
     *
     * Requirements:
     *
     * - `key` must be in the map.
     */
    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {
        bytes32 value = map._values[key];
        if (value == 0 && !contains(map, key)) {
            revert EnumerableMapNonexistentKey(key);
        }
        return value;
    }

    /**
     * @dev Return the an array containing all the keys
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {
        return map._keys.values();
    }

    // UintToUintMap

    struct UintToUintMap {
        Bytes32ToBytes32Map _inner;
    }

    /**
     * @dev Adds a key-value pair to a map, or updates the value for an existing
     * key. O(1).
     *
     * Returns true if the key was added to the map, that is if it was not
     * already present.
     */
    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {
        return set(map._inner, bytes32(key), bytes32(value));
    }

    /**
     * @dev Removes a value from a map. O(1).
     *
     * Returns true if the key was removed from the map, that is if it was present.
     */
    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {
        return remove(map._inner, bytes32(key));
    }

    /**
     * @dev Returns true if the key is in the map. O(1).
     */
    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {
        return contains(map._inner, bytes32(key));
    }

    /**
     * @dev Returns the number of elements in the map. O(1).
     */
    function length(UintToUintMap storage map) internal view returns (uint256) {
        return length(map._inner);
    }

    /**
     * @dev Returns the element stored at position `index` in the map. O(1).
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {
        (bytes32 key, bytes32 value) = at(map._inner, index);
        return (uint256(key), uint256(value));
    }

    /**
     * @dev Tries to returns the value associated with `key`. O(1).
     * Does not revert if `key` is not in the map.
     */
    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {
        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));
        return (success, uint256(value));
    }

    /**
     * @dev Returns the value associated with `key`. O(1).
     *
     * Requirements:
     *
     * - `key` must be in the map.
     */
    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {
        return uint256(get(map._inner, bytes32(key)));
    }

    /**
     * @dev Return the an array containing all the keys
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {
        bytes32[] memory store = keys(map._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // UintToAddressMap

    struct UintToAddressMap {
        Bytes32ToBytes32Map _inner;
    }

    /**
     * @dev Adds a key-value pair to a map, or updates the value for an existing
     * key. O(1).
     *
     * Returns true if the key was added to the map, that is if it was not
     * already present.
     */
    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a map. O(1).
     *
     * Returns true if the key was removed from the map, that is if it was present.
     */
    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
        return remove(map._inner, bytes32(key));
    }

    /**
     * @dev Returns true if the key is in the map. O(1).
     */
    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
        return contains(map._inner, bytes32(key));
    }

    /**
     * @dev Returns the number of elements in the map. O(1).
     */
    function length(UintToAddressMap storage map) internal view returns (uint256) {
        return length(map._inner);
    }

    /**
     * @dev Returns the element stored at position `index` in the map. O(1).
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
        (bytes32 key, bytes32 value) = at(map._inner, index);
        return (uint256(key), address(uint160(uint256(value))));
    }

    /**
     * @dev Tries to returns the value associated with `key`. O(1).
     * Does not revert if `key` is not in the map.
     */
    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));
        return (success, address(uint160(uint256(value))));
    }

    /**
     * @dev Returns the value associated with `key`. O(1).
     *
     * Requirements:
     *
     * - `key` must be in the map.
     */
    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
        return address(uint160(uint256(get(map._inner, bytes32(key)))));
    }

    /**
     * @dev Return the an array containing all the keys
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {
        bytes32[] memory store = keys(map._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // AddressToUintMap

    struct AddressToUintMap {
        Bytes32ToBytes32Map _inner;
    }

    /**
     * @dev Adds a key-value pair to a map, or updates the value for an existing
     * key. O(1).
     *
     * Returns true if the key was added to the map, that is if it was not
     * already present.
     */
    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {
        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));
    }

    /**
     * @dev Removes a value from a map. O(1).
     *
     * Returns true if the key was removed from the map, that is if it was present.
     */
    function remove(AddressToUintMap storage map, address key) internal returns (bool) {
        return remove(map._inner, bytes32(uint256(uint160(key))));
    }

    /**
     * @dev Returns true if the key is in the map. O(1).
     */
    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {
        return contains(map._inner, bytes32(uint256(uint160(key))));
    }

    /**
     * @dev Returns the number of elements in the map. O(1).
     */
    function length(AddressToUintMap storage map) internal view returns (uint256) {
        return length(map._inner);
    }

    /**
     * @dev Returns the element stored at position `index` in the map. O(1).
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {
        (bytes32 key, bytes32 value) = at(map._inner, index);
        return (address(uint160(uint256(key))), uint256(value));
    }

    /**
     * @dev Tries to returns the value associated with `key`. O(1).
     * Does not revert if `key` is not in the map.
     */
    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {
        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));
        return (success, uint256(value));
    }

    /**
     * @dev Returns the value associated with `key`. O(1).
     *
     * Requirements:
     *
     * - `key` must be in the map.
     */
    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {
        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));
    }

    /**
     * @dev Return the an array containing all the keys
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {
        bytes32[] memory store = keys(map._inner);
        address[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // Bytes32ToUintMap

    struct Bytes32ToUintMap {
        Bytes32ToBytes32Map _inner;
    }

    /**
     * @dev Adds a key-value pair to a map, or updates the value for an existing
     * key. O(1).
     *
     * Returns true if the key was added to the map, that is if it was not
     * already present.
     */
    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {
        return set(map._inner, key, bytes32(value));
    }

    /**
     * @dev Removes a value from a map. O(1).
     *
     * Returns true if the key was removed from the map, that is if it was present.
     */
    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {
        return remove(map._inner, key);
    }

    /**
     * @dev Returns true if the key is in the map. O(1).
     */
    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {
        return contains(map._inner, key);
    }

    /**
     * @dev Returns the number of elements in the map. O(1).
     */
    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {
        return length(map._inner);
    }

    /**
     * @dev Returns the element stored at position `index` in the map. O(1).
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {
        (bytes32 key, bytes32 value) = at(map._inner, index);
        return (key, uint256(value));
    }

    /**
     * @dev Tries to returns the value associated with `key`. O(1).
     * Does not revert if `key` is not in the map.
     */
    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {
        (bool success, bytes32 value) = tryGet(map._inner, key);
        return (success, uint256(value));
    }

    /**
     * @dev Returns the value associated with `key`. O(1).
     *
     * Requirements:
     *
     * - `key` must be in the map.
     */
    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {
        return uint256(get(map._inner, key));
    }

    /**
     * @dev Return the an array containing all the keys
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {
        bytes32[] memory store = keys(map._inner);
        bytes32[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }
}


// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)
// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.

pragma solidity ^0.8.20;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```solidity
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 *
 * [WARNING]
 * ====
 * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure
 * unusable.
 * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.
 *
 * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an
 * array of EnumerableSet.
 * ====
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position is the index of the value in the `values` array plus 1.
        // Position 0 is used to mean a value is not in the set.
        mapping(bytes32 value => uint256) _positions;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._positions[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We cache the value's position to prevent multiple reads from the same storage slot
        uint256 position = set._positions[value];

        if (position != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 valueIndex = position - 1;
            uint256 lastIndex = set._values.length - 1;

            if (valueIndex != lastIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the lastValue to the index where the value to delete is
                set._values[valueIndex] = lastValue;
                // Update the tracked position of the lastValue (that was just moved)
                set._positions[lastValue] = position;
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the tracked position for the deleted slot
            delete set._positions[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._positions[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        bytes32[] memory store = _values(set._inner);
        bytes32[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }
}


// File: src/contracts/interfaces/ITypeAI.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @author Raj Mazumder <rajmazumder27.08.2001@gmail.com>
/// @title Interface of Type AI Staking Pool with fixed APY and lockup.
interface ITypeAI {
    /// @notice Details of the stake holder.
    struct StakeHolder {
        /// @param wallet The address of the stake holder.
        address wallet;
        /// @param amount The total amount stake holder deposited.
        uint256 amount;
        /// @param claimableInterest The claimable interest of the stake holder.
        uint256 claimableInterest;
        /// @param realizedETH The realized ETH for the stake holder.
        uint256 realizedETH;
        /// @param unrealizedETH The unrealized ETH for the stake holder.
        uint256 unrealizedETH;
        /// @param stakedOn The timestamp when stake holder staked.
        uint256 stakedOn;
        /// @param aprStartedOn The timestamp when last apr started.
        uint256 aprStartedOn;
    }

    /// READ METHODS ///
    /**
     * @notice Returns the no of stake holders currently staked.
     * @return count The count of the stake holders.
     */
    function noOfStakeHolders() external view returns (uint256 count);

    /**
     * @notice Returns the stake holders addresses currently staked.
     * @return holders The stake holder addresses.
     */
    function getStakeHolders() external view returns (address[] memory holders);

    /**
     * @notice Returns the details about the `_stakeHolder`.
     * @param _stakeHolder address of the stake holder.
     * @return details The details about the `_stakeHolder`.
     */
    function stakeHolderDetailsOf(
        address _stakeHolder
    ) external view returns (StakeHolder memory details);

    /**
     * @notice Returns the total amount staked by `stakeHolder`.
     * @param stakeHolder address of the stake holder.
     * @return stakedAmount the total amount staked.
     */
    function totalAmountStakedBy(
        address stakeHolder
    ) external view returns (uint256 stakedAmount);

    /**
     * @notice Returns the total amount locked on the contract.
     * @return tvl the total amount of tokens locked.
     */
    function totalValueLocked() external view returns (uint256 tvl);

    /**
     * @notice Returns the claimable token amount as interest by the `stakeHolder`.
     * @param stakeHolder address of the stake holder.
     * @return claimableInterest The amount of interest gained by `stakeHolder`.
     */
    function claimableInterestGainedBy(
        address stakeHolder
    ) external view returns (uint256 claimableInterest);

    /// WRITE METHODS ///

    /**
     * @notice Allows a stake holder to stake tokens.
     * @dev Stake holder must first approve the `_amount` to stake before calling this function.
     * @param _amount The amount to be deposited.
     * @dev That the `amount` deposited should greater than 0.
     */
    function stake(uint256 _amount) external;

    /**
     * @notice Allows a user to withdraw its initial deposit.
     * @param _amount The amount to withdraw.
     * @dev `_amount` must be higher than `0`.
     * @dev `_amount` must be lower or equal to the amount staked.
     * @dev Updating the stake holder details and claim rewards if rewards to claim.
     */
    function unstake(uint256 _amount) external;

    /**
     * @notice Claims pending tokens gained as interest.
     * @dev Transfers the gained tokens to the `msg.sender/caller`
     */
    function claimGainedInterest() external;

    /**
     * @notice Claims pending ETH reward and re lock the stake for another lock-in-period.
     * @dev Distribute ETH reward with no compound.
     */
    function claimETHAndReLock() external;

    /**
     * @notice Claims pending ETH reward and convert into `token` and then re-stake for another lock-in-period.
     * @dev Convert ETH reward to `token` and re invest.
     * @param _minReceive The min receive from dex.
     */
    function compoundETHAndReLock(uint256 _minReceive) external;

    /**
     * @notice Deposit ETH rewards into contract.
     * @dev Internally calls `_depositETHRewards`.
     */
    function depositETHRewards() external payable;

    /**
     * @notice Returns the realized ETH for the `_stakeHolder`
     * @param _stakeHolder The address of the stake holder.
     */
    function getRealizedETH(
        address _stakeHolder
    ) external view returns (uint256 realizedETH);

    /// EVENTS ///

    /**
     * @notice Emitted when `lockInPeriod` gets updated.
     * @param oldPeriod The previous lock in period.
     * @param newPeriod The new updated lock in period.
     */
    event LockInPeriodUpdated(uint256 indexed oldPeriod, uint256 newPeriod);

    /**
     * @notice Emitted when `fixedAPR` gets updated.
     * @param oldAPR The previous APR.
     * @param newAPR The new updated APR.
     */
    event APRUpdated(uint256 indexed oldAPR, uint256 newAPR);

    /**
     * @notice Emitted when `amount` tokens are deposited into pool contract.
     * @param stakeHolder The stake holder address who staked.
     * @param amount The amount stake holder staked.
     */
    event Deposited(address indexed stakeHolder, uint256 amount);

    /**
     * @notice Emitted when someone deposited ETH for reward distribution.
     * @param depositor The address of the depositor.
     * @param amount The amount of ETH deposited.
     */
    event DepositedETHRewards(address depositor, uint256 amount);

    /**
     * @notice Emitted when user withdraw deposited `amount`.
     * @param stakeHolder The stake holder address who withdrawn.
     * @param amount The amount stake holder withdrawn.
     */
    event Withdrawn(address indexed stakeHolder, uint256 amount);

    /**
     * @dev Emitted when `stakeHolder` claim their pending interest.
     * @param stakeHolder The stake holder address who claimed.
     * @param amount The amount of interest claimed.
     */
    event InterestClaimed(address indexed stakeHolder, uint256 amount);

    /**
     * @notice Emitted when `stakeHolder` claims ETH.
     * @param stakeHolder The stake holder address who claimed reward.
     * @param reward The amount of reward stakeHolder claimed.
     */
    event ETHRewardDistributed(address stakeHolder, uint256 reward);

    /// ERRORS ///

    error TypeAI__ZeroAddress(address caller);
    error TypeAI__ZeroAPR(address caller);

    /**
     * @notice Fired when a non stake holder trying to claims interest.
     * @param caller Address who is trying to claim.
     */
    error TypeAI__NotAStakeHolder(address caller);

    /**
     * @notice Fired when someone trying to deposit ETH but no stake available.
     * @param caller Address who is trying to deposit ETH.
     */
    error TypeAI_NoTVLAvailable(address caller);

    /**
     * @notice Fired when stake holder claims 0 interest.
     * @param stakeHolder Address who is trying to claim.
     */
    error TypeAI__NoInterestGained(address stakeHolder);

    /**
     * @notice Fired when stake holder trying to withdraw greater than his deposit.
     * @param stakeHolder Address who is trying to withdraw.
     */
    error TypeAI__InsufficientDepositAmount(address stakeHolder);

    /**
     * @notice Fired when owner trying to withdraw greater than residual balance.
     */
    error TypeAI__InsufficientResidualBalance();

    /**
     * @notice Fired when owner trying to withdraw greater than residual balance.
     */
    error TypeAI__ETHTransferFailed(address receiver, uint256 amount);

    /**
     * @notice Fired when owner trying to withdraw greater than residual balance.
     */
    error TypeAI__InvalidETHBalance(address receiver, uint256 amount);
    /**
     * @notice Fired when owner trying to withdraw reward while no reward available in the contract.
     * @param stakeHolder Address who is trying to claim.
     * @param required The required amount.
     */
    error TypeAI__InsufficientRewardPresent(
        address stakeHolder,
        uint256 required
    );

    /**
     * @notice Fired when stake holder trying to deposit 0 token.
     * @param stakeHolder Address who is trying to deposit.
     */
    error TypeAI__AmountMustBeGreaterThanZero(address stakeHolder);

    /**
     * @notice Fired when stake holder trying to withdraw tokens before
     * lock-in-period ends.
     * @param stakeHolder Address who is trying to withdraw.
     */
    error TypeAI__UnderLockInPeriod(address stakeHolder);
}


// File: src/contracts/interfaces/IUniswapV2Router.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function swapTokensForExactETH(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapETHForExactTokens(
        uint amountOut,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function quote(
        uint amountA,
        uint reserveA,
        uint reserveB
    ) external pure returns (uint amountB);

    function getAmountOut(
        uint amountIn,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountOut);

    function getAmountIn(
        uint amountOut,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountIn);

    function getAmountsOut(
        uint amountIn,
        address[] calldata path
    ) external view returns (uint[] memory amounts);

    function getAmountsIn(
        uint amountOut,
        address[] calldata path
    ) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: src/contracts/TypeAI.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

/// @title Implementation of Type AI Staking Pool with fixed APY and lockup.

/// @notice imports
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import {EnumerableMap} from "@openzeppelin/contracts/utils/structs/EnumerableMap.sol";
/// Customs
import {ITypeAI} from "./interfaces/ITypeAI.sol";
import {IUniswapV2Router} from "./interfaces/IUniswapV2Router.sol";

contract TypeAI is ITypeAI, Ownable, ReentrancyGuard {
    /// Using the libraries.
    using SafeERC20 for IERC20;
    using EnumerableMap for EnumerableMap.AddressToUintMap;

    /// @notice STATE VARIABLES ///
    uint256 constant MULTIPLIER = 1e36;

    /// Holds the current fixed APR going on.
    uint256 public fixedAPR;
    /// Holds The current lock in period going on.
    uint256 public lockInPeriod;
    /// Holds the amount of token locked in the contract.
    uint256 private _totalValueLocked;
    /// Holds the total ETH deposited for reward.
    uint256 public totalETHDeposited;
    /// Holds the ETH amount per share as reward.
    uint256 public ethRewardsPerShare;
    /// Holds the total reward distributed among the stake holders.
    uint256 public totalRewardsDistributed;
    /// Holds the token address which is being staked.
    IERC20 public immutable token;
    /// Holds the dex router address.
    IUniswapV2Router immutable _router;

    /// Mapping between stakeHolder address to their details.
    mapping(address stakeHolder => StakeHolder details)
        private _stakeHolderDetailsOf;
    /// Map for tacking the stake holders.
    EnumerableMap.AddressToUintMap private _stakeHoldersMap;

    /// @notice Constructor ///

    /**
     * @notice constructor contains all the parameters of the staking platform.
     * @param _token The address of the token to be staked.
     * @param _fixedAPR The fixed APY (in %) 10 = 10%, 50 = 50%.
     * @param _lockInPeriod The lock in period in seconds.
     * @param router_ The UniswapV2 router address.
     */
    constructor(
        address _token,
        uint256 _fixedAPR,
        uint256 _lockInPeriod,
        address router_
    ) Ownable(_msgSender()) {
        /// validations
        if (_token == address(0) || (router_ == address(0)))
            revert TypeAI__ZeroAddress(msg.sender);
        if (_fixedAPR == 0) revert TypeAI__ZeroAPR(msg.sender);

        /// Updating the state.
        token = IERC20(_token);
        fixedAPR = _fixedAPR;
        lockInPeriod = _lockInPeriod;
        _router = IUniswapV2Router(router_);

        /// Emitting Events.
        emit APRUpdated(0, _fixedAPR);
        emit LockInPeriodUpdated(0, _lockInPeriod);
    }

    /// @notice READ METHODS ///

    /**
     * @notice Returns the no of stake holders currently staked.
     * @return count The count of the stake holders.
     */
    function noOfStakeHolders() public view returns (uint256 count) {
        return _stakeHoldersMap.length();
    }

    /**
     * @notice Returns the details about the `stakeHolder`.
     * @param stakeHolder address of the stake holder.
     * @return details The details about the `stakeHolder`.
     */
    function stakeHolderDetailsOf(
        address stakeHolder
    ) public view returns (StakeHolder memory details) {
        return _stakeHolderDetailsOf[stakeHolder];
    }

    /**
     * @notice Returns the total amount staked by `stakeHolder`.
     * @param stakeHolder address of the stake holder.
     * @return stakedAmount the total amount staked by `stakeHolder`.
     */
    function totalAmountStakedBy(
        address stakeHolder
    ) public view returns (uint256 stakedAmount) {
        return _stakeHolderDetailsOf[stakeHolder].amount;
    }

    /**
     * @notice Returns the total amount of `token` locked in the contract.
     * @return tvl the total amount of tokens locked.
     */
    function totalValueLocked() public view returns (uint256 tvl) {
        return _totalValueLocked;
    }

    /**
     * @notice Returns the claimable token amount as interest by the `stakeHolder`.
     * @param stakeHolder address of the stake holder.
     * @return claimableInterest The amount of interest gained by `stakeHolder`.
     */
    function claimableInterestGainedBy(
        address stakeHolder
    ) public view returns (uint256 claimableInterest) {
        return _calculateInterestGainedBy(stakeHolder);
    }

    /**
     * @notice Returns the realized ETH for the `stakeHolder`
     * @param stakeHolder The address of the stake holder.
     */
    function getRealizedETH(
        address stakeHolder
    ) public view returns (uint256 realizedETH) {
        /// Getting the stake holder details as memory.
        StakeHolder memory _holderDetails = _stakeHolderDetailsOf[stakeHolder];
        /// If stakeholder has no investment return.
        if (_holderDetails.amount == 0) return 0;

        /// Calculate and return realized ETH.
        uint256 earnedRewards = _cumulativeETHRewards(_holderDetails.amount);
        if (earnedRewards <= _holderDetails.unrealizedETH) return 0;
        return earnedRewards - _holderDetails.unrealizedETH;
    }

    /**
     * @notice Returns the stake holders addresses currently staked.
     * @return holders The stake holder addresses.
     */
    function getStakeHolders() public view returns (address[] memory holders) {
        /// Getting the no of stake holders.
        uint256 _noOfStakeHolders = _stakeHoldersMap.length();
        /// Adding stake holders into memory array.
        address[] memory _stakeHolders = new address[](_noOfStakeHolders);
        for (uint256 index; index < _noOfStakeHolders; index++) {
            (address _stakeHolder, ) = _stakeHoldersMap.at(index);
            _stakeHolders[index] = _stakeHolder;
        }
        // return _stakeHoldersMap.
        return _stakeHolders;
    }

    /// @notice WRITE METHODS ///

    /**
     * @notice Allows the owner to set the APY
     * @param newAPR, the new APY to be set (in %) 10 = 10%, 50 = 50
     */
    function updateAPR(uint8 newAPR) public onlyOwner {
        /// Change the APR
        uint256 _oldAPR = fixedAPR;
        fixedAPR = newAPR;
        /// Emitting `APRUpdated` event.
        emit APRUpdated(_oldAPR, newAPR);
    }

    /**
     * @notice Allows the owner to set the lock in period.
     * @param newLockInPeriod The new lock in period in seconds.
     */
    function updateLockInPeriod(uint256 newLockInPeriod) public onlyOwner {
        /// Change the Lock in period.
        uint256 _oldLockInPeriod = lockInPeriod;
        lockInPeriod = newLockInPeriod;
        /// Emitting `LockInPeriodUpdated` event.
        emit LockInPeriodUpdated(_oldLockInPeriod, newLockInPeriod);
    }

    /**
     * @notice Allows a stake holder to stake tokens.
     * @dev Internally calls `_stake` function.
     * @param amount The amount to be deposited.
     */
    function stake(uint256 amount) public nonReentrant {
        _stake(amount);
    }

    /**
     * @notice Allows a user to withdraw its initial deposit.
     * @param amount The amount to withdraw.
     * @dev `amount` must be higher than `0`.
     * @dev `amount` must be lower or equal to the amount staked.
     * @dev Updating the stake holderVARIABLES claim rewards if rewards to claim.
     */
    function unstake(uint256 amount) public nonReentrant {
        /// Getting the stake holder details as storage.
        StakeHolder storage _stakeHolder = _stakeHolderDetailsOf[_msgSender()];

        /// Validations
        if (_stakeHolder.wallet == address(0))
            revert TypeAI__NotAStakeHolder(_msgSender());
        if ((_stakeHolder.stakedOn + lockInPeriod) >= block.timestamp)
            revert TypeAI__UnderLockInPeriod(_stakeHolder.wallet);
        if (amount == 0)
            revert TypeAI__AmountMustBeGreaterThanZero(_stakeHolder.wallet);
        if (amount > _stakeHolder.amount)
            revert TypeAI__InsufficientDepositAmount(_stakeHolder.wallet);

        /// TOKEN APR ///
        /// Updating the claimable interest
        _updateClaimableInterestOf(_stakeHolder.wallet);
        /// Claim interest If any claim amount available.
        if (_stakeHolder.claimableInterest > 0)
            _claimGainedInterest(_stakeHolder.wallet);

        /// Distribute ETH REWARDS ///
        uint256 _realizedETH = getRealizedETH(_stakeHolder.wallet);
        bool _otherStakersPresent = (_totalValueLocked - amount) > 0;
        if (!_otherStakersPresent) {
            _distributeETHRewards(_stakeHolder.wallet, false, 0);
        }

        /// Updating the TVL & stake holder balance.
        _totalValueLocked -= amount;
        _stakeHolder.amount -= amount;

        /// Update ETH Rewards per share ///
        _updateUnrealizedETHRewardsOf(_stakeHolder.wallet);
        if (_otherStakersPresent && (_realizedETH > 0))
            _depositETHRewards(_realizedETH);

        /// Removing from stake holders map.
        if (_stakeHolder.amount == 0)
            _stakeHoldersMap.remove(_stakeHolder.wallet);

        /// Transferring the tokens.
        token.safeTransfer(_stakeHolder.wallet, amount);
        /// Emitting `Withdrawn` event.
        emit Withdrawn(_stakeHolder.wallet, amount);
    }

    /**
     * @notice Claim all remaining balance on the contract
     * Residual balance is all the remaining tokens that have not been distributed
     * (e.g, in case the number of stakeholders is not sufficient)
     * @dev Can only be called after the end of the staking period
     * Cannot claim initial stakeholders deposit
     */
    function withdrawResidualBalance() public onlyOwner nonReentrant {
        uint256 residualBalance = token.balanceOf(address(this)) -
            _totalValueLocked;
        if (residualBalance == 0) revert TypeAI__InsufficientResidualBalance();
        /// Transfer the tokens.
        token.safeTransfer(_msgSender(), residualBalance);
    }

    /**
     * @notice Claims pending tokens gained as interest.
     * @dev Transfers the gained tokens to the `msg.sender/caller`
     */
    function claimGainedInterest() public nonReentrant {
        /// Validation for unknown caller.
        if (_stakeHolderDetailsOf[_msgSender()].wallet == address(0))
            revert TypeAI__NotAStakeHolder(_msgSender());
        /// Claim interest.
        _claimGainedInterest(_msgSender());
    }

    /**
     * @notice Claims pending ETH reward and re lock the stake for another lock-in-period.
     * @dev Distribute ETH reward with no compound.
     */
    function claimETHAndReLock() public nonReentrant {
        _distributeETHRewards(_msgSender(), false, 0);
    }

    /**
     * @notice Claims pending ETH reward and convert into `token` and then re-stake for another lock-in-period.
     * @dev Convert ETH reward to `token` and re invest.
     * @param _minReceive The min receive from dex.
     */
    function compoundETHAndReLock(uint256 _minReceive) public nonReentrant {
        _distributeETHRewards(_msgSender(), true, _minReceive);
    }

    /**
     * @notice Deposit ETH rewards into contract.
     * @dev Internally calls `_depositETHRewards`.
     */
    function depositETHRewards() public payable nonReentrant {
        _depositETHRewards(msg.value);
    }

    /// @notice Private Functions ///

    /**
     * @notice Returns the ETH reward amount based on `_share`.
     * @param _share The share/deposited amount of the stake holder.
     */
    function _cumulativeETHRewards(
        uint256 _share
    ) private view returns (uint256 ethRewards) {
        return (_share * ethRewardsPerShare) / MULTIPLIER;
    }

    /**
     * @notice Deposit ETH for giving reward to others.
     * @param _amountETH The amount of ETH wants to distribute.
     */
    function _depositETHRewards(uint256 _amountETH) private {
        /// Validations
        if (_amountETH == 0)
            revert TypeAI__AmountMustBeGreaterThanZero(_msgSender());
        if (_totalValueLocked == 0) revert TypeAI_NoTVLAvailable(_msgSender());

        /// Recalculate eth per share.
        totalETHDeposited += _amountETH;
        ethRewardsPerShare += (MULTIPLIER * _amountETH) / _totalValueLocked;
        /// Emit `DepositedETHRewards` event.
        emit DepositedETHRewards(_msgSender(), _amountETH);
    }

    /**
     * @notice Swap ETH for `token` into Uniswap and then reinvest.
     * @param _amount The amount of ETH wanted to swap.
     * @param _minTokensToReceive The minimum receivable `token` amount for ETH.
     */
    function _compoundETHRewards(
        uint256 _amount,
        uint256 _minTokensToReceive
    ) private {
        /// Setting up the swap path.
        address[] memory path = new address[](2);
        path[0] = _router.WETH();
        path[1] = address(token);

        /// Swap ETH for `token`
        uint256 _tokenBalBefore = token.balanceOf(address(this));
        _router.swapExactETHForTokensSupportingFeeOnTransferTokens{
            value: _amount
        }(_minTokensToReceive, path, address(this), block.timestamp);

        /// Reinvest the compound amount.
        uint256 _compoundAmount = token.balanceOf(address(this)) -
            _tokenBalBefore;
        _stake(_compoundAmount);
    }

    /**
     * @notice Distribute ETH reward to `stakeHolder`.
     * @param stakeHolder The stake holder address to whom rewards distributed.
     * @param isReinvest If stake holder wants to reinvest ETH.
     * @param minReceive Minimum receivable for dex if stake holder wants to reinvest.
     */
    function _distributeETHRewards(
        address stakeHolder,
        bool isReinvest,
        uint256 minReceive
    ) private {
        /// Getting the stake holder details as memory.
        StakeHolder storage _holderDetails = _stakeHolderDetailsOf[stakeHolder];
        /// If stakeholder has no investment return.
        if (_holderDetails.amount == 0) return;

        /// Updating stake holder details.
        uint256 _realizedETH = getRealizedETH(_holderDetails.wallet);
        _holderDetails.realizedETH += _realizedETH;
        _holderDetails.stakedOn = block.timestamp; /// Re lock.
        _updateUnrealizedETHRewardsOf(_holderDetails.wallet);

        if (_realizedETH > 0) {
            /// Updating the total reward distributed.
            totalRewardsDistributed += _realizedETH;

            /// Compound and reinvest.
            if (isReinvest)
                _compoundETHRewards(_realizedETH, minReceive);
                /// Claim normal ETH rewards.
            else {
                /// Transferring the ETH.
                uint256 _ethBalanceBefore = address(this).balance;
                (bool success, ) = payable(_holderDetails.wallet).call{
                    value: _realizedETH
                }("");
                /// Validations
                if (!success)
                    revert TypeAI__ETHTransferFailed(
                        _holderDetails.wallet,
                        _realizedETH
                    );
                if (address(this).balance < (_ethBalanceBefore - _realizedETH))
                    revert TypeAI__InvalidETHBalance(
                        _holderDetails.wallet,
                        _realizedETH
                    );
            }

            /// Emitting `ETHRewardDistributed` event.
            emit ETHRewardDistributed(_holderDetails.wallet, _realizedETH);
        }
    }

    /**
     * @notice Allows a stake holder to stake tokens.
     * @dev Stake holder must first approve the `_amount` to stake before calling this function.
     * @param _amount The amount to be deposited.
     * @dev That the `amount` deposited should greater than 0.
     */
    function _stake(uint256 _amount) private {
        /// Validations
        if (_amount == 0)
            revert TypeAI__AmountMustBeGreaterThanZero(_msgSender());

        /// Transferring the tokens.
        token.safeTransferFrom(_msgSender(), address(this), _amount);

        /// Getting the stake holder details as storage.
        StakeHolder storage _stakeHolder = _stakeHolderDetailsOf[_msgSender()];

        /// If stake holder is staking for the first time.
        if (_stakeHolder.wallet == address(0))
            _stakeHolder.wallet = _msgSender();
        if (_stakeHolder.aprStartedOn == 0)
            _stakeHolder.aprStartedOn = block.timestamp;

        /// Update the interest of stake holder
        _updateClaimableInterestOf(_stakeHolder.wallet);

        // Distribute ETH Rewards.
        if (_stakeHolder.amount > 0)
            _distributeETHRewards(_stakeHolder.wallet, false, 0);

        /// Updating the TVL, stake holder balance & address.
        _totalValueLocked += _amount;
        _stakeHolder.amount += _amount;
        _stakeHolder.stakedOn = block.timestamp;
        /// Adding into stake holders map.
        _stakeHoldersMap.set(_stakeHolder.wallet, _amount);

        /// ETH Rewards
        _updateUnrealizedETHRewardsOf(_stakeHolder.wallet);

        /// Emitting `Deposited` event.
        emit Deposited(_stakeHolder.wallet, _amount);
    }

    /**
     * @notice Calculate the gained interest based on the `fixedAPR`.
     * @param _stakeHolder The address of the stake holder.
     * @return claimableInterest amount of claimable tokens as interest of the `_stakeHolder`
     */
    function _calculateInterestGainedBy(
        address _stakeHolder
    ) private view returns (uint256 claimableInterest) {
        /// Getting the stake holder details as memory.
        StakeHolder memory _holderDetails = _stakeHolderDetailsOf[_stakeHolder];

        /// Calculating the staking duration.
        uint256 _stakingDuration = block.timestamp -
            _holderDetails.aprStartedOn;
        /// Returns the claimable interest.
        return
            ((_holderDetails.amount * fixedAPR * _stakingDuration) /
                365 days /
                100) + _holderDetails.claimableInterest;
    }

    /**
     * @notice Claims pending interest.
     * @dev Transfer the pending interest to the `_stakeHolder` address.
     * @param _stakeHolder The address of the stake holder.
     */
    function _claimGainedInterest(address _stakeHolder) private {
        /// Getting the stake holder details as storage.
        StakeHolder storage _holderDetails = _stakeHolderDetailsOf[
            _stakeHolder
        ];
        /// @dev Updating the claimable interest.
        _updateClaimableInterestOf(_stakeHolder);

        /// @dev Checking if any claimable amount available.
        uint256 _claimableInterest = _holderDetails.claimableInterest;
        if (_claimableInterest == 0)
            revert TypeAI__NoInterestGained(_stakeHolder);

        if (token.balanceOf(address(this)) < _claimableInterest)
            revert TypeAI__InsufficientRewardPresent(
                _stakeHolder,
                _claimableInterest
            );
        if (
            (token.balanceOf(address(this)) - _claimableInterest) <
            _totalValueLocked
        )
            revert TypeAI__InsufficientRewardPresent(
                _stakeHolder,
                _claimableInterest
            );

        /// Removing the claimable amount.
        delete _holderDetails.claimableInterest;

        /// @dev Transfer the interest and emitting the event.
        token.safeTransfer(_stakeHolder, _claimableInterest);
        /// Emitting `InterestClaimed` event.
        emit InterestClaimed(_stakeHolder, _claimableInterest);
    }

    /**
     * @notice Updates gained interest and shift them to `rewardsToClaim`
     * @dev Recalculate the gained amount and resetting the stake time.
     */
    function _updateClaimableInterestOf(address _stakeHolder) private {
        /// Getting the stake holder details as storage.
        StakeHolder storage _holderDetails = _stakeHolderDetailsOf[
            _stakeHolder
        ];

        /// @dev Recalculating the claimable amount of `_stakeHolder`.
        _holderDetails.claimableInterest = _calculateInterestGainedBy(
            _stakeHolder
        );
        /// @dev Resetting the stake time.
        _holderDetails.aprStartedOn = block.timestamp;
    }

    /**
     * @notice Updates gained interest and shift them to `rewardsToClaim`
     * @dev Recalculate the gained amount and resetting the stake time.
     */
    function _updateUnrealizedETHRewardsOf(address _stakeHolder) private {
        /// Getting the stake holder details as storage.
        StakeHolder storage _holderDetails = _stakeHolderDetailsOf[
            _stakeHolder
        ];

        /// @dev Recalculating the unrealized ETH amount of `_stakeHolder`.
        _holderDetails.unrealizedETH = _cumulativeETHRewards(
            _holderDetails.amount
        );
    }
}

