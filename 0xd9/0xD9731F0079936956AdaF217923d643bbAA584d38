// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;

library Address {
    error AddressInsufficientBalance(address account);
    error AddressEmptyCode(address target);
    error FailedInnerCall();
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}

pragma solidity ^0.8.20;


interface IERC20Permit {

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    function nonces(address owner) external view returns (uint256);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

pragma solidity ^0.8.20;

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function decimals() external view returns (uint8);
}
pragma solidity ^0.8.20;

library SafeERC20 {
    using Address for address;
    error SafeERC20FailedOperation(address token);
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}

pragma solidity ^0.8.20;


abstract contract ReentrancyGuard {

    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}

pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(
    uint80 _roundId
  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);

  function latestRoundData()
    external
    view
    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}

pragma solidity ^0.8.20;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract DarksideOfTheForceICO is Ownable, ReentrancyGuard {
    
    // state variables
    using SafeERC20 for IERC20;
    IERC20 public immutable memeToken;
    IERC20 public USDT;
    address public constant funderWallet = 0xAba1383Fe454DCeab4D0BEB3eE835853A2a8f8E3;

    AggregatorV3Interface public chainLinkAggregator;
    bool public isPause = false;

    // Token Supply
    uint256 private totalSupply = 5000_000_000_000 * 10**18; //5 trillion
    uint256 public privateSaleSupply = (totalSupply * 20) / 100; //private sale supply
    uint256 public publicSaleSupply = (totalSupply * 50) / 100; // public sale supply

    struct UserInfo {
        uint256 dollarInvested;  // value in real number
        uint256 memeTokenAmount; // value in wei
    }

    struct TokenInfo {
        uint256 tokenSoldInPrivateSale; // value in wei
        uint256 tokenSoldInPublicSale; // value in wei
    }

    struct SaleConfig {
        uint256 maxPurchase; // in dollar(real number)
        uint256 priceInDollar; // value in wei
        uint256 saleStartTime; 
        uint256 saleEndTime;
    }

    mapping(address => UserInfo) public userInfo; // user details
    TokenInfo private _tokenInfo; //get Token details
    SaleConfig public saleConfig; //get sale details

    enum BuyType {
        native,
        token
    }

    // Set sale type
    enum SaleType {
        saleNotActive,
        privateSale,
        publicSale
    }

    SaleType public currentSaleType; // to check current sale

    // event
    event ConfigSale(uint256 maxPurchase, uint256 salePriceInDollar, uint256 saleStart, uint256 saleEnd);
    event UpdateStartEndTime(uint256 startTime, uint256 endTime);
    event TokenPurchase(address buyer, uint256 tokenPrice, uint256 buyerTokenAmount, string saleType);
    event ToggleSale();

    modifier isContractCall(address _account) {
        require(!isContract(_account), "Contract Address");
        _;
    }

    modifier checkSaleStart() {
        require(
            block.timestamp >= saleConfig.saleStartTime && saleConfig.saleEndTime > block.timestamp,
            "Sale is not started or is ended"
        );
        _;
    }

    modifier checkSaleTime(uint256 startTime, uint256 endTime) {
        require(
            startTime > block.timestamp && endTime > startTime,
            "Invlaid start or end time"
        );
        _;
    }

    modifier checkMaxPurchase(uint256 tokenAmount) {
        require(
            userInfo[msg.sender].dollarInvested + tokenAmount <= saleConfig.maxPurchase,
            "Max limit reached"
        );
        _;
    }

    modifier inputNumberCheck(uint256 amount) {
        require(amount != 0, "Invalid number input");
        _;
    }

    modifier isActive() {
        require(!isPause, "Sale not Active");
        _;
    }

    modifier validAddress(address _addr) {
        require(_addr != address(0), "Not valid address");
        _;
    }

    modifier checkPrivateSaleType() {
        require(currentSaleType == SaleType.privateSale, "Sale not active");
        _;
    }

    modifier checkPublicSaleType() {
        require(currentSaleType == SaleType.publicSale, "Sale not active");
        _;
    }

    constructor(
        address _memeToken
    )
        Ownable(msg.sender)
        validAddress(_memeToken)

    {
        chainLinkAggregator = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419); // aggregator to fetch current price
        USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7); //set USDT address
        memeToken = IERC20(_memeToken); // token contract address
    }

    // Config sale
    function configSale(
        SaleType setSaleType,
        uint256 _maxPurchase, // value in dollar, real number
        uint256 tokenPrice, // value in wei
        uint256 startTime,
        uint256 endTime
    )
        external
        onlyOwner
        checkSaleTime(startTime, endTime)
        isContractCall(msg.sender)
        returns (bool)
    {
        require(saleConfig.saleEndTime < block.timestamp,"Sale is not ended");
        saleConfig.maxPurchase = _maxPurchase; // set max Purchase per wallet
        saleConfig.priceInDollar = tokenPrice; // set min Purchase per wallet
        currentSaleType = setSaleType; // set min Purchase per wallet

        updateStartEndTime(startTime, endTime); // set start, end time for sale
        emit ConfigSale(
            _maxPurchase,
            tokenPrice,
            startTime,
            endTime
        );
        return true;
    }

    function withdrawTokenFromContract(uint256 tokenAmount) external onlyOwner returns(bool){
        require(memeToken.balanceOf(address(this))>= tokenAmount,"Insufficient token");
        memeToken.safeTransfer(msg.sender, tokenAmount);
        return true;
    }

    /// @dev Function to get the live native token price
    function getNativePrice() public view returns (int256) {
        (, int256 price, , , ) = chainLinkAggregator.latestRoundData();
        return price;
    }

    /// @notice To calculate the estimate fund 
    /// @param dollarAmount The package amount in usd which is used to calculate the native, ICB, token(USDT,USDC) 
    /// @param buyType The buy type
    function estimateFund(uint256 dollarAmount, BuyType buyType) public view inputNumberCheck(dollarAmount) returns(uint256, uint256){
        require(SaleType.saleNotActive != currentSaleType, "Sale is not active");
        uint256 icbInDollarSaleWise = saleConfig.priceInDollar;
        IERC20 memeTokens = IERC20(address(memeToken));
        uint8 memeTokenDecimal = memeTokens.decimals();
     
        if(BuyType.native == buyType){
            int256 livePrice = getNativePrice() * 10 ** 10;
            uint256 dollarPrice = dollarAmount * 10**18 * 10**18 ;
            uint256 ethInDollar = (dollarPrice) / uint256(livePrice) ;
            uint256 userTokenAmount = (dollarAmount * (10**18 ) * (10**memeTokenDecimal)) / icbInDollarSaleWise;
            return (ethInDollar, userTokenAmount);
        }
        else{
            IERC20 usdtToken = IERC20(address(USDT));
            uint8 usdtTokenDecimal = usdtToken.decimals();
            uint256 tokenPriceAmount = dollarAmount * (10**usdtTokenDecimal);
            uint256 userTokenAmount = (dollarAmount * 10**18 * (10**memeTokenDecimal)) / icbInDollarSaleWise;
            return (tokenPriceAmount, userTokenAmount); 
        }
    }
    
    /***PrivateSale***/

    // Private sale functionalities
    // Buy token with Native token
    function buyWithNativePrivateSale(uint256 dollarAmount)
        external
        payable
        isActive
        checkPrivateSaleType
        inputNumberCheck(dollarAmount)
        checkSaleStart
        checkMaxPurchase(dollarAmount)
        isContractCall(msg.sender)
        nonReentrant
        returns (bool)
    {
        (uint256 estimatedNative, uint256 userToken) = estimateFund(dollarAmount, BuyType.native);
        _tokenInfo.tokenSoldInPrivateSale += userToken;
        require(_tokenInfo.tokenSoldInPrivateSale <= privateSaleSupply,"Private sale supply reached");
        require(msg.value >= estimatedNative, "Insufficient funds");
        internalDeposit(msg.sender, dollarAmount, userToken, "Private-sale");
        payable(funderWallet).transfer(msg.value);
        memeToken.safeTransfer(msg.sender, userToken);
        return true;
    }

    // Buy token with USDT
    function buyWithTokenPrivateSale(uint256 dollarAmount)
        external
        isActive
        checkPrivateSaleType
        inputNumberCheck(dollarAmount)
        checkSaleStart

        checkMaxPurchase(dollarAmount)
        isContractCall(msg.sender)
        nonReentrant
        returns (bool)
    {
        (uint256 estimatedTokenPrice, uint256 userToken) = estimateFund(dollarAmount, BuyType.token);
        _tokenInfo.tokenSoldInPrivateSale += userToken;
        require(_tokenInfo.tokenSoldInPrivateSale <= privateSaleSupply,"Private sale supply reached");
        require(USDT.balanceOf(msg.sender) >= estimatedTokenPrice, "Insufficient balance");
        internalDeposit(msg.sender, dollarAmount, userToken, "Private-sale");
        USDT.safeTransferFrom(msg.sender, funderWallet, estimatedTokenPrice);
        memeToken.safeTransfer(msg.sender, userToken);
        return true;
    }

    // Public sale functionalites
    // Buy Token with Native(ETH)
    function buyWithNativePublic(uint256 dollarAmount)
        external
        payable
        isActive
        inputNumberCheck(dollarAmount)
        checkSaleStart
        checkPublicSaleType
        isContractCall(msg.sender)
        nonReentrant
        returns (bool)
    {
        (uint256 estimatedNative, uint256 userToken) = estimateFund(dollarAmount, BuyType.native);
        _tokenInfo.tokenSoldInPublicSale += userToken;
        require(_tokenInfo.tokenSoldInPublicSale <= publicSaleSupply,"Public sale supply reached");
        require(msg.value >= estimatedNative, "Insufficient funds");
        internalDeposit(msg.sender, dollarAmount, userToken, "Public-sale");
        payable(funderWallet).transfer(msg.value);
        memeToken.safeTransfer(msg.sender, userToken);
        return true;
    }

    // Buy token with USDT
    function buyWithTokenPublic(uint256 dollarAmount)
        external
        isActive
        inputNumberCheck(dollarAmount)
        checkSaleStart
        checkPublicSaleType
        isContractCall(msg.sender)
        nonReentrant
        returns (bool)
    {   
        (uint256 estimatedTokenPrice, uint256 userToken) = estimateFund(dollarAmount, BuyType.token);
        _tokenInfo.tokenSoldInPublicSale += userToken;
        require(_tokenInfo.tokenSoldInPublicSale <= publicSaleSupply,"Public sale supply reached");
        require(USDT.balanceOf(msg.sender) >= estimatedTokenPrice, "Insufficient balance");
        internalDeposit(msg.sender, dollarAmount, userToken, "Public-sale");
        USDT.safeTransferFrom(msg.sender, funderWallet, estimatedTokenPrice);
        memeToken.safeTransfer(msg.sender, userToken);
        return true;
    }

    function internalDeposit(address userAddress, uint256 dollarAmount, uint256 userToken, string memory saleType) internal {
        userInfo[userAddress].dollarInvested += dollarAmount;
        userInfo[userAddress].memeTokenAmount += userToken;
        emit TokenPurchase(userAddress, dollarAmount, userToken, saleType);
    }

    /// @notice To get sold token details
    function getTotalSold() external view returns(uint256 totalSold, uint256 totalSoldInPrivateSales, uint256 totalSoldInPublicSales){
        uint256 totalSoldToken = _tokenInfo.tokenSoldInPrivateSale + _tokenInfo.tokenSoldInPublicSale;
        return (totalSoldToken, _tokenInfo.tokenSoldInPrivateSale, _tokenInfo.tokenSoldInPublicSale);
    }

    // Update sale start and end time
    function updateStartEndTime(
        uint256 revisedStartTime,
        uint256 revisedEndTime
    ) public onlyOwner {
        require(
            revisedStartTime > block.timestamp &&
                revisedEndTime > revisedStartTime,
            "Invalid start or end time"
        );
        saleConfig.saleStartTime = revisedStartTime;
        saleConfig.saleEndTime = revisedEndTime;
        emit UpdateStartEndTime(revisedStartTime, revisedEndTime);
    }

    // Pause / unpause sale
    function toggleSale() external onlyOwner returns (bool) {
        isPause = !isPause;
        emit ToggleSale();
        return isPause;
    }

    // function to check contract address
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
}