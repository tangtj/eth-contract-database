
// File: contracts/viralxrewardcontract.sol
/**
 *Submitted for verification at Etherscan.io on 2024-02-24
*/

pragma solidity 0.8.23;

// SPDX-License-Identifier: MIT

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position is the index of the value in the `values` array plus 1.
        // Position 0 is used to mean a value is not in the set.
        mapping(bytes32 value => uint256) _positions;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._positions[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We cache the value's position to prevent multiple reads from the same storage slot
        uint256 position = set._positions[value];

        if (position != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 valueIndex = position - 1;
            uint256 lastIndex = set._values.length - 1;

            if (valueIndex != lastIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the lastValue to the index where the value to delete is
                set._values[valueIndex] = lastValue;
                // Update the tracked position of the lastValue (that was just moved)
                set._positions[lastValue] = position;
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the tracked position for the deleted slot
            delete set._positions[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._positions[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        bytes32[] memory store = _values(set._inner);
        bytes32[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }
}

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20{
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() external virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
}

interface IReferralRegistry {
    function getUserReferee(address _user) external view returns (string calldata);

    function hasUserReferee(address _user) external view returns (bool);

    function createReferralAnchor(address _user, string calldata _referee) external;
}

contract ReferralRegistry is Ownable, IReferralRegistry {
    event ReferralAnchorCreated(address indexed user, string indexed referee);
    event ReferralAnchorUpdated(address indexed user, string indexed referee);
    event AnchorManagerUpdated(address account, bool isManager);

    // stores addresses which are allowed to create new anchors
    mapping(address => bool) public isAnchorManager;

    // stores the address that referred a given user
    mapping(address => string) public referralAnchor;

    mapping(string => address) public referralCodeAddress;

    mapping(address => uint256) public referreeOwedAmount;

    mapping(address => uint256) public referreeTotalRaisedAmount;

    mapping(string => uint256) public walletReferralAmount;

    mapping(address => bool) public hasUserReferee;

    constructor(){
        isAnchorManager[owner()] = true;
    }

    /// @dev create a new referral anchor on the registry
    /// @param _user address of the user
    /// @param _referee address wich referred the user
    function createReferralAnchor(address _user, string calldata _referee) external onlyAnchorManager {
        require(!hasUserReferee[_user], "ReferralRegistry: ANCHOR_EXISTS");
        require(referralCodeAddress[_referee] != address(0), "ReferralRegistry: Referral code invalid");
        referralAnchor[_user] = _referee;
        emit ReferralAnchorCreated(_user, _referee);
    }

    /// @dev allows admin to overwrite anchor
    /// @param _user address of the user
    /// @param _referee address wich referred the user
    function updateReferralAnchor(address _user, string calldata _referee) external onlyOwner {
        referralAnchor[_user] = _referee;
        emit ReferralAnchorUpdated(_user, _referee);
    }

    /// @dev allows admin to grant/remove anchor priviliges
    /// @param _anchorManager address of the anchor manager
    /// @param _isManager add or remove privileges
    function updateAnchorManager(address _anchorManager, bool _isManager) external onlyOwner {
        isAnchorManager[_anchorManager] = _isManager;
        emit AnchorManagerUpdated(_anchorManager, _isManager);
    }

    function getUserReferee(address _user) external view returns (string memory) {
        return referralAnchor[_user];
    }

    function setUserHasReferee(address _user) external onlyAnchorManager {
        hasUserReferee[_user] = true;
    }

    modifier onlyAnchorManager() {
        require(isAnchorManager[msg.sender], "ReferralRegistry: FORBIDDEN");
        _;
    }

    function allocateForReferree(string calldata _referralCode) external payable {
        referreeOwedAmount[referralCodeAddress[_referralCode]] += msg.value;
        referreeTotalRaisedAmount[referralCodeAddress[_referralCode]] += msg.value;
    }

    function referreeWithdraw() external {
        uint256 amountOwed = referreeOwedAmount[msg.sender];
        referreeOwedAmount[msg.sender] = 0;
        bool success;
        (success, ) = address(msg.sender).call{value: amountOwed}("");
    }

    function fetchReferralAddress(string calldata _referralCode) external view returns (address){
        return referralCodeAddress[_referralCode];
    }

    function createReferralCode(string calldata _referralCode, address _refereeAddress) external onlyOwner {
        require(referralCodeAddress[_referralCode] == address(0), "referral code already used");
        referralCodeAddress[_referralCode] = _refereeAddress;
    }

    function incrementReferralAmount(string calldata _referralCode) external onlyAnchorManager {
        walletReferralAmount[_referralCode] += 1;
    }
}


contract ViralXRewards is Ownable {

    using EnumerableSet for EnumerableSet.UintSet;
    using EnumerableSet for EnumerableSet.AddressSet;

    event Claim(address indexed account, uint256 amount, bool indexed automatic);
    event RewardDistributed(
        address indexed from,
        uint256 weiAmount
    );
    event RewardWithdrawn(
        address indexed to,
        uint256 weiAmount
    );

    event PoolCreated(PoolInfo pool);

    mapping (address => bool) public authorized;
    bool public publicCreationAllowed;
    
    uint256 public feePercent;
    address public feeReceiverEth;
    address public feeReceiverTokens;
    uint256 public poolCreationFee;
    uint256 public poolAdditionalWeekCost;
    
    ReferralRegistry public referralRegistry;
    uint256 public referralDiscount = 10; // 10% discount
    uint256 public referralCommission = 20; // 20% discount
    
    PoolInfo[] public poolsInfo;
    
    mapping (address => mapping(uint256 => uint256)) public userOwedAmount;
    mapping (address => mapping(uint256 => uint256)) public userClaimedAmount;

    mapping (address => EnumerableSet.UintSet) private userClaimablePools;
    mapping (address => EnumerableSet.UintSet) private userClaimedPools;
    mapping (uint256 => EnumerableSet.AddressSet) private poolRewardRecipients;

    struct PoolInfo {
        uint256 poolId;
        string projectName;
        uint64 poolStartTime;
        uint48 poolDuration;
        bool payoutIsEth;
        address rewardAddress;
        uint256 amountForReward;
        uint256 amountDistributed;
        uint8 amountOfPeopleToPay;
    }

    constructor(){
        authorized[msg.sender] = true;
        poolCreationFee = 0.4 ether;
        poolAdditionalWeekCost = 0.1 ether;
        feePercent = 10;
        feeReceiverEth = address(msg.sender);
        feeReceiverTokens = address(msg.sender);
        referralRegistry = new ReferralRegistry();
        referralRegistry.createReferralCode("", address(this));
    }

    // @dev used to create pools.  If public creation is not allowed, only authorized addresses can create pools.  If public creation is allowed, a value must be passed in the amount of the creation fee.

    function createPool(string memory _poolName, uint64 _poolStartTime, uint48 _poolDuration, bool _payoutIsEth, address _rewardAddress, uint8 _amountOfPeopleToPay, string memory _referralCode) external payable {
        
        if(!authorized[msg.sender]){
            uint256 amountForReferral;
            bool success;
            require(publicCreationAllowed, "Public creation not allowed");
            require(_poolStartTime >= block.timestamp, "Pool must start in the future");
            require(_poolDuration >= 1 weeks, "Pool must last at least 1 week");
            require(_poolDuration % 1 weeks == 0, "Pool duration must be divisible evenly by 1 week");
            uint256 poolDurationCost = (_poolDuration / 1 weeks - 1) * poolAdditionalWeekCost;
            uint256 owedFee = poolCreationFee + poolDurationCost;
            
            // create referrral anchor and take referral fees
            if(!referralRegistry.hasUserReferee(msg.sender)){
                referralRegistry.createReferralAnchor(msg.sender, _referralCode);
                referralRegistry.setUserHasReferee(msg.sender);
            }
            address userReferee = referralRegistry.fetchReferralAddress(referralRegistry.getUserReferee(msg.sender));
            string memory userRefereeString = referralRegistry.getUserReferee(msg.sender);

            if(userReferee != address(this) && userReferee != address(0)){
                owedFee -= (owedFee * referralDiscount / 100);
                referralRegistry.incrementReferralAmount(userRefereeString);

                amountForReferral = owedFee * referralCommission / 100;

                if(amountForReferral > 0){
                    (success, ) = referralRegistry.referralCodeAddress(userRefereeString).call{value: amountForReferral}("");
                    require(success, "Distribution failed");
                }
            }
            require(msg.value >= owedFee, "Must pay fee");
            (success,) = feeReceiverEth.call{value: msg.value - amountForReferral}("");
        }
        PoolInfo memory poolInfoMem;
        poolInfoMem.poolId = poolsInfo.length;
        poolInfoMem.projectName = _poolName;
        poolInfoMem.poolDuration = _poolDuration;
        poolInfoMem.poolStartTime = _poolStartTime;
        poolInfoMem.payoutIsEth = _payoutIsEth;
        if(!_payoutIsEth){
            poolInfoMem.rewardAddress = _rewardAddress;
        } else {
            poolInfoMem.rewardAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
        }
        poolInfoMem.amountOfPeopleToPay = _amountOfPeopleToPay;
        emit PoolCreated(poolInfoMem);
        poolsInfo.push(poolInfoMem);
    }

    // @dev allows anyone to deposit tokens or ETH to an existing pool.

    function deposit(uint256 poolId, uint256 amount) external payable {
        PoolInfo memory poolInfoMem = poolsInfo[poolId];
        if(poolInfoMem.payoutIsEth){
            uint256 amountForFee = msg.value * feePercent / 100;
            if(amountForFee > 0){
                (bool success,) = feeReceiverEth.call{value: amountForFee}("");
                require(success, "Distribution failed");
            }
            poolInfoMem.amountForReward += msg.value - amountForFee;
        } else {
            require(msg.value == 0, "Don't send a value for token deposits");
            uint256 amountForFee = amount * feePercent / 100;
            SafeERC20.safeTransferFrom(IERC20(poolInfoMem.rewardAddress), msg.sender, address(this), amount);
            if(amountForFee > 0){
                SafeERC20.safeTransfer(IERC20(poolInfoMem.rewardAddress), feeReceiverTokens, amountForFee);
            }
            poolInfoMem.amountForReward += amount - amountForFee;
        }
        poolsInfo[poolId] = poolInfoMem;
    }

    // @dev Used by team to set rewards for individual pools for distribution

    function setRewards(uint256 poolId, uint256[] calldata amounts, address[] calldata wallets) external onlyAuthorized {
        uint256 amountToDistributeTotal;
        uint256 amount;
        address wallet;
        PoolInfo memory poolInfoMem = poolsInfo[poolId];
        require(amounts.length == wallets.length, "Array length mismatch");
        for(uint256 i = 0; i < amounts.length; i++){
            amount = amounts[i];
            wallet = wallets[i];
            amountToDistributeTotal += amount;
            userOwedAmount[wallet][poolId] += amount;
            if(!userClaimablePools[wallet].contains(poolId)){
                userClaimablePools[wallet].add(poolId);
            }
            if(!poolRewardRecipients[poolId].contains(wallet)){
                poolRewardRecipients[poolId].add(wallet);
            }
        }
        
        poolInfoMem.amountDistributed += amountToDistributeTotal;
        require(poolInfoMem.amountDistributed <= poolInfoMem.amountForReward, "Too many rewards distributed");
        poolsInfo[poolId] = poolInfoMem;
    }

    // @dev allows user to claim from a single pool

    function claimByPool(uint256 poolId) public {
        PoolInfo memory poolInfoMem = poolsInfo[poolId];
        require(userClaimablePools[msg.sender].contains(poolId), "Invalid pool to claim from");
        uint256 amountOwed = userOwedAmount[msg.sender][poolId] - userClaimedAmount[msg.sender][poolId];
        require(amountOwed > 0, "Nothing to claim");
        userClaimedAmount[msg.sender][poolId] += amountOwed;
        userClaimablePools[msg.sender].remove(poolId);
        userClaimedPools[msg.sender].add(poolId); 
        if(poolInfoMem.payoutIsEth){
            (bool success,) = msg.sender.call{value: amountOwed}("");
            require(success, "Distribution failed");
        } else {
            SafeERC20.safeTransfer(IERC20(poolInfoMem.rewardAddress), msg.sender, amountOwed);
        }
    }

    // @dev allows user to claim from all pools

    function claimAll() external {
        uint256[] memory poolsToClaim = getUserClaimablePools(msg.sender);
        for(uint256 i = 0; i < poolsToClaim.length; i++){
            claimByPool(poolsToClaim[i]);
        }
    }

    modifier onlyAuthorized(){
        require(authorized[msg.sender] || msg.sender == owner(), "Not Authorized");
        _;
    }

    // Views


    function getUserClaimablePools(address user) public view returns (uint256[] memory){
        return userClaimablePools[user].values();
    }

    function getUserClaimedPools(address user) external view returns (uint256[] memory){
        return userClaimedPools[user].values();
    }

    function getPoolRewardRecipients(uint256 pool) external view returns (address[] memory){
        return poolRewardRecipients[pool].values();
    }

    
    function poolLength() external view returns (uint256) {
        return poolsInfo.length;
    }

    // Owner functions
    
    function setAuthorized(address _wallet, bool _authorized) external onlyOwner {
        authorized[_wallet] = _authorized;
    }

    function updateFeeReceiverEth(address _feeReceiver) external onlyOwner {
        require(_feeReceiver != address(0), "Zero address");
        feeReceiverEth = _feeReceiver;
    }

    function updateFeeReceiverTokens(address _feeReceiver) external onlyOwner {
        require(_feeReceiver != address(0), "Zero address");
        feeReceiverTokens = _feeReceiver;
    }

    function updateFee(uint256 _feePercent) external onlyOwner {
        require(_feePercent < 20, "Cannot set fee higher than 20%");
        feePercent = _feePercent;
    }

    function updatePoolCreationFees(uint256 _poolCreationFee, uint256 _poolAdditionalWeekCost) external onlyOwner {
        poolCreationFee = _poolCreationFee;
        poolAdditionalWeekCost = _poolAdditionalWeekCost;
    }

    function updatePublicCreationAllowed(bool _publicCreationAllowed) external onlyOwner {
        publicCreationAllowed = _publicCreationAllowed;
    }


    // referral functions 

    function updateReferralDiscount(uint256 _newDiscountPerc) external onlyOwner {
        require(_newDiscountPerc <= 50, "Cannot do discount higher than 50%");
        referralDiscount = _newDiscountPerc;
    }

    function updateReferralCommission(uint256 _newCommissionPerc) external onlyOwner {
        require(_newCommissionPerc <= 50, "Cannot do commission higher than 50%");
        referralCommission = _newCommissionPerc;
    }

    function checkReferralCodeAvailable(string calldata _referralCode) external view returns (bool){
        return (referralRegistry.fetchReferralAddress(_referralCode) != address(0));
    }

    function createReferralCode(string calldata _referralCode) external {
        require(referralRegistry.fetchReferralAddress(_referralCode) == address(0), "Code already used");
        referralRegistry.createReferralCode(_referralCode, msg.sender);
    }

    /// @dev allows admin to overwrite anchor (only use in specific circumstances)
    /// @param _user address of the user
    /// @param _referee address wich referred the user
    function updateReferralAnchor(address _user, string calldata _referee) external onlyOwner {
        referralRegistry.updateReferralAnchor(_user, _referee);
    }

    /// @dev allows admin to grant/remove anchor privileges (to add new contracts if needed)
    /// @param _anchorManager address of the anchor manager
    /// @param _isManager add or remove privileges
    function updateAnchorManager(address _anchorManager, bool _isManager) external onlyOwner {
        referralRegistry.updateAnchorManager(_anchorManager, _isManager);
    }
}
