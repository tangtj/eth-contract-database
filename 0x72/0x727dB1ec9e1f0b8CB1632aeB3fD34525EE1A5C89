
// File: contracts/NFTCollection.sol
// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.20;

contract NFTCollection{
    address payable public owner;

    event NFTMinted(address purchaser, uint256 gas, string ndtname, uint256 timestamp);

    struct NFTMintedStruct {
        address purchaser;
        uint256 gas;
        string nftname;
        uint256 timestamp;
    }

    NFTMintedStruct[] transactions;

    constructor() {
        owner = payable(msg.sender);
    }


    function mintNFT(string memory nftname) public payable { 
        address payable beneficiary = payable(msg.sender);
        uint256 weiAmount = msg.value;
        _preValidatePurchase(beneficiary, weiAmount);
        transactions.push(NFTMintedStruct(beneficiary, weiAmount, nftname, block.timestamp));

        emit NFTMinted(beneficiary, weiAmount, nftname, block.timestamp);
    }
    
    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
        require(beneficiary != address(0), "Invalid address");
        require(weiAmount != 0, "Insufficient bid");
        this; 
    }
    
    function withdraw() external onlyOwner{
         require(address(this).balance > 0, 'zero_balance');
        owner.transfer(address(this).balance);  
    }

    function getAllTransactions() public view returns (NFTMintedStruct[] memory) {
        return transactions;
    }

    modifier onlyOwner {
        require(msg.sender == owner, "only_owner_access");
        _;
    }
    

    function amountInETHReceived() public view returns (uint256) {
        return address(this).balance;
    }

}
