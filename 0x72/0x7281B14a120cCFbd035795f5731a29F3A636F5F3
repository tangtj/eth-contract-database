
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interfaces/ITAOXDividendTracker.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.23;

interface ITAOXDividendTracker {
    function setup(address router, address pairt) external;

    function setBalance(address account, uint256 newBalance) external;

    function setClaimEnabled(bool enabled) external;

    function distributeRewards(uint256 amount) external;

    function updateRewardToken(address newToken) external;

    function excludeFromDividends(address account, bool value) external;

}


// File: contracts/interfaces/IWETH9.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IWETH9 is IERC20 {
    function deposit() external payable;

    function withdraw(uint wad) external;
}


// File: contracts/TAOXFeeRouterV2.sol
// Website: https://taox.ai
// Twitter: https://x.com/taox_ai
// Telegram: https://t.me/taox_ai

// SPDX-License-Identifier: MIT

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/IWETH9.sol";
import "./interfaces/ITAOXDividendTracker.sol";

pragma solidity ^0.8.23;

contract TAOXFeeRouterV2 is Ownable {
    event UpdatedMarketingLP(address marketingLP);
    event UpdatedDividend(address dividend);

    IWETH9 public WETH = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    ITAOXDividendTracker public dividend =
        ITAOXDividendTracker(0xa8a465F7C7fF8c30E9F4E5F213C33DB8B0973634);
    address public marketingLP = 0x162EDbc10E3462ab80F9c92fBe795fBE30a54460;
    uint256 public rewardPercent = 40;
    uint256 public marketingPercent = 60;

    function setPercent(
        uint256 _rewardPercent,
        uint256 _marketingPercent
    ) external onlyOwner {
        require(_rewardPercent + _marketingPercent == 100, "Invalid percent");
        rewardPercent = _rewardPercent;
        marketingPercent = _marketingPercent;
    }

    function updateMarketingLP(address _marketingLP) external onlyOwner {
        marketingLP = _marketingLP;
        emit UpdatedMarketingLP(_marketingLP);
    }

    function updateDividend(address _dividend) external onlyOwner {
        dividend = ITAOXDividendTracker(_dividend);
        emit UpdatedDividend(_dividend);
    }
    // dividend manager

    function excludeFromDividends(
        address account,
        bool value
    ) external onlyOwner {
        dividend.excludeFromDividends(account, value);
    }

    function updateRewardToken(address newToken) external onlyOwner {
        dividend.updateRewardToken(newToken);
    }

    function setClaimEnabled(bool enabled) external onlyOwner {
        dividend.setClaimEnabled(enabled);
    }

    function transferOwnershipDividend(address newOwner) external onlyOwner {
        Ownable(address(dividend)).transferOwnership(newOwner);
    }

    function distributeRewards(uint256 amount) external onlyOwner {
        WETH.transferFrom(msg.sender, address(this), amount);
        _distributeRewards(amount);
    }

    function _distributeRewards(uint256 amount) internal {
        WETH.approve(address(dividend), amount);
        dividend.distributeRewards(amount);
    }

    receive() external payable {
        WETH.deposit{value: msg.value}();
        uint256 total = WETH.balanceOf(address(this));
        uint256 amount2Reward = (total * rewardPercent) / 100;
        uint256 amount2MarketingLP = total - amount2Reward;
        WETH.transfer(marketingLP, amount2MarketingLP);
        _distributeRewards(amount2Reward);
    }
}

