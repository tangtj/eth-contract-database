
// File: SmartBalance.sol
// SPDX-License-Identifier: Apache-2.0

/*
     Copyright 2023 Galxe.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 */

pragma solidity ^0.8.0;

import "IERC20.sol";
import "SafeERC20.sol";
import "Ownable.sol";
import "Pausable.sol";

/**
 * @title SmartBalance
 * @author Galxe
 *
 * SmartBalance contract allows Galxe to charge and keep track of Galxe user balances.
 */
contract SmartBalance is Pausable, Ownable {
    using SafeERC20 for IERC20;

    /* ============ Events ============ */

    event UpdateTreasurer(address indexed newTreasurer);

    event Deposit(
        bytes32 indexed _galxeId,
        address indexed token,
        uint256 _amount,
        address indexed depositor
    );

    event Withdraw(
        bytes32 indexed _galxeId,
        address token,
        uint256 indexed _amount,
        address indexed recipient
    );

    event AllowToken(address indexed token);

    event DisallowToken(address indexed token);

    /* ============ Modifiers ============ */

    modifier onlyTreasurer() {
        _onlyTreasurer();
        _;
    }

    modifier onlyAllowedToken(address token) {
        _onlyAllowedToken(token);
        _;
    }

    function _onlyTreasurer() internal view {
        require(msg.sender == treasurer, "Must be treasurer");
    }

    function _onlyAllowedToken(address token) internal view {
        require(tokenAllowlist[token] == true, "Must be allowed token");
    }

    /* ============ State Variables ============ */

    // Contract factory
    address public factory;

    // Galxe treasurer
    address public treasurer;

    // Galxe ID => token => current balance
    mapping(bytes32 => mapping(address => uint256)) public userTokenBalance;

    // Galxe ID => token => total deposited amount
    mapping(bytes32 => mapping(address => uint256)) public userTotalDeposits;

    // Allowed tokens
    mapping(address => bool) public tokenAllowlist;

    // Token balance
    mapping(address => uint256) public tokenBalance;

    /* ============ Constructor ============ */

    constructor() {
        factory = msg.sender;
    }

    /* ============ Initializer ============ */

    function initialize(address owner, address _treasurer) external {
        require(msg.sender == factory, "Forbidden");
        treasurer = _treasurer;
        transferOwnership(owner);
    }

    /* ============ External Functions ============ */

    function setTreasurer(address _treasurer) external onlyOwner {
        require(
            _treasurer != address(0),
            "Treasurer address must not be null address"
        );
        treasurer = _treasurer;
        emit UpdateTreasurer(_treasurer);
    }

    function allowToken(address _token) external onlyOwner {
        tokenAllowlist[_token] = true;

        emit AllowToken(_token);
    }

    function disallowToken(address _token) external onlyOwner {
        tokenAllowlist[_token] = false;

        emit DisallowToken(_token);
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function isTokenAllowed(address _token) public view returns (bool) {
        return tokenAllowlist[_token];
    }

    function balanceOf(
        bytes32 _galxeId,
        address _token
    ) public view returns (uint256) {
        return userTokenBalance[_galxeId][_token];
    }

    /**
     * @notice
     *  Returns accumulated token disposit amount for galxe ID.
     */
    function totalDepositOf(
        bytes32 _galxeId,
        address _token
    ) public view returns (uint256) {
        return userTotalDeposits[_galxeId][_token];
    }

    function deposit(
        bytes32 _galxeId,
        address _token,
        uint256 _amount
    ) external payable whenNotPaused onlyAllowedToken(_token) {
        if (_token == address(0)) {
            _depositNative(_galxeId, _amount);
        } else {
            _depositERC20(_galxeId, _token, _amount);
        }
    }

    function withdrawToken(
        address _token,
        address _recipient
    ) external whenNotPaused onlyTreasurer {
        uint256 _amount = tokenBalance[_token];
        require(_amount > 0, "Cannot withdraw a non-positive amount");
        tokenBalance[_token] -= _amount;
        _doWithdraw(_token, _amount, _recipient);
        emit Withdraw(bytes32(0), _token, _amount, _recipient);
    }

    function withdrawToken(
        address _token,
        address _recipient,
        uint256 _amount
    ) external whenNotPaused onlyTreasurer {
        require(_amount > 0, "Cannot withdraw a non-positive amount");
        require(
            tokenBalance[_token] >= _amount,
            "Token amount must be greater than withdraw amount"
        );
        tokenBalance[_token] -= _amount;
        _doWithdraw(_token, _amount, _recipient);
        emit Withdraw(bytes32(0), _token, _amount, _recipient);
    }

    function withdraw(
        bytes32 _galxeId,
        address _token,
        address _recipient
    ) external whenNotPaused onlyTreasurer {
        uint256 _amount = userTokenBalance[_galxeId][_token];
        _withdraw(_galxeId, _token, _amount, _recipient);
    }

    function withdraw(
        bytes32 _galxeId,
        address _token,
        uint256 _amount,
        address _recipient
    ) external whenNotPaused onlyTreasurer {
        _withdraw(_galxeId, _token, _amount, _recipient);
    }

    function withdrawBatch(
        bytes32 _galxeId,
        address[] calldata _tokens,
        address _recipient
    ) external whenNotPaused onlyTreasurer {
        uint256[] memory _amounts = new uint256[](_tokens.length);
        for (uint256 i = 0; i < _tokens.length; ++i) {
            _amounts[i] = userTokenBalance[_galxeId][_tokens[i]];
        }
        _withdrawBatch(_galxeId, _tokens, _amounts, _recipient);
    }

    function withdrawBatch(
        bytes32 _galxeId,
        address[] calldata _tokens,
        uint256[] memory _amounts,
        address _recipient
    ) external whenNotPaused onlyTreasurer {
        _withdrawBatch(_galxeId, _tokens, _amounts, _recipient);
    }


    receive() external payable {
        if (msg.sender == address(this)) {
            return;
        }
        // anonymous transfer: to treasury_manager
        (bool success, ) = treasurer.call{value: msg.value}(
            new bytes(0)
        );
        require(success, "Transfer failed");
    }

    fallback() external payable {
        if (msg.sender == address(this)) {
            return;
        }
        if (msg.value > 0) {
            // call non exist function: send to treasury_manager
            (bool success, ) = treasurer.call{value: msg.value}(new bytes(0));
            require(success, "Transfer failed");
        }
    }

    /* ============ Internal Functions ============ */

    function _depositERC20(
        bytes32 _galxeId,
        address _token,
        uint256 _amount
    ) internal {
        require(
            IERC20(_token).balanceOf(msg.sender) >= _amount,
            "Your token amount must be greater then you are trying to deposit"
        );
        require(
            IERC20(_token).allowance(msg.sender, address(this)) >= _amount,
            "Approve tokens first!"
        );
        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);

        _deposit(_galxeId, _token, _amount, msg.sender);
    }

    function _depositNative(
        bytes32 _galxeId,
        uint256 _amount
    ) internal {
        require(
            msg.value >= _amount,
            "Your token amount must be greater then you are trying to deposit"
        );

        (bool success, ) = address(this).call{value: msg.value}(
            new bytes(0)
        );
        require(success, "Deposit native token failed");
        _deposit(_galxeId, address(0), _amount, msg.sender);
    }

    function _deposit(
        bytes32 _galxeId,
        address _token,
        uint256 _amount,
        address _depositor
    ) private {
        userTokenBalance[_galxeId][_token] += _amount;
        userTotalDeposits[_galxeId][_token] += _amount;
        tokenBalance[_token] += _amount;

        emit Deposit(_galxeId, _token, _amount, _depositor);
    }

    function _withdrawBatch(
        bytes32 _galxeId,
        address[] calldata _tokens,
        uint256[] memory _amounts,
        address _recipient
    ) internal {
        require(
            _tokens.length == _amounts.length,
            "Tokens and amounts length mismatch"
        );
        for (uint256 i = 0; i < _amounts.length; ++i) {
            _withdraw(_galxeId, _tokens[i], _amounts[i], _recipient);
        }
    }

    function _withdraw(
        bytes32 _galxeId,
        address _token,
        uint256 _amount,
        address _recipient
    ) internal {
        require(_amount > 0, "Cannot withdraw a non-positive amount");
        require(
            userTokenBalance[_galxeId][_token] >= _amount,
            "Token amount must be greater than withdraw amount"
        );
        userTokenBalance[_galxeId][_token] -= _amount;
        tokenBalance[_token] -= _amount;
        _doWithdraw(_token, _amount, _recipient);
        emit Withdraw(_galxeId, _token, _amount, _recipient);
    }

    function _doWithdraw(address _token, uint256 _amount, address _recipient) private {
        if (_token == address(0)) {
            require(address(this).balance >= _amount, "Contract insufficient balance");
            (bool success, ) = _recipient.call{value: _amount}(
                new bytes(0)
            );
            require(success, "Withdraw native token failed");
        } else {
            IERC20(_token).safeTransfer(_recipient, _amount);
        }
    }
}


// File: IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "IERC20.sol";
import "Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: Pausable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

