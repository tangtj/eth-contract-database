{"EstateXPresale.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Token.sol\u0027;\n\ncontract EstateXPresale {\n   using SafeMath for uint256;\n\n    address payable public owner;\n    Token private token;\n    uint public minPurchase = 100000000000000000;\n    uint public maxPurchase = 1000000000000000000;\n    uint256 public _rate;\n    uint256 public _weiRaised = 0;\n\n    uint256 transactionCount;\n\n    event TokensPurchased(address purchaser, uint256 value, uint256 amount, uint256 timestamp);\n\n    struct TokensPurchasedStruct {\n        address purchaser;\n        uint256 value;\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    TokensPurchasedStruct[] transactions;\n\n    constructor(Token _tokenAddress, uint256 funds, uint256 rate) {\n        token = _tokenAddress;\n        _rate = rate;\n        owner = payable(msg.sender);\n        fundContract(funds*(10**18));\n    }\n\n\n    function balance() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    function fundContract(uint256 funds) internal {\n        token.claimReferralTokens(funds);\n    }\n\n    function totalSupplyOfToken() public view returns (uint256) {\n        return token.totalSupply();\n    }\n\n\n    receive () external payable {\n        buyTokens();\n    }\n\n\n    //Pre-Sale \n    function buyTokens() public payable {\n        address payable beneficiary = payable(msg.sender);\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(beneficiary, weiAmount);\n        uint256 tokens = _getTokenAmount(weiAmount);\n        _weiRaised = _weiRaised.add(weiAmount);\n        token.transfer(beneficiary, tokens);\n\n        transactionCount += 1; \n        transactions.push(TokensPurchasedStruct(beneficiary, weiAmount, tokens, block.timestamp));\n\n        emit TokensPurchased(beneficiary, weiAmount, tokens, block.timestamp);\n    }\n\n\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        require(beneficiary != address(0), \"Invalid address\");\n        require(weiAmount != 0, \"Insufficient bid\");\n        require(weiAmount \u003e= minPurchase, \u0027Insufficient bid, bid not within cap range 0.1 - 1 ETH\u0027);\n        require(weiAmount \u003c= maxPurchase, \u0027Insufficient bid, bid not within cap range 0.1 - 1 ETH\u0027);\n        // require(_contributions[beneficiary].add(weiAmount)\u003c= maxPurchase, \u0027can\\\u0027t buy more than: maxPurchase\u0027);\n        // require((_weiRaised+weiAmount) \u003c= hardCap, \u0027Hard Cap reached\u0027);\n        this; \n    }\n\n\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n        return weiAmount.div(_rate).mul(10 ** 18);\n    }\n\n    \n     function withdraw() external onlyOwner{\n         require(address(this).balance \u003e 0, \u0027zero_balance\u0027);\n        owner.transfer(address(this).balance);  \n    }\n\n\n    function getAllTransactions() public view returns (TokensPurchasedStruct[] memory) {\n        return transactions;\n    }\n\n    function getTransactionCount() public view returns (uint256) {\n        return transactionCount;\n    }\n    \n\n    function amountInETHReceived() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"only_owner_access\");\n        _;\n    }\n\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"},"Token.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface Token {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function claimReferralTokens (uint256 weiAmount) external;\n}"}}