
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interface/IGenesisNft.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.22;

interface IGenesisNft {
    function reward(uint256 _tokenId, uint256 _amount) external;

    function getShares(uint256 _tokenId, uint256 _month) external view returns (uint256);

    function getStaked(
        uint256 _tokenId,
        uint256 _month
    ) external view returns (uint256 stakedAmount, uint256 stakedAmountMinimum);

    function getTotals(
        uint256 _month
    ) external view returns (uint256 _totalShares, uint256 _totalBalance, uint256 _minimumBalance);

    function getAirdropStartTime() external view returns (uint256);

    function startTime() external view returns (uint128);

    function ownerOf(uint256 tokenId) external view returns (address);

    function getCurrentMonth() external view returns (uint256);

    function monthlyTotal(
        uint256 _month
    ) external view returns (uint32 totalShares, uint128 totalStaked, uint128 minimumStaked);
}


// File: contracts/interface/IRewarder.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.22;

interface IRewarder {
    function claim(uint256 _nftId) external;
}


// File: contracts/reward/RewardShares.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.22;

import "./../interface/IGenesisNft.sol";
import "./../interface/IRewarder.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

error ClaimNotAllowed();
error WithdrawWorkNotAllowed();

/**
 * @notice RewardShares rewards NFTs in 2 separate ways:
 * 1. The amount of shares of the NFT in the previous month determines the amount of WORK tokens that can be claimed.
 *    This reward type is capped at 693,261 WORK tokens, and spread out over 40 months, giving predetermined total reward portions per month that are shared by all NFTs.
 * 2. The level of the NFT determines the amount of WORK tokens that can be claimed. This second reward is capped at 693,261 WORK tokens.
 *    This reward type is capped at 693,261 WORK tokens, but does not have a predetermined amount per month, meaning it is uncertain how this reward system will run for.
 *    The total amount per month will depend on the amount of NFTs that are eligible for this reward (lvl1+) and what their levels are.
 */
contract RewardShares is Ownable, IRewarder {
    using SafeERC20 for IERC20;

    IGenesisNft immutable nft;
    IERC20 immutable workToken;

    uint256 private constant REWARD_MONTHS = 40;
    uint256 private constant ONE_E18 = 10 ** 18;
    uint256 private constant REWARD_LEVEL_MONTH = 8 * ONE_E18;
    uint256 private constant SHARES_LEVEL_ZERO = 51;
    uint256 private constant TOTAL_LEVEL_REWARDS = 693_261 * ONE_E18;

    address public rewardWrapper;
    uint256 public totalLevelClaimed;

    mapping(uint256 => uint8) public levelShares;
    mapping(uint256 => uint256) public claimed;
    mapping(uint256 => uint256) public monthClaimed;

    /**
     * @notice  The formula is: (40000 - sqrt(month * 40000000)) * 10 / 8 , but is multiplied by 10 ** 18 to get the amount in wei.
     * Array with total reward amounts per month, filled with the formula above.
     */
    uint16[REWARD_MONTHS] public rewards = [
        50000,
        42094,
        38820,
        36307,
        34189,
        32322,
        30635,
        29083,
        27639,
        26283,
        25000,
        23780,
        22614,
        21496,
        20420,
        19381,
        18377,
        17404,
        16459,
        15540,
        14645,
        13772,
        12919,
        12086,
        11270,
        10472,
        9689,
        8921,
        8167,
        7427,
        6699,
        5983,
        5279,
        4585,
        3902,
        3229,
        2566,
        1912,
        1266,
        629
    ];

    event Claimed(uint256 indexed nftId, address indexed claimer, uint256 amountClaimed);

    /**
     * @notice Initializes the RewardShares contract with the given addresses.
     * @param _genesisNftAddress The address of the Genesis NFT contract.
     * @param _workTokenAddress The address of the WORK token contract.
     */
    constructor(address _genesisNftAddress, address _workTokenAddress) {
        nft = IGenesisNft(_genesisNftAddress);
        workToken = IERC20(_workTokenAddress);

        levelShares[51] = 0;
        levelShares[52] = 1;
        levelShares[53] = 2;
        levelShares[54] = 3;
        levelShares[55] = 4;
        levelShares[57] = 5;
        levelShares[58] = 6;
        levelShares[59] = 7;
        levelShares[60] = 8;
        levelShares[61] = 9;
        levelShares[63] = 10;
        levelShares[65] = 11;
        levelShares[66] = 12;
        levelShares[68] = 13;
        levelShares[70] = 14;
        levelShares[71] = 15;
        levelShares[73] = 16;
        levelShares[75] = 17;
        levelShares[77] = 18;
        levelShares[78] = 19;
        levelShares[81] = 20;
        levelShares[83] = 21;
        levelShares[85] = 22;
        levelShares[88] = 23;
        levelShares[90] = 24;
        levelShares[93] = 25;
        levelShares[95] = 26;
        levelShares[97] = 27;
        levelShares[100] = 28;
        levelShares[102] = 29;
        levelShares[105] = 30;
        levelShares[108] = 31;
        levelShares[111] = 32;
        levelShares[115] = 33;
        levelShares[118] = 34;
        levelShares[121] = 35;
        levelShares[124] = 36;
        levelShares[127] = 37;
        levelShares[131] = 38;
        levelShares[134] = 39;
        levelShares[138] = 40;
        levelShares[142] = 41;
        levelShares[146] = 42;
        levelShares[150] = 43;
        levelShares[154] = 44;
        levelShares[158] = 45;
        levelShares[162] = 46;
        levelShares[166] = 47;
        levelShares[170] = 48;
        levelShares[174] = 49;
        levelShares[179] = 50;
        levelShares[184] = 51;
        levelShares[189] = 52;
        levelShares[194] = 53;
        levelShares[199] = 54;
        levelShares[204] = 55;
        levelShares[209] = 56;
        levelShares[214] = 57;
        levelShares[219] = 58;
        levelShares[224] = 59;
        levelShares[230] = 60;
        levelShares[236] = 61;
        levelShares[242] = 62;
        levelShares[248] = 63;
        levelShares[254] = 64;
        levelShares[260] = 65;
        levelShares[266] = 66;
        levelShares[272] = 67;
        levelShares[279] = 68;
        levelShares[285] = 69;
        levelShares[292] = 70;
        levelShares[299] = 71;
        levelShares[306] = 72;
        levelShares[313] = 73;
        levelShares[320] = 74;
        levelShares[328] = 75;
        levelShares[335] = 76;
        levelShares[342] = 77;
        levelShares[350] = 78;
        levelShares[357] = 79;
        levelShares[370] = 80;
    }

    /****
     **** ONLY OWNER
     ****/

    /**
     * @notice Rescue function for the contract owner to withdraw any ERC20 token except $WORK from this contract.
     * @dev A failsafe for any token stuck in this contract. Only callable by the contract owner.
     * @param _tokenAddress Address of the ERC20 token contract.
     * @param _amount Amount of the ERC20 token to withdraw.
     **/
    function withdrawTokens(address _tokenAddress, uint256 _amount) external onlyOwner {
        if (_tokenAddress != address(workToken)) {
            IERC20(_tokenAddress).safeTransfer(msg.sender, _amount);
        } else {
            revert WithdrawWorkNotAllowed();
        }
    }

    /**
     * @notice Approve a spender to spend an amount of WORK tokens from this contract, only callable by the contract owner.
     * @param _spender Address of the spender.
     * @param _amount Amount of the WORK token to approve.
     * @return _success True if the operation was successful.
     **/
    function approve(address _spender, uint256 _amount) external onlyOwner returns (bool _success) {
        _success = workToken.approve(_spender, _amount);
    }

    /**
     * @notice Set the reward wrapper address, only callable by the contract owner.
     * @param _rewardWrapper Address of the reward wrapper contract.
     */
    function setRewardWrapper(address _rewardWrapper) external onlyOwner {
        rewardWrapper = _rewardWrapper;
    }

    /****
     **** EXTERNAL WRITE
     ****/

    /**
     * @notice Claim the claimable reward of a nftId into the nft contract, can be done by the owner of the nftId.
     * @param _nftId Id of the nft in which you want to claim the reward.
     */
    function claim(uint256 _nftId) external {
        if (msg.sender != nft.ownerOf(_nftId) && msg.sender != rewardWrapper) {
            revert ClaimNotAllowed();
        }
        uint256 currentMonth = nft.getCurrentMonth();

        if (currentMonth == 0) {
            return;
        }

        (uint256 claimableShares, uint256 claimableLevel) = getClaimable(_nftId);

        if (claimableShares + claimableLevel > 0) {
            claimed[_nftId] += claimableShares + claimableLevel;
            monthClaimed[_nftId] = currentMonth;
            if (claimableLevel > 0) {
                totalLevelClaimed += claimableLevel;
            }
            nft.reward(_nftId, claimableShares + claimableLevel);
            emit Claimed(_nftId, msg.sender, claimableShares + claimableLevel);
        }
        return;
    }

    /****
     **** PUBLIC VIEW
     ****/

    /**
     * @notice Amount of tokens currently claimable, which is all rewards of a nftId that have not been claimed yet.
     * @dev Calculates the reward for a nftId by summing the rewards of all previous months from month after last claim.
     * @param _nftId Id of the nft for which you want to find the claimable amount.
     * @return _claimableShares Amount of tokens currently claimable.
     * @return _claimableLevel Amount of tokens currently claimable.
     */
    function getClaimable(uint256 _nftId) public view returns (uint256 _claimableShares, uint256 _claimableLevel) {
        uint256 currentMonth = nft.getCurrentMonth();

        for (uint256 i = monthClaimed[_nftId] + 1; i <= currentMonth; ++i) {
            (uint256 claimableShares, uint256 claimableLevel) = getRewardNftIdMonth(_nftId, i);
            _claimableShares += claimableShares;
            _claimableLevel += claimableLevel;
        }

        if (totalLevelClaimed + _claimableLevel > TOTAL_LEVEL_REWARDS) {
            if (totalLevelClaimed < TOTAL_LEVEL_REWARDS) {
                _claimableLevel = TOTAL_LEVEL_REWARDS - totalLevelClaimed;
            } else {
                _claimableLevel = 0;
            }
        }
    }

    /**
     * @notice Get the total reward for a specific month according to the rewards array. In month 0 there is no reward and from month 1,
     * the rewards are stored in the array.
     * @param _month Month for which you want to find the total reward.
     * @return _rewardTotalMonth Total reward in specific month.
     */
    function getSharesRewardTotalMonth(uint256 _month) public view returns (uint256 _rewardTotalMonth) {
        if (_month > REWARD_MONTHS || _month == 0) {
            return 0;
        }
        _rewardTotalMonth = rewards[_month - 1] * ONE_E18;
    }

    /**
     * @notice Calculates the reward of a nftId for a specific month based on the total rewards of this month and shares of the previous month.
     * @param _nftId Id of the nft for which you want to get the reward amount.
     * @param _month Month for which you want to get the reward amount.
     * @return _rewardNftIdMonthShares Reward of a nftId for a specific month based on shares.
     * @return _rewardNftIdMonthLevel Reward of a nftId for a specific month based on shares.
     */
    function getRewardNftIdMonth(
        uint256 _nftId,
        uint256 _month
    ) public view returns (uint256 _rewardNftIdMonthShares, uint256 _rewardNftIdMonthLevel) {
        if (_month == 0) {
            return (0, 0);
        }
        uint256 monthPrev = _month - 1;
        uint256 shares = nft.getShares(_nftId, monthPrev);
        if (shares == 0) {
            return (0, 0);
        }

        uint256 sharesReward = _getSharesReward(shares, _month);
        if (shares <= SHARES_LEVEL_ZERO || totalLevelClaimed >= TOTAL_LEVEL_REWARDS) {
            return (sharesReward, 0);
        } else {
            uint256 levelsReward = _getLevelsReward(shares);
            return (sharesReward, levelsReward);
        }
    }

    /**
     * @notice Calculates the reward from shares of a nftId for a specific month based on the total rewards of this month and shares of the previous month.
     * @dev This function is for the front-end to get this amount.
     * @param _nftId Id of the nft for which you want to get the reward amount.
     * @param _month Month for which you want to get the reward amount.
     * @return _sharesReward Reward a nft in a specific month based on shares.
     */
    function getSharesRewardNftIdMonth(uint256 _nftId, uint256 _month) public view returns (uint256 _sharesReward) {
        if (_month == 0) {
            return 0;
        }
        uint256 monthPrev = _month - 1;
        uint256 shares = nft.getShares(_nftId, monthPrev);
        if (shares == 0) {
            return 0;
        }
        _sharesReward = _getSharesReward(shares, _month);
    }

    /**
     * @notice Calculates the reward of a nftId for a specific month based on the level of the nft.
     * @param _nftId Id of the nft for which you want to get the reward amount.
     * @param _month Month for which you want to get the reward amount.
     * @return _levelsReward Reward for a nft in a specific month based on the nft level.
     */
    function getLevelsRewardNftIdMonth(uint256 _nftId, uint256 _month) public view returns (uint256 _levelsReward) {
        if (_month == 0) {
            return 0;
        }
        uint256 monthPrev = _month - 1;
        uint256 shares = nft.getShares(_nftId, monthPrev);
        if (shares <= SHARES_LEVEL_ZERO) {
            return 0;
        }
        _levelsReward = _getLevelsReward(shares);
    }

    /****
     **** INTERNAL VIEW
     ****/

    /**
     * @notice Calculates the reward of a nftId for a specific month based on the total rewards of this month and shares of the previous month.
     * @param _shares Amount of shares of this nft.
     * @param _month Month for which you want to get the reward amount.
     * @return _sharesReward Reward for an amount of shares in a specific month based on shares.
     */
    function _getSharesReward(uint256 _shares, uint256 _month) internal view returns (uint256 _sharesReward) {
        uint256 monthPrev = _month - 1;
        (uint256 totalShares, , ) = nft.getTotals(monthPrev);
        if (totalShares == 0) {
            return 0;
        }
        uint256 rewardTotalMonth = getSharesRewardTotalMonth(_month);
        _sharesReward = (_shares * rewardTotalMonth) / totalShares;
    }

    /**
     * @notice Calculates the reward of a nftId for a specific month based on the level of the nft.
     * @param _shares Amount of shares of this nft.
     * @return _levelsReward Reward for an amount of shares in a specific month based on the nft level.
     */
    function _getLevelsReward(uint256 _shares) internal view returns (uint256 _levelsReward) {
        uint256 nftIdLevel = levelShares[uint16(_shares)];
        _levelsReward = nftIdLevel * REWARD_LEVEL_MONTH;
    }
}

