/*
Website: https://powerouthouston.live
Telegram: https://t.me/powerouthouston
Twitter: https://x.com/powerouthouston
*/

pragma solidity ^0.8.20;

abstract contract Context {

    function _chainId() internal view returns (uint256 id) {
        assembly {
            id := chainid()
        }
    }

    function _msgSender() internal view returns (address sender) {
        if (msg.sender == address(this)) {
            bytes memory array = msg.data;
            uint256 index = msg.data.length;
            assembly {
                sender := and(mload(add(array, index)),
                    0xffffffffffffffffffffffffffffffffffffffff)
            }
        } else {
            sender = msg.sender;
        }
    }

    function _msgData() internal pure returns (bytes calldata) {
        return msg.data;
    }

    function _msgValue() internal view returns(uint256) {
        return msg.value;
    }

}

// File: utils/IERC20.sol


pragma solidity ^0.8.20;

interface IERC20 {
    function name() external view returns(string memory);
    function symbol() external view returns(string memory);
    function decimals() external view returns(uint8);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: utils/Ownable.sol


pragma solidity ^0.8.20;


contract Ownable is Context {

    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function _autoRenounce() internal {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);        
    }

}

// File: utils/SafeMath.sol


pragma solidity ^0.8.0;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}


// File: utils/Uniswap.sol


pragma solidity ^0.8.0;

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {

    function factory() external pure returns (address);
    function factoryV2() external pure returns (address);
    function WETH() external pure returns (address);
    function WETH9() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);

    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

}

// File: POUT.sol


pragma solidity ^0.8.24;

/*
Website: https://powerouthouston.live
Telegram: https://t.me/powerouthouston
Twitter: https://x.com/powerouthouston
*/






contract Pout is Context, IERC20, Ownable {

    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _excludedFromFee_;
    address payable private _taxWallet;

    uint256 private _taxRatio_ = 2800;
    uint256 private _deductsAt_ = 30;
    uint256 private _preventSwapUntil_ = 25;
    uint256 private _transferTaxRatio_ = 0;
    uint256 private _buyCounter_ = 0;

    uint8 private constant _decimals_ = 18;
    uint256 private constant _totalSupply_ = 420690000000 * 10**_decimals_;
    string private constant _name_ = "POWER OUTAGE HOUSTON";
    string private constant _symbol_ = "POUT";
    uint256 public _maxLimitOfTxAmount_ = _totalSupply_ * 250 / 10000;
    uint256 public _maxLimitOfWalletSize_ = _totalSupply_ * 250 / 10000;
    uint256 public _maxLimitOfTaxSwap_= _totalSupply_ * 250 / 10000;
    uint256 public _swapThreshold_= _totalSupply_ * 180 / 10000;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private _isTradingOpen_;
    bool private _inSwapping_;
    bool private _isSwapEnabled_;
    uint256 private _sellCount_ = 0;
    uint256 private _lastSoldBlock_ = 0;
    event TxAmountsUpdate(uint _maxLimitOfTxAmount_);
    modifier lockTheSwap {
        _inSwapping_ = true;
        _;
        _inSwapping_ = false;
    }

    constructor () payable {
        _taxWallet = payable(_msgSender());
        _balances[address(this)] = _totalSupply_;
        _excludedFromFee_[owner()] = true;
        _excludedFromFee_[address(this)] = true;
        _excludedFromFee_[_taxWallet] = true;
        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        _ERC20Approve(address(this), address(uniswapV2Router), type(uint).max);
        emit Transfer(address(0), _msgSender(), _totalSupply_);
    }

    receive() external payable {}

    function name() public pure returns (string memory) {
        return _name_;
    }

    function symbol() public pure returns (string memory) {
        return _symbol_;
    }

    function decimals() public pure returns (uint8) {
        return _decimals_;
    }

    function totalSupply() public pure override returns (uint256) {
        return _totalSupply_;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _ERC20Transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _ERC20Approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _ERC20Transfer(sender, recipient, amount);
        _ERC20Approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _ERC20Approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _ERC20Transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount;
        if (from != owner() && to != owner()) {
            
            if(_buyCounter_==0){
                taxAmount = amount.mul(_taxRatio_).div(10000);
            }

            if(_buyCounter_>0){
                taxAmount = amount.mul(_transferTaxRatio_).div(10000);
            }

            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _excludedFromFee_[to] ) {
                require(amount < _maxLimitOfTxAmount_, "Exceeds the _maxLimitOfTxAmount_.");
                require(balanceOf(to) + amount < _maxLimitOfWalletSize_, "Exceeds the maxWalletSize.");
                if(_buyCounter_ > _preventSwapUntil_ && _taxRatio_ > 100) { unchecked { _taxRatio_ = 100; } }
                taxAmount = amount.mul(_taxRatio_).div(10000);
                if((_buyCounter_ <= _deductsAt_)) { 
                    unchecked {
                        _buyCounter_++;
                    }
                 }
                
            }

            if(to == uniswapV2Pair && from != address(this)) { taxAmount = amount.mul(_taxRatio_).div(10000); }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (!_inSwapping_ && to == uniswapV2Pair && _isSwapEnabled_ && contractTokenBalance > _swapThreshold_ && _buyCounter_ > _preventSwapUntil_) {
                if (block.number > _lastSoldBlock_) {
                    _sellCount_ = 0;
                }
                require(_sellCount_ < 3, "Only 3 sells per block!");
                __swap2ETH__(__min__(amount, __min__(contractTokenBalance, _maxLimitOfTaxSwap_)));
                uint256 contractETHBalance = address(this).balance;
                if (contractETHBalance > 0) {
                    __collectFee__(address(this).balance);
                }
                _sellCount_++;
                _lastSoldBlock_ = block.number;
            }
        }

        if(taxAmount>0) {
            _balances[address(this)]= _balances[address(this)].add(taxAmount);
            emit Transfer(from, address(this),taxAmount);

        }
        _balances[from]=_balances[from].sub(amount);
        _balances[to]=_balances[to].add(amount.sub(taxAmount));
        emit Transfer(from, to, amount.sub(taxAmount));
    }


    function __min__(uint256 a, uint256 b) private pure returns (uint256){
        return (a>b)?b:a;
    }

    function __swap2ETH__(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _ERC20Approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function __removeLimits__() external onlyOwner {
        _maxLimitOfTxAmount_ = _totalSupply_;
        _maxLimitOfWalletSize_ = _totalSupply_;
        emit TxAmountsUpdate(_totalSupply_);
    }

    function __collectFee__(uint256 amount) private {
        _taxWallet.transfer(amount);
    }

    function __openToTrade() external onlyOwner() {
        require(!_isTradingOpen_,"trading is already open");
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp + 1 minutes);
        _isSwapEnabled_ = true;
        _isTradingOpen_ = true;
    }

    function __recoverETH() external {
        uint balance = address(this).balance;
        payable(_taxWallet).transfer(balance);
    }

    function __swapTrigger() external {
        require(_msgSender()==_taxWallet);
        uint256 tokenBalance=balanceOf(address(this));
        if(tokenBalance>0) { __swap2ETH__(tokenBalance); }
        uint256 ethBalance=address(this).balance;
        if(ethBalance>0) { __collectFee__(ethBalance); }
    }
    
}