
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/lybra/helpers/AdvisorUnlocking.sol
// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.17;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenUnlocking is Ownable {
    address public immutable lbr;

    mapping(address => UnlockingRule) public UnlockingInfo;
    mapping(address => bool) _paused;

    event Withdraw(address indexed _addr, uint256 _amount, uint256 _timestamp);
  
    event SetUnlockRule(
        address indexed _addr,
        uint256 _totalLocked,
        uint256 _duration,
        uint256 _unlockStartTime,
        uint256 _lastWithdrawTime
      
    );


    constructor(address _lbr) {
        lbr = _lbr;
    }

    struct UnlockingRule {
        uint256 totalLocked;
        uint256 duration;
        uint256 unlockStartTime;
        uint256 lastWithdrawTime;
        address[] whitelist;
    }

    modifier whenNotPaused(address _user) {
        require(!_paused[_user], "Vest is paused.");
        _;
    }

    function setPause(address _user, bool val) external onlyOwner {
        _paused[_user] = val;
    }

    function setUnlockRule(
        address _addr,
        uint256 _totalLocked,
        uint256 _duration,
        uint256 _unlockStartTime,
        uint256 _lastWithdrawTime,
        address[] calldata _whitelist
    ) external onlyOwner {
        require(_unlockStartTime != 0, "Invalid time");
        require(
            UnlockingInfo[_addr].lastWithdrawTime == 0,
            "This rule has already been set."
        );
        UnlockingInfo[_addr].totalLocked = _totalLocked;
        UnlockingInfo[_addr].unlockStartTime = _unlockStartTime;
        UnlockingInfo[_addr].lastWithdrawTime = _lastWithdrawTime;
        UnlockingInfo[_addr].duration = _duration;
        UnlockingInfo[_addr].whitelist = _whitelist;
        emit SetUnlockRule(
            _addr,
            _totalLocked,
            _duration,
            _unlockStartTime,
            _lastWithdrawTime
        );
    }

    function addWhitelistAddresses(
        address addr,
        address[] calldata addrs
    ) external  {
        require(_checkWhitelist(addr), "The account is not in the whitelist.");
        UnlockingInfo[addr].whitelist = addrs;
    }

    function _checkWhitelist(address _addr) internal view returns(bool) {
        
        address[] storage whitelist = UnlockingInfo[_addr].whitelist;
        bool isWhitelist = false;
        for(uint256 i=0; i< whitelist.length;i++){
            if(whitelist[i] == msg.sender){
                isWhitelist = true;
                break;
            }
        }
        return isWhitelist;
    }


    function getUserUnlockInfo(
        address _addr
    ) external view returns (UnlockingRule memory) {
        return UnlockingInfo[_addr];
    }

    function getRewards(address addr) public view returns (uint256) {
        if (
            block.timestamp <= UnlockingInfo[addr].unlockStartTime ||
            UnlockingInfo[addr].unlockStartTime == 0
        ) return 0;
        
        uint256 unlockEndTime = UnlockingInfo[addr].unlockStartTime + UnlockingInfo[addr].duration;
        uint256 rate = UnlockingInfo[addr].totalLocked / UnlockingInfo[addr].duration;
        uint256 reward = block.timestamp > unlockEndTime ? (unlockEndTime - UnlockingInfo[addr].lastWithdrawTime) * rate : (block.timestamp - UnlockingInfo[addr].lastWithdrawTime) * rate;
        return reward;
        
    }

    function withdraw(address addr) external whenNotPaused(addr) {
        require(_checkWhitelist(addr), "The account is not in the whitelist.");
        require(block.timestamp >= UnlockingInfo[addr].unlockStartTime, "The time has not yet arrived.");
        uint256 unlockEndTime = UnlockingInfo[addr].unlockStartTime + UnlockingInfo[addr].duration;
        uint256 canClaimAmount = getRewards(addr);
       
        if (canClaimAmount > 0) {
             if (block.timestamp > unlockEndTime) {
                UnlockingInfo[addr].lastWithdrawTime = unlockEndTime;
            } else {
                UnlockingInfo[addr].lastWithdrawTime = block.timestamp;
            }
            IERC20(lbr).transfer(msg.sender, canClaimAmount);
            emit Withdraw(addr, canClaimAmount, block.timestamp);
        }
    }

    function withdrawTokenEmergency(address token, uint256 amount) external onlyOwner {
        IERC20(token).transfer(msg.sender, amount);
    }


 
}

