
// File: src/OpenVotes.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";
// import "./interfaces/IBlast.sol";
// import "./interfaces/IERC20.sol";

// Errors
error notEOA();
error InsufficientFunds();
error PollDoesNotExist();
error OnlyManagerCanManageOptions();
error OptionHasVotes();
error PollNotActive();
error NotInAllowList();
error InsufficientFundsToVote();
error PollOptionDoesNotExist();
error OnlyOneVoteAllowed();
error PollIsActive();
error PollHasNoBalance();
error NoFeesToClaim();
error InvalidFeesPercentage();
error PollMaxEntriesExceeded();

contract OpenVotes is Ownable {

    // Events
    event PollCreated(uint256 pollId, uint256 startDate, uint256 endDate, uint256 voteCost, uint256 maxEntries, bool allowManyVotes, string title, string description, string[] options);
    event PollOptionsAdded(uint256 pollId, string[] names);
    event PollOptionDeleted(uint256 pollId, uint256 optionId);
    event Vote(uint256 pollId, uint256 optionId, address voter);
    event PollFundsWithdrawn(uint256 pollId, uint256 amount);
    event ContractUpVote(address contractAddress, address voter);
    event ContractDownVote(address contractAddress, address voter);
    event AssetUpVote(address contractAddress, string tokenId, address voter);
    event AssetDownVote(address contractAddress, string tokenId, address voter);

    // Contract Owner variables
    uint256 public pollPrice = 100000000000000; // 0.0001 ETH
    uint256 public assetVoteCost = 100000000000000; // 0.0001 ETH
    uint256 public feesBps = 100; // 1%
    uint256 private pollsLedger;

    // Poll variables
    uint256 public pollIdCounter = 1;

    struct Poll {
        uint256 id;
        address manager;
        uint256 startDate;
        uint256 endDate;
        uint256 voteCost;
        uint256 maxEntries;
        uint256 balance;
        bool allowManyVotes;
        address[] allowList;
        string title;
        string description;
        PollOption[] options;
    }

    struct PollOption {
        uint256 id;
        bool isSet;
        string name;
        address[] votes;
    }

    struct Votes {
        uint256 up;
        uint256 down;
    }

    struct Asset {
        mapping (string => Votes) tokens;
    }


    // Mappings
    mapping (uint256 => Poll) private polls;
    mapping (address => Votes) private contracts;
    mapping (address => Asset) private assets;

    // BLAST
    // IBlast public constant BLAST = IBlast(0x4300000000000000000000000000000000000002);
    // // BlastPoints Testnet address: 0x2fc95838c71e76ec69ff817983BFf17c710F34E0
    // // BlastPoints Mainnet address: 0x2536FE9ab3F511540F2f9e2eC2A805005C3Dd800
    // IBlastPoints public constant BLAST_POINTS = IBlastPoints(0x2536FE9ab3F511540F2f9e2eC2A805005C3Dd800);
    // YieldMode public yieldMode = YieldMode.AUTOMATIC;
    // GasMode public gasMode = GasMode.CLAIMABLE;

    constructor(address initialOwner) Ownable(initialOwner) {

        // ==============
        //  BLAST Points Configuration
        // ==============
        // BLAST_POINTS.configurePointsOperator(initialOwner);
        
       
    }

    function name() public pure returns (string memory) {
        return "OpenVotes";
    }

    // Create a new poll
    function createPoll(uint256 _startDate, uint256 _endDate, uint256 _voteCost, uint256 _maxEntries, bool _allowManyVotes, string calldata _title, string calldata _description, string[] calldata _options) payable external {

        // Verify correct amount of ETH sent
        if (msg.value < pollPrice) {
            revert InsufficientFunds();
        }

        // Create the poll
        polls[pollIdCounter].id = pollIdCounter;
        polls[pollIdCounter].manager = msg.sender;
        polls[pollIdCounter].startDate = _startDate;
        polls[pollIdCounter].endDate = _endDate;
        polls[pollIdCounter].voteCost = _voteCost;
        polls[pollIdCounter].maxEntries = _maxEntries;
        polls[pollIdCounter].balance = 0;
        polls[pollIdCounter].allowManyVotes = _allowManyVotes;
        polls[pollIdCounter].title = _title;
        polls[pollIdCounter].description = _description;

        // Add the options
        for (uint256 i = 0; i < _options.length; i++) {
            polls[pollIdCounter].options.push(PollOption({
                id: i,
                isSet: true,
                name: _options[i],
                votes: new address[](0)
            }));
        }

        // Emit the poll created event
        emit PollCreated(pollIdCounter, _startDate, _endDate, _voteCost, _maxEntries, _allowManyVotes, _title, _description, _options);           

        // Increment the poll counter
        pollIdCounter++;

    }

    // Add a new option to a poll
    function addPollOptions(uint256 _pollId, string[] calldata _names) external {

        // Verify that the sender is the poll manager
        if (polls[_pollId].manager != msg.sender) {
            revert OnlyManagerCanManageOptions();
        }

        // Verify that the poll hasn't started
        if (block.timestamp >= polls[_pollId].startDate) {
            revert PollIsActive();
        }

        // Add the new options
        for (uint256 i = 0; i < _names.length; i++) {
            polls[_pollId].options.push(PollOption({
                id: polls[_pollId].options.length,
                isSet: true,
                name: _names[i],
                votes: new address[](0)
            }));
        }

        // Emit the option added event
        emit PollOptionsAdded(_pollId, _names);

    }

    // Update the allowList of a poll
    function setPollAllowList(uint256 _pollId, address[] calldata _allowList) external {

        // Verify that the sender is the poll manager
        if (polls[_pollId].manager != msg.sender) {
            revert OnlyManagerCanManageOptions();
        }

        // Verify that the poll hasn't started
        if (block.timestamp >= polls[_pollId].startDate) {
            revert PollIsActive();
        }

        // Verify that the poll hasn't started
        if (block.timestamp >= polls[_pollId].startDate) {
            revert PollIsActive();
        }

        // Update the allowList
        delete polls[_pollId].allowList;
        for (uint256 i = 0; i < _allowList.length; i++) {
            polls[_pollId].allowList.push(_allowList[i]);
        }

    }

    // Add to the allowList of a poll
    function addToPollAllowList(uint256 _pollId, address _address) external {

        // Verify that the sender is the poll manager
        if (polls[_pollId].manager != msg.sender) {
            revert OnlyManagerCanManageOptions();
        }

        // Verify that the poll hasn't started
        if (block.timestamp >= polls[_pollId].startDate) {
            revert PollIsActive();
        }

        // Add the address to the allowList
        polls[_pollId].allowList.push(_address);

    }

    // Remove from the allowList of a poll
    function removeFromPollAllowList(uint256 _pollId, address _address) external {

        // Verify that the sender is the poll manager
        if (polls[_pollId].manager != msg.sender) {
            revert OnlyManagerCanManageOptions();
        }

        // Verify that the poll hasn't started
        if (block.timestamp >= polls[_pollId].startDate) {
            revert PollIsActive();
        }

        // Remove the address from the allowList
        for (uint256 i = 0; i < polls[_pollId].allowList.length; i++) {
            if (polls[_pollId].allowList[i] == _address) {
                delete polls[_pollId].allowList[i];
            }
        }

    }

    // Vote for an option in a poll
    function vote(uint256 _pollId, uint256 _optionId) payable external {

        // Verify that the poll exists
        if (polls[_pollId].manager == address(0)) {
            revert PollDoesNotExist();
        }

        // Verify that the poll is active
        if (block.timestamp < polls[_pollId].startDate || block.timestamp > polls[_pollId].endDate) {
            revert PollNotActive();
        }

        // Verify that the sender sent enough funds
        if (msg.value != polls[_pollId].voteCost) {
            revert InsufficientFundsToVote();
        }

        // Verify that the sender is in the allowList
        if (polls[_pollId].allowList.length > 0) {
            bool found = false;
            for (uint256 i = 0; i < polls[_pollId].allowList.length; i++) {
                if (polls[_pollId].allowList[i] == msg.sender) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                revert NotInAllowList();
            }
        }

        // Verify that the option exists
        if (!polls[_pollId].options[_optionId].isSet) {
            revert PollOptionDoesNotExist();
        }

        // Check if the sender can vote multiple times
        if (!polls[_pollId].allowManyVotes) {
            for (uint256 i = 0; i < polls[_pollId].options.length; i++) {
                for (uint256 j = 0; j < polls[_pollId].options[i].votes.length; j++) {
                    if (polls[_pollId].options[i].votes[j] == msg.sender) {
                        revert OnlyOneVoteAllowed();
                    }
                }
            }
        }
        
        // Verify that max entries are not exceeded
        if (polls[_pollId].maxEntries > 0) {
            if (polls[_pollId].options[_optionId].votes.length >= polls[_pollId].maxEntries) {
                revert PollMaxEntriesExceeded();
            }
        }

        // Add the vote
        polls[_pollId].options[_optionId].votes.push(msg.sender);

        // Calculate the balance to add to the poll by subtracting the owner fees
        uint256 feeAmount = polls[_pollId].voteCost * (feesBps) / 10000;
        uint256 balanceToAdd = polls[_pollId].voteCost - feeAmount;

        // Add to the poll balance
        polls[_pollId].balance += balanceToAdd;

        // Add to the global polls ledger
        pollsLedger += balanceToAdd;

        // Emit the vote event
        emit Vote(_pollId, _optionId, msg.sender);

    }

    // Upvote Any contract on the blockchain
    function upvoteContract(address _contractAddress) payable external {

        // Verify that the sender sent enough funds
        if (msg.value != assetVoteCost) {
            revert InsufficientFundsToVote();
        }

        // Add the vote
        contracts[_contractAddress].up += 1;

        // Emit the vote event
        emit ContractUpVote(_contractAddress, msg.sender);

    }

    // Downvote Any contract on the blockchain
    function downvoteContract(address _contractAddress) payable external {

        // Verify that the sender sent enough funds
        if (msg.value != assetVoteCost) {
            revert InsufficientFundsToVote();
        }

        // Add the vote
        contracts[_contractAddress].down += 1;

        // Emit the vote event
        emit ContractDownVote(_contractAddress, msg.sender);

    }

    // Upvote Any asset on the blockchain
    function upvoteAsset(address _contractAddress, string memory _tokenId) payable external {

        // Verify that the sender sent enough funds
        if (msg.value != assetVoteCost) {
            revert InsufficientFundsToVote();
        }

        // Add the vote
        assets[_contractAddress].tokens[_tokenId].up += 1;

        // Emit the vote event
        emit AssetUpVote(_contractAddress, _tokenId, msg.sender);

    }

    // Downvote Any asset on the blockchain
    function downvoteAsset(address _contractAddress, string memory _tokenId) payable external {

        // Verify that the sender sent enough funds
        if (msg.value != assetVoteCost) {
            revert InsufficientFundsToVote();
        }

        // Add the vote
        assets[_contractAddress].tokens[_tokenId].down += 1;

        // Emit the vote event
        emit AssetDownVote(_contractAddress, _tokenId, msg.sender);

    }

    // Withdraw the poll funds
    function withdrawPollFunds(uint256 _pollId) external {

        // Verify that the sender is the poll manager
        if (polls[_pollId].manager != msg.sender) {
            revert OnlyManagerCanManageOptions();
        }

        // Verify that the poll has ended
        if (block.timestamp < polls[_pollId].endDate) {
            revert PollIsActive();
        }

        // Verify that the poll has a balance
        if (polls[_pollId].balance == 0) {
            revert PollHasNoBalance();
        }

        // Capture and Reset the poll balance
        uint256 pollBalance = polls[_pollId].balance;
        polls[_pollId].balance = 0;

        // Subtract from the global polls ledger
        pollsLedger -= pollBalance;

        // Transfer the funds to the manager
        payable(msg.sender).transfer(pollBalance);

        // Emit the funds withdrawn event
        emit PollFundsWithdrawn(_pollId, pollBalance);

    }

    /***********************************
    *         Getter Functions
    ***********************************/

    // Get the poll details
    function getPoll(uint256 _pollId) external view returns (Poll memory) {
        return polls[_pollId];
    }

    // Get manager's active polls
    function getManagersActivePolls(address _manager) external view returns (Poll[] memory) {
        Poll[] memory managersPolls = new Poll[](pollIdCounter);
        uint256 counter = 0;
        for (uint256 i = 1; i < pollIdCounter; i++) {
            if (polls[i].manager == _manager && block.timestamp >= polls[i].startDate && block.timestamp <= polls[i].endDate) {
                managersPolls[counter] = polls[i];
                counter++;
            }
        }
        return managersPolls;
    }

    // Get manager's ended polls
    function getManagersEndedPolls(address _manager) external view returns (Poll[] memory) {
        Poll[] memory managersPolls = new Poll[](pollIdCounter);
        uint256 counter = 0;
        for (uint256 i = 1; i < pollIdCounter; i++) {
            if (polls[i].manager == _manager && block.timestamp > polls[i].endDate) {
                managersPolls[counter] = polls[i];
                counter++;
            }
        }
        return managersPolls;
    }

    // Get Contract Votes
    function getContractVotes(address _contractAddress) external view returns (Votes memory) {
        return contracts[_contractAddress];
    }

    // Get Asset Votes
    function getAssetVotes(address _contractAddress, string memory _tokenId) external view returns (Votes memory) {
        return assets[_contractAddress].tokens[_tokenId];
    }

    
    /***********************************
    *         Owner Functions
    ***********************************/
    
    // Withdraw the fees
    function withdrawFees() external onlyOwner {

        // Verify that there are fees to claim
        if (address(this).balance <= pollsLedger) {
            revert NoFeesToClaim();
        }

        // Transfer the fees to the owner
        payable(owner()).transfer(address(this).balance - pollsLedger);

    }

    // Set the poll price
    function setPollPrice(uint256 _pollPrice) external onlyOwner {
        pollPrice = _pollPrice;
    }

    // Set the asset vote cost
    function setAssetVoteCost(uint256 _assetVoteCost) external onlyOwner {
        assetVoteCost = _assetVoteCost;
    }

    // Set the fees bps
    function setFees(uint256 _feesBps) external onlyOwner {

        // Verify that the fees percentage is between 0 and 10%
        if (_feesBps < 0 || _feesBps > 1000) {
            revert InvalidFeesPercentage();
        }

        feesBps = _feesBps;

    }

    /***********************************
    *   BLAST ONLY OWNER FUNCTIONS
    ***********************************/

    //  // Set points operator
    // function setPointsOperator(address _operator) external onlyOwner {
    //     BLAST_POINTS.configurePointsOperator(_operator);
    // }
    // // Set points operator on behalf
    // function setPointsOperatorOnBehalf(address _operator, address _contract) external onlyOwner {
    //     BLAST_POINTS.configurePointsOperatorOnBehalf(_contract, _operator);
    // }
    // // Claim matured fees
    // function claimMaturedGasFees() external onlyOwner {
    //     BLAST.claimMaxGas(address(this), msg.sender);
    // }
    // // Claim gas fees
    // function claimAllGasFees() external onlyOwner {
    //     BLAST.claimAllGas(address(this), msg.sender);
    // }
    // // Configure yield
    // function configureYield(YieldMode _yield, GasMode _gasMode) external onlyOwner {
    //     yieldMode = _yield;
    //     gasMode = _gasMode;
    //     BLAST.configure(_yield, _gasMode, msg.sender);
    // }
    // // Set auto yield and gas
    // function setAutoYieldAndGas() external onlyOwner {
    //     BLAST.configureAutomaticYield();
    //     BLAST.configureClaimableGas();
    // }
    // // Configure yield on behalf
    // function configureYieldOnBehalf(address _contract, YieldMode _yield, GasMode _gasMode) external onlyOwner {
    //     BLAST.configureContract(_contract, _yield, _gasMode, msg.sender);
    // }

}


// File: lib/openzeppelin-contracts/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: lib/openzeppelin-contracts/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

