
// File: contracts/BaseERC20.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.16;

contract  BaseERC20  {
    uint public constant  MAX_INT = 2**256 - 1;

    string public name;
    string public symbol;
    uint public  decimals = 18;
    uint public _totalSupply;
    mapping(address => uint256) public  _balanceOf;
    mapping(address => mapping(address => uint256)) public _allowance;

    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);
    constructor(string memory _name){
        name = _name;
        symbol = _name;
        
    }
    
    function _mint(address to, uint256 value) internal {
        _totalSupply +=  value;
        _balanceOf[to] +=  value;
        emit Transfer(address(0), to, value);
    }

    function _burn(address from, uint256 value) internal {
        _balanceOf[from] -=  value;
        _totalSupply -=  value;
        emit Transfer(from, address(0), value);
    }

    function _transfer(
        address from,
        address to,
        uint256 value
    ) internal {
        _balanceOf[from] -= value;
        _balanceOf[to] += value;
        emit Transfer(from, to, value);
    }

    function _approve(
        address owner,
        address spender,
        uint256 value
    ) internal {
        _allowance[owner][spender] = value;
        emit Approval(owner, spender, value);
    }
    function balanceOf(address account) public virtual view returns (uint256){
        return _balanceOf[account];
    }
    function totalSupply() public virtual view returns (uint256){
        return _totalSupply;
    }
    function allowance(address owner, address spender) public virtual view returns (uint256){
        return _allowance[owner][spender];
    }
    function approve(address spender, uint256 value) public virtual returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    
}

// File: contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.16;
/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: contracts/interfaces/IManagement.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.16;

interface IManagement {
    
    function platformFeeAddress() external view returns (address);

    function isContractManager(address manager) external view returns (bool);

    function isWhiteInvestor(address investor) external view returns (bool);

    function isRestrictInvestor(address investor) external view returns (bool);

    function isWhiteContract(address contractAddress) external view returns (bool);
    
    function isBlockInvestor(address investor) external view returns (bool);

    
}


// File: contracts/interfaces/IUpgradedToken.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.16;


interface IUpgradedToken{
    
    function transferByLegacy (address sender,address to,uint256 value) external returns (bool) ;
    
    function transferFromByLegacy (address sender,address from,address to,uint256 value) external returns (bool);

    function balanceOf(address account) external view returns (uint);

    function approveByLegacy (address sender,address to,uint256 value) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function totalSupply() external view returns (uint);
    
} 

   
    
  



// File: contracts/SecurityToken.sol
// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.16;

import './interfaces/IERC20.sol';
import './interfaces/IManagement.sol';
import './BaseERC20.sol';
import './interfaces/IUpgradedToken.sol';

contract SecurityToken  is BaseERC20 {
    uint8 public transferFlag = 1;
    bool public upgraded;
    address public upgradedAddress;
    address public management;
    bool public paused;
    address public issuer;
    
    event SetSTManagement(address indexed from, address indexed newManagement);
    event Issue(address indexed from, address indexed to, uint256 value);
    event Redeem(address indexed from, address indexed to, uint256 value);
    event Paused(bool paused);
    event Flag(uint8 transferFlag);
    event Upgrade(address newAddress);

    modifier whenNotPaused() {
        require(!paused,"Paused");
        _;
    } 

    modifier onlyManagement() {
        require(msg.sender == management,"Caller is not management");
        _;
    }

    modifier onlyContractManager() {
        require(IManagement(management).isContractManager(msg.sender),"Caller is not contract manager");
        _;
    }

    constructor(
        string memory _name, 
        address _issuer,
        uint _amount,
        address _management
    ) BaseERC20(_name) {
        require(_management!= address(0));
        management = _management;
        issuer = _issuer;
        decimals = _amount;
    }


    function transfer(
        address to, 
        uint value
    )external whenNotPaused returns (bool) {
         if(upgraded){
            return IUpgradedToken(upgradedAddress).transferByLegacy(msg.sender, to, value);
        }
        if(transferFlag == 1){
            require(IManagement(management).isWhiteContract(msg.sender)&&//发起者白名单合约		
                (IManagement(management).isWhiteInvestor(to) || IManagement(management).isRestrictInvestor(to)),'Forbid transfer');
        }else if(transferFlag == 2){
            require((IManagement(management).isWhiteContract(msg.sender)||IManagement(management).isWhiteInvestor(msg.sender) || IManagement(management).isRestrictInvestor(msg.sender)) &&
                (IManagement(management).isWhiteInvestor(to) || IManagement(management).isRestrictInvestor(to)),'Forbid transfer');//发起者平台用户
        }else{	
            require(!IManagement(management).isBlockInvestor(msg.sender),'Block');//任何地址（非block地址）
        }
        _transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(
        address from,
        address to,
        uint value
    )external whenNotPaused  returns (bool) {
        if(upgraded){
            return IUpgradedToken(upgradedAddress).transferFromByLegacy(msg.sender, from ,to, value);
        }
        if(transferFlag == 1){
            require(IManagement(management).isWhiteContract(msg.sender)&&//发起者白名单合约
                (IManagement(management).isWhiteInvestor(from) || IManagement(management).isRestrictInvestor(from))&&
                (IManagement(management).isWhiteContract(to)||IManagement(management).isWhiteInvestor(to) || IManagement(management).isRestrictInvestor(to)),'Forbid transferFrom');
        }else if(transferFlag == 2){
            require((IManagement(management).isWhiteContract(msg.sender)||IManagement(management).isWhiteInvestor(msg.sender) || IManagement(management).isRestrictInvestor(msg.sender))&& //发起者平台用户
                (IManagement(management).isWhiteInvestor(from) || IManagement(management).isRestrictInvestor(from))&&
                (IManagement(management).isWhiteContract(to)||IManagement(management).isWhiteInvestor(to) || IManagement(management).isRestrictInvestor(to)),'Forbid transferFrom');
        }else{	
            require(!IManagement(management).isBlockInvestor(from),'Block'); //任何地址（非block地址）
        }
        if (_allowance[from][msg.sender] != MAX_INT) {
            _allowance[from][msg.sender] -=  value;
        }
        _transfer(from, to, value);
        return true;
    }
    function totalSupply() override public view returns (uint) {
        if (upgraded) {
            return IUpgradedToken(upgradedAddress).totalSupply();
        } else {
            return super.totalSupply();
        }
    }
    function approve(address _spender, uint _value) public override returns(bool) {
        if (upgraded) {
            return IUpgradedToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);
        } else {
            return super.approve(_spender, _value);
        }
    }
    function balanceOf(address who) public view override returns (uint) {
        if (upgraded) {
            return IUpgradedToken(upgradedAddress).balanceOf(who);
        } else {
            return super.balanceOf(who);
        }
    }
    function allowance(address _owner, address _spender) public view override returns (uint remaining) {
        if (upgraded) {
            return IUpgradedToken(upgradedAddress).allowance(_owner, _spender);
        } else {
            return super.allowance(_owner, _spender);
        }
    }

    function setManagement(address _management) external onlyManagement  {
        require(_management!= address(0));
        management = _management;
        emit SetSTManagement(address(this),_management);
    }

    function setTransferFlag(uint8 _transferFlag) external onlyContractManager {
        transferFlag = _transferFlag;
        emit Flag(_transferFlag);
    }

    function setPause(bool _paused) external onlyContractManager {
        paused = _paused;
        emit Paused(_paused);
    }

    function issue(
        address investor,
        uint256 value
    ) external onlyContractManager  {
        if (transferFlag == 1 || transferFlag == 2){
            require(IManagement(management).isWhiteInvestor(investor) || IManagement(management).isWhiteContract(investor),"Forbid issue");
        }else{
            require(!IManagement(management).isBlockInvestor(investor),"Block"); //任何地址（非blocklist地址）
        }
        _mint(investor,value);
        emit Issue(address(this),investor,value);
    }

    function redeem(
        address investor,
        uint256 value
    ) external onlyContractManager {
        _burn(investor,value);
        emit Redeem(address(this),investor,value);
    }

    function upgrade(address _upgradedAddress) external onlyContractManager {
        require(_upgradedAddress!= address(0));
        upgraded = true;
        upgradedAddress = _upgradedAddress;
        emit Upgrade(_upgradedAddress);
    }
}

