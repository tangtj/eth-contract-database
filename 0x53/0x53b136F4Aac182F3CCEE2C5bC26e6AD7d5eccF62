
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/StakingContract.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "./StakingRecord.sol";
import "./StakingRateInfo.sol";
import "./StakingPeriod.sol";

contract StakingContract is Ownable, ReentrancyGuard {
    uint public constant DAY = 3600 * 24;
    // uint public constant DAY = 1;       // For test

    // address public upcAddress = 0xCADC40cE57164b3193cCAAf0E5C498F8180DEF5f;     //testnet
    address public upcAddress = 0x487d62468282Bd04ddf976631C23128A425555EE;     //mainnet

    mapping (uint => StakingRateInfo) public stakingInfos;

    mapping (address => bool) public staked;

    StakingRecord[] public records;

    uint public stakingAmountLimit = 10 ** 6 * 10 ** 5;

    uint public totalStakingAmount;

    mapping (string=>address) referralCodes;

    uint public referralFee = 20;       //20%

    event SetUPCAddress(address upcAddress);

    event Stake(uint id, address staker, uint amount, uint stakedAt, uint stakingInfoID, string referralCode, uint reward, uint referralReward);

    event Claim(uint id, address staker, uint claimAmount);

    event ClaimReferralFee(uint id, address referrer, uint claimAmount);

    event Deposit(uint amount);

    event GenerateReferralCode(address staker, string code);

    event SetStakingPeriod(uint id, StakingPeriod[] periods);

    constructor () Ownable(msg.sender){
        stakingInfos[1].day = 180; stakingInfos[1].apy = 100;
        stakingInfos[2].day = 90; stakingInfos[2].apy = 50;
        stakingInfos[3].day = 30; stakingInfos[3].apy = 20;
    }

    function stake(uint amount, uint stakingInfoID, string memory referralCode) public nonReentrant {
        require(amount >= 0, "It's not able to stake 0 UPC.");
        require(isStakablePeriod(stakingInfoID), "Out of staking period.");
        require(totalStakingAmount + amount <= stakingAmountLimit, "Staking amount limit exceeds.");
        if (bytes(referralCode).length != 0) {
            require(referralCodes[referralCode] != msg.sender, "Not able to use own referral code.");
        }
        
        require(IERC20(upcAddress).allowance(msg.sender, address(this)) >= amount, "UPC token is not allowed.");
        require(IERC20(upcAddress).balanceOf(msg.sender) >= amount, "UPC token balance is not enough.");
        require(IERC20(upcAddress).transferFrom(msg.sender, address(this), amount), "UPC token transfer failed.");

        records.push(StakingRecord(msg.sender, amount, block.timestamp, false, stakingInfoID, referralCode, false));

        totalStakingAmount += amount;

        staked[msg.sender] = true;

        emit Stake(records.length - 1, msg.sender, amount, block.timestamp, stakingInfoID, referralCode, finalClaimableAmount(records.length - 1), referralAmount(records.length - 1));
    }

    function isStakablePeriod(uint id) public view returns(bool) {
        for (uint i = 0; i < stakingInfos[id].periods.length; i++) {
            if (block.timestamp >= stakingInfos[id].periods[i].from && block.timestamp <= stakingInfos[id].periods[i].to) {
                return true;
            }
        }
        return false;
    }

    function isClaimable(uint id) public view returns(bool) {
        if (records[id].claimed) {
            return false;
        }

        if (block.timestamp - records[id].stakedAt < DAY * stakingInfos[records[id].stakingRateInfoID].day) {
            return false;
        }

        return true;
    }

    function referralAmount(uint id) public view returns(uint) {
        if (records[id].claimedReferralFee) {
            return 0;
        }

        if (bytes(records[id].referralCode).length == 0) {
            return 0;
        }

        if (referralCodes[records[id].referralCode] == address(0)) {
            return 0;
        }

        return finalClaimableAmount(id) * referralFee / 100;
    }

    function finalClaimableAmount(uint id) public view returns(uint) {
        if (records[id].claimed) {
            return 0;
        }

        return records[id].amount * stakingInfos[records[id].stakingRateInfoID].apy * (DAY * stakingInfos[records[id].stakingRateInfoID].day) / 100 / 365 / DAY;
    }

    function claim(uint id) public {
        require(msg.sender == records[id].staker, "Only owner can claim.");
        require(isClaimable(id), "This staking record is not able to claim.");

        uint amount = finalClaimableAmount(id);

        require(IERC20(upcAddress).transfer(msg.sender, records[id].amount + amount), "Claim failed.");

        records[id].claimed = true;

        emit Claim(id, msg.sender, amount);
    }

    function claimReferralFee(uint id) public {
        require(msg.sender == referralCodes[records[id].referralCode], "Only referer can claim the referral fee.");
        require(block.timestamp - records[id].stakedAt >= DAY * stakingInfos[records[id].stakingRateInfoID].day, "It is not able to claim, yet");
        require(!records[id].claimedReferralFee, "Alreay claimed.");

        uint amount = referralAmount(id);
        require(IERC20(upcAddress).transfer(msg.sender, amount), "Claim failed.");

        records[id].claimedReferralFee = true;

        emit ClaimReferralFee(id, msg.sender, amount);
    }

    function generateReferralCode() public {
        require(staked[msg.sender] == true, "You should have at least one staking record.");

        string memory code = randomString(6);
        referralCodes[code] = msg.sender;

        emit GenerateReferralCode(msg.sender, code);
    }

    function deposit(uint amount) public onlyOwner {
        require(IERC20(upcAddress).allowance(msg.sender, address(this)) >= amount, "UPC token is not allowed.");
        
        require(IERC20(upcAddress).transferFrom(msg.sender, address(this), amount), "Deposit failed.");

        emit Deposit(amount);
    }

    function shouldDeposit() public view returns(uint){
        uint neccessaryAmount = neccessaryUPC();

        if (neccessaryAmount < IERC20(upcAddress).balanceOf(address(this))) {
            return 0;
        }

        return neccessaryAmount - IERC20(upcAddress).balanceOf(address(this));
    }

    function Withdrawable() public view returns(uint) {
        uint neccessaryAmount = neccessaryUPC();

        if (neccessaryAmount >= IERC20(upcAddress).balanceOf(address(this))) {
            return 0;
        }

        return IERC20(upcAddress).balanceOf(address(this)) - neccessaryAmount;
    }

    function neccessaryUPC() private view returns(uint) {
        uint ret = 0;
        for (uint i = 0; i < records.length; i++) {
            ret += finalClaimableAmount(i) + referralAmount(i);
            if (!records[i].claimed) {
                ret += records[i].amount;
            }
        }
        return ret;
    }

    function withdraw(uint amount) public onlyOwner {
        // bool isPeriodOver = true;
        // for (uint id = 1; id <= 3; id++) {
        //     for (uint i = 0; i < stakingInfos[id].periods.length; i++) {
        //         if (block.timestamp < stakingInfos[id].periods[i].to) {
        //             isPeriodOver = false;
        //             break;
        //         }
        //     }
        // }
        // require(isPeriodOver, "It's able to stake now.");

        require(IERC20(upcAddress).transfer(msg.sender, amount), "Withdraw failed.");
    }

    function setUPCAddress(address addr) public onlyOwner {
        upcAddress = addr;

        stakingAmountLimit = 10 ** 6 * 10 ** 5;

        emit SetUPCAddress(addr);
    }


    function setStakingPeriod(uint id, StakingPeriod[] memory periods) public onlyOwner {
        for (uint i = 0; i < stakingInfos[id].periods.length; i++) {
            stakingInfos[id].periods.pop();
        }

        for (uint i = 0; i < periods.length; i++) {
            stakingInfos[id].periods.push(periods[i]);
        }

        emit SetStakingPeriod(id, periods);
    }

    function setStakingLimit(uint limit) public onlyOwner {
        stakingAmountLimit = limit;
    }

    function setReferralFee(uint fee) public onlyOwner {
        require(fee <= 100, "Referral Fee should be less than 100%.");

        referralFee = fee;
    }

    function randomString(uint size) private view returns(string memory){
        bytes memory randomWord = new bytes(size);
        // since we have 26 letters
        bytes memory chars = new bytes(26);
        chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        for (uint i = 0; i < size; i++) {
            uint randomNumber=random(26, i);
            // Index access for string is not possible
            randomWord[i] = chars[randomNumber];
        }
        return string(randomWord);
    }

    function random(uint number, uint randomIndex) public view returns(uint){
        return uint(keccak256(abi.encodePacked(block.timestamp,block.prevrandao,  
        msg.sender,randomIndex))) % number;
    }

    function pushRecord(address staker, uint amount, uint stakedAt, uint stakingInfoID, string memory referralCode) public onlyOwner {
        records.push(StakingRecord(staker, amount, stakedAt, false, stakingInfoID, referralCode, false));
        totalStakingAmount += amount;

        staked[staker] = true;

        emit Stake(records.length - 1, staker, amount, stakedAt, stakingInfoID, referralCode, finalClaimableAmount(records.length - 1), referralAmount(records.length - 1));
    }

    function pushReferralCodes(address staker, string memory code) public onlyOwner {
        referralCodes[code] = staker;

        emit GenerateReferralCode(staker, code);
    }
}


// File: contracts/StakingPeriod.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

struct StakingPeriod {
    uint from;
    uint to;
}

// File: contracts/StakingRateInfo.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import "./StakingPeriod.sol";

struct StakingRateInfo {
    uint day;
    uint apy;
    StakingPeriod[] periods;
}

// File: contracts/StakingRecord.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

struct StakingRecord {
    address staker;
    uint amount;
    uint stakedAt;
    bool claimed;
    uint stakingRateInfoID;
    string referralCode;
    bool claimedReferralFee;
}
